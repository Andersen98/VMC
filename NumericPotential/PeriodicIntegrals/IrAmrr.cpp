/* Copyright (c) 2012  Gerald Knizia
 * 
 * This file is part of the IR/WMME program
 * (See https://sites.psu.edu/knizia/)
 * 
 * IR/WMME is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 * 
 * IR/WMME is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with bfint (LICENSE). If not, see http://www.gnu.org/licenses/
 */

/* IrAmrr.cpp v20150520 EST [storm, Gerald Knizia] */
#include <stddef.h> // for size_t
#include "IrAmrr.h" // for cart_index_t, IR_RP, and assert

namespace ir {

// Constants for direct expansion of solid harmonics in terms of cartesians.
// These ones are good for L=0..6
static const double sd0 = 5.e-01;
static const double sd1 = 1.7320508075688772;
static const double sd2 = 8.660254037844386e-01;
static const double sd3 = 6.1237243569579458e-01;
static const double sd4 = 2.4494897427831779;
static const double sd5 = 1.5;
static const double sd6 = 7.9056941504209488e-01;
static const double sd7 = 2.3717082451262845;
static const double sd8 = 3.872983346207417;
static const double sd9 = 1.9364916731037085;
static const double sda = 3.75e-01;
static const double sdb = 7.5e-01;
static const double sdc = 3.;
static const double sdd = 1.1180339887498947;
static const double sde = 6.7082039324993676;
static const double sdf = 3.1622776601683791;
static const double sd10 = 7.3950997288745202e-01;
static const double sd11 = 4.4370598373247123;
static const double sd12 = 5.5901699437494734e-01;
static const double sd13 = 3.3541019662496838;
static const double sd14 = 2.9580398915498081;
static const double sd15 = 2.0916500663351889;
static const double sd16 = 6.2749501990055672;
static const double sd17 = 4.8412291827592718e-01;
static const double sd18 = 9.6824583655185437e-01;
static const double sd19 = 5.809475019311126;
static const double sd1a = 2.5617376914898995;
static const double sd1b = 5.1234753829797981;
static const double sd1c = 5.2291251658379723e-01;
static const double sd1d = 1.0458250331675947;
static const double sd1e = 4.1833001326703778;
static const double sd1f = 1.5687375497513918;
static const double sd20 = 1.2549900398011134e+01;
static const double sd21 = 8.8741196746494246;
static const double sd22 = 2.2185299186623562;
static const double sd23 = 1.3311179511974137e+01;
static const double sd24 = 3.5078038001005702;
static const double sd25 = 7.0156076002011396;
static const double sd26 = 7.0156076002011403e-01;
static const double sd27 = 1.8750000000000002;
static const double sd28 = 3.7500000000000004;
static const double sd29 = 5.;
static const double sd2a = 1.0246950765959596e+01;
static const double sd2b = 6.7169328938139616e-01;
static const double sd2c = 1.0075399340720942e+01;
static const double sd2d = 9.0571104663683977e-01;
static const double sd2e = 1.8114220932736795;
static const double sd2f = 1.4491376746189438e+01;
static const double sd30 = 2.3268138086232857;
static const double sd31 = 2.3268138086232856e+01;
static const double sd32 = 1.1634069043116428e+01;
static const double sd33 = 4.9607837082461076e-01;
static const double sd34 = 2.4803918541230536;
static const double sd35 = 4.9607837082461073;
static const double sd36 = 2.9764702249476645e+01;
static const double sd37 = 4.5285552331841988e-01;
static const double sd38 = 7.245688373094719;
static const double sd39 = 4.0301597362883772;
static const double sd3a = 1.3433865787627923e+01;
static const double sd3b = 2.7171331399105201;
static const double sd3c = 5.434266279821041;
static const double sd3d = 8.1513994197315611;
static const double sd3e = 2.1737065119284161e+01;
static const double sd3f = 1.984313483298443;
static const double sd40 = 1.9843134832984429e+01;
static const double sd41 = 3.125e-01;
static const double sd42 = 9.375e-01;
static const double sd43 = 5.625;
static const double sd44 = 1.125e+01;
static const double sd45 = 7.4999999999999991;
static const double sd46 = 2.8641098093474002;
static const double sd47 = 5.7282196186948005;
static const double sd48 = 1.1456439237389599e+01;
static const double sd49 = 4.5825756949558407;

// Calculate (a0|0)^0 from [0]^m, for a = 0..lab, m = 0..lab (both inclusive).
// PmA is P - A, PmQ is P - Q, InvEta is 1/Eta. See PCCP 6 5119 (2004) eq. 11.
// Output is ordered as AngCompsFull(lab).
void OsrrA(double * pOut, double * pGm, unsigned lab, double PmAx, double PmAy, double PmAz, double PmQx, double PmQy, double PmQz, double rho, double InvEta)
{
   // m + lab == 0
   pOut[0] = pGm[0];
   // 1.00 steps per component, 0.00 kb stack
   if (lab == 0) return;

   // m + lab == 1
   double rie = -rho*InvEta;
   double rPmQx = rie*PmQx, rPmQy = rie*PmQy, rPmQz = rie*PmQz;
   pOut[1] = PmAx*pGm[0] + pGm[1]*rPmQx;
   pOut[2] = PmAy*pGm[0] + pGm[1]*rPmQy;
   pOut[3] = PmAz*pGm[0] + pGm[1]*rPmQz;
   // 1.00 steps per component, 0.00 kb stack
   if (lab == 1) return;

   // m + lab == 2
   double iz2 = .5*InvEta;
   double r_100_1 = PmAx*pGm[1] + pGm[2]*rPmQx;
   double r_010_1 = PmAy*pGm[1] + pGm[2]*rPmQy;
   double r_001_1 = PmAz*pGm[1] + pGm[2]*rPmQz;
   pOut[4] = PmAx*pOut[1] + iz2*(pGm[0] + pGm[1]*rie) + rPmQx*r_100_1;
   pOut[5] = PmAy*pOut[2] + iz2*(pGm[0] + pGm[1]*rie) + rPmQy*r_010_1;
   pOut[6] = PmAz*pOut[3] + iz2*(pGm[0] + pGm[1]*rie) + rPmQz*r_001_1;
   pOut[7] = PmAy*pOut[1] + rPmQy*r_100_1;
   pOut[8] = PmAz*pOut[1] + rPmQz*r_100_1;
   pOut[9] = PmAz*pOut[2] + rPmQz*r_010_1;
   // 1.50 steps per component, 0.02 kb stack
   if (lab == 2) return;

   // m + lab == 3
   double r_100_2 = PmAx*pGm[2] + pGm[3]*rPmQx;
   double r_010_2 = PmAy*pGm[2] + pGm[3]*rPmQy;
   double r_001_2 = PmAz*pGm[2] + pGm[3]*rPmQz;
   double r_200_1 = PmAx*r_100_1 + iz2*(pGm[1] + pGm[2]*rie) + rPmQx*r_100_2;
   double r_020_1 = PmAy*r_010_1 + iz2*(pGm[1] + pGm[2]*rie) + rPmQy*r_010_2;
   double r_002_1 = PmAz*r_001_1 + iz2*(pGm[1] + pGm[2]*rie) + rPmQz*r_001_2;
   double r_110_1 = PmAy*r_100_1 + rPmQy*r_100_2;
   pOut[10] = PmAx*pOut[4] + 2*iz2*(pOut[1] + r_100_1*rie) + rPmQx*r_200_1;
   pOut[11] = PmAy*pOut[5] + 2*iz2*(pOut[2] + r_010_1*rie) + rPmQy*r_020_1;
   pOut[12] = PmAz*pOut[6] + 2*iz2*(pOut[3] + r_001_1*rie) + rPmQz*r_002_1;
   pOut[13] = PmAx*pOut[5] + rPmQx*r_020_1;
   pOut[14] = PmAx*pOut[6] + rPmQx*r_002_1;
   pOut[15] = PmAy*pOut[4] + rPmQy*r_200_1;
   pOut[16] = PmAy*pOut[6] + rPmQy*r_002_1;
   pOut[17] = PmAz*pOut[4] + rPmQz*r_200_1;
   pOut[18] = PmAz*pOut[5] + rPmQz*r_020_1;
   pOut[19] = PmAz*pOut[7] + rPmQz*r_110_1;
   // 1.70 steps per component, 0.05 kb stack
   if (lab == 3) return;

   // m + lab == 4
   double r_100_3 = PmAx*pGm[3] + pGm[4]*rPmQx;
   double r_010_3 = PmAy*pGm[3] + pGm[4]*rPmQy;
   double r_001_3 = PmAz*pGm[3] + pGm[4]*rPmQz;
   double r_200_2 = PmAx*r_100_2 + iz2*(pGm[2] + pGm[3]*rie) + rPmQx*r_100_3;
   double r_020_2 = PmAy*r_010_2 + iz2*(pGm[2] + pGm[3]*rie) + rPmQy*r_010_3;
   double r_002_2 = PmAz*r_001_2 + iz2*(pGm[2] + pGm[3]*rie) + rPmQz*r_001_3;
   double r_300_1 = PmAx*r_200_1 + 2*iz2*(r_100_1 + r_100_2*rie) + rPmQx*r_200_2;
   double r_030_1 = PmAy*r_020_1 + 2*iz2*(r_010_1 + r_010_2*rie) + rPmQy*r_020_2;
   double r_003_1 = PmAz*r_002_1 + 2*iz2*(r_001_1 + r_001_2*rie) + rPmQz*r_002_2;
   double r_120_1 = PmAx*r_020_1 + rPmQx*r_020_2;
   double r_102_1 = PmAx*r_002_1 + rPmQx*r_002_2;
   double r_210_1 = PmAy*r_200_1 + rPmQy*r_200_2;
   double r_012_1 = PmAy*r_002_1 + rPmQy*r_002_2;
   pOut[20] = PmAx*pOut[10] + 3*iz2*(pOut[4] + r_200_1*rie) + rPmQx*r_300_1;
   pOut[21] = PmAy*pOut[11] + 3*iz2*(pOut[5] + r_020_1*rie) + rPmQy*r_030_1;
   pOut[22] = PmAz*pOut[12] + 3*iz2*(pOut[6] + r_002_1*rie) + rPmQz*r_003_1;
   pOut[23] = PmAy*pOut[10] + rPmQy*r_300_1;
   pOut[24] = PmAx*pOut[11] + rPmQx*r_030_1;
   pOut[25] = PmAz*pOut[10] + rPmQz*r_300_1;
   pOut[26] = PmAx*pOut[12] + rPmQx*r_003_1;
   pOut[27] = PmAz*pOut[11] + rPmQz*r_030_1;
   pOut[28] = PmAy*pOut[12] + rPmQy*r_003_1;
   pOut[29] = PmAx*pOut[13] + iz2*(pOut[5] + r_020_1*rie) + rPmQx*r_120_1;
   pOut[30] = PmAx*pOut[14] + iz2*(pOut[6] + r_002_1*rie) + rPmQx*r_102_1;
   pOut[31] = PmAy*pOut[16] + iz2*(pOut[6] + r_002_1*rie) + rPmQy*r_012_1;
   pOut[32] = PmAy*pOut[14] + rPmQy*r_102_1;
   pOut[33] = PmAz*pOut[13] + rPmQz*r_120_1;
   pOut[34] = PmAz*pOut[15] + rPmQz*r_210_1;
   // 1.87 steps per component, 0.10 kb stack
   if (lab == 4) return;

   // m + lab == 5
   double r_100_4 = PmAx*pGm[4] + pGm[5]*rPmQx;
   double r_010_4 = PmAy*pGm[4] + pGm[5]*rPmQy;
   double r_001_4 = PmAz*pGm[4] + pGm[5]*rPmQz;
   double r_200_3 = PmAx*r_100_3 + iz2*(pGm[3] + pGm[4]*rie) + rPmQx*r_100_4;
   double r_020_3 = PmAy*r_010_3 + iz2*(pGm[3] + pGm[4]*rie) + rPmQy*r_010_4;
   double r_002_3 = PmAz*r_001_3 + iz2*(pGm[3] + pGm[4]*rie) + rPmQz*r_001_4;
   double r_300_2 = PmAx*r_200_2 + 2*iz2*(r_100_2 + r_100_3*rie) + rPmQx*r_200_3;
   double r_030_2 = PmAy*r_020_2 + 2*iz2*(r_010_2 + r_010_3*rie) + rPmQy*r_020_3;
   double r_003_2 = PmAz*r_002_2 + 2*iz2*(r_001_2 + r_001_3*rie) + rPmQz*r_002_3;
   double r_120_2 = PmAx*r_020_2 + rPmQx*r_020_3;
   double r_102_2 = PmAx*r_002_2 + rPmQx*r_002_3;
   double r_012_2 = PmAy*r_002_2 + rPmQy*r_002_3;
   double r_400_1 = PmAx*r_300_1 + 3*iz2*(r_200_1 + r_200_2*rie) + rPmQx*r_300_2;
   double r_040_1 = PmAy*r_030_1 + 3*iz2*(r_020_1 + r_020_2*rie) + rPmQy*r_030_2;
   double r_004_1 = PmAz*r_003_1 + 3*iz2*(r_002_1 + r_002_2*rie) + rPmQz*r_003_2;
   double r_310_1 = PmAy*r_300_1 + rPmQy*r_300_2;
   double r_130_1 = PmAx*r_030_1 + rPmQx*r_030_2;
   double r_301_1 = PmAz*r_300_1 + rPmQz*r_300_2;
   double r_103_1 = PmAx*r_003_1 + rPmQx*r_003_2;
   double r_031_1 = PmAz*r_030_1 + rPmQz*r_030_2;
   double r_013_1 = PmAy*r_003_1 + rPmQy*r_003_2;
   double r_220_1 = PmAx*r_120_1 + iz2*(r_020_1 + r_020_2*rie) + rPmQx*r_120_2;
   double r_202_1 = PmAx*r_102_1 + iz2*(r_002_1 + r_002_2*rie) + rPmQx*r_102_2;
   double r_022_1 = PmAy*r_012_1 + iz2*(r_002_1 + r_002_2*rie) + rPmQy*r_012_2;
   pOut[35] = PmAx*pOut[20] + 4*iz2*(pOut[10] + r_300_1*rie) + rPmQx*r_400_1;
   pOut[36] = PmAy*pOut[21] + 4*iz2*(pOut[11] + r_030_1*rie) + rPmQy*r_040_1;
   pOut[37] = PmAz*pOut[22] + 4*iz2*(pOut[12] + r_003_1*rie) + rPmQz*r_004_1;
   pOut[38] = PmAx*pOut[21] + rPmQx*r_040_1;
   pOut[39] = PmAx*pOut[22] + rPmQx*r_004_1;
   pOut[40] = PmAy*pOut[20] + rPmQy*r_400_1;
   pOut[41] = PmAy*pOut[22] + rPmQy*r_004_1;
   pOut[42] = PmAz*pOut[20] + rPmQz*r_400_1;
   pOut[43] = PmAz*pOut[21] + rPmQz*r_040_1;
   pOut[44] = PmAy*pOut[23] + iz2*(pOut[10] + r_300_1*rie) + rPmQy*r_310_1;
   pOut[45] = PmAz*pOut[25] + iz2*(pOut[10] + r_300_1*rie) + rPmQz*r_301_1;
   pOut[46] = PmAx*pOut[24] + iz2*(pOut[11] + r_030_1*rie) + rPmQx*r_130_1;
   pOut[47] = PmAz*pOut[27] + iz2*(pOut[11] + r_030_1*rie) + rPmQz*r_031_1;
   pOut[48] = PmAx*pOut[26] + iz2*(pOut[12] + r_003_1*rie) + rPmQx*r_103_1;
   pOut[49] = PmAy*pOut[28] + iz2*(pOut[12] + r_003_1*rie) + rPmQy*r_013_1;
   pOut[50] = PmAz*pOut[23] + rPmQz*r_310_1;
   pOut[51] = PmAz*pOut[24] + rPmQz*r_130_1;
   pOut[52] = PmAy*pOut[26] + rPmQy*r_103_1;
   pOut[53] = PmAx*pOut[31] + rPmQx*r_022_1;
   pOut[54] = PmAy*pOut[30] + rPmQy*r_202_1;
   pOut[55] = PmAz*pOut[29] + rPmQz*r_220_1;
   // 2.14 steps per component, 0.19 kb stack
   if (lab == 5) return;

   // m + lab == 6
   double r_100_5 = PmAx*pGm[5] + pGm[6]*rPmQx;
   double r_010_5 = PmAy*pGm[5] + pGm[6]*rPmQy;
   double r_001_5 = PmAz*pGm[5] + pGm[6]*rPmQz;
   double r_200_4 = PmAx*r_100_4 + iz2*(pGm[4] + pGm[5]*rie) + rPmQx*r_100_5;
   double r_020_4 = PmAy*r_010_4 + iz2*(pGm[4] + pGm[5]*rie) + rPmQy*r_010_5;
   double r_002_4 = PmAz*r_001_4 + iz2*(pGm[4] + pGm[5]*rie) + rPmQz*r_001_5;
   double r_300_3 = PmAx*r_200_3 + 2*iz2*(r_100_3 + r_100_4*rie) + rPmQx*r_200_4;
   double r_030_3 = PmAy*r_020_3 + 2*iz2*(r_010_3 + r_010_4*rie) + rPmQy*r_020_4;
   double r_003_3 = PmAz*r_002_3 + 2*iz2*(r_001_3 + r_001_4*rie) + rPmQz*r_002_4;
   double r_012_3 = PmAy*r_002_3 + rPmQy*r_002_4;
   double r_400_2 = PmAx*r_300_2 + 3*iz2*(r_200_2 + r_200_3*rie) + rPmQx*r_300_3;
   double r_040_2 = PmAy*r_030_2 + 3*iz2*(r_020_2 + r_020_3*rie) + rPmQy*r_030_3;
   double r_004_2 = PmAz*r_003_2 + 3*iz2*(r_002_2 + r_002_3*rie) + rPmQz*r_003_3;
   double r_310_2 = PmAy*r_300_2 + rPmQy*r_300_3;
   double r_130_2 = PmAx*r_030_2 + rPmQx*r_030_3;
   double r_301_2 = PmAz*r_300_2 + rPmQz*r_300_3;
   double r_103_2 = PmAx*r_003_2 + rPmQx*r_003_3;
   double r_031_2 = PmAz*r_030_2 + rPmQz*r_030_3;
   double r_013_2 = PmAy*r_003_2 + rPmQy*r_003_3;
   double r_022_2 = PmAy*r_012_2 + iz2*(r_002_2 + r_002_3*rie) + rPmQy*r_012_3;
   double r_500_1 = PmAx*r_400_1 + 4*iz2*(r_300_1 + r_300_2*rie) + rPmQx*r_400_2;
   double r_050_1 = PmAy*r_040_1 + 4*iz2*(r_030_1 + r_030_2*rie) + rPmQy*r_040_2;
   double r_005_1 = PmAz*r_004_1 + 4*iz2*(r_003_1 + r_003_2*rie) + rPmQz*r_004_2;
   double r_140_1 = PmAx*r_040_1 + rPmQx*r_040_2;
   double r_104_1 = PmAx*r_004_1 + rPmQx*r_004_2;
   double r_410_1 = PmAy*r_400_1 + rPmQy*r_400_2;
   double r_014_1 = PmAy*r_004_1 + rPmQy*r_004_2;
   double r_401_1 = PmAz*r_400_1 + rPmQz*r_400_2;
   double r_041_1 = PmAz*r_040_1 + rPmQz*r_040_2;
   double r_320_1 = PmAy*r_310_1 + iz2*(r_300_1 + r_300_2*rie) + rPmQy*r_310_2;
   double r_302_1 = PmAz*r_301_1 + iz2*(r_300_1 + r_300_2*rie) + rPmQz*r_301_2;
   double r_230_1 = PmAx*r_130_1 + iz2*(r_030_1 + r_030_2*rie) + rPmQx*r_130_2;
   double r_032_1 = PmAz*r_031_1 + iz2*(r_030_1 + r_030_2*rie) + rPmQz*r_031_2;
   double r_203_1 = PmAx*r_103_1 + iz2*(r_003_1 + r_003_2*rie) + rPmQx*r_103_2;
   double r_023_1 = PmAy*r_013_1 + iz2*(r_003_1 + r_003_2*rie) + rPmQy*r_013_2;
   double r_122_1 = PmAx*r_022_1 + rPmQx*r_022_2;
   pOut[56] = PmAx*pOut[35] + 5*iz2*(pOut[20] + r_400_1*rie) + rPmQx*r_500_1;
   pOut[57] = PmAy*pOut[36] + 5*iz2*(pOut[21] + r_040_1*rie) + rPmQy*r_050_1;
   pOut[58] = PmAz*pOut[37] + 5*iz2*(pOut[22] + r_004_1*rie) + rPmQz*r_005_1;
   pOut[59] = PmAy*pOut[35] + rPmQy*r_500_1;
   pOut[60] = PmAx*pOut[36] + rPmQx*r_050_1;
   pOut[61] = PmAz*pOut[35] + rPmQz*r_500_1;
   pOut[62] = PmAx*pOut[37] + rPmQx*r_005_1;
   pOut[63] = PmAz*pOut[36] + rPmQz*r_050_1;
   pOut[64] = PmAy*pOut[37] + rPmQy*r_005_1;
   pOut[65] = PmAy*pOut[40] + iz2*(pOut[20] + r_400_1*rie) + rPmQy*r_410_1;
   pOut[66] = PmAz*pOut[42] + iz2*(pOut[20] + r_400_1*rie) + rPmQz*r_401_1;
   pOut[67] = PmAx*pOut[38] + iz2*(pOut[21] + r_040_1*rie) + rPmQx*r_140_1;
   pOut[68] = PmAx*pOut[39] + iz2*(pOut[22] + r_004_1*rie) + rPmQx*r_104_1;
   pOut[69] = PmAz*pOut[43] + iz2*(pOut[21] + r_040_1*rie) + rPmQz*r_041_1;
   pOut[70] = PmAy*pOut[41] + iz2*(pOut[22] + r_004_1*rie) + rPmQy*r_014_1;
   pOut[71] = PmAy*pOut[44] + 2*iz2*(pOut[23] + r_310_1*rie) + rPmQy*r_320_1;
   pOut[72] = PmAz*pOut[45] + 2*iz2*(pOut[25] + r_301_1*rie) + rPmQz*r_302_1;
   pOut[73] = PmAz*pOut[47] + 2*iz2*(pOut[27] + r_031_1*rie) + rPmQz*r_032_1;
   pOut[74] = PmAy*pOut[39] + rPmQy*r_104_1;
   pOut[75] = PmAz*pOut[38] + rPmQz*r_140_1;
   pOut[76] = PmAz*pOut[40] + rPmQz*r_410_1;
   pOut[77] = PmAy*pOut[45] + rPmQy*r_302_1;
   pOut[78] = PmAx*pOut[47] + rPmQx*r_032_1;
   pOut[79] = PmAz*pOut[44] + rPmQz*r_320_1;
   pOut[80] = PmAx*pOut[49] + rPmQx*r_023_1;
   pOut[81] = PmAz*pOut[46] + rPmQz*r_230_1;
   pOut[82] = PmAy*pOut[48] + rPmQy*r_203_1;
   pOut[83] = PmAx*pOut[53] + iz2*(pOut[31] + r_022_1*rie) + rPmQx*r_122_1;
   // 2.29 steps per component, 0.28 kb stack
   if (lab == 6) return;

   // m + lab == 7
   double r_100_6 = PmAx*pGm[6] + pGm[7]*rPmQx;
   double r_010_6 = PmAy*pGm[6] + pGm[7]*rPmQy;
   double r_001_6 = PmAz*pGm[6] + pGm[7]*rPmQz;
   double r_200_5 = PmAx*r_100_5 + iz2*(pGm[5] + pGm[6]*rie) + rPmQx*r_100_6;
   double r_020_5 = PmAy*r_010_5 + iz2*(pGm[5] + pGm[6]*rie) + rPmQy*r_010_6;
   double r_002_5 = PmAz*r_001_5 + iz2*(pGm[5] + pGm[6]*rie) + rPmQz*r_001_6;
   double r_300_4 = PmAx*r_200_4 + 2*iz2*(r_100_4 + r_100_5*rie) + rPmQx*r_200_5;
   double r_030_4 = PmAy*r_020_4 + 2*iz2*(r_010_4 + r_010_5*rie) + rPmQy*r_020_5;
   double r_003_4 = PmAz*r_002_4 + 2*iz2*(r_001_4 + r_001_5*rie) + rPmQz*r_002_5;
   double r_400_3 = PmAx*r_300_3 + 3*iz2*(r_200_3 + r_200_4*rie) + rPmQx*r_300_4;
   double r_040_3 = PmAy*r_030_3 + 3*iz2*(r_020_3 + r_020_4*rie) + rPmQy*r_030_4;
   double r_004_3 = PmAz*r_003_3 + 3*iz2*(r_002_3 + r_002_4*rie) + rPmQz*r_003_4;
   double r_310_3 = PmAy*r_300_3 + rPmQy*r_300_4;
   double r_301_3 = PmAz*r_300_3 + rPmQz*r_300_4;
   double r_031_3 = PmAz*r_030_3 + rPmQz*r_030_4;
   double r_013_3 = PmAy*r_003_3 + rPmQy*r_003_4;
   double r_500_2 = PmAx*r_400_2 + 4*iz2*(r_300_2 + r_300_3*rie) + rPmQx*r_400_3;
   double r_050_2 = PmAy*r_040_2 + 4*iz2*(r_030_2 + r_030_3*rie) + rPmQy*r_040_3;
   double r_005_2 = PmAz*r_004_2 + 4*iz2*(r_003_2 + r_003_3*rie) + rPmQz*r_004_3;
   double r_140_2 = PmAx*r_040_2 + rPmQx*r_040_3;
   double r_104_2 = PmAx*r_004_2 + rPmQx*r_004_3;
   double r_410_2 = PmAy*r_400_2 + rPmQy*r_400_3;
   double r_014_2 = PmAy*r_004_2 + rPmQy*r_004_3;
   double r_401_2 = PmAz*r_400_2 + rPmQz*r_400_3;
   double r_041_2 = PmAz*r_040_2 + rPmQz*r_040_3;
   double r_320_2 = PmAy*r_310_2 + iz2*(r_300_2 + r_300_3*rie) + rPmQy*r_310_3;
   double r_302_2 = PmAz*r_301_2 + iz2*(r_300_2 + r_300_3*rie) + rPmQz*r_301_3;
   double r_032_2 = PmAz*r_031_2 + iz2*(r_030_2 + r_030_3*rie) + rPmQz*r_031_3;
   double r_023_2 = PmAy*r_013_2 + iz2*(r_003_2 + r_003_3*rie) + rPmQy*r_013_3;
   double r_600_1 = PmAx*r_500_1 + 5*iz2*(r_400_1 + r_400_2*rie) + rPmQx*r_500_2;
   double r_060_1 = PmAy*r_050_1 + 5*iz2*(r_040_1 + r_040_2*rie) + rPmQy*r_050_2;
   double r_006_1 = PmAz*r_005_1 + 5*iz2*(r_004_1 + r_004_2*rie) + rPmQz*r_005_2;
   double r_510_1 = PmAy*r_500_1 + rPmQy*r_500_2;
   double r_150_1 = PmAx*r_050_1 + rPmQx*r_050_2;
   double r_501_1 = PmAz*r_500_1 + rPmQz*r_500_2;
   double r_105_1 = PmAx*r_005_1 + rPmQx*r_005_2;
   double r_051_1 = PmAz*r_050_1 + rPmQz*r_050_2;
   double r_015_1 = PmAy*r_005_1 + rPmQy*r_005_2;
   double r_420_1 = PmAy*r_410_1 + iz2*(r_400_1 + r_400_2*rie) + rPmQy*r_410_2;
   double r_402_1 = PmAz*r_401_1 + iz2*(r_400_1 + r_400_2*rie) + rPmQz*r_401_2;
   double r_240_1 = PmAx*r_140_1 + iz2*(r_040_1 + r_040_2*rie) + rPmQx*r_140_2;
   double r_204_1 = PmAx*r_104_1 + iz2*(r_004_1 + r_004_2*rie) + rPmQx*r_104_2;
   double r_042_1 = PmAz*r_041_1 + iz2*(r_040_1 + r_040_2*rie) + rPmQz*r_041_2;
   double r_024_1 = PmAy*r_014_1 + iz2*(r_004_1 + r_004_2*rie) + rPmQy*r_014_2;
   double r_330_1 = PmAy*r_320_1 + 2*iz2*(r_310_1 + r_310_2*rie) + rPmQy*r_320_2;
   double r_303_1 = PmAz*r_302_1 + 2*iz2*(r_301_1 + r_301_2*rie) + rPmQz*r_302_2;
   double r_033_1 = PmAz*r_032_1 + 2*iz2*(r_031_1 + r_031_2*rie) + rPmQz*r_032_2;
   double r_312_1 = PmAy*r_302_1 + rPmQy*r_302_2;
   double r_132_1 = PmAx*r_032_1 + rPmQx*r_032_2;
   double r_123_1 = PmAx*r_023_1 + rPmQx*r_023_2;
   pOut[84] = PmAx*pOut[56] + 6*iz2*(pOut[35] + r_500_1*rie) + rPmQx*r_600_1;
   pOut[85] = PmAy*pOut[57] + 6*iz2*(pOut[36] + r_050_1*rie) + rPmQy*r_060_1;
   pOut[86] = PmAz*pOut[58] + 6*iz2*(pOut[37] + r_005_1*rie) + rPmQz*r_006_1;
   pOut[87] = PmAx*pOut[57] + rPmQx*r_060_1;
   pOut[88] = PmAx*pOut[58] + rPmQx*r_006_1;
   pOut[89] = PmAy*pOut[56] + rPmQy*r_600_1;
   pOut[90] = PmAy*pOut[58] + rPmQy*r_006_1;
   pOut[91] = PmAz*pOut[56] + rPmQz*r_600_1;
   pOut[92] = PmAz*pOut[57] + rPmQz*r_060_1;
   pOut[93] = PmAy*pOut[59] + iz2*(pOut[35] + r_500_1*rie) + rPmQy*r_510_1;
   pOut[94] = PmAz*pOut[61] + iz2*(pOut[35] + r_500_1*rie) + rPmQz*r_501_1;
   pOut[95] = PmAx*pOut[60] + iz2*(pOut[36] + r_050_1*rie) + rPmQx*r_150_1;
   pOut[96] = PmAz*pOut[63] + iz2*(pOut[36] + r_050_1*rie) + rPmQz*r_051_1;
   pOut[97] = PmAx*pOut[62] + iz2*(pOut[37] + r_005_1*rie) + rPmQx*r_105_1;
   pOut[98] = PmAy*pOut[64] + iz2*(pOut[37] + r_005_1*rie) + rPmQy*r_015_1;
   pOut[99] = PmAx*pOut[67] + 2*iz2*(pOut[38] + r_140_1*rie) + rPmQx*r_240_1;
   pOut[100] = PmAx*pOut[68] + 2*iz2*(pOut[39] + r_104_1*rie) + rPmQx*r_204_1;
   pOut[101] = PmAy*pOut[65] + 2*iz2*(pOut[40] + r_410_1*rie) + rPmQy*r_420_1;
   pOut[102] = PmAy*pOut[70] + 2*iz2*(pOut[41] + r_014_1*rie) + rPmQy*r_024_1;
   pOut[103] = PmAz*pOut[66] + 2*iz2*(pOut[42] + r_401_1*rie) + rPmQz*r_402_1;
   pOut[104] = PmAz*pOut[69] + 2*iz2*(pOut[43] + r_041_1*rie) + rPmQz*r_042_1;
   pOut[105] = PmAz*pOut[59] + rPmQz*r_510_1;
   pOut[106] = PmAz*pOut[60] + rPmQz*r_150_1;
   pOut[107] = PmAy*pOut[62] + rPmQy*r_105_1;
   pOut[108] = PmAx*pOut[69] + rPmQx*r_042_1;
   pOut[109] = PmAx*pOut[70] + rPmQx*r_024_1;
   pOut[110] = PmAy*pOut[66] + rPmQy*r_402_1;
   pOut[111] = PmAy*pOut[68] + rPmQy*r_204_1;
   pOut[112] = PmAz*pOut[65] + rPmQz*r_420_1;
   pOut[113] = PmAz*pOut[67] + rPmQz*r_240_1;
   pOut[114] = PmAz*pOut[71] + rPmQz*r_330_1;
   pOut[115] = PmAy*pOut[72] + rPmQy*r_303_1;
   pOut[116] = PmAx*pOut[73] + rPmQx*r_033_1;
   pOut[117] = PmAy*pOut[77] + iz2*(pOut[45] + r_302_1*rie) + rPmQy*r_312_1;
   pOut[118] = PmAx*pOut[78] + iz2*(pOut[47] + r_032_1*rie) + rPmQx*r_132_1;
   pOut[119] = PmAx*pOut[80] + iz2*(pOut[49] + r_023_1*rie) + rPmQx*r_123_1;
   // 2.39 steps per component, 0.39 kb stack
   if (lab == 7) return;

   // m + lab == 8
   double r_100_7 = PmAx*pGm[7] + pGm[8]*rPmQx;
   double r_010_7 = PmAy*pGm[7] + pGm[8]*rPmQy;
   double r_001_7 = PmAz*pGm[7] + pGm[8]*rPmQz;
   double r_200_6 = PmAx*r_100_6 + iz2*(pGm[6] + pGm[7]*rie) + rPmQx*r_100_7;
   double r_020_6 = PmAy*r_010_6 + iz2*(pGm[6] + pGm[7]*rie) + rPmQy*r_010_7;
   double r_002_6 = PmAz*r_001_6 + iz2*(pGm[6] + pGm[7]*rie) + rPmQz*r_001_7;
   double r_300_5 = PmAx*r_200_5 + 2*iz2*(r_100_5 + r_100_6*rie) + rPmQx*r_200_6;
   double r_030_5 = PmAy*r_020_5 + 2*iz2*(r_010_5 + r_010_6*rie) + rPmQy*r_020_6;
   double r_003_5 = PmAz*r_002_5 + 2*iz2*(r_001_5 + r_001_6*rie) + rPmQz*r_002_6;
   double r_400_4 = PmAx*r_300_4 + 3*iz2*(r_200_4 + r_200_5*rie) + rPmQx*r_300_5;
   double r_040_4 = PmAy*r_030_4 + 3*iz2*(r_020_4 + r_020_5*rie) + rPmQy*r_030_5;
   double r_004_4 = PmAz*r_003_4 + 3*iz2*(r_002_4 + r_002_5*rie) + rPmQz*r_003_5;
   double r_310_4 = PmAy*r_300_4 + rPmQy*r_300_5;
   double r_301_4 = PmAz*r_300_4 + rPmQz*r_300_5;
   double r_031_4 = PmAz*r_030_4 + rPmQz*r_030_5;
   double r_500_3 = PmAx*r_400_3 + 4*iz2*(r_300_3 + r_300_4*rie) + rPmQx*r_400_4;
   double r_050_3 = PmAy*r_040_3 + 4*iz2*(r_030_3 + r_030_4*rie) + rPmQy*r_040_4;
   double r_005_3 = PmAz*r_004_3 + 4*iz2*(r_003_3 + r_003_4*rie) + rPmQz*r_004_4;
   double r_140_3 = PmAx*r_040_3 + rPmQx*r_040_4;
   double r_104_3 = PmAx*r_004_3 + rPmQx*r_004_4;
   double r_410_3 = PmAy*r_400_3 + rPmQy*r_400_4;
   double r_014_3 = PmAy*r_004_3 + rPmQy*r_004_4;
   double r_401_3 = PmAz*r_400_3 + rPmQz*r_400_4;
   double r_041_3 = PmAz*r_040_3 + rPmQz*r_040_4;
   double r_320_3 = PmAy*r_310_3 + iz2*(r_300_3 + r_300_4*rie) + rPmQy*r_310_4;
   double r_302_3 = PmAz*r_301_3 + iz2*(r_300_3 + r_300_4*rie) + rPmQz*r_301_4;
   double r_032_3 = PmAz*r_031_3 + iz2*(r_030_3 + r_030_4*rie) + rPmQz*r_031_4;
   double r_600_2 = PmAx*r_500_2 + 5*iz2*(r_400_2 + r_400_3*rie) + rPmQx*r_500_3;
   double r_060_2 = PmAy*r_050_2 + 5*iz2*(r_040_2 + r_040_3*rie) + rPmQy*r_050_3;
   double r_006_2 = PmAz*r_005_2 + 5*iz2*(r_004_2 + r_004_3*rie) + rPmQz*r_005_3;
   double r_510_2 = PmAy*r_500_2 + rPmQy*r_500_3;
   double r_150_2 = PmAx*r_050_2 + rPmQx*r_050_3;
   double r_501_2 = PmAz*r_500_2 + rPmQz*r_500_3;
   double r_105_2 = PmAx*r_005_2 + rPmQx*r_005_3;
   double r_051_2 = PmAz*r_050_2 + rPmQz*r_050_3;
   double r_015_2 = PmAy*r_005_2 + rPmQy*r_005_3;
   double r_420_2 = PmAy*r_410_2 + iz2*(r_400_2 + r_400_3*rie) + rPmQy*r_410_3;
   double r_402_2 = PmAz*r_401_2 + iz2*(r_400_2 + r_400_3*rie) + rPmQz*r_401_3;
   double r_240_2 = PmAx*r_140_2 + iz2*(r_040_2 + r_040_3*rie) + rPmQx*r_140_3;
   double r_204_2 = PmAx*r_104_2 + iz2*(r_004_2 + r_004_3*rie) + rPmQx*r_104_3;
   double r_042_2 = PmAz*r_041_2 + iz2*(r_040_2 + r_040_3*rie) + rPmQz*r_041_3;
   double r_024_2 = PmAy*r_014_2 + iz2*(r_004_2 + r_004_3*rie) + rPmQy*r_014_3;
   double r_330_2 = PmAy*r_320_2 + 2*iz2*(r_310_2 + r_310_3*rie) + rPmQy*r_320_3;
   double r_303_2 = PmAz*r_302_2 + 2*iz2*(r_301_2 + r_301_3*rie) + rPmQz*r_302_3;
   double r_033_2 = PmAz*r_032_2 + 2*iz2*(r_031_2 + r_031_3*rie) + rPmQz*r_032_3;
   double r_700_1 = PmAx*r_600_1 + 6*iz2*(r_500_1 + r_500_2*rie) + rPmQx*r_600_2;
   double r_070_1 = PmAy*r_060_1 + 6*iz2*(r_050_1 + r_050_2*rie) + rPmQy*r_060_2;
   double r_007_1 = PmAz*r_006_1 + 6*iz2*(r_005_1 + r_005_2*rie) + rPmQz*r_006_2;
   double r_160_1 = PmAx*r_060_1 + rPmQx*r_060_2;
   double r_106_1 = PmAx*r_006_1 + rPmQx*r_006_2;
   double r_610_1 = PmAy*r_600_1 + rPmQy*r_600_2;
   double r_016_1 = PmAy*r_006_1 + rPmQy*r_006_2;
   double r_601_1 = PmAz*r_600_1 + rPmQz*r_600_2;
   double r_061_1 = PmAz*r_060_1 + rPmQz*r_060_2;
   double r_520_1 = PmAy*r_510_1 + iz2*(r_500_1 + r_500_2*rie) + rPmQy*r_510_2;
   double r_502_1 = PmAz*r_501_1 + iz2*(r_500_1 + r_500_2*rie) + rPmQz*r_501_2;
   double r_250_1 = PmAx*r_150_1 + iz2*(r_050_1 + r_050_2*rie) + rPmQx*r_150_2;
   double r_052_1 = PmAz*r_051_1 + iz2*(r_050_1 + r_050_2*rie) + rPmQz*r_051_2;
   double r_205_1 = PmAx*r_105_1 + iz2*(r_005_1 + r_005_2*rie) + rPmQx*r_105_2;
   double r_025_1 = PmAy*r_015_1 + iz2*(r_005_1 + r_005_2*rie) + rPmQy*r_015_2;
   double r_340_1 = PmAx*r_240_1 + 2*iz2*(r_140_1 + r_140_2*rie) + rPmQx*r_240_2;
   double r_304_1 = PmAx*r_204_1 + 2*iz2*(r_104_1 + r_104_2*rie) + rPmQx*r_204_2;
   double r_430_1 = PmAy*r_420_1 + 2*iz2*(r_410_1 + r_410_2*rie) + rPmQy*r_420_2;
   double r_034_1 = PmAy*r_024_1 + 2*iz2*(r_014_1 + r_014_2*rie) + rPmQy*r_024_2;
   double r_403_1 = PmAz*r_402_1 + 2*iz2*(r_401_1 + r_401_2*rie) + rPmQz*r_402_2;
   double r_043_1 = PmAz*r_042_1 + 2*iz2*(r_041_1 + r_041_2*rie) + rPmQz*r_042_2;
   double r_142_1 = PmAx*r_042_1 + rPmQx*r_042_2;
   double r_124_1 = PmAx*r_024_1 + rPmQx*r_024_2;
   double r_412_1 = PmAy*r_402_1 + rPmQy*r_402_2;
   double r_331_1 = PmAz*r_330_1 + rPmQz*r_330_2;
   double r_313_1 = PmAy*r_303_1 + rPmQy*r_303_2;
   double r_133_1 = PmAx*r_033_1 + rPmQx*r_033_2;
   pOut[120] = PmAx*pOut[84] + 7*iz2*(pOut[56] + r_600_1*rie) + rPmQx*r_700_1;
   pOut[121] = PmAy*pOut[85] + 7*iz2*(pOut[57] + r_060_1*rie) + rPmQy*r_070_1;
   pOut[122] = PmAz*pOut[86] + 7*iz2*(pOut[58] + r_006_1*rie) + rPmQz*r_007_1;
   pOut[123] = PmAy*pOut[84] + rPmQy*r_700_1;
   pOut[124] = PmAx*pOut[85] + rPmQx*r_070_1;
   pOut[125] = PmAz*pOut[84] + rPmQz*r_700_1;
   pOut[126] = PmAx*pOut[86] + rPmQx*r_007_1;
   pOut[127] = PmAz*pOut[85] + rPmQz*r_070_1;
   pOut[128] = PmAy*pOut[86] + rPmQy*r_007_1;
   pOut[129] = PmAy*pOut[89] + iz2*(pOut[56] + r_600_1*rie) + rPmQy*r_610_1;
   pOut[130] = PmAz*pOut[91] + iz2*(pOut[56] + r_600_1*rie) + rPmQz*r_601_1;
   pOut[131] = PmAx*pOut[87] + iz2*(pOut[57] + r_060_1*rie) + rPmQx*r_160_1;
   pOut[132] = PmAx*pOut[88] + iz2*(pOut[58] + r_006_1*rie) + rPmQx*r_106_1;
   pOut[133] = PmAz*pOut[92] + iz2*(pOut[57] + r_060_1*rie) + rPmQz*r_061_1;
   pOut[134] = PmAy*pOut[90] + iz2*(pOut[58] + r_006_1*rie) + rPmQy*r_016_1;
   pOut[135] = PmAy*pOut[93] + 2*iz2*(pOut[59] + r_510_1*rie) + rPmQy*r_520_1;
   pOut[136] = PmAx*pOut[95] + 2*iz2*(pOut[60] + r_150_1*rie) + rPmQx*r_250_1;
   pOut[137] = PmAz*pOut[94] + 2*iz2*(pOut[61] + r_501_1*rie) + rPmQz*r_502_1;
   pOut[138] = PmAx*pOut[97] + 2*iz2*(pOut[62] + r_105_1*rie) + rPmQx*r_205_1;
   pOut[139] = PmAz*pOut[96] + 2*iz2*(pOut[63] + r_051_1*rie) + rPmQz*r_052_1;
   pOut[140] = PmAy*pOut[98] + 2*iz2*(pOut[64] + r_015_1*rie) + rPmQy*r_025_1;
   pOut[141] = PmAx*pOut[99] + 3*iz2*(pOut[67] + r_240_1*rie) + rPmQx*r_340_1;
   pOut[142] = PmAx*pOut[100] + 3*iz2*(pOut[68] + r_204_1*rie) + rPmQx*r_304_1;
   pOut[143] = PmAy*pOut[102] + 3*iz2*(pOut[70] + r_024_1*rie) + rPmQy*r_034_1;
   pOut[144] = PmAy*pOut[88] + rPmQy*r_106_1;
   pOut[145] = PmAz*pOut[87] + rPmQz*r_160_1;
   pOut[146] = PmAz*pOut[89] + rPmQz*r_610_1;
   pOut[147] = PmAy*pOut[94] + rPmQy*r_502_1;
   pOut[148] = PmAx*pOut[96] + rPmQx*r_052_1;
   pOut[149] = PmAz*pOut[93] + rPmQz*r_520_1;
   pOut[150] = PmAx*pOut[98] + rPmQx*r_025_1;
   pOut[151] = PmAz*pOut[95] + rPmQz*r_250_1;
   pOut[152] = PmAy*pOut[97] + rPmQy*r_205_1;
   pOut[153] = PmAy*pOut[100] + rPmQy*r_304_1;
   pOut[154] = PmAx*pOut[102] + rPmQx*r_034_1;
   pOut[155] = PmAz*pOut[99] + rPmQz*r_340_1;
   pOut[156] = PmAx*pOut[104] + rPmQx*r_043_1;
   pOut[157] = PmAz*pOut[101] + rPmQz*r_430_1;
   pOut[158] = PmAy*pOut[103] + rPmQy*r_403_1;
   pOut[159] = PmAy*pOut[110] + iz2*(pOut[66] + r_402_1*rie) + rPmQy*r_412_1;
   pOut[160] = PmAx*pOut[108] + iz2*(pOut[69] + r_042_1*rie) + rPmQx*r_142_1;
   pOut[161] = PmAx*pOut[109] + iz2*(pOut[70] + r_024_1*rie) + rPmQx*r_124_1;
   pOut[162] = PmAz*pOut[114] + iz2*(pOut[71] + r_330_1*rie) + rPmQz*r_331_1;
   pOut[163] = PmAy*pOut[115] + iz2*(pOut[72] + r_303_1*rie) + rPmQy*r_313_1;
   pOut[164] = PmAx*pOut[116] + iz2*(pOut[73] + r_033_1*rie) + rPmQx*r_133_1;
   // 2.60 steps per component, 0.56 kb stack
   if (lab == 8) return;

   // m + lab == 9
   double r_100_8 = PmAx*pGm[8] + pGm[9]*rPmQx;
   double r_010_8 = PmAy*pGm[8] + pGm[9]*rPmQy;
   double r_001_8 = PmAz*pGm[8] + pGm[9]*rPmQz;
   double r_200_7 = PmAx*r_100_7 + iz2*(pGm[7] + pGm[8]*rie) + rPmQx*r_100_8;
   double r_020_7 = PmAy*r_010_7 + iz2*(pGm[7] + pGm[8]*rie) + rPmQy*r_010_8;
   double r_002_7 = PmAz*r_001_7 + iz2*(pGm[7] + pGm[8]*rie) + rPmQz*r_001_8;
   double r_300_6 = PmAx*r_200_6 + 2*iz2*(r_100_6 + r_100_7*rie) + rPmQx*r_200_7;
   double r_030_6 = PmAy*r_020_6 + 2*iz2*(r_010_6 + r_010_7*rie) + rPmQy*r_020_7;
   double r_003_6 = PmAz*r_002_6 + 2*iz2*(r_001_6 + r_001_7*rie) + rPmQz*r_002_7;
   double r_400_5 = PmAx*r_300_5 + 3*iz2*(r_200_5 + r_200_6*rie) + rPmQx*r_300_6;
   double r_040_5 = PmAy*r_030_5 + 3*iz2*(r_020_5 + r_020_6*rie) + rPmQy*r_030_6;
   double r_004_5 = PmAz*r_003_5 + 3*iz2*(r_002_5 + r_002_6*rie) + rPmQz*r_003_6;
   double r_310_5 = PmAy*r_300_5 + rPmQy*r_300_6;
   double r_500_4 = PmAx*r_400_4 + 4*iz2*(r_300_4 + r_300_5*rie) + rPmQx*r_400_5;
   double r_050_4 = PmAy*r_040_4 + 4*iz2*(r_030_4 + r_030_5*rie) + rPmQy*r_040_5;
   double r_005_4 = PmAz*r_004_4 + 4*iz2*(r_003_4 + r_003_5*rie) + rPmQz*r_004_5;
   double r_140_4 = PmAx*r_040_4 + rPmQx*r_040_5;
   double r_104_4 = PmAx*r_004_4 + rPmQx*r_004_5;
   double r_410_4 = PmAy*r_400_4 + rPmQy*r_400_5;
   double r_014_4 = PmAy*r_004_4 + rPmQy*r_004_5;
   double r_401_4 = PmAz*r_400_4 + rPmQz*r_400_5;
   double r_041_4 = PmAz*r_040_4 + rPmQz*r_040_5;
   double r_320_4 = PmAy*r_310_4 + iz2*(r_300_4 + r_300_5*rie) + rPmQy*r_310_5;
   double r_600_3 = PmAx*r_500_3 + 5*iz2*(r_400_3 + r_400_4*rie) + rPmQx*r_500_4;
   double r_060_3 = PmAy*r_050_3 + 5*iz2*(r_040_3 + r_040_4*rie) + rPmQy*r_050_4;
   double r_006_3 = PmAz*r_005_3 + 5*iz2*(r_004_3 + r_004_4*rie) + rPmQz*r_005_4;
   double r_510_3 = PmAy*r_500_3 + rPmQy*r_500_4;
   double r_150_3 = PmAx*r_050_3 + rPmQx*r_050_4;
   double r_501_3 = PmAz*r_500_3 + rPmQz*r_500_4;
   double r_105_3 = PmAx*r_005_3 + rPmQx*r_005_4;
   double r_051_3 = PmAz*r_050_3 + rPmQz*r_050_4;
   double r_015_3 = PmAy*r_005_3 + rPmQy*r_005_4;
   double r_420_3 = PmAy*r_410_3 + iz2*(r_400_3 + r_400_4*rie) + rPmQy*r_410_4;
   double r_402_3 = PmAz*r_401_3 + iz2*(r_400_3 + r_400_4*rie) + rPmQz*r_401_4;
   double r_240_3 = PmAx*r_140_3 + iz2*(r_040_3 + r_040_4*rie) + rPmQx*r_140_4;
   double r_204_3 = PmAx*r_104_3 + iz2*(r_004_3 + r_004_4*rie) + rPmQx*r_104_4;
   double r_042_3 = PmAz*r_041_3 + iz2*(r_040_3 + r_040_4*rie) + rPmQz*r_041_4;
   double r_024_3 = PmAy*r_014_3 + iz2*(r_004_3 + r_004_4*rie) + rPmQy*r_014_4;
   double r_330_3 = PmAy*r_320_3 + 2*iz2*(r_310_3 + r_310_4*rie) + rPmQy*r_320_4;
   double r_700_2 = PmAx*r_600_2 + 6*iz2*(r_500_2 + r_500_3*rie) + rPmQx*r_600_3;
   double r_070_2 = PmAy*r_060_2 + 6*iz2*(r_050_2 + r_050_3*rie) + rPmQy*r_060_3;
   double r_007_2 = PmAz*r_006_2 + 6*iz2*(r_005_2 + r_005_3*rie) + rPmQz*r_006_3;
   double r_160_2 = PmAx*r_060_2 + rPmQx*r_060_3;
   double r_106_2 = PmAx*r_006_2 + rPmQx*r_006_3;
   double r_610_2 = PmAy*r_600_2 + rPmQy*r_600_3;
   double r_016_2 = PmAy*r_006_2 + rPmQy*r_006_3;
   double r_601_2 = PmAz*r_600_2 + rPmQz*r_600_3;
   double r_061_2 = PmAz*r_060_2 + rPmQz*r_060_3;
   double r_520_2 = PmAy*r_510_2 + iz2*(r_500_2 + r_500_3*rie) + rPmQy*r_510_3;
   double r_502_2 = PmAz*r_501_2 + iz2*(r_500_2 + r_500_3*rie) + rPmQz*r_501_3;
   double r_250_2 = PmAx*r_150_2 + iz2*(r_050_2 + r_050_3*rie) + rPmQx*r_150_3;
   double r_052_2 = PmAz*r_051_2 + iz2*(r_050_2 + r_050_3*rie) + rPmQz*r_051_3;
   double r_205_2 = PmAx*r_105_2 + iz2*(r_005_2 + r_005_3*rie) + rPmQx*r_105_3;
   double r_025_2 = PmAy*r_015_2 + iz2*(r_005_2 + r_005_3*rie) + rPmQy*r_015_3;
   double r_340_2 = PmAx*r_240_2 + 2*iz2*(r_140_2 + r_140_3*rie) + rPmQx*r_240_3;
   double r_304_2 = PmAx*r_204_2 + 2*iz2*(r_104_2 + r_104_3*rie) + rPmQx*r_204_3;
   double r_430_2 = PmAy*r_420_2 + 2*iz2*(r_410_2 + r_410_3*rie) + rPmQy*r_420_3;
   double r_034_2 = PmAy*r_024_2 + 2*iz2*(r_014_2 + r_014_3*rie) + rPmQy*r_024_3;
   double r_403_2 = PmAz*r_402_2 + 2*iz2*(r_401_2 + r_401_3*rie) + rPmQz*r_402_3;
   double r_043_2 = PmAz*r_042_2 + 2*iz2*(r_041_2 + r_041_3*rie) + rPmQz*r_042_3;
   double r_331_2 = PmAz*r_330_2 + rPmQz*r_330_3;
   double r_800_1 = PmAx*r_700_1 + 7*iz2*(r_600_1 + r_600_2*rie) + rPmQx*r_700_2;
   double r_080_1 = PmAy*r_070_1 + 7*iz2*(r_060_1 + r_060_2*rie) + rPmQy*r_070_2;
   double r_008_1 = PmAz*r_007_1 + 7*iz2*(r_006_1 + r_006_2*rie) + rPmQz*r_007_2;
   double r_710_1 = PmAy*r_700_1 + rPmQy*r_700_2;
   double r_170_1 = PmAx*r_070_1 + rPmQx*r_070_2;
   double r_701_1 = PmAz*r_700_1 + rPmQz*r_700_2;
   double r_107_1 = PmAx*r_007_1 + rPmQx*r_007_2;
   double r_071_1 = PmAz*r_070_1 + rPmQz*r_070_2;
   double r_017_1 = PmAy*r_007_1 + rPmQy*r_007_2;
   double r_620_1 = PmAy*r_610_1 + iz2*(r_600_1 + r_600_2*rie) + rPmQy*r_610_2;
   double r_602_1 = PmAz*r_601_1 + iz2*(r_600_1 + r_600_2*rie) + rPmQz*r_601_2;
   double r_260_1 = PmAx*r_160_1 + iz2*(r_060_1 + r_060_2*rie) + rPmQx*r_160_2;
   double r_206_1 = PmAx*r_106_1 + iz2*(r_006_1 + r_006_2*rie) + rPmQx*r_106_2;
   double r_062_1 = PmAz*r_061_1 + iz2*(r_060_1 + r_060_2*rie) + rPmQz*r_061_2;
   double r_026_1 = PmAy*r_016_1 + iz2*(r_006_1 + r_006_2*rie) + rPmQy*r_016_2;
   double r_530_1 = PmAy*r_520_1 + 2*iz2*(r_510_1 + r_510_2*rie) + rPmQy*r_520_2;
   double r_350_1 = PmAx*r_250_1 + 2*iz2*(r_150_1 + r_150_2*rie) + rPmQx*r_250_2;
   double r_503_1 = PmAz*r_502_1 + 2*iz2*(r_501_1 + r_501_2*rie) + rPmQz*r_502_2;
   double r_305_1 = PmAx*r_205_1 + 2*iz2*(r_105_1 + r_105_2*rie) + rPmQx*r_205_2;
   double r_053_1 = PmAz*r_052_1 + 2*iz2*(r_051_1 + r_051_2*rie) + rPmQz*r_052_2;
   double r_035_1 = PmAy*r_025_1 + 2*iz2*(r_015_1 + r_015_2*rie) + rPmQy*r_025_2;
   double r_440_1 = PmAx*r_340_1 + 3*iz2*(r_240_1 + r_240_2*rie) + rPmQx*r_340_2;
   double r_404_1 = PmAx*r_304_1 + 3*iz2*(r_204_1 + r_204_2*rie) + rPmQx*r_304_2;
   double r_044_1 = PmAy*r_034_1 + 3*iz2*(r_024_1 + r_024_2*rie) + rPmQy*r_034_2;
   double r_512_1 = PmAy*r_502_1 + rPmQy*r_502_2;
   double r_152_1 = PmAx*r_052_1 + rPmQx*r_052_2;
   double r_125_1 = PmAx*r_025_1 + rPmQx*r_025_2;
   double r_314_1 = PmAy*r_304_1 + rPmQy*r_304_2;
   double r_134_1 = PmAx*r_034_1 + rPmQx*r_034_2;
   double r_341_1 = PmAz*r_340_1 + rPmQz*r_340_2;
   double r_143_1 = PmAx*r_043_1 + rPmQx*r_043_2;
   double r_431_1 = PmAz*r_430_1 + rPmQz*r_430_2;
   double r_413_1 = PmAy*r_403_1 + rPmQy*r_403_2;
   double r_332_1 = PmAz*r_331_1 + iz2*(r_330_1 + r_330_2*rie) + rPmQz*r_331_2;
   pOut[165] = PmAx*pOut[120] + 8*iz2*(pOut[84] + r_700_1*rie) + rPmQx*r_800_1;
   pOut[166] = PmAy*pOut[121] + 8*iz2*(pOut[85] + r_070_1*rie) + rPmQy*r_080_1;
   pOut[167] = PmAz*pOut[122] + 8*iz2*(pOut[86] + r_007_1*rie) + rPmQz*r_008_1;
   pOut[168] = PmAx*pOut[121] + rPmQx*r_080_1;
   pOut[169] = PmAx*pOut[122] + rPmQx*r_008_1;
   pOut[170] = PmAy*pOut[120] + rPmQy*r_800_1;
   pOut[171] = PmAy*pOut[122] + rPmQy*r_008_1;
   pOut[172] = PmAz*pOut[120] + rPmQz*r_800_1;
   pOut[173] = PmAz*pOut[121] + rPmQz*r_080_1;
   pOut[174] = PmAy*pOut[123] + iz2*(pOut[84] + r_700_1*rie) + rPmQy*r_710_1;
   pOut[175] = PmAz*pOut[125] + iz2*(pOut[84] + r_700_1*rie) + rPmQz*r_701_1;
   pOut[176] = PmAx*pOut[124] + iz2*(pOut[85] + r_070_1*rie) + rPmQx*r_170_1;
   pOut[177] = PmAz*pOut[127] + iz2*(pOut[85] + r_070_1*rie) + rPmQz*r_071_1;
   pOut[178] = PmAx*pOut[126] + iz2*(pOut[86] + r_007_1*rie) + rPmQx*r_107_1;
   pOut[179] = PmAy*pOut[128] + iz2*(pOut[86] + r_007_1*rie) + rPmQy*r_017_1;
   pOut[180] = PmAx*pOut[131] + 2*iz2*(pOut[87] + r_160_1*rie) + rPmQx*r_260_1;
   pOut[181] = PmAx*pOut[132] + 2*iz2*(pOut[88] + r_106_1*rie) + rPmQx*r_206_1;
   pOut[182] = PmAy*pOut[129] + 2*iz2*(pOut[89] + r_610_1*rie) + rPmQy*r_620_1;
   pOut[183] = PmAy*pOut[134] + 2*iz2*(pOut[90] + r_016_1*rie) + rPmQy*r_026_1;
   pOut[184] = PmAz*pOut[130] + 2*iz2*(pOut[91] + r_601_1*rie) + rPmQz*r_602_1;
   pOut[185] = PmAz*pOut[133] + 2*iz2*(pOut[92] + r_061_1*rie) + rPmQz*r_062_1;
   pOut[186] = PmAy*pOut[135] + 3*iz2*(pOut[93] + r_520_1*rie) + rPmQy*r_530_1;
   pOut[187] = PmAz*pOut[137] + 3*iz2*(pOut[94] + r_502_1*rie) + rPmQz*r_503_1;
   pOut[188] = PmAx*pOut[136] + 3*iz2*(pOut[95] + r_250_1*rie) + rPmQx*r_350_1;
   pOut[189] = PmAz*pOut[139] + 3*iz2*(pOut[96] + r_052_1*rie) + rPmQz*r_053_1;
   pOut[190] = PmAx*pOut[138] + 3*iz2*(pOut[97] + r_205_1*rie) + rPmQx*r_305_1;
   pOut[191] = PmAy*pOut[140] + 3*iz2*(pOut[98] + r_025_1*rie) + rPmQy*r_035_1;
   pOut[192] = PmAz*pOut[123] + rPmQz*r_710_1;
   pOut[193] = PmAz*pOut[124] + rPmQz*r_170_1;
   pOut[194] = PmAy*pOut[126] + rPmQy*r_107_1;
   pOut[195] = PmAx*pOut[133] + rPmQx*r_062_1;
   pOut[196] = PmAx*pOut[134] + rPmQx*r_026_1;
   pOut[197] = PmAy*pOut[130] + rPmQy*r_602_1;
   pOut[198] = PmAy*pOut[132] + rPmQy*r_206_1;
   pOut[199] = PmAz*pOut[129] + rPmQz*r_620_1;
   pOut[200] = PmAz*pOut[131] + rPmQz*r_260_1;
   pOut[201] = PmAz*pOut[135] + rPmQz*r_530_1;
   pOut[202] = PmAy*pOut[137] + rPmQy*r_503_1;
   pOut[203] = PmAz*pOut[136] + rPmQz*r_350_1;
   pOut[204] = PmAy*pOut[138] + rPmQy*r_305_1;
   pOut[205] = PmAx*pOut[139] + rPmQx*r_053_1;
   pOut[206] = PmAx*pOut[140] + rPmQx*r_035_1;
   pOut[207] = PmAx*pOut[143] + rPmQx*r_044_1;
   pOut[208] = PmAy*pOut[142] + rPmQy*r_404_1;
   pOut[209] = PmAz*pOut[141] + rPmQz*r_440_1;
   pOut[210] = PmAy*pOut[147] + iz2*(pOut[94] + r_502_1*rie) + rPmQy*r_512_1;
   pOut[211] = PmAx*pOut[148] + iz2*(pOut[96] + r_052_1*rie) + rPmQx*r_152_1;
   pOut[212] = PmAx*pOut[150] + iz2*(pOut[98] + r_025_1*rie) + rPmQx*r_125_1;
   pOut[213] = PmAz*pOut[155] + iz2*(pOut[99] + r_340_1*rie) + rPmQz*r_341_1;
   pOut[214] = PmAy*pOut[153] + iz2*(pOut[100] + r_304_1*rie) + rPmQy*r_314_1;
   pOut[215] = PmAz*pOut[157] + iz2*(pOut[101] + r_430_1*rie) + rPmQz*r_431_1;
   pOut[216] = PmAx*pOut[154] + iz2*(pOut[102] + r_034_1*rie) + rPmQx*r_134_1;
   pOut[217] = PmAy*pOut[158] + iz2*(pOut[103] + r_403_1*rie) + rPmQy*r_413_1;
   pOut[218] = PmAx*pOut[156] + iz2*(pOut[104] + r_043_1*rie) + rPmQx*r_143_1;
   pOut[219] = PmAz*pOut[162] + 2*iz2*(pOut[114] + r_331_1*rie) + rPmQz*r_332_1;
   // 2.73 steps per component, 0.74 kb stack
   if (lab == 9) return;

   // m + lab == 10
   double r_100_9 = PmAx*pGm[9] + pGm[10]*rPmQx;
   double r_010_9 = PmAy*pGm[9] + pGm[10]*rPmQy;
   double r_001_9 = PmAz*pGm[9] + pGm[10]*rPmQz;
   double r_200_8 = PmAx*r_100_8 + iz2*(pGm[8] + pGm[9]*rie) + rPmQx*r_100_9;
   double r_020_8 = PmAy*r_010_8 + iz2*(pGm[8] + pGm[9]*rie) + rPmQy*r_010_9;
   double r_002_8 = PmAz*r_001_8 + iz2*(pGm[8] + pGm[9]*rie) + rPmQz*r_001_9;
   double r_300_7 = PmAx*r_200_7 + 2*iz2*(r_100_7 + r_100_8*rie) + rPmQx*r_200_8;
   double r_030_7 = PmAy*r_020_7 + 2*iz2*(r_010_7 + r_010_8*rie) + rPmQy*r_020_8;
   double r_003_7 = PmAz*r_002_7 + 2*iz2*(r_001_7 + r_001_8*rie) + rPmQz*r_002_8;
   double r_400_6 = PmAx*r_300_6 + 3*iz2*(r_200_6 + r_200_7*rie) + rPmQx*r_300_7;
   double r_040_6 = PmAy*r_030_6 + 3*iz2*(r_020_6 + r_020_7*rie) + rPmQy*r_030_7;
   double r_004_6 = PmAz*r_003_6 + 3*iz2*(r_002_6 + r_002_7*rie) + rPmQz*r_003_7;
   double r_500_5 = PmAx*r_400_5 + 4*iz2*(r_300_5 + r_300_6*rie) + rPmQx*r_400_6;
   double r_050_5 = PmAy*r_040_5 + 4*iz2*(r_030_5 + r_030_6*rie) + rPmQy*r_040_6;
   double r_005_5 = PmAz*r_004_5 + 4*iz2*(r_003_5 + r_003_6*rie) + rPmQz*r_004_6;
   double r_140_5 = PmAx*r_040_5 + rPmQx*r_040_6;
   double r_104_5 = PmAx*r_004_5 + rPmQx*r_004_6;
   double r_410_5 = PmAy*r_400_5 + rPmQy*r_400_6;
   double r_014_5 = PmAy*r_004_5 + rPmQy*r_004_6;
   double r_600_4 = PmAx*r_500_4 + 5*iz2*(r_400_4 + r_400_5*rie) + rPmQx*r_500_5;
   double r_060_4 = PmAy*r_050_4 + 5*iz2*(r_040_4 + r_040_5*rie) + rPmQy*r_050_5;
   double r_006_4 = PmAz*r_005_4 + 5*iz2*(r_004_4 + r_004_5*rie) + rPmQz*r_005_5;
   double r_510_4 = PmAy*r_500_4 + rPmQy*r_500_5;
   double r_150_4 = PmAx*r_050_4 + rPmQx*r_050_5;
   double r_501_4 = PmAz*r_500_4 + rPmQz*r_500_5;
   double r_105_4 = PmAx*r_005_4 + rPmQx*r_005_5;
   double r_051_4 = PmAz*r_050_4 + rPmQz*r_050_5;
   double r_015_4 = PmAy*r_005_4 + rPmQy*r_005_5;
   double r_420_4 = PmAy*r_410_4 + iz2*(r_400_4 + r_400_5*rie) + rPmQy*r_410_5;
   double r_240_4 = PmAx*r_140_4 + iz2*(r_040_4 + r_040_5*rie) + rPmQx*r_140_5;
   double r_204_4 = PmAx*r_104_4 + iz2*(r_004_4 + r_004_5*rie) + rPmQx*r_104_5;
   double r_024_4 = PmAy*r_014_4 + iz2*(r_004_4 + r_004_5*rie) + rPmQy*r_014_5;
   double r_700_3 = PmAx*r_600_3 + 6*iz2*(r_500_3 + r_500_4*rie) + rPmQx*r_600_4;
   double r_070_3 = PmAy*r_060_3 + 6*iz2*(r_050_3 + r_050_4*rie) + rPmQy*r_060_4;
   double r_007_3 = PmAz*r_006_3 + 6*iz2*(r_005_3 + r_005_4*rie) + rPmQz*r_006_4;
   double r_160_3 = PmAx*r_060_3 + rPmQx*r_060_4;
   double r_106_3 = PmAx*r_006_3 + rPmQx*r_006_4;
   double r_610_3 = PmAy*r_600_3 + rPmQy*r_600_4;
   double r_016_3 = PmAy*r_006_3 + rPmQy*r_006_4;
   double r_601_3 = PmAz*r_600_3 + rPmQz*r_600_4;
   double r_061_3 = PmAz*r_060_3 + rPmQz*r_060_4;
   double r_520_3 = PmAy*r_510_3 + iz2*(r_500_3 + r_500_4*rie) + rPmQy*r_510_4;
   double r_502_3 = PmAz*r_501_3 + iz2*(r_500_3 + r_500_4*rie) + rPmQz*r_501_4;
   double r_250_3 = PmAx*r_150_3 + iz2*(r_050_3 + r_050_4*rie) + rPmQx*r_150_4;
   double r_052_3 = PmAz*r_051_3 + iz2*(r_050_3 + r_050_4*rie) + rPmQz*r_051_4;
   double r_205_3 = PmAx*r_105_3 + iz2*(r_005_3 + r_005_4*rie) + rPmQx*r_105_4;
   double r_025_3 = PmAy*r_015_3 + iz2*(r_005_3 + r_005_4*rie) + rPmQy*r_015_4;
   double r_340_3 = PmAx*r_240_3 + 2*iz2*(r_140_3 + r_140_4*rie) + rPmQx*r_240_4;
   double r_304_3 = PmAx*r_204_3 + 2*iz2*(r_104_3 + r_104_4*rie) + rPmQx*r_204_4;
   double r_430_3 = PmAy*r_420_3 + 2*iz2*(r_410_3 + r_410_4*rie) + rPmQy*r_420_4;
   double r_034_3 = PmAy*r_024_3 + 2*iz2*(r_014_3 + r_014_4*rie) + rPmQy*r_024_4;
   double r_800_2 = PmAx*r_700_2 + 7*iz2*(r_600_2 + r_600_3*rie) + rPmQx*r_700_3;
   double r_080_2 = PmAy*r_070_2 + 7*iz2*(r_060_2 + r_060_3*rie) + rPmQy*r_070_3;
   double r_008_2 = PmAz*r_007_2 + 7*iz2*(r_006_2 + r_006_3*rie) + rPmQz*r_007_3;
   double r_710_2 = PmAy*r_700_2 + rPmQy*r_700_3;
   double r_170_2 = PmAx*r_070_2 + rPmQx*r_070_3;
   double r_701_2 = PmAz*r_700_2 + rPmQz*r_700_3;
   double r_107_2 = PmAx*r_007_2 + rPmQx*r_007_3;
   double r_071_2 = PmAz*r_070_2 + rPmQz*r_070_3;
   double r_017_2 = PmAy*r_007_2 + rPmQy*r_007_3;
   double r_620_2 = PmAy*r_610_2 + iz2*(r_600_2 + r_600_3*rie) + rPmQy*r_610_3;
   double r_602_2 = PmAz*r_601_2 + iz2*(r_600_2 + r_600_3*rie) + rPmQz*r_601_3;
   double r_260_2 = PmAx*r_160_2 + iz2*(r_060_2 + r_060_3*rie) + rPmQx*r_160_3;
   double r_206_2 = PmAx*r_106_2 + iz2*(r_006_2 + r_006_3*rie) + rPmQx*r_106_3;
   double r_062_2 = PmAz*r_061_2 + iz2*(r_060_2 + r_060_3*rie) + rPmQz*r_061_3;
   double r_026_2 = PmAy*r_016_2 + iz2*(r_006_2 + r_006_3*rie) + rPmQy*r_016_3;
   double r_530_2 = PmAy*r_520_2 + 2*iz2*(r_510_2 + r_510_3*rie) + rPmQy*r_520_3;
   double r_350_2 = PmAx*r_250_2 + 2*iz2*(r_150_2 + r_150_3*rie) + rPmQx*r_250_3;
   double r_503_2 = PmAz*r_502_2 + 2*iz2*(r_501_2 + r_501_3*rie) + rPmQz*r_502_3;
   double r_305_2 = PmAx*r_205_2 + 2*iz2*(r_105_2 + r_105_3*rie) + rPmQx*r_205_3;
   double r_053_2 = PmAz*r_052_2 + 2*iz2*(r_051_2 + r_051_3*rie) + rPmQz*r_052_3;
   double r_035_2 = PmAy*r_025_2 + 2*iz2*(r_015_2 + r_015_3*rie) + rPmQy*r_025_3;
   double r_440_2 = PmAx*r_340_2 + 3*iz2*(r_240_2 + r_240_3*rie) + rPmQx*r_340_3;
   double r_404_2 = PmAx*r_304_2 + 3*iz2*(r_204_2 + r_204_3*rie) + rPmQx*r_304_3;
   double r_044_2 = PmAy*r_034_2 + 3*iz2*(r_024_2 + r_024_3*rie) + rPmQy*r_034_3;
   double r_314_2 = PmAy*r_304_2 + rPmQy*r_304_3;
   double r_341_2 = PmAz*r_340_2 + rPmQz*r_340_3;
   double r_431_2 = PmAz*r_430_2 + rPmQz*r_430_3;
   double r_900_1 = PmAx*r_800_1 + 8*iz2*(r_700_1 + r_700_2*rie) + rPmQx*r_800_2;
   double r_090_1 = PmAy*r_080_1 + 8*iz2*(r_070_1 + r_070_2*rie) + rPmQy*r_080_2;
   double r_009_1 = PmAz*r_008_1 + 8*iz2*(r_007_1 + r_007_2*rie) + rPmQz*r_008_2;
   double r_180_1 = PmAx*r_080_1 + rPmQx*r_080_2;
   double r_108_1 = PmAx*r_008_1 + rPmQx*r_008_2;
   double r_810_1 = PmAy*r_800_1 + rPmQy*r_800_2;
   double r_018_1 = PmAy*r_008_1 + rPmQy*r_008_2;
   double r_801_1 = PmAz*r_800_1 + rPmQz*r_800_2;
   double r_081_1 = PmAz*r_080_1 + rPmQz*r_080_2;
   double r_720_1 = PmAy*r_710_1 + iz2*(r_700_1 + r_700_2*rie) + rPmQy*r_710_2;
   double r_702_1 = PmAz*r_701_1 + iz2*(r_700_1 + r_700_2*rie) + rPmQz*r_701_2;
   double r_270_1 = PmAx*r_170_1 + iz2*(r_070_1 + r_070_2*rie) + rPmQx*r_170_2;
   double r_072_1 = PmAz*r_071_1 + iz2*(r_070_1 + r_070_2*rie) + rPmQz*r_071_2;
   double r_207_1 = PmAx*r_107_1 + iz2*(r_007_1 + r_007_2*rie) + rPmQx*r_107_2;
   double r_027_1 = PmAy*r_017_1 + iz2*(r_007_1 + r_007_2*rie) + rPmQy*r_017_2;
   double r_360_1 = PmAx*r_260_1 + 2*iz2*(r_160_1 + r_160_2*rie) + rPmQx*r_260_2;
   double r_306_1 = PmAx*r_206_1 + 2*iz2*(r_106_1 + r_106_2*rie) + rPmQx*r_206_2;
   double r_630_1 = PmAy*r_620_1 + 2*iz2*(r_610_1 + r_610_2*rie) + rPmQy*r_620_2;
   double r_036_1 = PmAy*r_026_1 + 2*iz2*(r_016_1 + r_016_2*rie) + rPmQy*r_026_2;
   double r_603_1 = PmAz*r_602_1 + 2*iz2*(r_601_1 + r_601_2*rie) + rPmQz*r_602_2;
   double r_063_1 = PmAz*r_062_1 + 2*iz2*(r_061_1 + r_061_2*rie) + rPmQz*r_062_2;
   double r_540_1 = PmAy*r_530_1 + 3*iz2*(r_520_1 + r_520_2*rie) + rPmQy*r_530_2;
   double r_504_1 = PmAz*r_503_1 + 3*iz2*(r_502_1 + r_502_2*rie) + rPmQz*r_503_2;
   double r_450_1 = PmAx*r_350_1 + 3*iz2*(r_250_1 + r_250_2*rie) + rPmQx*r_350_2;
   double r_054_1 = PmAz*r_053_1 + 3*iz2*(r_052_1 + r_052_2*rie) + rPmQz*r_053_2;
   double r_405_1 = PmAx*r_305_1 + 3*iz2*(r_205_1 + r_205_2*rie) + rPmQx*r_305_2;
   double r_045_1 = PmAy*r_035_1 + 3*iz2*(r_025_1 + r_025_2*rie) + rPmQy*r_035_2;
   double r_162_1 = PmAx*r_062_1 + rPmQx*r_062_2;
   double r_126_1 = PmAx*r_026_1 + rPmQx*r_026_2;
   double r_612_1 = PmAy*r_602_1 + rPmQy*r_602_2;
   double r_531_1 = PmAz*r_530_1 + rPmQz*r_530_2;
   double r_513_1 = PmAy*r_503_1 + rPmQy*r_503_2;
   double r_351_1 = PmAz*r_350_1 + rPmQz*r_350_2;
   double r_315_1 = PmAy*r_305_1 + rPmQy*r_305_2;
   double r_153_1 = PmAx*r_053_1 + rPmQx*r_053_2;
   double r_135_1 = PmAx*r_035_1 + rPmQx*r_035_2;
   double r_144_1 = PmAx*r_044_1 + rPmQx*r_044_2;
   double r_414_1 = PmAy*r_404_1 + rPmQy*r_404_2;
   double r_441_1 = PmAz*r_440_1 + rPmQz*r_440_2;
   double r_342_1 = PmAz*r_341_1 + iz2*(r_340_1 + r_340_2*rie) + rPmQz*r_341_2;
   double r_324_1 = PmAy*r_314_1 + iz2*(r_304_1 + r_304_2*rie) + rPmQy*r_314_2;
   double r_432_1 = PmAz*r_431_1 + iz2*(r_430_1 + r_430_2*rie) + rPmQz*r_431_2;
   pOut[220] = PmAx*pOut[165] + 9*iz2*(pOut[120] + r_800_1*rie) + rPmQx*r_900_1;
   pOut[221] = PmAy*pOut[166] + 9*iz2*(pOut[121] + r_080_1*rie) + rPmQy*r_090_1;
   pOut[222] = PmAz*pOut[167] + 9*iz2*(pOut[122] + r_008_1*rie) + rPmQz*r_009_1;
   pOut[223] = PmAy*pOut[165] + rPmQy*r_900_1;
   pOut[224] = PmAx*pOut[166] + rPmQx*r_090_1;
   pOut[225] = PmAz*pOut[165] + rPmQz*r_900_1;
   pOut[226] = PmAx*pOut[167] + rPmQx*r_009_1;
   pOut[227] = PmAz*pOut[166] + rPmQz*r_090_1;
   pOut[228] = PmAy*pOut[167] + rPmQy*r_009_1;
   pOut[229] = PmAy*pOut[170] + iz2*(pOut[120] + r_800_1*rie) + rPmQy*r_810_1;
   pOut[230] = PmAz*pOut[172] + iz2*(pOut[120] + r_800_1*rie) + rPmQz*r_801_1;
   pOut[231] = PmAx*pOut[168] + iz2*(pOut[121] + r_080_1*rie) + rPmQx*r_180_1;
   pOut[232] = PmAx*pOut[169] + iz2*(pOut[122] + r_008_1*rie) + rPmQx*r_108_1;
   pOut[233] = PmAz*pOut[173] + iz2*(pOut[121] + r_080_1*rie) + rPmQz*r_081_1;
   pOut[234] = PmAy*pOut[171] + iz2*(pOut[122] + r_008_1*rie) + rPmQy*r_018_1;
   pOut[235] = PmAy*pOut[174] + 2*iz2*(pOut[123] + r_710_1*rie) + rPmQy*r_720_1;
   pOut[236] = PmAx*pOut[176] + 2*iz2*(pOut[124] + r_170_1*rie) + rPmQx*r_270_1;
   pOut[237] = PmAz*pOut[175] + 2*iz2*(pOut[125] + r_701_1*rie) + rPmQz*r_702_1;
   pOut[238] = PmAx*pOut[178] + 2*iz2*(pOut[126] + r_107_1*rie) + rPmQx*r_207_1;
   pOut[239] = PmAz*pOut[177] + 2*iz2*(pOut[127] + r_071_1*rie) + rPmQz*r_072_1;
   pOut[240] = PmAy*pOut[179] + 2*iz2*(pOut[128] + r_017_1*rie) + rPmQy*r_027_1;
   pOut[241] = PmAy*pOut[182] + 3*iz2*(pOut[129] + r_620_1*rie) + rPmQy*r_630_1;
   pOut[242] = PmAz*pOut[184] + 3*iz2*(pOut[130] + r_602_1*rie) + rPmQz*r_603_1;
   pOut[243] = PmAx*pOut[180] + 3*iz2*(pOut[131] + r_260_1*rie) + rPmQx*r_360_1;
   pOut[244] = PmAx*pOut[181] + 3*iz2*(pOut[132] + r_206_1*rie) + rPmQx*r_306_1;
   pOut[245] = PmAz*pOut[185] + 3*iz2*(pOut[133] + r_062_1*rie) + rPmQz*r_063_1;
   pOut[246] = PmAy*pOut[183] + 3*iz2*(pOut[134] + r_026_1*rie) + rPmQy*r_036_1;
   pOut[247] = PmAy*pOut[186] + 4*iz2*(pOut[135] + r_530_1*rie) + rPmQy*r_540_1;
   pOut[248] = PmAz*pOut[187] + 4*iz2*(pOut[137] + r_503_1*rie) + rPmQz*r_504_1;
   pOut[249] = PmAz*pOut[189] + 4*iz2*(pOut[139] + r_053_1*rie) + rPmQz*r_054_1;
   pOut[250] = PmAy*pOut[169] + rPmQy*r_108_1;
   pOut[251] = PmAz*pOut[168] + rPmQz*r_180_1;
   pOut[252] = PmAz*pOut[170] + rPmQz*r_810_1;
   pOut[253] = PmAy*pOut[175] + rPmQy*r_702_1;
   pOut[254] = PmAx*pOut[177] + rPmQx*r_072_1;
   pOut[255] = PmAz*pOut[174] + rPmQz*r_720_1;
   pOut[256] = PmAx*pOut[179] + rPmQx*r_027_1;
   pOut[257] = PmAz*pOut[176] + rPmQz*r_270_1;
   pOut[258] = PmAy*pOut[178] + rPmQy*r_207_1;
   pOut[259] = PmAy*pOut[181] + rPmQy*r_306_1;
   pOut[260] = PmAx*pOut[183] + rPmQx*r_036_1;
   pOut[261] = PmAz*pOut[180] + rPmQz*r_360_1;
   pOut[262] = PmAx*pOut[185] + rPmQx*r_063_1;
   pOut[263] = PmAz*pOut[182] + rPmQz*r_630_1;
   pOut[264] = PmAy*pOut[184] + rPmQy*r_603_1;
   pOut[265] = PmAy*pOut[187] + rPmQy*r_504_1;
   pOut[266] = PmAx*pOut[189] + rPmQx*r_054_1;
   pOut[267] = PmAz*pOut[186] + rPmQz*r_540_1;
   pOut[268] = PmAx*pOut[191] + rPmQx*r_045_1;
   pOut[269] = PmAz*pOut[188] + rPmQz*r_450_1;
   pOut[270] = PmAy*pOut[190] + rPmQy*r_405_1;
   pOut[271] = PmAy*pOut[197] + iz2*(pOut[130] + r_602_1*rie) + rPmQy*r_612_1;
   pOut[272] = PmAx*pOut[195] + iz2*(pOut[133] + r_062_1*rie) + rPmQx*r_162_1;
   pOut[273] = PmAx*pOut[196] + iz2*(pOut[134] + r_026_1*rie) + rPmQx*r_126_1;
   pOut[274] = PmAz*pOut[201] + iz2*(pOut[135] + r_530_1*rie) + rPmQz*r_531_1;
   pOut[275] = PmAz*pOut[203] + iz2*(pOut[136] + r_350_1*rie) + rPmQz*r_351_1;
   pOut[276] = PmAy*pOut[202] + iz2*(pOut[137] + r_503_1*rie) + rPmQy*r_513_1;
   pOut[277] = PmAy*pOut[204] + iz2*(pOut[138] + r_305_1*rie) + rPmQy*r_315_1;
   pOut[278] = PmAx*pOut[205] + iz2*(pOut[139] + r_053_1*rie) + rPmQx*r_153_1;
   pOut[279] = PmAx*pOut[206] + iz2*(pOut[140] + r_035_1*rie) + rPmQx*r_135_1;
   pOut[280] = PmAz*pOut[209] + iz2*(pOut[141] + r_440_1*rie) + rPmQz*r_441_1;
   pOut[281] = PmAy*pOut[208] + iz2*(pOut[142] + r_404_1*rie) + rPmQy*r_414_1;
   pOut[282] = PmAx*pOut[207] + iz2*(pOut[143] + r_044_1*rie) + rPmQx*r_144_1;
   pOut[283] = PmAy*pOut[214] + 2*iz2*(pOut[153] + r_314_1*rie) + rPmQy*r_324_1;
   pOut[284] = PmAz*pOut[213] + 2*iz2*(pOut[155] + r_341_1*rie) + rPmQz*r_342_1;
   pOut[285] = PmAz*pOut[215] + 2*iz2*(pOut[157] + r_431_1*rie) + rPmQz*r_432_1;
   // 2.82 steps per component, 0.94 kb stack
   if (lab == 10) return;

   // m + lab == 11
   double r_100_a = PmAx*pGm[10] + pGm[11]*rPmQx;
   double r_010_a = PmAy*pGm[10] + pGm[11]*rPmQy;
   double r_001_a = PmAz*pGm[10] + pGm[11]*rPmQz;
   double r_200_9 = PmAx*r_100_9 + iz2*(pGm[10]*rie + pGm[9]) + rPmQx*r_100_a;
   double r_020_9 = PmAy*r_010_9 + iz2*(pGm[10]*rie + pGm[9]) + rPmQy*r_010_a;
   double r_002_9 = PmAz*r_001_9 + iz2*(pGm[10]*rie + pGm[9]) + rPmQz*r_001_a;
   double r_300_8 = PmAx*r_200_8 + 2*iz2*(r_100_8 + r_100_9*rie) + rPmQx*r_200_9;
   double r_030_8 = PmAy*r_020_8 + 2*iz2*(r_010_8 + r_010_9*rie) + rPmQy*r_020_9;
   double r_003_8 = PmAz*r_002_8 + 2*iz2*(r_001_8 + r_001_9*rie) + rPmQz*r_002_9;
   double r_400_7 = PmAx*r_300_7 + 3*iz2*(r_200_7 + r_200_8*rie) + rPmQx*r_300_8;
   double r_040_7 = PmAy*r_030_7 + 3*iz2*(r_020_7 + r_020_8*rie) + rPmQy*r_030_8;
   double r_004_7 = PmAz*r_003_7 + 3*iz2*(r_002_7 + r_002_8*rie) + rPmQz*r_003_8;
   double r_500_6 = PmAx*r_400_6 + 4*iz2*(r_300_6 + r_300_7*rie) + rPmQx*r_400_7;
   double r_050_6 = PmAy*r_040_6 + 4*iz2*(r_030_6 + r_030_7*rie) + rPmQy*r_040_7;
   double r_005_6 = PmAz*r_004_6 + 4*iz2*(r_003_6 + r_003_7*rie) + rPmQz*r_004_7;
   double r_140_6 = PmAx*r_040_6 + rPmQx*r_040_7;
   double r_104_6 = PmAx*r_004_6 + rPmQx*r_004_7;
   double r_014_6 = PmAy*r_004_6 + rPmQy*r_004_7;
   double r_600_5 = PmAx*r_500_5 + 5*iz2*(r_400_5 + r_400_6*rie) + rPmQx*r_500_6;
   double r_060_5 = PmAy*r_050_5 + 5*iz2*(r_040_5 + r_040_6*rie) + rPmQy*r_050_6;
   double r_006_5 = PmAz*r_005_5 + 5*iz2*(r_004_5 + r_004_6*rie) + rPmQz*r_005_6;
   double r_510_5 = PmAy*r_500_5 + rPmQy*r_500_6;
   double r_150_5 = PmAx*r_050_5 + rPmQx*r_050_6;
   double r_501_5 = PmAz*r_500_5 + rPmQz*r_500_6;
   double r_105_5 = PmAx*r_005_5 + rPmQx*r_005_6;
   double r_051_5 = PmAz*r_050_5 + rPmQz*r_050_6;
   double r_015_5 = PmAy*r_005_5 + rPmQy*r_005_6;
   double r_240_5 = PmAx*r_140_5 + iz2*(r_040_5 + r_040_6*rie) + rPmQx*r_140_6;
   double r_204_5 = PmAx*r_104_5 + iz2*(r_004_5 + r_004_6*rie) + rPmQx*r_104_6;
   double r_024_5 = PmAy*r_014_5 + iz2*(r_004_5 + r_004_6*rie) + rPmQy*r_014_6;
   double r_700_4 = PmAx*r_600_4 + 6*iz2*(r_500_4 + r_500_5*rie) + rPmQx*r_600_5;
   double r_070_4 = PmAy*r_060_4 + 6*iz2*(r_050_4 + r_050_5*rie) + rPmQy*r_060_5;
   double r_007_4 = PmAz*r_006_4 + 6*iz2*(r_005_4 + r_005_5*rie) + rPmQz*r_006_5;
   double r_160_4 = PmAx*r_060_4 + rPmQx*r_060_5;
   double r_106_4 = PmAx*r_006_4 + rPmQx*r_006_5;
   double r_610_4 = PmAy*r_600_4 + rPmQy*r_600_5;
   double r_016_4 = PmAy*r_006_4 + rPmQy*r_006_5;
   double r_601_4 = PmAz*r_600_4 + rPmQz*r_600_5;
   double r_061_4 = PmAz*r_060_4 + rPmQz*r_060_5;
   double r_520_4 = PmAy*r_510_4 + iz2*(r_500_4 + r_500_5*rie) + rPmQy*r_510_5;
   double r_502_4 = PmAz*r_501_4 + iz2*(r_500_4 + r_500_5*rie) + rPmQz*r_501_5;
   double r_250_4 = PmAx*r_150_4 + iz2*(r_050_4 + r_050_5*rie) + rPmQx*r_150_5;
   double r_052_4 = PmAz*r_051_4 + iz2*(r_050_4 + r_050_5*rie) + rPmQz*r_051_5;
   double r_205_4 = PmAx*r_105_4 + iz2*(r_005_4 + r_005_5*rie) + rPmQx*r_105_5;
   double r_025_4 = PmAy*r_015_4 + iz2*(r_005_4 + r_005_5*rie) + rPmQy*r_015_5;
   double r_340_4 = PmAx*r_240_4 + 2*iz2*(r_140_4 + r_140_5*rie) + rPmQx*r_240_5;
   double r_304_4 = PmAx*r_204_4 + 2*iz2*(r_104_4 + r_104_5*rie) + rPmQx*r_204_5;
   double r_034_4 = PmAy*r_024_4 + 2*iz2*(r_014_4 + r_014_5*rie) + rPmQy*r_024_5;
   double r_800_3 = PmAx*r_700_3 + 7*iz2*(r_600_3 + r_600_4*rie) + rPmQx*r_700_4;
   double r_080_3 = PmAy*r_070_3 + 7*iz2*(r_060_3 + r_060_4*rie) + rPmQy*r_070_4;
   double r_008_3 = PmAz*r_007_3 + 7*iz2*(r_006_3 + r_006_4*rie) + rPmQz*r_007_4;
   double r_710_3 = PmAy*r_700_3 + rPmQy*r_700_4;
   double r_170_3 = PmAx*r_070_3 + rPmQx*r_070_4;
   double r_701_3 = PmAz*r_700_3 + rPmQz*r_700_4;
   double r_107_3 = PmAx*r_007_3 + rPmQx*r_007_4;
   double r_071_3 = PmAz*r_070_3 + rPmQz*r_070_4;
   double r_017_3 = PmAy*r_007_3 + rPmQy*r_007_4;
   double r_620_3 = PmAy*r_610_3 + iz2*(r_600_3 + r_600_4*rie) + rPmQy*r_610_4;
   double r_602_3 = PmAz*r_601_3 + iz2*(r_600_3 + r_600_4*rie) + rPmQz*r_601_4;
   double r_260_3 = PmAx*r_160_3 + iz2*(r_060_3 + r_060_4*rie) + rPmQx*r_160_4;
   double r_206_3 = PmAx*r_106_3 + iz2*(r_006_3 + r_006_4*rie) + rPmQx*r_106_4;
   double r_062_3 = PmAz*r_061_3 + iz2*(r_060_3 + r_060_4*rie) + rPmQz*r_061_4;
   double r_026_3 = PmAy*r_016_3 + iz2*(r_006_3 + r_006_4*rie) + rPmQy*r_016_4;
   double r_530_3 = PmAy*r_520_3 + 2*iz2*(r_510_3 + r_510_4*rie) + rPmQy*r_520_4;
   double r_350_3 = PmAx*r_250_3 + 2*iz2*(r_150_3 + r_150_4*rie) + rPmQx*r_250_4;
   double r_503_3 = PmAz*r_502_3 + 2*iz2*(r_501_3 + r_501_4*rie) + rPmQz*r_502_4;
   double r_305_3 = PmAx*r_205_3 + 2*iz2*(r_105_3 + r_105_4*rie) + rPmQx*r_205_4;
   double r_053_3 = PmAz*r_052_3 + 2*iz2*(r_051_3 + r_051_4*rie) + rPmQz*r_052_4;
   double r_035_3 = PmAy*r_025_3 + 2*iz2*(r_015_3 + r_015_4*rie) + rPmQy*r_025_4;
   double r_440_3 = PmAx*r_340_3 + 3*iz2*(r_240_3 + r_240_4*rie) + rPmQx*r_340_4;
   double r_404_3 = PmAx*r_304_3 + 3*iz2*(r_204_3 + r_204_4*rie) + rPmQx*r_304_4;
   double r_044_3 = PmAy*r_034_3 + 3*iz2*(r_024_3 + r_024_4*rie) + rPmQy*r_034_4;
   double r_900_2 = PmAx*r_800_2 + 8*iz2*(r_700_2 + r_700_3*rie) + rPmQx*r_800_3;
   double r_090_2 = PmAy*r_080_2 + 8*iz2*(r_070_2 + r_070_3*rie) + rPmQy*r_080_3;
   double r_009_2 = PmAz*r_008_2 + 8*iz2*(r_007_2 + r_007_3*rie) + rPmQz*r_008_3;
   double r_180_2 = PmAx*r_080_2 + rPmQx*r_080_3;
   double r_108_2 = PmAx*r_008_2 + rPmQx*r_008_3;
   double r_810_2 = PmAy*r_800_2 + rPmQy*r_800_3;
   double r_018_2 = PmAy*r_008_2 + rPmQy*r_008_3;
   double r_801_2 = PmAz*r_800_2 + rPmQz*r_800_3;
   double r_081_2 = PmAz*r_080_2 + rPmQz*r_080_3;
   double r_720_2 = PmAy*r_710_2 + iz2*(r_700_2 + r_700_3*rie) + rPmQy*r_710_3;
   double r_702_2 = PmAz*r_701_2 + iz2*(r_700_2 + r_700_3*rie) + rPmQz*r_701_3;
   double r_270_2 = PmAx*r_170_2 + iz2*(r_070_2 + r_070_3*rie) + rPmQx*r_170_3;
   double r_072_2 = PmAz*r_071_2 + iz2*(r_070_2 + r_070_3*rie) + rPmQz*r_071_3;
   double r_207_2 = PmAx*r_107_2 + iz2*(r_007_2 + r_007_3*rie) + rPmQx*r_107_3;
   double r_027_2 = PmAy*r_017_2 + iz2*(r_007_2 + r_007_3*rie) + rPmQy*r_017_3;
   double r_360_2 = PmAx*r_260_2 + 2*iz2*(r_160_2 + r_160_3*rie) + rPmQx*r_260_3;
   double r_306_2 = PmAx*r_206_2 + 2*iz2*(r_106_2 + r_106_3*rie) + rPmQx*r_206_3;
   double r_630_2 = PmAy*r_620_2 + 2*iz2*(r_610_2 + r_610_3*rie) + rPmQy*r_620_3;
   double r_036_2 = PmAy*r_026_2 + 2*iz2*(r_016_2 + r_016_3*rie) + rPmQy*r_026_3;
   double r_603_2 = PmAz*r_602_2 + 2*iz2*(r_601_2 + r_601_3*rie) + rPmQz*r_602_3;
   double r_063_2 = PmAz*r_062_2 + 2*iz2*(r_061_2 + r_061_3*rie) + rPmQz*r_062_3;
   double r_540_2 = PmAy*r_530_2 + 3*iz2*(r_520_2 + r_520_3*rie) + rPmQy*r_530_3;
   double r_504_2 = PmAz*r_503_2 + 3*iz2*(r_502_2 + r_502_3*rie) + rPmQz*r_503_3;
   double r_450_2 = PmAx*r_350_2 + 3*iz2*(r_250_2 + r_250_3*rie) + rPmQx*r_350_3;
   double r_054_2 = PmAz*r_053_2 + 3*iz2*(r_052_2 + r_052_3*rie) + rPmQz*r_053_3;
   double r_405_2 = PmAx*r_305_2 + 3*iz2*(r_205_2 + r_205_3*rie) + rPmQx*r_305_3;
   double r_045_2 = PmAy*r_035_2 + 3*iz2*(r_025_2 + r_025_3*rie) + rPmQy*r_035_3;
   double r_531_2 = PmAz*r_530_2 + rPmQz*r_530_3;
   double r_351_2 = PmAz*r_350_2 + rPmQz*r_350_3;
   double r_315_2 = PmAy*r_305_2 + rPmQy*r_305_3;
   double r_144_2 = PmAx*r_044_2 + rPmQx*r_044_3;
   double r_414_2 = PmAy*r_404_2 + rPmQy*r_404_3;
   double r_441_2 = PmAz*r_440_2 + rPmQz*r_440_3;
   double r_a00_1 = PmAx*r_900_1 + 9*iz2*(r_800_1 + r_800_2*rie) + rPmQx*r_900_2;
   double r_0a0_1 = PmAy*r_090_1 + 9*iz2*(r_080_1 + r_080_2*rie) + rPmQy*r_090_2;
   double r_00a_1 = PmAz*r_009_1 + 9*iz2*(r_008_1 + r_008_2*rie) + rPmQz*r_009_2;
   double r_910_1 = PmAy*r_900_1 + rPmQy*r_900_2;
   double r_190_1 = PmAx*r_090_1 + rPmQx*r_090_2;
   double r_901_1 = PmAz*r_900_1 + rPmQz*r_900_2;
   double r_109_1 = PmAx*r_009_1 + rPmQx*r_009_2;
   double r_091_1 = PmAz*r_090_1 + rPmQz*r_090_2;
   double r_019_1 = PmAy*r_009_1 + rPmQy*r_009_2;
   double r_820_1 = PmAy*r_810_1 + iz2*(r_800_1 + r_800_2*rie) + rPmQy*r_810_2;
   double r_802_1 = PmAz*r_801_1 + iz2*(r_800_1 + r_800_2*rie) + rPmQz*r_801_2;
   double r_280_1 = PmAx*r_180_1 + iz2*(r_080_1 + r_080_2*rie) + rPmQx*r_180_2;
   double r_208_1 = PmAx*r_108_1 + iz2*(r_008_1 + r_008_2*rie) + rPmQx*r_108_2;
   double r_082_1 = PmAz*r_081_1 + iz2*(r_080_1 + r_080_2*rie) + rPmQz*r_081_2;
   double r_028_1 = PmAy*r_018_1 + iz2*(r_008_1 + r_008_2*rie) + rPmQy*r_018_2;
   double r_730_1 = PmAy*r_720_1 + 2*iz2*(r_710_1 + r_710_2*rie) + rPmQy*r_720_2;
   double r_370_1 = PmAx*r_270_1 + 2*iz2*(r_170_1 + r_170_2*rie) + rPmQx*r_270_2;
   double r_703_1 = PmAz*r_702_1 + 2*iz2*(r_701_1 + r_701_2*rie) + rPmQz*r_702_2;
   double r_307_1 = PmAx*r_207_1 + 2*iz2*(r_107_1 + r_107_2*rie) + rPmQx*r_207_2;
   double r_073_1 = PmAz*r_072_1 + 2*iz2*(r_071_1 + r_071_2*rie) + rPmQz*r_072_2;
   double r_037_1 = PmAy*r_027_1 + 2*iz2*(r_017_1 + r_017_2*rie) + rPmQy*r_027_2;
   double r_640_1 = PmAy*r_630_1 + 3*iz2*(r_620_1 + r_620_2*rie) + rPmQy*r_630_2;
   double r_604_1 = PmAz*r_603_1 + 3*iz2*(r_602_1 + r_602_2*rie) + rPmQz*r_603_2;
   double r_460_1 = PmAx*r_360_1 + 3*iz2*(r_260_1 + r_260_2*rie) + rPmQx*r_360_2;
   double r_406_1 = PmAx*r_306_1 + 3*iz2*(r_206_1 + r_206_2*rie) + rPmQx*r_306_2;
   double r_064_1 = PmAz*r_063_1 + 3*iz2*(r_062_1 + r_062_2*rie) + rPmQz*r_063_2;
   double r_046_1 = PmAy*r_036_1 + 3*iz2*(r_026_1 + r_026_2*rie) + rPmQy*r_036_2;
   double r_550_1 = PmAy*r_540_1 + 4*iz2*(r_530_1 + r_530_2*rie) + rPmQy*r_540_2;
   double r_505_1 = PmAz*r_504_1 + 4*iz2*(r_503_1 + r_503_2*rie) + rPmQz*r_504_2;
   double r_055_1 = PmAz*r_054_1 + 4*iz2*(r_053_1 + r_053_2*rie) + rPmQz*r_054_2;
   double r_712_1 = PmAy*r_702_1 + rPmQy*r_702_2;
   double r_172_1 = PmAx*r_072_1 + rPmQx*r_072_2;
   double r_127_1 = PmAx*r_027_1 + rPmQx*r_027_2;
   double r_316_1 = PmAy*r_306_1 + rPmQy*r_306_2;
   double r_136_1 = PmAx*r_036_1 + rPmQx*r_036_2;
   double r_361_1 = PmAz*r_360_1 + rPmQz*r_360_2;
   double r_163_1 = PmAx*r_063_1 + rPmQx*r_063_2;
   double r_631_1 = PmAz*r_630_1 + rPmQz*r_630_2;
   double r_613_1 = PmAy*r_603_1 + rPmQy*r_603_2;
   double r_514_1 = PmAy*r_504_1 + rPmQy*r_504_2;
   double r_154_1 = PmAx*r_054_1 + rPmQx*r_054_2;
   double r_541_1 = PmAz*r_540_1 + rPmQz*r_540_2;
   double r_145_1 = PmAx*r_045_1 + rPmQx*r_045_2;
   double r_451_1 = PmAz*r_450_1 + rPmQz*r_450_2;
   double r_415_1 = PmAy*r_405_1 + rPmQy*r_405_2;
   double r_532_1 = PmAz*r_531_1 + iz2*(r_530_1 + r_530_2*rie) + rPmQz*r_531_2;
   double r_352_1 = PmAz*r_351_1 + iz2*(r_350_1 + r_350_2*rie) + rPmQz*r_351_2;
   double r_325_1 = PmAy*r_315_1 + iz2*(r_305_1 + r_305_2*rie) + rPmQy*r_315_2;
   double r_442_1 = PmAz*r_441_1 + iz2*(r_440_1 + r_440_2*rie) + rPmQz*r_441_2;
   double r_424_1 = PmAy*r_414_1 + iz2*(r_404_1 + r_404_2*rie) + rPmQy*r_414_2;
   double r_244_1 = PmAx*r_144_1 + iz2*(r_044_1 + r_044_2*rie) + rPmQx*r_144_2;
   pOut[286] = PmAx*pOut[220] + 10*iz2*(pOut[165] + r_900_1*rie) + rPmQx*r_a00_1;
   pOut[287] = PmAy*pOut[221] + 10*iz2*(pOut[166] + r_090_1*rie) + rPmQy*r_0a0_1;
   pOut[288] = PmAz*pOut[222] + 10*iz2*(pOut[167] + r_009_1*rie) + rPmQz*r_00a_1;
   pOut[289] = PmAx*pOut[221] + rPmQx*r_0a0_1;
   pOut[290] = PmAx*pOut[222] + rPmQx*r_00a_1;
   pOut[291] = PmAy*pOut[220] + rPmQy*r_a00_1;
   pOut[292] = PmAy*pOut[222] + rPmQy*r_00a_1;
   pOut[293] = PmAz*pOut[220] + rPmQz*r_a00_1;
   pOut[294] = PmAz*pOut[221] + rPmQz*r_0a0_1;
   pOut[295] = PmAy*pOut[223] + iz2*(pOut[165] + r_900_1*rie) + rPmQy*r_910_1;
   pOut[296] = PmAz*pOut[225] + iz2*(pOut[165] + r_900_1*rie) + rPmQz*r_901_1;
   pOut[297] = PmAx*pOut[224] + iz2*(pOut[166] + r_090_1*rie) + rPmQx*r_190_1;
   pOut[298] = PmAz*pOut[227] + iz2*(pOut[166] + r_090_1*rie) + rPmQz*r_091_1;
   pOut[299] = PmAx*pOut[226] + iz2*(pOut[167] + r_009_1*rie) + rPmQx*r_109_1;
   pOut[300] = PmAy*pOut[228] + iz2*(pOut[167] + r_009_1*rie) + rPmQy*r_019_1;
   pOut[301] = PmAx*pOut[231] + 2*iz2*(pOut[168] + r_180_1*rie) + rPmQx*r_280_1;
   pOut[302] = PmAx*pOut[232] + 2*iz2*(pOut[169] + r_108_1*rie) + rPmQx*r_208_1;
   pOut[303] = PmAy*pOut[229] + 2*iz2*(pOut[170] + r_810_1*rie) + rPmQy*r_820_1;
   pOut[304] = PmAy*pOut[234] + 2*iz2*(pOut[171] + r_018_1*rie) + rPmQy*r_028_1;
   pOut[305] = PmAz*pOut[230] + 2*iz2*(pOut[172] + r_801_1*rie) + rPmQz*r_802_1;
   pOut[306] = PmAz*pOut[233] + 2*iz2*(pOut[173] + r_081_1*rie) + rPmQz*r_082_1;
   pOut[307] = PmAy*pOut[235] + 3*iz2*(pOut[174] + r_720_1*rie) + rPmQy*r_730_1;
   pOut[308] = PmAz*pOut[237] + 3*iz2*(pOut[175] + r_702_1*rie) + rPmQz*r_703_1;
   pOut[309] = PmAx*pOut[236] + 3*iz2*(pOut[176] + r_270_1*rie) + rPmQx*r_370_1;
   pOut[310] = PmAz*pOut[239] + 3*iz2*(pOut[177] + r_072_1*rie) + rPmQz*r_073_1;
   pOut[311] = PmAx*pOut[238] + 3*iz2*(pOut[178] + r_207_1*rie) + rPmQx*r_307_1;
   pOut[312] = PmAy*pOut[240] + 3*iz2*(pOut[179] + r_027_1*rie) + rPmQy*r_037_1;
   pOut[313] = PmAx*pOut[243] + 4*iz2*(pOut[180] + r_360_1*rie) + rPmQx*r_460_1;
   pOut[314] = PmAx*pOut[244] + 4*iz2*(pOut[181] + r_306_1*rie) + rPmQx*r_406_1;
   pOut[315] = PmAy*pOut[241] + 4*iz2*(pOut[182] + r_630_1*rie) + rPmQy*r_640_1;
   pOut[316] = PmAy*pOut[246] + 4*iz2*(pOut[183] + r_036_1*rie) + rPmQy*r_046_1;
   pOut[317] = PmAz*pOut[242] + 4*iz2*(pOut[184] + r_603_1*rie) + rPmQz*r_604_1;
   pOut[318] = PmAz*pOut[245] + 4*iz2*(pOut[185] + r_063_1*rie) + rPmQz*r_064_1;
   pOut[319] = PmAz*pOut[223] + rPmQz*r_910_1;
   pOut[320] = PmAz*pOut[224] + rPmQz*r_190_1;
   pOut[321] = PmAy*pOut[226] + rPmQy*r_109_1;
   pOut[322] = PmAx*pOut[233] + rPmQx*r_082_1;
   pOut[323] = PmAx*pOut[234] + rPmQx*r_028_1;
   pOut[324] = PmAy*pOut[230] + rPmQy*r_802_1;
   pOut[325] = PmAy*pOut[232] + rPmQy*r_208_1;
   pOut[326] = PmAz*pOut[229] + rPmQz*r_820_1;
   pOut[327] = PmAz*pOut[231] + rPmQz*r_280_1;
   pOut[328] = PmAz*pOut[235] + rPmQz*r_730_1;
   pOut[329] = PmAy*pOut[237] + rPmQy*r_703_1;
   pOut[330] = PmAz*pOut[236] + rPmQz*r_370_1;
   pOut[331] = PmAy*pOut[238] + rPmQy*r_307_1;
   pOut[332] = PmAx*pOut[239] + rPmQx*r_073_1;
   pOut[333] = PmAx*pOut[240] + rPmQx*r_037_1;
   pOut[334] = PmAx*pOut[245] + rPmQx*r_064_1;
   pOut[335] = PmAx*pOut[246] + rPmQx*r_046_1;
   pOut[336] = PmAy*pOut[242] + rPmQy*r_604_1;
   pOut[337] = PmAy*pOut[244] + rPmQy*r_406_1;
   pOut[338] = PmAz*pOut[241] + rPmQz*r_640_1;
   pOut[339] = PmAz*pOut[243] + rPmQz*r_460_1;
   pOut[340] = PmAz*pOut[247] + rPmQz*r_550_1;
   pOut[341] = PmAy*pOut[248] + rPmQy*r_505_1;
   pOut[342] = PmAx*pOut[249] + rPmQx*r_055_1;
   pOut[343] = PmAy*pOut[253] + iz2*(pOut[175] + r_702_1*rie) + rPmQy*r_712_1;
   pOut[344] = PmAx*pOut[254] + iz2*(pOut[177] + r_072_1*rie) + rPmQx*r_172_1;
   pOut[345] = PmAx*pOut[256] + iz2*(pOut[179] + r_027_1*rie) + rPmQx*r_127_1;
   pOut[346] = PmAz*pOut[261] + iz2*(pOut[180] + r_360_1*rie) + rPmQz*r_361_1;
   pOut[347] = PmAy*pOut[259] + iz2*(pOut[181] + r_306_1*rie) + rPmQy*r_316_1;
   pOut[348] = PmAz*pOut[263] + iz2*(pOut[182] + r_630_1*rie) + rPmQz*r_631_1;
   pOut[349] = PmAx*pOut[260] + iz2*(pOut[183] + r_036_1*rie) + rPmQx*r_136_1;
   pOut[350] = PmAy*pOut[264] + iz2*(pOut[184] + r_603_1*rie) + rPmQy*r_613_1;
   pOut[351] = PmAx*pOut[262] + iz2*(pOut[185] + r_063_1*rie) + rPmQx*r_163_1;
   pOut[352] = PmAz*pOut[267] + iz2*(pOut[186] + r_540_1*rie) + rPmQz*r_541_1;
   pOut[353] = PmAy*pOut[265] + iz2*(pOut[187] + r_504_1*rie) + rPmQy*r_514_1;
   pOut[354] = PmAz*pOut[269] + iz2*(pOut[188] + r_450_1*rie) + rPmQz*r_451_1;
   pOut[355] = PmAx*pOut[266] + iz2*(pOut[189] + r_054_1*rie) + rPmQx*r_154_1;
   pOut[356] = PmAy*pOut[270] + iz2*(pOut[190] + r_405_1*rie) + rPmQy*r_415_1;
   pOut[357] = PmAx*pOut[268] + iz2*(pOut[191] + r_045_1*rie) + rPmQx*r_145_1;
   pOut[358] = PmAz*pOut[274] + 2*iz2*(pOut[201] + r_531_1*rie) + rPmQz*r_532_1;
   pOut[359] = PmAz*pOut[275] + 2*iz2*(pOut[203] + r_351_1*rie) + rPmQz*r_352_1;
   pOut[360] = PmAy*pOut[277] + 2*iz2*(pOut[204] + r_315_1*rie) + rPmQy*r_325_1;
   pOut[361] = PmAx*pOut[282] + 2*iz2*(pOut[207] + r_144_1*rie) + rPmQx*r_244_1;
   pOut[362] = PmAy*pOut[281] + 2*iz2*(pOut[208] + r_414_1*rie) + rPmQy*r_424_1;
   pOut[363] = PmAz*pOut[280] + 2*iz2*(pOut[209] + r_441_1*rie) + rPmQz*r_442_1;
   // 3.00 steps per component, 1.22 kb stack
   if (lab == 11) return;

   // m + lab == 12
   double r_100_b = PmAx*pGm[11] + pGm[12]*rPmQx;
   double r_010_b = PmAy*pGm[11] + pGm[12]*rPmQy;
   double r_001_b = PmAz*pGm[11] + pGm[12]*rPmQz;
   double r_200_a = PmAx*r_100_a + iz2*(pGm[10] + pGm[11]*rie) + rPmQx*r_100_b;
   double r_020_a = PmAy*r_010_a + iz2*(pGm[10] + pGm[11]*rie) + rPmQy*r_010_b;
   double r_002_a = PmAz*r_001_a + iz2*(pGm[10] + pGm[11]*rie) + rPmQz*r_001_b;
   double r_300_9 = PmAx*r_200_9 + 2*iz2*(r_100_9 + r_100_a*rie) + rPmQx*r_200_a;
   double r_030_9 = PmAy*r_020_9 + 2*iz2*(r_010_9 + r_010_a*rie) + rPmQy*r_020_a;
   double r_003_9 = PmAz*r_002_9 + 2*iz2*(r_001_9 + r_001_a*rie) + rPmQz*r_002_a;
   double r_400_8 = PmAx*r_300_8 + 3*iz2*(r_200_8 + r_200_9*rie) + rPmQx*r_300_9;
   double r_040_8 = PmAy*r_030_8 + 3*iz2*(r_020_8 + r_020_9*rie) + rPmQy*r_030_9;
   double r_004_8 = PmAz*r_003_8 + 3*iz2*(r_002_8 + r_002_9*rie) + rPmQz*r_003_9;
   double r_500_7 = PmAx*r_400_7 + 4*iz2*(r_300_7 + r_300_8*rie) + rPmQx*r_400_8;
   double r_050_7 = PmAy*r_040_7 + 4*iz2*(r_030_7 + r_030_8*rie) + rPmQy*r_040_8;
   double r_005_7 = PmAz*r_004_7 + 4*iz2*(r_003_7 + r_003_8*rie) + rPmQz*r_004_8;
   double r_014_7 = PmAy*r_004_7 + rPmQy*r_004_8;
   double r_600_6 = PmAx*r_500_6 + 5*iz2*(r_400_6 + r_400_7*rie) + rPmQx*r_500_7;
   double r_060_6 = PmAy*r_050_6 + 5*iz2*(r_040_6 + r_040_7*rie) + rPmQy*r_050_7;
   double r_006_6 = PmAz*r_005_6 + 5*iz2*(r_004_6 + r_004_7*rie) + rPmQz*r_005_7;
   double r_510_6 = PmAy*r_500_6 + rPmQy*r_500_7;
   double r_150_6 = PmAx*r_050_6 + rPmQx*r_050_7;
   double r_501_6 = PmAz*r_500_6 + rPmQz*r_500_7;
   double r_105_6 = PmAx*r_005_6 + rPmQx*r_005_7;
   double r_051_6 = PmAz*r_050_6 + rPmQz*r_050_7;
   double r_015_6 = PmAy*r_005_6 + rPmQy*r_005_7;
   double r_024_6 = PmAy*r_014_6 + iz2*(r_004_6 + r_004_7*rie) + rPmQy*r_014_7;
   double r_700_5 = PmAx*r_600_5 + 6*iz2*(r_500_5 + r_500_6*rie) + rPmQx*r_600_6;
   double r_070_5 = PmAy*r_060_5 + 6*iz2*(r_050_5 + r_050_6*rie) + rPmQy*r_060_6;
   double r_007_5 = PmAz*r_006_5 + 6*iz2*(r_005_5 + r_005_6*rie) + rPmQz*r_006_6;
   double r_160_5 = PmAx*r_060_5 + rPmQx*r_060_6;
   double r_106_5 = PmAx*r_006_5 + rPmQx*r_006_6;
   double r_610_5 = PmAy*r_600_5 + rPmQy*r_600_6;
   double r_016_5 = PmAy*r_006_5 + rPmQy*r_006_6;
   double r_601_5 = PmAz*r_600_5 + rPmQz*r_600_6;
   double r_061_5 = PmAz*r_060_5 + rPmQz*r_060_6;
   double r_520_5 = PmAy*r_510_5 + iz2*(r_500_5 + r_500_6*rie) + rPmQy*r_510_6;
   double r_502_5 = PmAz*r_501_5 + iz2*(r_500_5 + r_500_6*rie) + rPmQz*r_501_6;
   double r_250_5 = PmAx*r_150_5 + iz2*(r_050_5 + r_050_6*rie) + rPmQx*r_150_6;
   double r_052_5 = PmAz*r_051_5 + iz2*(r_050_5 + r_050_6*rie) + rPmQz*r_051_6;
   double r_205_5 = PmAx*r_105_5 + iz2*(r_005_5 + r_005_6*rie) + rPmQx*r_105_6;
   double r_025_5 = PmAy*r_015_5 + iz2*(r_005_5 + r_005_6*rie) + rPmQy*r_015_6;
   double r_034_5 = PmAy*r_024_5 + 2*iz2*(r_014_5 + r_014_6*rie) + rPmQy*r_024_6;
   double r_800_4 = PmAx*r_700_4 + 7*iz2*(r_600_4 + r_600_5*rie) + rPmQx*r_700_5;
   double r_080_4 = PmAy*r_070_4 + 7*iz2*(r_060_4 + r_060_5*rie) + rPmQy*r_070_5;
   double r_008_4 = PmAz*r_007_4 + 7*iz2*(r_006_4 + r_006_5*rie) + rPmQz*r_007_5;
   double r_710_4 = PmAy*r_700_4 + rPmQy*r_700_5;
   double r_170_4 = PmAx*r_070_4 + rPmQx*r_070_5;
   double r_701_4 = PmAz*r_700_4 + rPmQz*r_700_5;
   double r_107_4 = PmAx*r_007_4 + rPmQx*r_007_5;
   double r_071_4 = PmAz*r_070_4 + rPmQz*r_070_5;
   double r_017_4 = PmAy*r_007_4 + rPmQy*r_007_5;
   double r_620_4 = PmAy*r_610_4 + iz2*(r_600_4 + r_600_5*rie) + rPmQy*r_610_5;
   double r_602_4 = PmAz*r_601_4 + iz2*(r_600_4 + r_600_5*rie) + rPmQz*r_601_5;
   double r_260_4 = PmAx*r_160_4 + iz2*(r_060_4 + r_060_5*rie) + rPmQx*r_160_5;
   double r_206_4 = PmAx*r_106_4 + iz2*(r_006_4 + r_006_5*rie) + rPmQx*r_106_5;
   double r_062_4 = PmAz*r_061_4 + iz2*(r_060_4 + r_060_5*rie) + rPmQz*r_061_5;
   double r_026_4 = PmAy*r_016_4 + iz2*(r_006_4 + r_006_5*rie) + rPmQy*r_016_5;
   double r_530_4 = PmAy*r_520_4 + 2*iz2*(r_510_4 + r_510_5*rie) + rPmQy*r_520_5;
   double r_350_4 = PmAx*r_250_4 + 2*iz2*(r_150_4 + r_150_5*rie) + rPmQx*r_250_5;
   double r_503_4 = PmAz*r_502_4 + 2*iz2*(r_501_4 + r_501_5*rie) + rPmQz*r_502_5;
   double r_305_4 = PmAx*r_205_4 + 2*iz2*(r_105_4 + r_105_5*rie) + rPmQx*r_205_5;
   double r_053_4 = PmAz*r_052_4 + 2*iz2*(r_051_4 + r_051_5*rie) + rPmQz*r_052_5;
   double r_035_4 = PmAy*r_025_4 + 2*iz2*(r_015_4 + r_015_5*rie) + rPmQy*r_025_5;
   double r_044_4 = PmAy*r_034_4 + 3*iz2*(r_024_4 + r_024_5*rie) + rPmQy*r_034_5;
   double r_900_3 = PmAx*r_800_3 + 8*iz2*(r_700_3 + r_700_4*rie) + rPmQx*r_800_4;
   double r_090_3 = PmAy*r_080_3 + 8*iz2*(r_070_3 + r_070_4*rie) + rPmQy*r_080_4;
   double r_009_3 = PmAz*r_008_3 + 8*iz2*(r_007_3 + r_007_4*rie) + rPmQz*r_008_4;
   double r_180_3 = PmAx*r_080_3 + rPmQx*r_080_4;
   double r_108_3 = PmAx*r_008_3 + rPmQx*r_008_4;
   double r_810_3 = PmAy*r_800_3 + rPmQy*r_800_4;
   double r_018_3 = PmAy*r_008_3 + rPmQy*r_008_4;
   double r_801_3 = PmAz*r_800_3 + rPmQz*r_800_4;
   double r_081_3 = PmAz*r_080_3 + rPmQz*r_080_4;
   double r_720_3 = PmAy*r_710_3 + iz2*(r_700_3 + r_700_4*rie) + rPmQy*r_710_4;
   double r_702_3 = PmAz*r_701_3 + iz2*(r_700_3 + r_700_4*rie) + rPmQz*r_701_4;
   double r_270_3 = PmAx*r_170_3 + iz2*(r_070_3 + r_070_4*rie) + rPmQx*r_170_4;
   double r_072_3 = PmAz*r_071_3 + iz2*(r_070_3 + r_070_4*rie) + rPmQz*r_071_4;
   double r_207_3 = PmAx*r_107_3 + iz2*(r_007_3 + r_007_4*rie) + rPmQx*r_107_4;
   double r_027_3 = PmAy*r_017_3 + iz2*(r_007_3 + r_007_4*rie) + rPmQy*r_017_4;
   double r_360_3 = PmAx*r_260_3 + 2*iz2*(r_160_3 + r_160_4*rie) + rPmQx*r_260_4;
   double r_306_3 = PmAx*r_206_3 + 2*iz2*(r_106_3 + r_106_4*rie) + rPmQx*r_206_4;
   double r_630_3 = PmAy*r_620_3 + 2*iz2*(r_610_3 + r_610_4*rie) + rPmQy*r_620_4;
   double r_036_3 = PmAy*r_026_3 + 2*iz2*(r_016_3 + r_016_4*rie) + rPmQy*r_026_4;
   double r_603_3 = PmAz*r_602_3 + 2*iz2*(r_601_3 + r_601_4*rie) + rPmQz*r_602_4;
   double r_063_3 = PmAz*r_062_3 + 2*iz2*(r_061_3 + r_061_4*rie) + rPmQz*r_062_4;
   double r_540_3 = PmAy*r_530_3 + 3*iz2*(r_520_3 + r_520_4*rie) + rPmQy*r_530_4;
   double r_504_3 = PmAz*r_503_3 + 3*iz2*(r_502_3 + r_502_4*rie) + rPmQz*r_503_4;
   double r_450_3 = PmAx*r_350_3 + 3*iz2*(r_250_3 + r_250_4*rie) + rPmQx*r_350_4;
   double r_054_3 = PmAz*r_053_3 + 3*iz2*(r_052_3 + r_052_4*rie) + rPmQz*r_053_4;
   double r_405_3 = PmAx*r_305_3 + 3*iz2*(r_205_3 + r_205_4*rie) + rPmQx*r_305_4;
   double r_045_3 = PmAy*r_035_3 + 3*iz2*(r_025_3 + r_025_4*rie) + rPmQy*r_035_4;
   double r_144_3 = PmAx*r_044_3 + rPmQx*r_044_4;
   double r_a00_2 = PmAx*r_900_2 + 9*iz2*(r_800_2 + r_800_3*rie) + rPmQx*r_900_3;
   double r_0a0_2 = PmAy*r_090_2 + 9*iz2*(r_080_2 + r_080_3*rie) + rPmQy*r_090_3;
   double r_00a_2 = PmAz*r_009_2 + 9*iz2*(r_008_2 + r_008_3*rie) + rPmQz*r_009_3;
   double r_910_2 = PmAy*r_900_2 + rPmQy*r_900_3;
   double r_190_2 = PmAx*r_090_2 + rPmQx*r_090_3;
   double r_901_2 = PmAz*r_900_2 + rPmQz*r_900_3;
   double r_109_2 = PmAx*r_009_2 + rPmQx*r_009_3;
   double r_091_2 = PmAz*r_090_2 + rPmQz*r_090_3;
   double r_019_2 = PmAy*r_009_2 + rPmQy*r_009_3;
   double r_820_2 = PmAy*r_810_2 + iz2*(r_800_2 + r_800_3*rie) + rPmQy*r_810_3;
   double r_802_2 = PmAz*r_801_2 + iz2*(r_800_2 + r_800_3*rie) + rPmQz*r_801_3;
   double r_280_2 = PmAx*r_180_2 + iz2*(r_080_2 + r_080_3*rie) + rPmQx*r_180_3;
   double r_208_2 = PmAx*r_108_2 + iz2*(r_008_2 + r_008_3*rie) + rPmQx*r_108_3;
   double r_082_2 = PmAz*r_081_2 + iz2*(r_080_2 + r_080_3*rie) + rPmQz*r_081_3;
   double r_028_2 = PmAy*r_018_2 + iz2*(r_008_2 + r_008_3*rie) + rPmQy*r_018_3;
   double r_730_2 = PmAy*r_720_2 + 2*iz2*(r_710_2 + r_710_3*rie) + rPmQy*r_720_3;
   double r_370_2 = PmAx*r_270_2 + 2*iz2*(r_170_2 + r_170_3*rie) + rPmQx*r_270_3;
   double r_703_2 = PmAz*r_702_2 + 2*iz2*(r_701_2 + r_701_3*rie) + rPmQz*r_702_3;
   double r_307_2 = PmAx*r_207_2 + 2*iz2*(r_107_2 + r_107_3*rie) + rPmQx*r_207_3;
   double r_073_2 = PmAz*r_072_2 + 2*iz2*(r_071_2 + r_071_3*rie) + rPmQz*r_072_3;
   double r_037_2 = PmAy*r_027_2 + 2*iz2*(r_017_2 + r_017_3*rie) + rPmQy*r_027_3;
   double r_640_2 = PmAy*r_630_2 + 3*iz2*(r_620_2 + r_620_3*rie) + rPmQy*r_630_3;
   double r_604_2 = PmAz*r_603_2 + 3*iz2*(r_602_2 + r_602_3*rie) + rPmQz*r_603_3;
   double r_460_2 = PmAx*r_360_2 + 3*iz2*(r_260_2 + r_260_3*rie) + rPmQx*r_360_3;
   double r_406_2 = PmAx*r_306_2 + 3*iz2*(r_206_2 + r_206_3*rie) + rPmQx*r_306_3;
   double r_064_2 = PmAz*r_063_2 + 3*iz2*(r_062_2 + r_062_3*rie) + rPmQz*r_063_3;
   double r_046_2 = PmAy*r_036_2 + 3*iz2*(r_026_2 + r_026_3*rie) + rPmQy*r_036_3;
   double r_550_2 = PmAy*r_540_2 + 4*iz2*(r_530_2 + r_530_3*rie) + rPmQy*r_540_3;
   double r_505_2 = PmAz*r_504_2 + 4*iz2*(r_503_2 + r_503_3*rie) + rPmQz*r_504_3;
   double r_055_2 = PmAz*r_054_2 + 4*iz2*(r_053_2 + r_053_3*rie) + rPmQz*r_054_3;
   double r_316_2 = PmAy*r_306_2 + rPmQy*r_306_3;
   double r_361_2 = PmAz*r_360_2 + rPmQz*r_360_3;
   double r_631_2 = PmAz*r_630_2 + rPmQz*r_630_3;
   double r_514_2 = PmAy*r_504_2 + rPmQy*r_504_3;
   double r_154_2 = PmAx*r_054_2 + rPmQx*r_054_3;
   double r_541_2 = PmAz*r_540_2 + rPmQz*r_540_3;
   double r_145_2 = PmAx*r_045_2 + rPmQx*r_045_3;
   double r_451_2 = PmAz*r_450_2 + rPmQz*r_450_3;
   double r_415_2 = PmAy*r_405_2 + rPmQy*r_405_3;
   double r_244_2 = PmAx*r_144_2 + iz2*(r_044_2 + r_044_3*rie) + rPmQx*r_144_3;
   double r_b00_1 = PmAx*r_a00_1 + 10*iz2*(r_900_1 + r_900_2*rie) + rPmQx*r_a00_2;
   double r_0b0_1 = PmAy*r_0a0_1 + 10*iz2*(r_090_1 + r_090_2*rie) + rPmQy*r_0a0_2;
   double r_00b_1 = PmAz*r_00a_1 + 10*iz2*(r_009_1 + r_009_2*rie) + rPmQz*r_00a_2;
   double r_1a0_1 = PmAx*r_0a0_1 + rPmQx*r_0a0_2;
   double r_10a_1 = PmAx*r_00a_1 + rPmQx*r_00a_2;
   double r_a10_1 = PmAy*r_a00_1 + rPmQy*r_a00_2;
   double r_01a_1 = PmAy*r_00a_1 + rPmQy*r_00a_2;
   double r_a01_1 = PmAz*r_a00_1 + rPmQz*r_a00_2;
   double r_0a1_1 = PmAz*r_0a0_1 + rPmQz*r_0a0_2;
   double r_920_1 = PmAy*r_910_1 + iz2*(r_900_1 + r_900_2*rie) + rPmQy*r_910_2;
   double r_902_1 = PmAz*r_901_1 + iz2*(r_900_1 + r_900_2*rie) + rPmQz*r_901_2;
   double r_290_1 = PmAx*r_190_1 + iz2*(r_090_1 + r_090_2*rie) + rPmQx*r_190_2;
   double r_092_1 = PmAz*r_091_1 + iz2*(r_090_1 + r_090_2*rie) + rPmQz*r_091_2;
   double r_209_1 = PmAx*r_109_1 + iz2*(r_009_1 + r_009_2*rie) + rPmQx*r_109_2;
   double r_029_1 = PmAy*r_019_1 + iz2*(r_009_1 + r_009_2*rie) + rPmQy*r_019_2;
   double r_380_1 = PmAx*r_280_1 + 2*iz2*(r_180_1 + r_180_2*rie) + rPmQx*r_280_2;
   double r_308_1 = PmAx*r_208_1 + 2*iz2*(r_108_1 + r_108_2*rie) + rPmQx*r_208_2;
   double r_830_1 = PmAy*r_820_1 + 2*iz2*(r_810_1 + r_810_2*rie) + rPmQy*r_820_2;
   double r_038_1 = PmAy*r_028_1 + 2*iz2*(r_018_1 + r_018_2*rie) + rPmQy*r_028_2;
   double r_803_1 = PmAz*r_802_1 + 2*iz2*(r_801_1 + r_801_2*rie) + rPmQz*r_802_2;
   double r_083_1 = PmAz*r_082_1 + 2*iz2*(r_081_1 + r_081_2*rie) + rPmQz*r_082_2;
   double r_740_1 = PmAy*r_730_1 + 3*iz2*(r_720_1 + r_720_2*rie) + rPmQy*r_730_2;
   double r_704_1 = PmAz*r_703_1 + 3*iz2*(r_702_1 + r_702_2*rie) + rPmQz*r_703_2;
   double r_470_1 = PmAx*r_370_1 + 3*iz2*(r_270_1 + r_270_2*rie) + rPmQx*r_370_2;
   double r_074_1 = PmAz*r_073_1 + 3*iz2*(r_072_1 + r_072_2*rie) + rPmQz*r_073_2;
   double r_407_1 = PmAx*r_307_1 + 3*iz2*(r_207_1 + r_207_2*rie) + rPmQx*r_307_2;
   double r_047_1 = PmAy*r_037_1 + 3*iz2*(r_027_1 + r_027_2*rie) + rPmQy*r_037_2;
   double r_560_1 = PmAx*r_460_1 + 4*iz2*(r_360_1 + r_360_2*rie) + rPmQx*r_460_2;
   double r_506_1 = PmAx*r_406_1 + 4*iz2*(r_306_1 + r_306_2*rie) + rPmQx*r_406_2;
   double r_650_1 = PmAy*r_640_1 + 4*iz2*(r_630_1 + r_630_2*rie) + rPmQy*r_640_2;
   double r_056_1 = PmAy*r_046_1 + 4*iz2*(r_036_1 + r_036_2*rie) + rPmQy*r_046_2;
   double r_605_1 = PmAz*r_604_1 + 4*iz2*(r_603_1 + r_603_2*rie) + rPmQz*r_604_2;
   double r_065_1 = PmAz*r_064_1 + 4*iz2*(r_063_1 + r_063_2*rie) + rPmQz*r_064_2;
   double r_182_1 = PmAx*r_082_1 + rPmQx*r_082_2;
   double r_128_1 = PmAx*r_028_1 + rPmQx*r_028_2;
   double r_812_1 = PmAy*r_802_1 + rPmQy*r_802_2;
   double r_731_1 = PmAz*r_730_1 + rPmQz*r_730_2;
   double r_713_1 = PmAy*r_703_1 + rPmQy*r_703_2;
   double r_371_1 = PmAz*r_370_1 + rPmQz*r_370_2;
   double r_317_1 = PmAy*r_307_1 + rPmQy*r_307_2;
   double r_173_1 = PmAx*r_073_1 + rPmQx*r_073_2;
   double r_137_1 = PmAx*r_037_1 + rPmQx*r_037_2;
   double r_164_1 = PmAx*r_064_1 + rPmQx*r_064_2;
   double r_146_1 = PmAx*r_046_1 + rPmQx*r_046_2;
   double r_614_1 = PmAy*r_604_1 + rPmQy*r_604_2;
   double r_416_1 = PmAy*r_406_1 + rPmQy*r_406_2;
   double r_641_1 = PmAz*r_640_1 + rPmQz*r_640_2;
   double r_461_1 = PmAz*r_460_1 + rPmQz*r_460_2;
   double r_551_1 = PmAz*r_550_1 + rPmQz*r_550_2;
   double r_515_1 = PmAy*r_505_1 + rPmQy*r_505_2;
   double r_155_1 = PmAx*r_055_1 + rPmQx*r_055_2;
   double r_362_1 = PmAz*r_361_1 + iz2*(r_360_1 + r_360_2*rie) + rPmQz*r_361_2;
   double r_326_1 = PmAy*r_316_1 + iz2*(r_306_1 + r_306_2*rie) + rPmQy*r_316_2;
   double r_632_1 = PmAz*r_631_1 + iz2*(r_630_1 + r_630_2*rie) + rPmQz*r_631_2;
   double r_542_1 = PmAz*r_541_1 + iz2*(r_540_1 + r_540_2*rie) + rPmQz*r_541_2;
   double r_524_1 = PmAy*r_514_1 + iz2*(r_504_1 + r_504_2*rie) + rPmQy*r_514_2;
   double r_452_1 = PmAz*r_451_1 + iz2*(r_450_1 + r_450_2*rie) + rPmQz*r_451_2;
   double r_254_1 = PmAx*r_154_1 + iz2*(r_054_1 + r_054_2*rie) + rPmQx*r_154_2;
   double r_425_1 = PmAy*r_415_1 + iz2*(r_405_1 + r_405_2*rie) + rPmQy*r_415_2;
   double r_245_1 = PmAx*r_145_1 + iz2*(r_045_1 + r_045_2*rie) + rPmQx*r_145_2;
   double r_344_1 = PmAx*r_244_1 + 2*iz2*(r_144_1 + r_144_2*rie) + rPmQx*r_244_2;
   pOut[364] = PmAx*pOut[286] + 11*iz2*(pOut[220] + r_a00_1*rie) + rPmQx*r_b00_1;
   pOut[365] = PmAy*pOut[287] + 11*iz2*(pOut[221] + r_0a0_1*rie) + rPmQy*r_0b0_1;
   pOut[366] = PmAz*pOut[288] + 11*iz2*(pOut[222] + r_00a_1*rie) + rPmQz*r_00b_1;
   pOut[367] = PmAy*pOut[286] + rPmQy*r_b00_1;
   pOut[368] = PmAx*pOut[287] + rPmQx*r_0b0_1;
   pOut[369] = PmAz*pOut[286] + rPmQz*r_b00_1;
   pOut[370] = PmAx*pOut[288] + rPmQx*r_00b_1;
   pOut[371] = PmAz*pOut[287] + rPmQz*r_0b0_1;
   pOut[372] = PmAy*pOut[288] + rPmQy*r_00b_1;
   pOut[373] = PmAy*pOut[291] + iz2*(pOut[220] + r_a00_1*rie) + rPmQy*r_a10_1;
   pOut[374] = PmAz*pOut[293] + iz2*(pOut[220] + r_a00_1*rie) + rPmQz*r_a01_1;
   pOut[375] = PmAx*pOut[289] + iz2*(pOut[221] + r_0a0_1*rie) + rPmQx*r_1a0_1;
   pOut[376] = PmAx*pOut[290] + iz2*(pOut[222] + r_00a_1*rie) + rPmQx*r_10a_1;
   pOut[377] = PmAz*pOut[294] + iz2*(pOut[221] + r_0a0_1*rie) + rPmQz*r_0a1_1;
   pOut[378] = PmAy*pOut[292] + iz2*(pOut[222] + r_00a_1*rie) + rPmQy*r_01a_1;
   pOut[379] = PmAy*pOut[295] + 2*iz2*(pOut[223] + r_910_1*rie) + rPmQy*r_920_1;
   pOut[380] = PmAx*pOut[297] + 2*iz2*(pOut[224] + r_190_1*rie) + rPmQx*r_290_1;
   pOut[381] = PmAz*pOut[296] + 2*iz2*(pOut[225] + r_901_1*rie) + rPmQz*r_902_1;
   pOut[382] = PmAx*pOut[299] + 2*iz2*(pOut[226] + r_109_1*rie) + rPmQx*r_209_1;
   pOut[383] = PmAz*pOut[298] + 2*iz2*(pOut[227] + r_091_1*rie) + rPmQz*r_092_1;
   pOut[384] = PmAy*pOut[300] + 2*iz2*(pOut[228] + r_019_1*rie) + rPmQy*r_029_1;
   pOut[385] = PmAy*pOut[303] + 3*iz2*(pOut[229] + r_820_1*rie) + rPmQy*r_830_1;
   pOut[386] = PmAz*pOut[305] + 3*iz2*(pOut[230] + r_802_1*rie) + rPmQz*r_803_1;
   pOut[387] = PmAx*pOut[301] + 3*iz2*(pOut[231] + r_280_1*rie) + rPmQx*r_380_1;
   pOut[388] = PmAx*pOut[302] + 3*iz2*(pOut[232] + r_208_1*rie) + rPmQx*r_308_1;
   pOut[389] = PmAz*pOut[306] + 3*iz2*(pOut[233] + r_082_1*rie) + rPmQz*r_083_1;
   pOut[390] = PmAy*pOut[304] + 3*iz2*(pOut[234] + r_028_1*rie) + rPmQy*r_038_1;
   pOut[391] = PmAy*pOut[307] + 4*iz2*(pOut[235] + r_730_1*rie) + rPmQy*r_740_1;
   pOut[392] = PmAx*pOut[309] + 4*iz2*(pOut[236] + r_370_1*rie) + rPmQx*r_470_1;
   pOut[393] = PmAz*pOut[308] + 4*iz2*(pOut[237] + r_703_1*rie) + rPmQz*r_704_1;
   pOut[394] = PmAx*pOut[311] + 4*iz2*(pOut[238] + r_307_1*rie) + rPmQx*r_407_1;
   pOut[395] = PmAz*pOut[310] + 4*iz2*(pOut[239] + r_073_1*rie) + rPmQz*r_074_1;
   pOut[396] = PmAy*pOut[312] + 4*iz2*(pOut[240] + r_037_1*rie) + rPmQy*r_047_1;
   pOut[397] = PmAx*pOut[313] + 5*iz2*(pOut[243] + r_460_1*rie) + rPmQx*r_560_1;
   pOut[398] = PmAx*pOut[314] + 5*iz2*(pOut[244] + r_406_1*rie) + rPmQx*r_506_1;
   pOut[399] = PmAy*pOut[316] + 5*iz2*(pOut[246] + r_046_1*rie) + rPmQy*r_056_1;
   pOut[400] = PmAy*pOut[290] + rPmQy*r_10a_1;
   pOut[401] = PmAz*pOut[289] + rPmQz*r_1a0_1;
   pOut[402] = PmAz*pOut[291] + rPmQz*r_a10_1;
   pOut[403] = PmAy*pOut[296] + rPmQy*r_902_1;
   pOut[404] = PmAx*pOut[298] + rPmQx*r_092_1;
   pOut[405] = PmAz*pOut[295] + rPmQz*r_920_1;
   pOut[406] = PmAx*pOut[300] + rPmQx*r_029_1;
   pOut[407] = PmAz*pOut[297] + rPmQz*r_290_1;
   pOut[408] = PmAy*pOut[299] + rPmQy*r_209_1;
   pOut[409] = PmAy*pOut[302] + rPmQy*r_308_1;
   pOut[410] = PmAx*pOut[304] + rPmQx*r_038_1;
   pOut[411] = PmAz*pOut[301] + rPmQz*r_380_1;
   pOut[412] = PmAx*pOut[306] + rPmQx*r_083_1;
   pOut[413] = PmAz*pOut[303] + rPmQz*r_830_1;
   pOut[414] = PmAy*pOut[305] + rPmQy*r_803_1;
   pOut[415] = PmAy*pOut[308] + rPmQy*r_704_1;
   pOut[416] = PmAx*pOut[310] + rPmQx*r_074_1;
   pOut[417] = PmAz*pOut[307] + rPmQz*r_740_1;
   pOut[418] = PmAx*pOut[312] + rPmQx*r_047_1;
   pOut[419] = PmAz*pOut[309] + rPmQz*r_470_1;
   pOut[420] = PmAy*pOut[311] + rPmQy*r_407_1;
   pOut[421] = PmAy*pOut[314] + rPmQy*r_506_1;
   pOut[422] = PmAx*pOut[316] + rPmQx*r_056_1;
   pOut[423] = PmAz*pOut[313] + rPmQz*r_560_1;
   pOut[424] = PmAx*pOut[318] + rPmQx*r_065_1;
   pOut[425] = PmAz*pOut[315] + rPmQz*r_650_1;
   pOut[426] = PmAy*pOut[317] + rPmQy*r_605_1;
   pOut[427] = PmAy*pOut[324] + iz2*(pOut[230] + r_802_1*rie) + rPmQy*r_812_1;
   pOut[428] = PmAx*pOut[322] + iz2*(pOut[233] + r_082_1*rie) + rPmQx*r_182_1;
   pOut[429] = PmAx*pOut[323] + iz2*(pOut[234] + r_028_1*rie) + rPmQx*r_128_1;
   pOut[430] = PmAz*pOut[328] + iz2*(pOut[235] + r_730_1*rie) + rPmQz*r_731_1;
   pOut[431] = PmAz*pOut[330] + iz2*(pOut[236] + r_370_1*rie) + rPmQz*r_371_1;
   pOut[432] = PmAy*pOut[329] + iz2*(pOut[237] + r_703_1*rie) + rPmQy*r_713_1;
   pOut[433] = PmAy*pOut[331] + iz2*(pOut[238] + r_307_1*rie) + rPmQy*r_317_1;
   pOut[434] = PmAx*pOut[332] + iz2*(pOut[239] + r_073_1*rie) + rPmQx*r_173_1;
   pOut[435] = PmAx*pOut[333] + iz2*(pOut[240] + r_037_1*rie) + rPmQx*r_137_1;
   pOut[436] = PmAz*pOut[338] + iz2*(pOut[241] + r_640_1*rie) + rPmQz*r_641_1;
   pOut[437] = PmAy*pOut[336] + iz2*(pOut[242] + r_604_1*rie) + rPmQy*r_614_1;
   pOut[438] = PmAz*pOut[339] + iz2*(pOut[243] + r_460_1*rie) + rPmQz*r_461_1;
   pOut[439] = PmAy*pOut[337] + iz2*(pOut[244] + r_406_1*rie) + rPmQy*r_416_1;
   pOut[440] = PmAx*pOut[334] + iz2*(pOut[245] + r_064_1*rie) + rPmQx*r_164_1;
   pOut[441] = PmAx*pOut[335] + iz2*(pOut[246] + r_046_1*rie) + rPmQx*r_146_1;
   pOut[442] = PmAz*pOut[340] + iz2*(pOut[247] + r_550_1*rie) + rPmQz*r_551_1;
   pOut[443] = PmAy*pOut[341] + iz2*(pOut[248] + r_505_1*rie) + rPmQy*r_515_1;
   pOut[444] = PmAx*pOut[342] + iz2*(pOut[249] + r_055_1*rie) + rPmQx*r_155_1;
   pOut[445] = PmAy*pOut[347] + 2*iz2*(pOut[259] + r_316_1*rie) + rPmQy*r_326_1;
   pOut[446] = PmAz*pOut[346] + 2*iz2*(pOut[261] + r_361_1*rie) + rPmQz*r_362_1;
   pOut[447] = PmAz*pOut[348] + 2*iz2*(pOut[263] + r_631_1*rie) + rPmQz*r_632_1;
   pOut[448] = PmAy*pOut[353] + 2*iz2*(pOut[265] + r_514_1*rie) + rPmQy*r_524_1;
   pOut[449] = PmAx*pOut[355] + 2*iz2*(pOut[266] + r_154_1*rie) + rPmQx*r_254_1;
   pOut[450] = PmAz*pOut[352] + 2*iz2*(pOut[267] + r_541_1*rie) + rPmQz*r_542_1;
   pOut[451] = PmAx*pOut[357] + 2*iz2*(pOut[268] + r_145_1*rie) + rPmQx*r_245_1;
   pOut[452] = PmAz*pOut[354] + 2*iz2*(pOut[269] + r_451_1*rie) + rPmQz*r_452_1;
   pOut[453] = PmAy*pOut[356] + 2*iz2*(pOut[270] + r_415_1*rie) + rPmQy*r_425_1;
   pOut[454] = PmAx*pOut[361] + 3*iz2*(pOut[282] + r_244_1*rie) + rPmQx*r_344_1;
   // 3.12 steps per component, 1.51 kb stack
   if (lab == 12) return;

   // m + lab == 13
   double r_100_c = PmAx*pGm[12] + pGm[13]*rPmQx;
   double r_010_c = PmAy*pGm[12] + pGm[13]*rPmQy;
   double r_001_c = PmAz*pGm[12] + pGm[13]*rPmQz;
   double r_200_b = PmAx*r_100_b + iz2*(pGm[11] + pGm[12]*rie) + rPmQx*r_100_c;
   double r_020_b = PmAy*r_010_b + iz2*(pGm[11] + pGm[12]*rie) + rPmQy*r_010_c;
   double r_002_b = PmAz*r_001_b + iz2*(pGm[11] + pGm[12]*rie) + rPmQz*r_001_c;
   double r_300_a = PmAx*r_200_a + 2*iz2*(r_100_a + r_100_b*rie) + rPmQx*r_200_b;
   double r_030_a = PmAy*r_020_a + 2*iz2*(r_010_a + r_010_b*rie) + rPmQy*r_020_b;
   double r_003_a = PmAz*r_002_a + 2*iz2*(r_001_a + r_001_b*rie) + rPmQz*r_002_b;
   double r_400_9 = PmAx*r_300_9 + 3*iz2*(r_200_9 + r_200_a*rie) + rPmQx*r_300_a;
   double r_040_9 = PmAy*r_030_9 + 3*iz2*(r_020_9 + r_020_a*rie) + rPmQy*r_030_a;
   double r_004_9 = PmAz*r_003_9 + 3*iz2*(r_002_9 + r_002_a*rie) + rPmQz*r_003_a;
   double r_500_8 = PmAx*r_400_8 + 4*iz2*(r_300_8 + r_300_9*rie) + rPmQx*r_400_9;
   double r_050_8 = PmAy*r_040_8 + 4*iz2*(r_030_8 + r_030_9*rie) + rPmQy*r_040_9;
   double r_005_8 = PmAz*r_004_8 + 4*iz2*(r_003_8 + r_003_9*rie) + rPmQz*r_004_9;
   double r_600_7 = PmAx*r_500_7 + 5*iz2*(r_400_7 + r_400_8*rie) + rPmQx*r_500_8;
   double r_060_7 = PmAy*r_050_7 + 5*iz2*(r_040_7 + r_040_8*rie) + rPmQy*r_050_8;
   double r_006_7 = PmAz*r_005_7 + 5*iz2*(r_004_7 + r_004_8*rie) + rPmQz*r_005_8;
   double r_510_7 = PmAy*r_500_7 + rPmQy*r_500_8;
   double r_501_7 = PmAz*r_500_7 + rPmQz*r_500_8;
   double r_051_7 = PmAz*r_050_7 + rPmQz*r_050_8;
   double r_015_7 = PmAy*r_005_7 + rPmQy*r_005_8;
   double r_700_6 = PmAx*r_600_6 + 6*iz2*(r_500_6 + r_500_7*rie) + rPmQx*r_600_7;
   double r_070_6 = PmAy*r_060_6 + 6*iz2*(r_050_6 + r_050_7*rie) + rPmQy*r_060_7;
   double r_007_6 = PmAz*r_006_6 + 6*iz2*(r_005_6 + r_005_7*rie) + rPmQz*r_006_7;
   double r_160_6 = PmAx*r_060_6 + rPmQx*r_060_7;
   double r_106_6 = PmAx*r_006_6 + rPmQx*r_006_7;
   double r_610_6 = PmAy*r_600_6 + rPmQy*r_600_7;
   double r_016_6 = PmAy*r_006_6 + rPmQy*r_006_7;
   double r_601_6 = PmAz*r_600_6 + rPmQz*r_600_7;
   double r_061_6 = PmAz*r_060_6 + rPmQz*r_060_7;
   double r_520_6 = PmAy*r_510_6 + iz2*(r_500_6 + r_500_7*rie) + rPmQy*r_510_7;
   double r_502_6 = PmAz*r_501_6 + iz2*(r_500_6 + r_500_7*rie) + rPmQz*r_501_7;
   double r_052_6 = PmAz*r_051_6 + iz2*(r_050_6 + r_050_7*rie) + rPmQz*r_051_7;
   double r_025_6 = PmAy*r_015_6 + iz2*(r_005_6 + r_005_7*rie) + rPmQy*r_015_7;
   double r_800_5 = PmAx*r_700_5 + 7*iz2*(r_600_5 + r_600_6*rie) + rPmQx*r_700_6;
   double r_080_5 = PmAy*r_070_5 + 7*iz2*(r_060_5 + r_060_6*rie) + rPmQy*r_070_6;
   double r_008_5 = PmAz*r_007_5 + 7*iz2*(r_006_5 + r_006_6*rie) + rPmQz*r_007_6;
   double r_710_5 = PmAy*r_700_5 + rPmQy*r_700_6;
   double r_170_5 = PmAx*r_070_5 + rPmQx*r_070_6;
   double r_701_5 = PmAz*r_700_5 + rPmQz*r_700_6;
   double r_107_5 = PmAx*r_007_5 + rPmQx*r_007_6;
   double r_071_5 = PmAz*r_070_5 + rPmQz*r_070_6;
   double r_017_5 = PmAy*r_007_5 + rPmQy*r_007_6;
   double r_620_5 = PmAy*r_610_5 + iz2*(r_600_5 + r_600_6*rie) + rPmQy*r_610_6;
   double r_602_5 = PmAz*r_601_5 + iz2*(r_600_5 + r_600_6*rie) + rPmQz*r_601_6;
   double r_260_5 = PmAx*r_160_5 + iz2*(r_060_5 + r_060_6*rie) + rPmQx*r_160_6;
   double r_206_5 = PmAx*r_106_5 + iz2*(r_006_5 + r_006_6*rie) + rPmQx*r_106_6;
   double r_062_5 = PmAz*r_061_5 + iz2*(r_060_5 + r_060_6*rie) + rPmQz*r_061_6;
   double r_026_5 = PmAy*r_016_5 + iz2*(r_006_5 + r_006_6*rie) + rPmQy*r_016_6;
   double r_530_5 = PmAy*r_520_5 + 2*iz2*(r_510_5 + r_510_6*rie) + rPmQy*r_520_6;
   double r_503_5 = PmAz*r_502_5 + 2*iz2*(r_501_5 + r_501_6*rie) + rPmQz*r_502_6;
   double r_053_5 = PmAz*r_052_5 + 2*iz2*(r_051_5 + r_051_6*rie) + rPmQz*r_052_6;
   double r_035_5 = PmAy*r_025_5 + 2*iz2*(r_015_5 + r_015_6*rie) + rPmQy*r_025_6;
   double r_900_4 = PmAx*r_800_4 + 8*iz2*(r_700_4 + r_700_5*rie) + rPmQx*r_800_5;
   double r_090_4 = PmAy*r_080_4 + 8*iz2*(r_070_4 + r_070_5*rie) + rPmQy*r_080_5;
   double r_009_4 = PmAz*r_008_4 + 8*iz2*(r_007_4 + r_007_5*rie) + rPmQz*r_008_5;
   double r_180_4 = PmAx*r_080_4 + rPmQx*r_080_5;
   double r_108_4 = PmAx*r_008_4 + rPmQx*r_008_5;
   double r_810_4 = PmAy*r_800_4 + rPmQy*r_800_5;
   double r_018_4 = PmAy*r_008_4 + rPmQy*r_008_5;
   double r_801_4 = PmAz*r_800_4 + rPmQz*r_800_5;
   double r_081_4 = PmAz*r_080_4 + rPmQz*r_080_5;
   double r_720_4 = PmAy*r_710_4 + iz2*(r_700_4 + r_700_5*rie) + rPmQy*r_710_5;
   double r_702_4 = PmAz*r_701_4 + iz2*(r_700_4 + r_700_5*rie) + rPmQz*r_701_5;
   double r_270_4 = PmAx*r_170_4 + iz2*(r_070_4 + r_070_5*rie) + rPmQx*r_170_5;
   double r_072_4 = PmAz*r_071_4 + iz2*(r_070_4 + r_070_5*rie) + rPmQz*r_071_5;
   double r_207_4 = PmAx*r_107_4 + iz2*(r_007_4 + r_007_5*rie) + rPmQx*r_107_5;
   double r_027_4 = PmAy*r_017_4 + iz2*(r_007_4 + r_007_5*rie) + rPmQy*r_017_5;
   double r_360_4 = PmAx*r_260_4 + 2*iz2*(r_160_4 + r_160_5*rie) + rPmQx*r_260_5;
   double r_306_4 = PmAx*r_206_4 + 2*iz2*(r_106_4 + r_106_5*rie) + rPmQx*r_206_5;
   double r_630_4 = PmAy*r_620_4 + 2*iz2*(r_610_4 + r_610_5*rie) + rPmQy*r_620_5;
   double r_036_4 = PmAy*r_026_4 + 2*iz2*(r_016_4 + r_016_5*rie) + rPmQy*r_026_5;
   double r_603_4 = PmAz*r_602_4 + 2*iz2*(r_601_4 + r_601_5*rie) + rPmQz*r_602_5;
   double r_063_4 = PmAz*r_062_4 + 2*iz2*(r_061_4 + r_061_5*rie) + rPmQz*r_062_5;
   double r_540_4 = PmAy*r_530_4 + 3*iz2*(r_520_4 + r_520_5*rie) + rPmQy*r_530_5;
   double r_504_4 = PmAz*r_503_4 + 3*iz2*(r_502_4 + r_502_5*rie) + rPmQz*r_503_5;
   double r_054_4 = PmAz*r_053_4 + 3*iz2*(r_052_4 + r_052_5*rie) + rPmQz*r_053_5;
   double r_045_4 = PmAy*r_035_4 + 3*iz2*(r_025_4 + r_025_5*rie) + rPmQy*r_035_5;
   double r_a00_3 = PmAx*r_900_3 + 9*iz2*(r_800_3 + r_800_4*rie) + rPmQx*r_900_4;
   double r_0a0_3 = PmAy*r_090_3 + 9*iz2*(r_080_3 + r_080_4*rie) + rPmQy*r_090_4;
   double r_00a_3 = PmAz*r_009_3 + 9*iz2*(r_008_3 + r_008_4*rie) + rPmQz*r_009_4;
   double r_910_3 = PmAy*r_900_3 + rPmQy*r_900_4;
   double r_190_3 = PmAx*r_090_3 + rPmQx*r_090_4;
   double r_901_3 = PmAz*r_900_3 + rPmQz*r_900_4;
   double r_109_3 = PmAx*r_009_3 + rPmQx*r_009_4;
   double r_091_3 = PmAz*r_090_3 + rPmQz*r_090_4;
   double r_019_3 = PmAy*r_009_3 + rPmQy*r_009_4;
   double r_820_3 = PmAy*r_810_3 + iz2*(r_800_3 + r_800_4*rie) + rPmQy*r_810_4;
   double r_802_3 = PmAz*r_801_3 + iz2*(r_800_3 + r_800_4*rie) + rPmQz*r_801_4;
   double r_280_3 = PmAx*r_180_3 + iz2*(r_080_3 + r_080_4*rie) + rPmQx*r_180_4;
   double r_208_3 = PmAx*r_108_3 + iz2*(r_008_3 + r_008_4*rie) + rPmQx*r_108_4;
   double r_082_3 = PmAz*r_081_3 + iz2*(r_080_3 + r_080_4*rie) + rPmQz*r_081_4;
   double r_028_3 = PmAy*r_018_3 + iz2*(r_008_3 + r_008_4*rie) + rPmQy*r_018_4;
   double r_730_3 = PmAy*r_720_3 + 2*iz2*(r_710_3 + r_710_4*rie) + rPmQy*r_720_4;
   double r_370_3 = PmAx*r_270_3 + 2*iz2*(r_170_3 + r_170_4*rie) + rPmQx*r_270_4;
   double r_703_3 = PmAz*r_702_3 + 2*iz2*(r_701_3 + r_701_4*rie) + rPmQz*r_702_4;
   double r_307_3 = PmAx*r_207_3 + 2*iz2*(r_107_3 + r_107_4*rie) + rPmQx*r_207_4;
   double r_073_3 = PmAz*r_072_3 + 2*iz2*(r_071_3 + r_071_4*rie) + rPmQz*r_072_4;
   double r_037_3 = PmAy*r_027_3 + 2*iz2*(r_017_3 + r_017_4*rie) + rPmQy*r_027_4;
   double r_640_3 = PmAy*r_630_3 + 3*iz2*(r_620_3 + r_620_4*rie) + rPmQy*r_630_4;
   double r_604_3 = PmAz*r_603_3 + 3*iz2*(r_602_3 + r_602_4*rie) + rPmQz*r_603_4;
   double r_460_3 = PmAx*r_360_3 + 3*iz2*(r_260_3 + r_260_4*rie) + rPmQx*r_360_4;
   double r_406_3 = PmAx*r_306_3 + 3*iz2*(r_206_3 + r_206_4*rie) + rPmQx*r_306_4;
   double r_064_3 = PmAz*r_063_3 + 3*iz2*(r_062_3 + r_062_4*rie) + rPmQz*r_063_4;
   double r_046_3 = PmAy*r_036_3 + 3*iz2*(r_026_3 + r_026_4*rie) + rPmQy*r_036_4;
   double r_550_3 = PmAy*r_540_3 + 4*iz2*(r_530_3 + r_530_4*rie) + rPmQy*r_540_4;
   double r_505_3 = PmAz*r_504_3 + 4*iz2*(r_503_3 + r_503_4*rie) + rPmQz*r_504_4;
   double r_055_3 = PmAz*r_054_3 + 4*iz2*(r_053_3 + r_053_4*rie) + rPmQz*r_054_4;
   double r_514_3 = PmAy*r_504_3 + rPmQy*r_504_4;
   double r_154_3 = PmAx*r_054_3 + rPmQx*r_054_4;
   double r_145_3 = PmAx*r_045_3 + rPmQx*r_045_4;
   double r_b00_2 = PmAx*r_a00_2 + 10*iz2*(r_900_2 + r_900_3*rie) + rPmQx*r_a00_3;
   double r_0b0_2 = PmAy*r_0a0_2 + 10*iz2*(r_090_2 + r_090_3*rie) + rPmQy*r_0a0_3;
   double r_00b_2 = PmAz*r_00a_2 + 10*iz2*(r_009_2 + r_009_3*rie) + rPmQz*r_00a_3;
   double r_1a0_2 = PmAx*r_0a0_2 + rPmQx*r_0a0_3;
   double r_10a_2 = PmAx*r_00a_2 + rPmQx*r_00a_3;
   double r_a10_2 = PmAy*r_a00_2 + rPmQy*r_a00_3;
   double r_01a_2 = PmAy*r_00a_2 + rPmQy*r_00a_3;
   double r_a01_2 = PmAz*r_a00_2 + rPmQz*r_a00_3;
   double r_0a1_2 = PmAz*r_0a0_2 + rPmQz*r_0a0_3;
   double r_920_2 = PmAy*r_910_2 + iz2*(r_900_2 + r_900_3*rie) + rPmQy*r_910_3;
   double r_902_2 = PmAz*r_901_2 + iz2*(r_900_2 + r_900_3*rie) + rPmQz*r_901_3;
   double r_290_2 = PmAx*r_190_2 + iz2*(r_090_2 + r_090_3*rie) + rPmQx*r_190_3;
   double r_092_2 = PmAz*r_091_2 + iz2*(r_090_2 + r_090_3*rie) + rPmQz*r_091_3;
   double r_209_2 = PmAx*r_109_2 + iz2*(r_009_2 + r_009_3*rie) + rPmQx*r_109_3;
   double r_029_2 = PmAy*r_019_2 + iz2*(r_009_2 + r_009_3*rie) + rPmQy*r_019_3;
   double r_380_2 = PmAx*r_280_2 + 2*iz2*(r_180_2 + r_180_3*rie) + rPmQx*r_280_3;
   double r_308_2 = PmAx*r_208_2 + 2*iz2*(r_108_2 + r_108_3*rie) + rPmQx*r_208_3;
   double r_830_2 = PmAy*r_820_2 + 2*iz2*(r_810_2 + r_810_3*rie) + rPmQy*r_820_3;
   double r_038_2 = PmAy*r_028_2 + 2*iz2*(r_018_2 + r_018_3*rie) + rPmQy*r_028_3;
   double r_803_2 = PmAz*r_802_2 + 2*iz2*(r_801_2 + r_801_3*rie) + rPmQz*r_802_3;
   double r_083_2 = PmAz*r_082_2 + 2*iz2*(r_081_2 + r_081_3*rie) + rPmQz*r_082_3;
   double r_740_2 = PmAy*r_730_2 + 3*iz2*(r_720_2 + r_720_3*rie) + rPmQy*r_730_3;
   double r_704_2 = PmAz*r_703_2 + 3*iz2*(r_702_2 + r_702_3*rie) + rPmQz*r_703_3;
   double r_470_2 = PmAx*r_370_2 + 3*iz2*(r_270_2 + r_270_3*rie) + rPmQx*r_370_3;
   double r_074_2 = PmAz*r_073_2 + 3*iz2*(r_072_2 + r_072_3*rie) + rPmQz*r_073_3;
   double r_407_2 = PmAx*r_307_2 + 3*iz2*(r_207_2 + r_207_3*rie) + rPmQx*r_307_3;
   double r_047_2 = PmAy*r_037_2 + 3*iz2*(r_027_2 + r_027_3*rie) + rPmQy*r_037_3;
   double r_560_2 = PmAx*r_460_2 + 4*iz2*(r_360_2 + r_360_3*rie) + rPmQx*r_460_3;
   double r_506_2 = PmAx*r_406_2 + 4*iz2*(r_306_2 + r_306_3*rie) + rPmQx*r_406_3;
   double r_650_2 = PmAy*r_640_2 + 4*iz2*(r_630_2 + r_630_3*rie) + rPmQy*r_640_3;
   double r_056_2 = PmAy*r_046_2 + 4*iz2*(r_036_2 + r_036_3*rie) + rPmQy*r_046_3;
   double r_605_2 = PmAz*r_604_2 + 4*iz2*(r_603_2 + r_603_3*rie) + rPmQz*r_604_3;
   double r_065_2 = PmAz*r_064_2 + 4*iz2*(r_063_2 + r_063_3*rie) + rPmQz*r_064_3;
   double r_731_2 = PmAz*r_730_2 + rPmQz*r_730_3;
   double r_371_2 = PmAz*r_370_2 + rPmQz*r_370_3;
   double r_317_2 = PmAy*r_307_2 + rPmQy*r_307_3;
   double r_164_2 = PmAx*r_064_2 + rPmQx*r_064_3;
   double r_146_2 = PmAx*r_046_2 + rPmQx*r_046_3;
   double r_614_2 = PmAy*r_604_2 + rPmQy*r_604_3;
   double r_416_2 = PmAy*r_406_2 + rPmQy*r_406_3;
   double r_641_2 = PmAz*r_640_2 + rPmQz*r_640_3;
   double r_461_2 = PmAz*r_460_2 + rPmQz*r_460_3;
   double r_551_2 = PmAz*r_550_2 + rPmQz*r_550_3;
   double r_515_2 = PmAy*r_505_2 + rPmQy*r_505_3;
   double r_155_2 = PmAx*r_055_2 + rPmQx*r_055_3;
   double r_524_2 = PmAy*r_514_2 + iz2*(r_504_2 + r_504_3*rie) + rPmQy*r_514_3;
   double r_254_2 = PmAx*r_154_2 + iz2*(r_054_2 + r_054_3*rie) + rPmQx*r_154_3;
   double r_245_2 = PmAx*r_145_2 + iz2*(r_045_2 + r_045_3*rie) + rPmQx*r_145_3;
   double r_c00_1 = PmAx*r_b00_1 + 11*iz2*(r_a00_1 + r_a00_2*rie) + rPmQx*r_b00_2;
   double r_0c0_1 = PmAy*r_0b0_1 + 11*iz2*(r_0a0_1 + r_0a0_2*rie) + rPmQy*r_0b0_2;
   double r_00c_1 = PmAz*r_00b_1 + 11*iz2*(r_00a_1 + r_00a_2*rie) + rPmQz*r_00b_2;
   double r_b10_1 = PmAy*r_b00_1 + rPmQy*r_b00_2;
   double r_1b0_1 = PmAx*r_0b0_1 + rPmQx*r_0b0_2;
   double r_b01_1 = PmAz*r_b00_1 + rPmQz*r_b00_2;
   double r_10b_1 = PmAx*r_00b_1 + rPmQx*r_00b_2;
   double r_0b1_1 = PmAz*r_0b0_1 + rPmQz*r_0b0_2;
   double r_01b_1 = PmAy*r_00b_1 + rPmQy*r_00b_2;
   double r_a20_1 = PmAy*r_a10_1 + iz2*(r_a00_1 + r_a00_2*rie) + rPmQy*r_a10_2;
   double r_a02_1 = PmAz*r_a01_1 + iz2*(r_a00_1 + r_a00_2*rie) + rPmQz*r_a01_2;
   double r_2a0_1 = PmAx*r_1a0_1 + iz2*(r_0a0_1 + r_0a0_2*rie) + rPmQx*r_1a0_2;
   double r_20a_1 = PmAx*r_10a_1 + iz2*(r_00a_1 + r_00a_2*rie) + rPmQx*r_10a_2;
   double r_0a2_1 = PmAz*r_0a1_1 + iz2*(r_0a0_1 + r_0a0_2*rie) + rPmQz*r_0a1_2;
   double r_02a_1 = PmAy*r_01a_1 + iz2*(r_00a_1 + r_00a_2*rie) + rPmQy*r_01a_2;
   double r_930_1 = PmAy*r_920_1 + 2*iz2*(r_910_1 + r_910_2*rie) + rPmQy*r_920_2;
   double r_390_1 = PmAx*r_290_1 + 2*iz2*(r_190_1 + r_190_2*rie) + rPmQx*r_290_2;
   double r_903_1 = PmAz*r_902_1 + 2*iz2*(r_901_1 + r_901_2*rie) + rPmQz*r_902_2;
   double r_309_1 = PmAx*r_209_1 + 2*iz2*(r_109_1 + r_109_2*rie) + rPmQx*r_209_2;
   double r_093_1 = PmAz*r_092_1 + 2*iz2*(r_091_1 + r_091_2*rie) + rPmQz*r_092_2;
   double r_039_1 = PmAy*r_029_1 + 2*iz2*(r_019_1 + r_019_2*rie) + rPmQy*r_029_2;
   double r_840_1 = PmAy*r_830_1 + 3*iz2*(r_820_1 + r_820_2*rie) + rPmQy*r_830_2;
   double r_804_1 = PmAz*r_803_1 + 3*iz2*(r_802_1 + r_802_2*rie) + rPmQz*r_803_2;
   double r_480_1 = PmAx*r_380_1 + 3*iz2*(r_280_1 + r_280_2*rie) + rPmQx*r_380_2;
   double r_408_1 = PmAx*r_308_1 + 3*iz2*(r_208_1 + r_208_2*rie) + rPmQx*r_308_2;
   double r_084_1 = PmAz*r_083_1 + 3*iz2*(r_082_1 + r_082_2*rie) + rPmQz*r_083_2;
   double r_048_1 = PmAy*r_038_1 + 3*iz2*(r_028_1 + r_028_2*rie) + rPmQy*r_038_2;
   double r_750_1 = PmAy*r_740_1 + 4*iz2*(r_730_1 + r_730_2*rie) + rPmQy*r_740_2;
   double r_570_1 = PmAx*r_470_1 + 4*iz2*(r_370_1 + r_370_2*rie) + rPmQx*r_470_2;
   double r_705_1 = PmAz*r_704_1 + 4*iz2*(r_703_1 + r_703_2*rie) + rPmQz*r_704_2;
   double r_507_1 = PmAx*r_407_1 + 4*iz2*(r_307_1 + r_307_2*rie) + rPmQx*r_407_2;
   double r_075_1 = PmAz*r_074_1 + 4*iz2*(r_073_1 + r_073_2*rie) + rPmQz*r_074_2;
   double r_057_1 = PmAy*r_047_1 + 4*iz2*(r_037_1 + r_037_2*rie) + rPmQy*r_047_2;
   double r_660_1 = PmAx*r_560_1 + 5*iz2*(r_460_1 + r_460_2*rie) + rPmQx*r_560_2;
   double r_606_1 = PmAx*r_506_1 + 5*iz2*(r_406_1 + r_406_2*rie) + rPmQx*r_506_2;
   double r_066_1 = PmAy*r_056_1 + 5*iz2*(r_046_1 + r_046_2*rie) + rPmQy*r_056_2;
   double r_912_1 = PmAy*r_902_1 + rPmQy*r_902_2;
   double r_192_1 = PmAx*r_092_1 + rPmQx*r_092_2;
   double r_129_1 = PmAx*r_029_1 + rPmQx*r_029_2;
   double r_318_1 = PmAy*r_308_1 + rPmQy*r_308_2;
   double r_138_1 = PmAx*r_038_1 + rPmQx*r_038_2;
   double r_381_1 = PmAz*r_380_1 + rPmQz*r_380_2;
   double r_183_1 = PmAx*r_083_1 + rPmQx*r_083_2;
   double r_831_1 = PmAz*r_830_1 + rPmQz*r_830_2;
   double r_813_1 = PmAy*r_803_1 + rPmQy*r_803_2;
   double r_714_1 = PmAy*r_704_1 + rPmQy*r_704_2;
   double r_174_1 = PmAx*r_074_1 + rPmQx*r_074_2;
   double r_741_1 = PmAz*r_740_1 + rPmQz*r_740_2;
   double r_147_1 = PmAx*r_047_1 + rPmQx*r_047_2;
   double r_471_1 = PmAz*r_470_1 + rPmQz*r_470_2;
   double r_417_1 = PmAy*r_407_1 + rPmQy*r_407_2;
   double r_516_1 = PmAy*r_506_1 + rPmQy*r_506_2;
   double r_156_1 = PmAx*r_056_1 + rPmQx*r_056_2;
   double r_561_1 = PmAz*r_560_1 + rPmQz*r_560_2;
   double r_165_1 = PmAx*r_065_1 + rPmQx*r_065_2;
   double r_651_1 = PmAz*r_650_1 + rPmQz*r_650_2;
   double r_615_1 = PmAy*r_605_1 + rPmQy*r_605_2;
   double r_732_1 = PmAz*r_731_1 + iz2*(r_730_1 + r_730_2*rie) + rPmQz*r_731_2;
   double r_372_1 = PmAz*r_371_1 + iz2*(r_370_1 + r_370_2*rie) + rPmQz*r_371_2;
   double r_327_1 = PmAy*r_317_1 + iz2*(r_307_1 + r_307_2*rie) + rPmQy*r_317_2;
   double r_642_1 = PmAz*r_641_1 + iz2*(r_640_1 + r_640_2*rie) + rPmQz*r_641_2;
   double r_624_1 = PmAy*r_614_1 + iz2*(r_604_1 + r_604_2*rie) + rPmQy*r_614_2;
   double r_462_1 = PmAz*r_461_1 + iz2*(r_460_1 + r_460_2*rie) + rPmQz*r_461_2;
   double r_426_1 = PmAy*r_416_1 + iz2*(r_406_1 + r_406_2*rie) + rPmQy*r_416_2;
   double r_264_1 = PmAx*r_164_1 + iz2*(r_064_1 + r_064_2*rie) + rPmQx*r_164_2;
   double r_246_1 = PmAx*r_146_1 + iz2*(r_046_1 + r_046_2*rie) + rPmQx*r_146_2;
   double r_552_1 = PmAz*r_551_1 + iz2*(r_550_1 + r_550_2*rie) + rPmQz*r_551_2;
   double r_525_1 = PmAy*r_515_1 + iz2*(r_505_1 + r_505_2*rie) + rPmQy*r_515_2;
   double r_255_1 = PmAx*r_155_1 + iz2*(r_055_1 + r_055_2*rie) + rPmQx*r_155_2;
   double r_534_1 = PmAy*r_524_1 + 2*iz2*(r_514_1 + r_514_2*rie) + rPmQy*r_524_2;
   double r_354_1 = PmAx*r_254_1 + 2*iz2*(r_154_1 + r_154_2*rie) + rPmQx*r_254_2;
   double r_345_1 = PmAx*r_245_1 + 2*iz2*(r_145_1 + r_145_2*rie) + rPmQx*r_245_2;
   pOut[455] = PmAx*pOut[364] + 12*iz2*(pOut[286] + r_b00_1*rie) + rPmQx*r_c00_1;
   pOut[456] = PmAy*pOut[365] + 12*iz2*(pOut[287] + r_0b0_1*rie) + rPmQy*r_0c0_1;
   pOut[457] = PmAz*pOut[366] + 12*iz2*(pOut[288] + r_00b_1*rie) + rPmQz*r_00c_1;
   pOut[458] = PmAx*pOut[365] + rPmQx*r_0c0_1;
   pOut[459] = PmAx*pOut[366] + rPmQx*r_00c_1;
   pOut[460] = PmAy*pOut[364] + rPmQy*r_c00_1;
   pOut[461] = PmAy*pOut[366] + rPmQy*r_00c_1;
   pOut[462] = PmAz*pOut[364] + rPmQz*r_c00_1;
   pOut[463] = PmAz*pOut[365] + rPmQz*r_0c0_1;
   pOut[464] = PmAy*pOut[367] + iz2*(pOut[286] + r_b00_1*rie) + rPmQy*r_b10_1;
   pOut[465] = PmAz*pOut[369] + iz2*(pOut[286] + r_b00_1*rie) + rPmQz*r_b01_1;
   pOut[466] = PmAx*pOut[368] + iz2*(pOut[287] + r_0b0_1*rie) + rPmQx*r_1b0_1;
   pOut[467] = PmAz*pOut[371] + iz2*(pOut[287] + r_0b0_1*rie) + rPmQz*r_0b1_1;
   pOut[468] = PmAx*pOut[370] + iz2*(pOut[288] + r_00b_1*rie) + rPmQx*r_10b_1;
   pOut[469] = PmAy*pOut[372] + iz2*(pOut[288] + r_00b_1*rie) + rPmQy*r_01b_1;
   pOut[470] = PmAx*pOut[375] + 2*iz2*(pOut[289] + r_1a0_1*rie) + rPmQx*r_2a0_1;
   pOut[471] = PmAx*pOut[376] + 2*iz2*(pOut[290] + r_10a_1*rie) + rPmQx*r_20a_1;
   pOut[472] = PmAy*pOut[373] + 2*iz2*(pOut[291] + r_a10_1*rie) + rPmQy*r_a20_1;
   pOut[473] = PmAy*pOut[378] + 2*iz2*(pOut[292] + r_01a_1*rie) + rPmQy*r_02a_1;
   pOut[474] = PmAz*pOut[374] + 2*iz2*(pOut[293] + r_a01_1*rie) + rPmQz*r_a02_1;
   pOut[475] = PmAz*pOut[377] + 2*iz2*(pOut[294] + r_0a1_1*rie) + rPmQz*r_0a2_1;
   pOut[476] = PmAy*pOut[379] + 3*iz2*(pOut[295] + r_920_1*rie) + rPmQy*r_930_1;
   pOut[477] = PmAz*pOut[381] + 3*iz2*(pOut[296] + r_902_1*rie) + rPmQz*r_903_1;
   pOut[478] = PmAx*pOut[380] + 3*iz2*(pOut[297] + r_290_1*rie) + rPmQx*r_390_1;
   pOut[479] = PmAz*pOut[383] + 3*iz2*(pOut[298] + r_092_1*rie) + rPmQz*r_093_1;
   pOut[480] = PmAx*pOut[382] + 3*iz2*(pOut[299] + r_209_1*rie) + rPmQx*r_309_1;
   pOut[481] = PmAy*pOut[384] + 3*iz2*(pOut[300] + r_029_1*rie) + rPmQy*r_039_1;
   pOut[482] = PmAx*pOut[387] + 4*iz2*(pOut[301] + r_380_1*rie) + rPmQx*r_480_1;
   pOut[483] = PmAx*pOut[388] + 4*iz2*(pOut[302] + r_308_1*rie) + rPmQx*r_408_1;
   pOut[484] = PmAy*pOut[385] + 4*iz2*(pOut[303] + r_830_1*rie) + rPmQy*r_840_1;
   pOut[485] = PmAy*pOut[390] + 4*iz2*(pOut[304] + r_038_1*rie) + rPmQy*r_048_1;
   pOut[486] = PmAz*pOut[386] + 4*iz2*(pOut[305] + r_803_1*rie) + rPmQz*r_804_1;
   pOut[487] = PmAz*pOut[389] + 4*iz2*(pOut[306] + r_083_1*rie) + rPmQz*r_084_1;
   pOut[488] = PmAy*pOut[391] + 5*iz2*(pOut[307] + r_740_1*rie) + rPmQy*r_750_1;
   pOut[489] = PmAz*pOut[393] + 5*iz2*(pOut[308] + r_704_1*rie) + rPmQz*r_705_1;
   pOut[490] = PmAx*pOut[392] + 5*iz2*(pOut[309] + r_470_1*rie) + rPmQx*r_570_1;
   pOut[491] = PmAz*pOut[395] + 5*iz2*(pOut[310] + r_074_1*rie) + rPmQz*r_075_1;
   pOut[492] = PmAx*pOut[394] + 5*iz2*(pOut[311] + r_407_1*rie) + rPmQx*r_507_1;
   pOut[493] = PmAy*pOut[396] + 5*iz2*(pOut[312] + r_047_1*rie) + rPmQy*r_057_1;
   pOut[494] = PmAz*pOut[367] + rPmQz*r_b10_1;
   pOut[495] = PmAz*pOut[368] + rPmQz*r_1b0_1;
   pOut[496] = PmAy*pOut[370] + rPmQy*r_10b_1;
   pOut[497] = PmAx*pOut[377] + rPmQx*r_0a2_1;
   pOut[498] = PmAx*pOut[378] + rPmQx*r_02a_1;
   pOut[499] = PmAy*pOut[374] + rPmQy*r_a02_1;
   pOut[500] = PmAy*pOut[376] + rPmQy*r_20a_1;
   pOut[501] = PmAz*pOut[373] + rPmQz*r_a20_1;
   pOut[502] = PmAz*pOut[375] + rPmQz*r_2a0_1;
   pOut[503] = PmAz*pOut[379] + rPmQz*r_930_1;
   pOut[504] = PmAy*pOut[381] + rPmQy*r_903_1;
   pOut[505] = PmAz*pOut[380] + rPmQz*r_390_1;
   pOut[506] = PmAy*pOut[382] + rPmQy*r_309_1;
   pOut[507] = PmAx*pOut[383] + rPmQx*r_093_1;
   pOut[508] = PmAx*pOut[384] + rPmQx*r_039_1;
   pOut[509] = PmAx*pOut[389] + rPmQx*r_084_1;
   pOut[510] = PmAx*pOut[390] + rPmQx*r_048_1;
   pOut[511] = PmAy*pOut[386] + rPmQy*r_804_1;
   pOut[512] = PmAy*pOut[388] + rPmQy*r_408_1;
   pOut[513] = PmAz*pOut[385] + rPmQz*r_840_1;
   pOut[514] = PmAz*pOut[387] + rPmQz*r_480_1;
   pOut[515] = PmAz*pOut[391] + rPmQz*r_750_1;
   pOut[516] = PmAy*pOut[393] + rPmQy*r_705_1;
   pOut[517] = PmAz*pOut[392] + rPmQz*r_570_1;
   pOut[518] = PmAy*pOut[394] + rPmQy*r_507_1;
   pOut[519] = PmAx*pOut[395] + rPmQx*r_075_1;
   pOut[520] = PmAx*pOut[396] + rPmQx*r_057_1;
   pOut[521] = PmAx*pOut[399] + rPmQx*r_066_1;
   pOut[522] = PmAy*pOut[398] + rPmQy*r_606_1;
   pOut[523] = PmAz*pOut[397] + rPmQz*r_660_1;
   pOut[524] = PmAy*pOut[403] + iz2*(pOut[296] + r_902_1*rie) + rPmQy*r_912_1;
   pOut[525] = PmAx*pOut[404] + iz2*(pOut[298] + r_092_1*rie) + rPmQx*r_192_1;
   pOut[526] = PmAx*pOut[406] + iz2*(pOut[300] + r_029_1*rie) + rPmQx*r_129_1;
   pOut[527] = PmAz*pOut[411] + iz2*(pOut[301] + r_380_1*rie) + rPmQz*r_381_1;
   pOut[528] = PmAy*pOut[409] + iz2*(pOut[302] + r_308_1*rie) + rPmQy*r_318_1;
   pOut[529] = PmAz*pOut[413] + iz2*(pOut[303] + r_830_1*rie) + rPmQz*r_831_1;
   pOut[530] = PmAx*pOut[410] + iz2*(pOut[304] + r_038_1*rie) + rPmQx*r_138_1;
   pOut[531] = PmAy*pOut[414] + iz2*(pOut[305] + r_803_1*rie) + rPmQy*r_813_1;
   pOut[532] = PmAx*pOut[412] + iz2*(pOut[306] + r_083_1*rie) + rPmQx*r_183_1;
   pOut[533] = PmAz*pOut[417] + iz2*(pOut[307] + r_740_1*rie) + rPmQz*r_741_1;
   pOut[534] = PmAy*pOut[415] + iz2*(pOut[308] + r_704_1*rie) + rPmQy*r_714_1;
   pOut[535] = PmAz*pOut[419] + iz2*(pOut[309] + r_470_1*rie) + rPmQz*r_471_1;
   pOut[536] = PmAx*pOut[416] + iz2*(pOut[310] + r_074_1*rie) + rPmQx*r_174_1;
   pOut[537] = PmAy*pOut[420] + iz2*(pOut[311] + r_407_1*rie) + rPmQy*r_417_1;
   pOut[538] = PmAx*pOut[418] + iz2*(pOut[312] + r_047_1*rie) + rPmQx*r_147_1;
   pOut[539] = PmAz*pOut[423] + iz2*(pOut[313] + r_560_1*rie) + rPmQz*r_561_1;
   pOut[540] = PmAy*pOut[421] + iz2*(pOut[314] + r_506_1*rie) + rPmQy*r_516_1;
   pOut[541] = PmAz*pOut[425] + iz2*(pOut[315] + r_650_1*rie) + rPmQz*r_651_1;
   pOut[542] = PmAx*pOut[422] + iz2*(pOut[316] + r_056_1*rie) + rPmQx*r_156_1;
   pOut[543] = PmAy*pOut[426] + iz2*(pOut[317] + r_605_1*rie) + rPmQy*r_615_1;
   pOut[544] = PmAx*pOut[424] + iz2*(pOut[318] + r_065_1*rie) + rPmQx*r_165_1;
   pOut[545] = PmAz*pOut[430] + 2*iz2*(pOut[328] + r_731_1*rie) + rPmQz*r_732_1;
   pOut[546] = PmAz*pOut[431] + 2*iz2*(pOut[330] + r_371_1*rie) + rPmQz*r_372_1;
   pOut[547] = PmAy*pOut[433] + 2*iz2*(pOut[331] + r_317_1*rie) + rPmQy*r_327_1;
   pOut[548] = PmAx*pOut[440] + 2*iz2*(pOut[334] + r_164_1*rie) + rPmQx*r_264_1;
   pOut[549] = PmAx*pOut[441] + 2*iz2*(pOut[335] + r_146_1*rie) + rPmQx*r_246_1;
   pOut[550] = PmAy*pOut[437] + 2*iz2*(pOut[336] + r_614_1*rie) + rPmQy*r_624_1;
   pOut[551] = PmAy*pOut[439] + 2*iz2*(pOut[337] + r_416_1*rie) + rPmQy*r_426_1;
   pOut[552] = PmAz*pOut[436] + 2*iz2*(pOut[338] + r_641_1*rie) + rPmQz*r_642_1;
   pOut[553] = PmAz*pOut[438] + 2*iz2*(pOut[339] + r_461_1*rie) + rPmQz*r_462_1;
   pOut[554] = PmAz*pOut[442] + 2*iz2*(pOut[340] + r_551_1*rie) + rPmQz*r_552_1;
   pOut[555] = PmAy*pOut[443] + 2*iz2*(pOut[341] + r_515_1*rie) + rPmQy*r_525_1;
   pOut[556] = PmAx*pOut[444] + 2*iz2*(pOut[342] + r_155_1*rie) + rPmQx*r_255_1;
   pOut[557] = PmAy*pOut[448] + 3*iz2*(pOut[353] + r_524_1*rie) + rPmQy*r_534_1;
   pOut[558] = PmAx*pOut[449] + 3*iz2*(pOut[355] + r_254_1*rie) + rPmQx*r_354_1;
   pOut[559] = PmAx*pOut[451] + 3*iz2*(pOut[357] + r_245_1*rie) + rPmQx*r_345_1;
   // 3.21 steps per component, 1.81 kb stack
   if (lab == 13) return;

   // m + lab == 14
   double r_100_d = PmAx*pGm[13] + pGm[14]*rPmQx;
   double r_010_d = PmAy*pGm[13] + pGm[14]*rPmQy;
   double r_001_d = PmAz*pGm[13] + pGm[14]*rPmQz;
   double r_200_c = PmAx*r_100_c + iz2*(pGm[12] + pGm[13]*rie) + rPmQx*r_100_d;
   double r_020_c = PmAy*r_010_c + iz2*(pGm[12] + pGm[13]*rie) + rPmQy*r_010_d;
   double r_002_c = PmAz*r_001_c + iz2*(pGm[12] + pGm[13]*rie) + rPmQz*r_001_d;
   double r_300_b = PmAx*r_200_b + 2*iz2*(r_100_b + r_100_c*rie) + rPmQx*r_200_c;
   double r_030_b = PmAy*r_020_b + 2*iz2*(r_010_b + r_010_c*rie) + rPmQy*r_020_c;
   double r_003_b = PmAz*r_002_b + 2*iz2*(r_001_b + r_001_c*rie) + rPmQz*r_002_c;
   double r_400_a = PmAx*r_300_a + 3*iz2*(r_200_a + r_200_b*rie) + rPmQx*r_300_b;
   double r_040_a = PmAy*r_030_a + 3*iz2*(r_020_a + r_020_b*rie) + rPmQy*r_030_b;
   double r_004_a = PmAz*r_003_a + 3*iz2*(r_002_a + r_002_b*rie) + rPmQz*r_003_b;
   double r_500_9 = PmAx*r_400_9 + 4*iz2*(r_300_9 + r_300_a*rie) + rPmQx*r_400_a;
   double r_050_9 = PmAy*r_040_9 + 4*iz2*(r_030_9 + r_030_a*rie) + rPmQy*r_040_a;
   double r_005_9 = PmAz*r_004_9 + 4*iz2*(r_003_9 + r_003_a*rie) + rPmQz*r_004_a;
   double r_600_8 = PmAx*r_500_8 + 5*iz2*(r_400_8 + r_400_9*rie) + rPmQx*r_500_9;
   double r_060_8 = PmAy*r_050_8 + 5*iz2*(r_040_8 + r_040_9*rie) + rPmQy*r_050_9;
   double r_006_8 = PmAz*r_005_8 + 5*iz2*(r_004_8 + r_004_9*rie) + rPmQz*r_005_9;
   double r_510_8 = PmAy*r_500_8 + rPmQy*r_500_9;
   double r_501_8 = PmAz*r_500_8 + rPmQz*r_500_9;
   double r_051_8 = PmAz*r_050_8 + rPmQz*r_050_9;
   double r_700_7 = PmAx*r_600_7 + 6*iz2*(r_500_7 + r_500_8*rie) + rPmQx*r_600_8;
   double r_070_7 = PmAy*r_060_7 + 6*iz2*(r_050_7 + r_050_8*rie) + rPmQy*r_060_8;
   double r_007_7 = PmAz*r_006_7 + 6*iz2*(r_005_7 + r_005_8*rie) + rPmQz*r_006_8;
   double r_160_7 = PmAx*r_060_7 + rPmQx*r_060_8;
   double r_106_7 = PmAx*r_006_7 + rPmQx*r_006_8;
   double r_610_7 = PmAy*r_600_7 + rPmQy*r_600_8;
   double r_016_7 = PmAy*r_006_7 + rPmQy*r_006_8;
   double r_601_7 = PmAz*r_600_7 + rPmQz*r_600_8;
   double r_061_7 = PmAz*r_060_7 + rPmQz*r_060_8;
   double r_520_7 = PmAy*r_510_7 + iz2*(r_500_7 + r_500_8*rie) + rPmQy*r_510_8;
   double r_502_7 = PmAz*r_501_7 + iz2*(r_500_7 + r_500_8*rie) + rPmQz*r_501_8;
   double r_052_7 = PmAz*r_051_7 + iz2*(r_050_7 + r_050_8*rie) + rPmQz*r_051_8;
   double r_800_6 = PmAx*r_700_6 + 7*iz2*(r_600_6 + r_600_7*rie) + rPmQx*r_700_7;
   double r_080_6 = PmAy*r_070_6 + 7*iz2*(r_060_6 + r_060_7*rie) + rPmQy*r_070_7;
   double r_008_6 = PmAz*r_007_6 + 7*iz2*(r_006_6 + r_006_7*rie) + rPmQz*r_007_7;
   double r_710_6 = PmAy*r_700_6 + rPmQy*r_700_7;
   double r_170_6 = PmAx*r_070_6 + rPmQx*r_070_7;
   double r_701_6 = PmAz*r_700_6 + rPmQz*r_700_7;
   double r_107_6 = PmAx*r_007_6 + rPmQx*r_007_7;
   double r_071_6 = PmAz*r_070_6 + rPmQz*r_070_7;
   double r_017_6 = PmAy*r_007_6 + rPmQy*r_007_7;
   double r_620_6 = PmAy*r_610_6 + iz2*(r_600_6 + r_600_7*rie) + rPmQy*r_610_7;
   double r_602_6 = PmAz*r_601_6 + iz2*(r_600_6 + r_600_7*rie) + rPmQz*r_601_7;
   double r_260_6 = PmAx*r_160_6 + iz2*(r_060_6 + r_060_7*rie) + rPmQx*r_160_7;
   double r_206_6 = PmAx*r_106_6 + iz2*(r_006_6 + r_006_7*rie) + rPmQx*r_106_7;
   double r_062_6 = PmAz*r_061_6 + iz2*(r_060_6 + r_060_7*rie) + rPmQz*r_061_7;
   double r_026_6 = PmAy*r_016_6 + iz2*(r_006_6 + r_006_7*rie) + rPmQy*r_016_7;
   double r_530_6 = PmAy*r_520_6 + 2*iz2*(r_510_6 + r_510_7*rie) + rPmQy*r_520_7;
   double r_503_6 = PmAz*r_502_6 + 2*iz2*(r_501_6 + r_501_7*rie) + rPmQz*r_502_7;
   double r_053_6 = PmAz*r_052_6 + 2*iz2*(r_051_6 + r_051_7*rie) + rPmQz*r_052_7;
   double r_900_5 = PmAx*r_800_5 + 8*iz2*(r_700_5 + r_700_6*rie) + rPmQx*r_800_6;
   double r_090_5 = PmAy*r_080_5 + 8*iz2*(r_070_5 + r_070_6*rie) + rPmQy*r_080_6;
   double r_009_5 = PmAz*r_008_5 + 8*iz2*(r_007_5 + r_007_6*rie) + rPmQz*r_008_6;
   double r_180_5 = PmAx*r_080_5 + rPmQx*r_080_6;
   double r_108_5 = PmAx*r_008_5 + rPmQx*r_008_6;
   double r_810_5 = PmAy*r_800_5 + rPmQy*r_800_6;
   double r_018_5 = PmAy*r_008_5 + rPmQy*r_008_6;
   double r_801_5 = PmAz*r_800_5 + rPmQz*r_800_6;
   double r_081_5 = PmAz*r_080_5 + rPmQz*r_080_6;
   double r_720_5 = PmAy*r_710_5 + iz2*(r_700_5 + r_700_6*rie) + rPmQy*r_710_6;
   double r_702_5 = PmAz*r_701_5 + iz2*(r_700_5 + r_700_6*rie) + rPmQz*r_701_6;
   double r_270_5 = PmAx*r_170_5 + iz2*(r_070_5 + r_070_6*rie) + rPmQx*r_170_6;
   double r_072_5 = PmAz*r_071_5 + iz2*(r_070_5 + r_070_6*rie) + rPmQz*r_071_6;
   double r_207_5 = PmAx*r_107_5 + iz2*(r_007_5 + r_007_6*rie) + rPmQx*r_107_6;
   double r_027_5 = PmAy*r_017_5 + iz2*(r_007_5 + r_007_6*rie) + rPmQy*r_017_6;
   double r_360_5 = PmAx*r_260_5 + 2*iz2*(r_160_5 + r_160_6*rie) + rPmQx*r_260_6;
   double r_306_5 = PmAx*r_206_5 + 2*iz2*(r_106_5 + r_106_6*rie) + rPmQx*r_206_6;
   double r_630_5 = PmAy*r_620_5 + 2*iz2*(r_610_5 + r_610_6*rie) + rPmQy*r_620_6;
   double r_036_5 = PmAy*r_026_5 + 2*iz2*(r_016_5 + r_016_6*rie) + rPmQy*r_026_6;
   double r_603_5 = PmAz*r_602_5 + 2*iz2*(r_601_5 + r_601_6*rie) + rPmQz*r_602_6;
   double r_063_5 = PmAz*r_062_5 + 2*iz2*(r_061_5 + r_061_6*rie) + rPmQz*r_062_6;
   double r_540_5 = PmAy*r_530_5 + 3*iz2*(r_520_5 + r_520_6*rie) + rPmQy*r_530_6;
   double r_504_5 = PmAz*r_503_5 + 3*iz2*(r_502_5 + r_502_6*rie) + rPmQz*r_503_6;
   double r_054_5 = PmAz*r_053_5 + 3*iz2*(r_052_5 + r_052_6*rie) + rPmQz*r_053_6;
   double r_a00_4 = PmAx*r_900_4 + 9*iz2*(r_800_4 + r_800_5*rie) + rPmQx*r_900_5;
   double r_0a0_4 = PmAy*r_090_4 + 9*iz2*(r_080_4 + r_080_5*rie) + rPmQy*r_090_5;
   double r_00a_4 = PmAz*r_009_4 + 9*iz2*(r_008_4 + r_008_5*rie) + rPmQz*r_009_5;
   double r_910_4 = PmAy*r_900_4 + rPmQy*r_900_5;
   double r_190_4 = PmAx*r_090_4 + rPmQx*r_090_5;
   double r_901_4 = PmAz*r_900_4 + rPmQz*r_900_5;
   double r_109_4 = PmAx*r_009_4 + rPmQx*r_009_5;
   double r_091_4 = PmAz*r_090_4 + rPmQz*r_090_5;
   double r_019_4 = PmAy*r_009_4 + rPmQy*r_009_5;
   double r_820_4 = PmAy*r_810_4 + iz2*(r_800_4 + r_800_5*rie) + rPmQy*r_810_5;
   double r_802_4 = PmAz*r_801_4 + iz2*(r_800_4 + r_800_5*rie) + rPmQz*r_801_5;
   double r_280_4 = PmAx*r_180_4 + iz2*(r_080_4 + r_080_5*rie) + rPmQx*r_180_5;
   double r_208_4 = PmAx*r_108_4 + iz2*(r_008_4 + r_008_5*rie) + rPmQx*r_108_5;
   double r_082_4 = PmAz*r_081_4 + iz2*(r_080_4 + r_080_5*rie) + rPmQz*r_081_5;
   double r_028_4 = PmAy*r_018_4 + iz2*(r_008_4 + r_008_5*rie) + rPmQy*r_018_5;
   double r_730_4 = PmAy*r_720_4 + 2*iz2*(r_710_4 + r_710_5*rie) + rPmQy*r_720_5;
   double r_370_4 = PmAx*r_270_4 + 2*iz2*(r_170_4 + r_170_5*rie) + rPmQx*r_270_5;
   double r_703_4 = PmAz*r_702_4 + 2*iz2*(r_701_4 + r_701_5*rie) + rPmQz*r_702_5;
   double r_307_4 = PmAx*r_207_4 + 2*iz2*(r_107_4 + r_107_5*rie) + rPmQx*r_207_5;
   double r_073_4 = PmAz*r_072_4 + 2*iz2*(r_071_4 + r_071_5*rie) + rPmQz*r_072_5;
   double r_037_4 = PmAy*r_027_4 + 2*iz2*(r_017_4 + r_017_5*rie) + rPmQy*r_027_5;
   double r_640_4 = PmAy*r_630_4 + 3*iz2*(r_620_4 + r_620_5*rie) + rPmQy*r_630_5;
   double r_604_4 = PmAz*r_603_4 + 3*iz2*(r_602_4 + r_602_5*rie) + rPmQz*r_603_5;
   double r_460_4 = PmAx*r_360_4 + 3*iz2*(r_260_4 + r_260_5*rie) + rPmQx*r_360_5;
   double r_406_4 = PmAx*r_306_4 + 3*iz2*(r_206_4 + r_206_5*rie) + rPmQx*r_306_5;
   double r_064_4 = PmAz*r_063_4 + 3*iz2*(r_062_4 + r_062_5*rie) + rPmQz*r_063_5;
   double r_046_4 = PmAy*r_036_4 + 3*iz2*(r_026_4 + r_026_5*rie) + rPmQy*r_036_5;
   double r_550_4 = PmAy*r_540_4 + 4*iz2*(r_530_4 + r_530_5*rie) + rPmQy*r_540_5;
   double r_505_4 = PmAz*r_504_4 + 4*iz2*(r_503_4 + r_503_5*rie) + rPmQz*r_504_5;
   double r_055_4 = PmAz*r_054_4 + 4*iz2*(r_053_4 + r_053_5*rie) + rPmQz*r_054_5;
   double r_b00_3 = PmAx*r_a00_3 + 10*iz2*(r_900_3 + r_900_4*rie) + rPmQx*r_a00_4;
   double r_0b0_3 = PmAy*r_0a0_3 + 10*iz2*(r_090_3 + r_090_4*rie) + rPmQy*r_0a0_4;
   double r_00b_3 = PmAz*r_00a_3 + 10*iz2*(r_009_3 + r_009_4*rie) + rPmQz*r_00a_4;
   double r_1a0_3 = PmAx*r_0a0_3 + rPmQx*r_0a0_4;
   double r_10a_3 = PmAx*r_00a_3 + rPmQx*r_00a_4;
   double r_a10_3 = PmAy*r_a00_3 + rPmQy*r_a00_4;
   double r_01a_3 = PmAy*r_00a_3 + rPmQy*r_00a_4;
   double r_a01_3 = PmAz*r_a00_3 + rPmQz*r_a00_4;
   double r_0a1_3 = PmAz*r_0a0_3 + rPmQz*r_0a0_4;
   double r_920_3 = PmAy*r_910_3 + iz2*(r_900_3 + r_900_4*rie) + rPmQy*r_910_4;
   double r_902_3 = PmAz*r_901_3 + iz2*(r_900_3 + r_900_4*rie) + rPmQz*r_901_4;
   double r_290_3 = PmAx*r_190_3 + iz2*(r_090_3 + r_090_4*rie) + rPmQx*r_190_4;
   double r_092_3 = PmAz*r_091_3 + iz2*(r_090_3 + r_090_4*rie) + rPmQz*r_091_4;
   double r_209_3 = PmAx*r_109_3 + iz2*(r_009_3 + r_009_4*rie) + rPmQx*r_109_4;
   double r_029_3 = PmAy*r_019_3 + iz2*(r_009_3 + r_009_4*rie) + rPmQy*r_019_4;
   double r_380_3 = PmAx*r_280_3 + 2*iz2*(r_180_3 + r_180_4*rie) + rPmQx*r_280_4;
   double r_308_3 = PmAx*r_208_3 + 2*iz2*(r_108_3 + r_108_4*rie) + rPmQx*r_208_4;
   double r_830_3 = PmAy*r_820_3 + 2*iz2*(r_810_3 + r_810_4*rie) + rPmQy*r_820_4;
   double r_038_3 = PmAy*r_028_3 + 2*iz2*(r_018_3 + r_018_4*rie) + rPmQy*r_028_4;
   double r_803_3 = PmAz*r_802_3 + 2*iz2*(r_801_3 + r_801_4*rie) + rPmQz*r_802_4;
   double r_083_3 = PmAz*r_082_3 + 2*iz2*(r_081_3 + r_081_4*rie) + rPmQz*r_082_4;
   double r_740_3 = PmAy*r_730_3 + 3*iz2*(r_720_3 + r_720_4*rie) + rPmQy*r_730_4;
   double r_704_3 = PmAz*r_703_3 + 3*iz2*(r_702_3 + r_702_4*rie) + rPmQz*r_703_4;
   double r_470_3 = PmAx*r_370_3 + 3*iz2*(r_270_3 + r_270_4*rie) + rPmQx*r_370_4;
   double r_074_3 = PmAz*r_073_3 + 3*iz2*(r_072_3 + r_072_4*rie) + rPmQz*r_073_4;
   double r_407_3 = PmAx*r_307_3 + 3*iz2*(r_207_3 + r_207_4*rie) + rPmQx*r_307_4;
   double r_047_3 = PmAy*r_037_3 + 3*iz2*(r_027_3 + r_027_4*rie) + rPmQy*r_037_4;
   double r_560_3 = PmAx*r_460_3 + 4*iz2*(r_360_3 + r_360_4*rie) + rPmQx*r_460_4;
   double r_506_3 = PmAx*r_406_3 + 4*iz2*(r_306_3 + r_306_4*rie) + rPmQx*r_406_4;
   double r_650_3 = PmAy*r_640_3 + 4*iz2*(r_630_3 + r_630_4*rie) + rPmQy*r_640_4;
   double r_056_3 = PmAy*r_046_3 + 4*iz2*(r_036_3 + r_036_4*rie) + rPmQy*r_046_4;
   double r_605_3 = PmAz*r_604_3 + 4*iz2*(r_603_3 + r_603_4*rie) + rPmQz*r_604_4;
   double r_065_3 = PmAz*r_064_3 + 4*iz2*(r_063_3 + r_063_4*rie) + rPmQz*r_064_4;
   double r_164_3 = PmAx*r_064_3 + rPmQx*r_064_4;
   double r_146_3 = PmAx*r_046_3 + rPmQx*r_046_4;
   double r_614_3 = PmAy*r_604_3 + rPmQy*r_604_4;
   double r_551_3 = PmAz*r_550_3 + rPmQz*r_550_4;
   double r_515_3 = PmAy*r_505_3 + rPmQy*r_505_4;
   double r_155_3 = PmAx*r_055_3 + rPmQx*r_055_4;
   double r_c00_2 = PmAx*r_b00_2 + 11*iz2*(r_a00_2 + r_a00_3*rie) + rPmQx*r_b00_3;
   double r_0c0_2 = PmAy*r_0b0_2 + 11*iz2*(r_0a0_2 + r_0a0_3*rie) + rPmQy*r_0b0_3;
   double r_00c_2 = PmAz*r_00b_2 + 11*iz2*(r_00a_2 + r_00a_3*rie) + rPmQz*r_00b_3;
   double r_b10_2 = PmAy*r_b00_2 + rPmQy*r_b00_3;
   double r_1b0_2 = PmAx*r_0b0_2 + rPmQx*r_0b0_3;
   double r_b01_2 = PmAz*r_b00_2 + rPmQz*r_b00_3;
   double r_10b_2 = PmAx*r_00b_2 + rPmQx*r_00b_3;
   double r_0b1_2 = PmAz*r_0b0_2 + rPmQz*r_0b0_3;
   double r_01b_2 = PmAy*r_00b_2 + rPmQy*r_00b_3;
   double r_a20_2 = PmAy*r_a10_2 + iz2*(r_a00_2 + r_a00_3*rie) + rPmQy*r_a10_3;
   double r_a02_2 = PmAz*r_a01_2 + iz2*(r_a00_2 + r_a00_3*rie) + rPmQz*r_a01_3;
   double r_2a0_2 = PmAx*r_1a0_2 + iz2*(r_0a0_2 + r_0a0_3*rie) + rPmQx*r_1a0_3;
   double r_20a_2 = PmAx*r_10a_2 + iz2*(r_00a_2 + r_00a_3*rie) + rPmQx*r_10a_3;
   double r_0a2_2 = PmAz*r_0a1_2 + iz2*(r_0a0_2 + r_0a0_3*rie) + rPmQz*r_0a1_3;
   double r_02a_2 = PmAy*r_01a_2 + iz2*(r_00a_2 + r_00a_3*rie) + rPmQy*r_01a_3;
   double r_930_2 = PmAy*r_920_2 + 2*iz2*(r_910_2 + r_910_3*rie) + rPmQy*r_920_3;
   double r_390_2 = PmAx*r_290_2 + 2*iz2*(r_190_2 + r_190_3*rie) + rPmQx*r_290_3;
   double r_903_2 = PmAz*r_902_2 + 2*iz2*(r_901_2 + r_901_3*rie) + rPmQz*r_902_3;
   double r_309_2 = PmAx*r_209_2 + 2*iz2*(r_109_2 + r_109_3*rie) + rPmQx*r_209_3;
   double r_093_2 = PmAz*r_092_2 + 2*iz2*(r_091_2 + r_091_3*rie) + rPmQz*r_092_3;
   double r_039_2 = PmAy*r_029_2 + 2*iz2*(r_019_2 + r_019_3*rie) + rPmQy*r_029_3;
   double r_840_2 = PmAy*r_830_2 + 3*iz2*(r_820_2 + r_820_3*rie) + rPmQy*r_830_3;
   double r_804_2 = PmAz*r_803_2 + 3*iz2*(r_802_2 + r_802_3*rie) + rPmQz*r_803_3;
   double r_480_2 = PmAx*r_380_2 + 3*iz2*(r_280_2 + r_280_3*rie) + rPmQx*r_380_3;
   double r_408_2 = PmAx*r_308_2 + 3*iz2*(r_208_2 + r_208_3*rie) + rPmQx*r_308_3;
   double r_084_2 = PmAz*r_083_2 + 3*iz2*(r_082_2 + r_082_3*rie) + rPmQz*r_083_3;
   double r_048_2 = PmAy*r_038_2 + 3*iz2*(r_028_2 + r_028_3*rie) + rPmQy*r_038_3;
   double r_750_2 = PmAy*r_740_2 + 4*iz2*(r_730_2 + r_730_3*rie) + rPmQy*r_740_3;
   double r_570_2 = PmAx*r_470_2 + 4*iz2*(r_370_2 + r_370_3*rie) + rPmQx*r_470_3;
   double r_705_2 = PmAz*r_704_2 + 4*iz2*(r_703_2 + r_703_3*rie) + rPmQz*r_704_3;
   double r_507_2 = PmAx*r_407_2 + 4*iz2*(r_307_2 + r_307_3*rie) + rPmQx*r_407_3;
   double r_075_2 = PmAz*r_074_2 + 4*iz2*(r_073_2 + r_073_3*rie) + rPmQz*r_074_3;
   double r_057_2 = PmAy*r_047_2 + 4*iz2*(r_037_2 + r_037_3*rie) + rPmQy*r_047_3;
   double r_660_2 = PmAx*r_560_2 + 5*iz2*(r_460_2 + r_460_3*rie) + rPmQx*r_560_3;
   double r_606_2 = PmAx*r_506_2 + 5*iz2*(r_406_2 + r_406_3*rie) + rPmQx*r_506_3;
   double r_066_2 = PmAy*r_056_2 + 5*iz2*(r_046_2 + r_046_3*rie) + rPmQy*r_056_3;
   double r_318_2 = PmAy*r_308_2 + rPmQy*r_308_3;
   double r_381_2 = PmAz*r_380_2 + rPmQz*r_380_3;
   double r_831_2 = PmAz*r_830_2 + rPmQz*r_830_3;
   double r_714_2 = PmAy*r_704_2 + rPmQy*r_704_3;
   double r_174_2 = PmAx*r_074_2 + rPmQx*r_074_3;
   double r_741_2 = PmAz*r_740_2 + rPmQz*r_740_3;
   double r_147_2 = PmAx*r_047_2 + rPmQx*r_047_3;
   double r_471_2 = PmAz*r_470_2 + rPmQz*r_470_3;
   double r_417_2 = PmAy*r_407_2 + rPmQy*r_407_3;
   double r_516_2 = PmAy*r_506_2 + rPmQy*r_506_3;
   double r_156_2 = PmAx*r_056_2 + rPmQx*r_056_3;
   double r_561_2 = PmAz*r_560_2 + rPmQz*r_560_3;
   double r_165_2 = PmAx*r_065_2 + rPmQx*r_065_3;
   double r_651_2 = PmAz*r_650_2 + rPmQz*r_650_3;
   double r_615_2 = PmAy*r_605_2 + rPmQy*r_605_3;
   double r_624_2 = PmAy*r_614_2 + iz2*(r_604_2 + r_604_3*rie) + rPmQy*r_614_3;
   double r_264_2 = PmAx*r_164_2 + iz2*(r_064_2 + r_064_3*rie) + rPmQx*r_164_3;
   double r_246_2 = PmAx*r_146_2 + iz2*(r_046_2 + r_046_3*rie) + rPmQx*r_146_3;
   double r_552_2 = PmAz*r_551_2 + iz2*(r_550_2 + r_550_3*rie) + rPmQz*r_551_3;
   double r_525_2 = PmAy*r_515_2 + iz2*(r_505_2 + r_505_3*rie) + rPmQy*r_515_3;
   double r_255_2 = PmAx*r_155_2 + iz2*(r_055_2 + r_055_3*rie) + rPmQx*r_155_3;
   double r_d00_1 = PmAx*r_c00_1 + 12*iz2*(r_b00_1 + r_b00_2*rie) + rPmQx*r_c00_2;
   double r_0d0_1 = PmAy*r_0c0_1 + 12*iz2*(r_0b0_1 + r_0b0_2*rie) + rPmQy*r_0c0_2;
   double r_00d_1 = PmAz*r_00c_1 + 12*iz2*(r_00b_1 + r_00b_2*rie) + rPmQz*r_00c_2;
   double r_1c0_1 = PmAx*r_0c0_1 + rPmQx*r_0c0_2;
   double r_10c_1 = PmAx*r_00c_1 + rPmQx*r_00c_2;
   double r_c10_1 = PmAy*r_c00_1 + rPmQy*r_c00_2;
   double r_01c_1 = PmAy*r_00c_1 + rPmQy*r_00c_2;
   double r_c01_1 = PmAz*r_c00_1 + rPmQz*r_c00_2;
   double r_0c1_1 = PmAz*r_0c0_1 + rPmQz*r_0c0_2;
   double r_b20_1 = PmAy*r_b10_1 + iz2*(r_b00_1 + r_b00_2*rie) + rPmQy*r_b10_2;
   double r_b02_1 = PmAz*r_b01_1 + iz2*(r_b00_1 + r_b00_2*rie) + rPmQz*r_b01_2;
   double r_2b0_1 = PmAx*r_1b0_1 + iz2*(r_0b0_1 + r_0b0_2*rie) + rPmQx*r_1b0_2;
   double r_0b2_1 = PmAz*r_0b1_1 + iz2*(r_0b0_1 + r_0b0_2*rie) + rPmQz*r_0b1_2;
   double r_20b_1 = PmAx*r_10b_1 + iz2*(r_00b_1 + r_00b_2*rie) + rPmQx*r_10b_2;
   double r_02b_1 = PmAy*r_01b_1 + iz2*(r_00b_1 + r_00b_2*rie) + rPmQy*r_01b_2;
   double r_3a0_1 = PmAx*r_2a0_1 + 2*iz2*(r_1a0_1 + r_1a0_2*rie) + rPmQx*r_2a0_2;
   double r_30a_1 = PmAx*r_20a_1 + 2*iz2*(r_10a_1 + r_10a_2*rie) + rPmQx*r_20a_2;
   double r_a30_1 = PmAy*r_a20_1 + 2*iz2*(r_a10_1 + r_a10_2*rie) + rPmQy*r_a20_2;
   double r_03a_1 = PmAy*r_02a_1 + 2*iz2*(r_01a_1 + r_01a_2*rie) + rPmQy*r_02a_2;
   double r_a03_1 = PmAz*r_a02_1 + 2*iz2*(r_a01_1 + r_a01_2*rie) + rPmQz*r_a02_2;
   double r_0a3_1 = PmAz*r_0a2_1 + 2*iz2*(r_0a1_1 + r_0a1_2*rie) + rPmQz*r_0a2_2;
   double r_940_1 = PmAy*r_930_1 + 3*iz2*(r_920_1 + r_920_2*rie) + rPmQy*r_930_2;
   double r_904_1 = PmAz*r_903_1 + 3*iz2*(r_902_1 + r_902_2*rie) + rPmQz*r_903_2;
   double r_490_1 = PmAx*r_390_1 + 3*iz2*(r_290_1 + r_290_2*rie) + rPmQx*r_390_2;
   double r_094_1 = PmAz*r_093_1 + 3*iz2*(r_092_1 + r_092_2*rie) + rPmQz*r_093_2;
   double r_409_1 = PmAx*r_309_1 + 3*iz2*(r_209_1 + r_209_2*rie) + rPmQx*r_309_2;
   double r_049_1 = PmAy*r_039_1 + 3*iz2*(r_029_1 + r_029_2*rie) + rPmQy*r_039_2;
   double r_580_1 = PmAx*r_480_1 + 4*iz2*(r_380_1 + r_380_2*rie) + rPmQx*r_480_2;
   double r_508_1 = PmAx*r_408_1 + 4*iz2*(r_308_1 + r_308_2*rie) + rPmQx*r_408_2;
   double r_850_1 = PmAy*r_840_1 + 4*iz2*(r_830_1 + r_830_2*rie) + rPmQy*r_840_2;
   double r_058_1 = PmAy*r_048_1 + 4*iz2*(r_038_1 + r_038_2*rie) + rPmQy*r_048_2;
   double r_805_1 = PmAz*r_804_1 + 4*iz2*(r_803_1 + r_803_2*rie) + rPmQz*r_804_2;
   double r_085_1 = PmAz*r_084_1 + 4*iz2*(r_083_1 + r_083_2*rie) + rPmQz*r_084_2;
   double r_760_1 = PmAy*r_750_1 + 5*iz2*(r_740_1 + r_740_2*rie) + rPmQy*r_750_2;
   double r_706_1 = PmAz*r_705_1 + 5*iz2*(r_704_1 + r_704_2*rie) + rPmQz*r_705_2;
   double r_670_1 = PmAx*r_570_1 + 5*iz2*(r_470_1 + r_470_2*rie) + rPmQx*r_570_2;
   double r_076_1 = PmAz*r_075_1 + 5*iz2*(r_074_1 + r_074_2*rie) + rPmQz*r_075_2;
   double r_607_1 = PmAx*r_507_1 + 5*iz2*(r_407_1 + r_407_2*rie) + rPmQx*r_507_2;
   double r_067_1 = PmAy*r_057_1 + 5*iz2*(r_047_1 + r_047_2*rie) + rPmQy*r_057_2;
   double r_1a2_1 = PmAx*r_0a2_1 + rPmQx*r_0a2_2;
   double r_12a_1 = PmAx*r_02a_1 + rPmQx*r_02a_2;
   double r_a12_1 = PmAy*r_a02_1 + rPmQy*r_a02_2;
   double r_931_1 = PmAz*r_930_1 + rPmQz*r_930_2;
   double r_913_1 = PmAy*r_903_1 + rPmQy*r_903_2;
   double r_391_1 = PmAz*r_390_1 + rPmQz*r_390_2;
   double r_319_1 = PmAy*r_309_1 + rPmQy*r_309_2;
   double r_193_1 = PmAx*r_093_1 + rPmQx*r_093_2;
   double r_139_1 = PmAx*r_039_1 + rPmQx*r_039_2;
   double r_184_1 = PmAx*r_084_1 + rPmQx*r_084_2;
   double r_148_1 = PmAx*r_048_1 + rPmQx*r_048_2;
   double r_814_1 = PmAy*r_804_1 + rPmQy*r_804_2;
   double r_418_1 = PmAy*r_408_1 + rPmQy*r_408_2;
   double r_841_1 = PmAz*r_840_1 + rPmQz*r_840_2;
   double r_481_1 = PmAz*r_480_1 + rPmQz*r_480_2;
   double r_751_1 = PmAz*r_750_1 + rPmQz*r_750_2;
   double r_715_1 = PmAy*r_705_1 + rPmQy*r_705_2;
   double r_571_1 = PmAz*r_570_1 + rPmQz*r_570_2;
   double r_517_1 = PmAy*r_507_1 + rPmQy*r_507_2;
   double r_175_1 = PmAx*r_075_1 + rPmQx*r_075_2;
   double r_157_1 = PmAx*r_057_1 + rPmQx*r_057_2;
   double r_166_1 = PmAx*r_066_1 + rPmQx*r_066_2;
   double r_616_1 = PmAy*r_606_1 + rPmQy*r_606_2;
   double r_661_1 = PmAz*r_660_1 + rPmQz*r_660_2;
   double r_382_1 = PmAz*r_381_1 + iz2*(r_380_1 + r_380_2*rie) + rPmQz*r_381_2;
   double r_328_1 = PmAy*r_318_1 + iz2*(r_308_1 + r_308_2*rie) + rPmQy*r_318_2;
   double r_832_1 = PmAz*r_831_1 + iz2*(r_830_1 + r_830_2*rie) + rPmQz*r_831_2;
   double r_742_1 = PmAz*r_741_1 + iz2*(r_740_1 + r_740_2*rie) + rPmQz*r_741_2;
   double r_724_1 = PmAy*r_714_1 + iz2*(r_704_1 + r_704_2*rie) + rPmQy*r_714_2;
   double r_472_1 = PmAz*r_471_1 + iz2*(r_470_1 + r_470_2*rie) + rPmQz*r_471_2;
   double r_274_1 = PmAx*r_174_1 + iz2*(r_074_1 + r_074_2*rie) + rPmQx*r_174_2;
   double r_427_1 = PmAy*r_417_1 + iz2*(r_407_1 + r_407_2*rie) + rPmQy*r_417_2;
   double r_247_1 = PmAx*r_147_1 + iz2*(r_047_1 + r_047_2*rie) + rPmQx*r_147_2;
   double r_562_1 = PmAz*r_561_1 + iz2*(r_560_1 + r_560_2*rie) + rPmQz*r_561_2;
   double r_526_1 = PmAy*r_516_1 + iz2*(r_506_1 + r_506_2*rie) + rPmQy*r_516_2;
   double r_652_1 = PmAz*r_651_1 + iz2*(r_650_1 + r_650_2*rie) + rPmQz*r_651_2;
   double r_256_1 = PmAx*r_156_1 + iz2*(r_056_1 + r_056_2*rie) + rPmQx*r_156_2;
   double r_625_1 = PmAy*r_615_1 + iz2*(r_605_1 + r_605_2*rie) + rPmQy*r_615_2;
   double r_265_1 = PmAx*r_165_1 + iz2*(r_065_1 + r_065_2*rie) + rPmQx*r_165_2;
   double r_364_1 = PmAx*r_264_1 + 2*iz2*(r_164_1 + r_164_2*rie) + rPmQx*r_264_2;
   double r_346_1 = PmAx*r_246_1 + 2*iz2*(r_146_1 + r_146_2*rie) + rPmQx*r_246_2;
   double r_634_1 = PmAy*r_624_1 + 2*iz2*(r_614_1 + r_614_2*rie) + rPmQy*r_624_2;
   double r_553_1 = PmAz*r_552_1 + 2*iz2*(r_551_1 + r_551_2*rie) + rPmQz*r_552_2;
   double r_535_1 = PmAy*r_525_1 + 2*iz2*(r_515_1 + r_515_2*rie) + rPmQy*r_525_2;
   double r_355_1 = PmAx*r_255_1 + 2*iz2*(r_155_1 + r_155_2*rie) + rPmQx*r_255_2;
   pOut[560] = PmAx*pOut[455] + 13*iz2*(pOut[364] + r_c00_1*rie) + rPmQx*r_d00_1;
   pOut[561] = PmAy*pOut[456] + 13*iz2*(pOut[365] + r_0c0_1*rie) + rPmQy*r_0d0_1;
   pOut[562] = PmAz*pOut[457] + 13*iz2*(pOut[366] + r_00c_1*rie) + rPmQz*r_00d_1;
   pOut[563] = PmAy*pOut[455] + rPmQy*r_d00_1;
   pOut[564] = PmAx*pOut[456] + rPmQx*r_0d0_1;
   pOut[565] = PmAz*pOut[455] + rPmQz*r_d00_1;
   pOut[566] = PmAx*pOut[457] + rPmQx*r_00d_1;
   pOut[567] = PmAz*pOut[456] + rPmQz*r_0d0_1;
   pOut[568] = PmAy*pOut[457] + rPmQy*r_00d_1;
   pOut[569] = PmAy*pOut[460] + iz2*(pOut[364] + r_c00_1*rie) + rPmQy*r_c10_1;
   pOut[570] = PmAz*pOut[462] + iz2*(pOut[364] + r_c00_1*rie) + rPmQz*r_c01_1;
   pOut[571] = PmAx*pOut[458] + iz2*(pOut[365] + r_0c0_1*rie) + rPmQx*r_1c0_1;
   pOut[572] = PmAx*pOut[459] + iz2*(pOut[366] + r_00c_1*rie) + rPmQx*r_10c_1;
   pOut[573] = PmAz*pOut[463] + iz2*(pOut[365] + r_0c0_1*rie) + rPmQz*r_0c1_1;
   pOut[574] = PmAy*pOut[461] + iz2*(pOut[366] + r_00c_1*rie) + rPmQy*r_01c_1;
   pOut[575] = PmAy*pOut[464] + 2*iz2*(pOut[367] + r_b10_1*rie) + rPmQy*r_b20_1;
   pOut[576] = PmAx*pOut[466] + 2*iz2*(pOut[368] + r_1b0_1*rie) + rPmQx*r_2b0_1;
   pOut[577] = PmAz*pOut[465] + 2*iz2*(pOut[369] + r_b01_1*rie) + rPmQz*r_b02_1;
   pOut[578] = PmAx*pOut[468] + 2*iz2*(pOut[370] + r_10b_1*rie) + rPmQx*r_20b_1;
   pOut[579] = PmAz*pOut[467] + 2*iz2*(pOut[371] + r_0b1_1*rie) + rPmQz*r_0b2_1;
   pOut[580] = PmAy*pOut[469] + 2*iz2*(pOut[372] + r_01b_1*rie) + rPmQy*r_02b_1;
   pOut[581] = PmAy*pOut[472] + 3*iz2*(pOut[373] + r_a20_1*rie) + rPmQy*r_a30_1;
   pOut[582] = PmAz*pOut[474] + 3*iz2*(pOut[374] + r_a02_1*rie) + rPmQz*r_a03_1;
   pOut[583] = PmAx*pOut[470] + 3*iz2*(pOut[375] + r_2a0_1*rie) + rPmQx*r_3a0_1;
   pOut[584] = PmAx*pOut[471] + 3*iz2*(pOut[376] + r_20a_1*rie) + rPmQx*r_30a_1;
   pOut[585] = PmAz*pOut[475] + 3*iz2*(pOut[377] + r_0a2_1*rie) + rPmQz*r_0a3_1;
   pOut[586] = PmAy*pOut[473] + 3*iz2*(pOut[378] + r_02a_1*rie) + rPmQy*r_03a_1;
   pOut[587] = PmAy*pOut[476] + 4*iz2*(pOut[379] + r_930_1*rie) + rPmQy*r_940_1;
   pOut[588] = PmAx*pOut[478] + 4*iz2*(pOut[380] + r_390_1*rie) + rPmQx*r_490_1;
   pOut[589] = PmAz*pOut[477] + 4*iz2*(pOut[381] + r_903_1*rie) + rPmQz*r_904_1;
   pOut[590] = PmAx*pOut[480] + 4*iz2*(pOut[382] + r_309_1*rie) + rPmQx*r_409_1;
   pOut[591] = PmAz*pOut[479] + 4*iz2*(pOut[383] + r_093_1*rie) + rPmQz*r_094_1;
   pOut[592] = PmAy*pOut[481] + 4*iz2*(pOut[384] + r_039_1*rie) + rPmQy*r_049_1;
   pOut[593] = PmAy*pOut[484] + 5*iz2*(pOut[385] + r_840_1*rie) + rPmQy*r_850_1;
   pOut[594] = PmAz*pOut[486] + 5*iz2*(pOut[386] + r_804_1*rie) + rPmQz*r_805_1;
   pOut[595] = PmAx*pOut[482] + 5*iz2*(pOut[387] + r_480_1*rie) + rPmQx*r_580_1;
   pOut[596] = PmAx*pOut[483] + 5*iz2*(pOut[388] + r_408_1*rie) + rPmQx*r_508_1;
   pOut[597] = PmAz*pOut[487] + 5*iz2*(pOut[389] + r_084_1*rie) + rPmQz*r_085_1;
   pOut[598] = PmAy*pOut[485] + 5*iz2*(pOut[390] + r_048_1*rie) + rPmQy*r_058_1;
   pOut[599] = PmAy*pOut[488] + 6*iz2*(pOut[391] + r_750_1*rie) + rPmQy*r_760_1;
   pOut[600] = PmAz*pOut[489] + 6*iz2*(pOut[393] + r_705_1*rie) + rPmQz*r_706_1;
   pOut[601] = PmAz*pOut[491] + 6*iz2*(pOut[395] + r_075_1*rie) + rPmQz*r_076_1;
   pOut[602] = PmAy*pOut[459] + rPmQy*r_10c_1;
   pOut[603] = PmAz*pOut[458] + rPmQz*r_1c0_1;
   pOut[604] = PmAz*pOut[460] + rPmQz*r_c10_1;
   pOut[605] = PmAy*pOut[465] + rPmQy*r_b02_1;
   pOut[606] = PmAx*pOut[467] + rPmQx*r_0b2_1;
   pOut[607] = PmAz*pOut[464] + rPmQz*r_b20_1;
   pOut[608] = PmAx*pOut[469] + rPmQx*r_02b_1;
   pOut[609] = PmAz*pOut[466] + rPmQz*r_2b0_1;
   pOut[610] = PmAy*pOut[468] + rPmQy*r_20b_1;
   pOut[611] = PmAy*pOut[471] + rPmQy*r_30a_1;
   pOut[612] = PmAx*pOut[473] + rPmQx*r_03a_1;
   pOut[613] = PmAz*pOut[470] + rPmQz*r_3a0_1;
   pOut[614] = PmAx*pOut[475] + rPmQx*r_0a3_1;
   pOut[615] = PmAz*pOut[472] + rPmQz*r_a30_1;
   pOut[616] = PmAy*pOut[474] + rPmQy*r_a03_1;
   pOut[617] = PmAy*pOut[477] + rPmQy*r_904_1;
   pOut[618] = PmAx*pOut[479] + rPmQx*r_094_1;
   pOut[619] = PmAz*pOut[476] + rPmQz*r_940_1;
   pOut[620] = PmAx*pOut[481] + rPmQx*r_049_1;
   pOut[621] = PmAz*pOut[478] + rPmQz*r_490_1;
   pOut[622] = PmAy*pOut[480] + rPmQy*r_409_1;
   pOut[623] = PmAy*pOut[483] + rPmQy*r_508_1;
   pOut[624] = PmAx*pOut[485] + rPmQx*r_058_1;
   pOut[625] = PmAz*pOut[482] + rPmQz*r_580_1;
   pOut[626] = PmAx*pOut[487] + rPmQx*r_085_1;
   pOut[627] = PmAz*pOut[484] + rPmQz*r_850_1;
   pOut[628] = PmAy*pOut[486] + rPmQy*r_805_1;
   pOut[629] = PmAy*pOut[489] + rPmQy*r_706_1;
   pOut[630] = PmAx*pOut[491] + rPmQx*r_076_1;
   pOut[631] = PmAz*pOut[488] + rPmQz*r_760_1;
   pOut[632] = PmAx*pOut[493] + rPmQx*r_067_1;
   pOut[633] = PmAz*pOut[490] + rPmQz*r_670_1;
   pOut[634] = PmAy*pOut[492] + rPmQy*r_607_1;
   pOut[635] = PmAy*pOut[499] + iz2*(pOut[374] + r_a02_1*rie) + rPmQy*r_a12_1;
   pOut[636] = PmAx*pOut[497] + iz2*(pOut[377] + r_0a2_1*rie) + rPmQx*r_1a2_1;
   pOut[637] = PmAx*pOut[498] + iz2*(pOut[378] + r_02a_1*rie) + rPmQx*r_12a_1;
   pOut[638] = PmAz*pOut[503] + iz2*(pOut[379] + r_930_1*rie) + rPmQz*r_931_1;
   pOut[639] = PmAz*pOut[505] + iz2*(pOut[380] + r_390_1*rie) + rPmQz*r_391_1;
   pOut[640] = PmAy*pOut[504] + iz2*(pOut[381] + r_903_1*rie) + rPmQy*r_913_1;
   pOut[641] = PmAy*pOut[506] + iz2*(pOut[382] + r_309_1*rie) + rPmQy*r_319_1;
   pOut[642] = PmAx*pOut[507] + iz2*(pOut[383] + r_093_1*rie) + rPmQx*r_193_1;
   pOut[643] = PmAx*pOut[508] + iz2*(pOut[384] + r_039_1*rie) + rPmQx*r_139_1;
   pOut[644] = PmAz*pOut[513] + iz2*(pOut[385] + r_840_1*rie) + rPmQz*r_841_1;
   pOut[645] = PmAy*pOut[511] + iz2*(pOut[386] + r_804_1*rie) + rPmQy*r_814_1;
   pOut[646] = PmAz*pOut[514] + iz2*(pOut[387] + r_480_1*rie) + rPmQz*r_481_1;
   pOut[647] = PmAy*pOut[512] + iz2*(pOut[388] + r_408_1*rie) + rPmQy*r_418_1;
   pOut[648] = PmAx*pOut[509] + iz2*(pOut[389] + r_084_1*rie) + rPmQx*r_184_1;
   pOut[649] = PmAx*pOut[510] + iz2*(pOut[390] + r_048_1*rie) + rPmQx*r_148_1;
   pOut[650] = PmAz*pOut[515] + iz2*(pOut[391] + r_750_1*rie) + rPmQz*r_751_1;
   pOut[651] = PmAz*pOut[517] + iz2*(pOut[392] + r_570_1*rie) + rPmQz*r_571_1;
   pOut[652] = PmAy*pOut[516] + iz2*(pOut[393] + r_705_1*rie) + rPmQy*r_715_1;
   pOut[653] = PmAy*pOut[518] + iz2*(pOut[394] + r_507_1*rie) + rPmQy*r_517_1;
   pOut[654] = PmAx*pOut[519] + iz2*(pOut[395] + r_075_1*rie) + rPmQx*r_175_1;
   pOut[655] = PmAx*pOut[520] + iz2*(pOut[396] + r_057_1*rie) + rPmQx*r_157_1;
   pOut[656] = PmAz*pOut[523] + iz2*(pOut[397] + r_660_1*rie) + rPmQz*r_661_1;
   pOut[657] = PmAy*pOut[522] + iz2*(pOut[398] + r_606_1*rie) + rPmQy*r_616_1;
   pOut[658] = PmAx*pOut[521] + iz2*(pOut[399] + r_066_1*rie) + rPmQx*r_166_1;
   pOut[659] = PmAy*pOut[528] + 2*iz2*(pOut[409] + r_318_1*rie) + rPmQy*r_328_1;
   pOut[660] = PmAz*pOut[527] + 2*iz2*(pOut[411] + r_381_1*rie) + rPmQz*r_382_1;
   pOut[661] = PmAz*pOut[529] + 2*iz2*(pOut[413] + r_831_1*rie) + rPmQz*r_832_1;
   pOut[662] = PmAy*pOut[534] + 2*iz2*(pOut[415] + r_714_1*rie) + rPmQy*r_724_1;
   pOut[663] = PmAx*pOut[536] + 2*iz2*(pOut[416] + r_174_1*rie) + rPmQx*r_274_1;
   pOut[664] = PmAz*pOut[533] + 2*iz2*(pOut[417] + r_741_1*rie) + rPmQz*r_742_1;
   pOut[665] = PmAx*pOut[538] + 2*iz2*(pOut[418] + r_147_1*rie) + rPmQx*r_247_1;
   pOut[666] = PmAz*pOut[535] + 2*iz2*(pOut[419] + r_471_1*rie) + rPmQz*r_472_1;
   pOut[667] = PmAy*pOut[537] + 2*iz2*(pOut[420] + r_417_1*rie) + rPmQy*r_427_1;
   pOut[668] = PmAy*pOut[540] + 2*iz2*(pOut[421] + r_516_1*rie) + rPmQy*r_526_1;
   pOut[669] = PmAx*pOut[542] + 2*iz2*(pOut[422] + r_156_1*rie) + rPmQx*r_256_1;
   pOut[670] = PmAz*pOut[539] + 2*iz2*(pOut[423] + r_561_1*rie) + rPmQz*r_562_1;
   pOut[671] = PmAx*pOut[544] + 2*iz2*(pOut[424] + r_165_1*rie) + rPmQx*r_265_1;
   pOut[672] = PmAz*pOut[541] + 2*iz2*(pOut[425] + r_651_1*rie) + rPmQz*r_652_1;
   pOut[673] = PmAy*pOut[543] + 2*iz2*(pOut[426] + r_615_1*rie) + rPmQy*r_625_1;
   pOut[674] = PmAy*pOut[550] + 3*iz2*(pOut[437] + r_624_1*rie) + rPmQy*r_634_1;
   pOut[675] = PmAx*pOut[548] + 3*iz2*(pOut[440] + r_264_1*rie) + rPmQx*r_364_1;
   pOut[676] = PmAx*pOut[549] + 3*iz2*(pOut[441] + r_246_1*rie) + rPmQx*r_346_1;
   pOut[677] = PmAz*pOut[554] + 3*iz2*(pOut[442] + r_552_1*rie) + rPmQz*r_553_1;
   pOut[678] = PmAy*pOut[555] + 3*iz2*(pOut[443] + r_525_1*rie) + rPmQy*r_535_1;
   pOut[679] = PmAx*pOut[556] + 3*iz2*(pOut[444] + r_255_1*rie) + rPmQx*r_355_1;
   // 3.38 steps per component, 2.23 kb stack
   if (lab == 14) return;
   // If you get here we ran out of angular momenta. Regenerate with larger Lab.
   //assert(0);
}

// Cartesian -> Solid harmonic transforms: Transform a matrix
// N x nCartY(l) to N x (2*l+1).
static void ShTrC6(double * pOut, double const * pIn, size_t N)
{
   for (size_t i = 0; i < N; ++ i) {
      double z0 = pIn[N*0], z1 = pIn[N*1], z3 = pIn[N*3], z4 = pIn[N*4], z5 = pIn[N*5], z7 = pIn[N*7], z9 = pIn[N*9], za = pIn[N*10], zb = pIn[N*11], zc = pIn[N*12], zd = pIn[N*13], ze = pIn[N*14], zf = pIn[N*15], z10 = pIn[N*16], z11 = pIn[N*17], z13 = pIn[N*19], z14 = pIn[N*20], z15 = pIn[N*21], z16 = pIn[N*22], z17 = pIn[N*23], z18 = pIn[N*24], z19 = pIn[N*25], z1a = pIn[N*26], z1b = pIn[N*27];
      pOut[N*0] = sd2b*z0 - sd2b*z1 - sd2c*z9 + sd2c*zb;
      pOut[N*1] = pIn[N*18]*sd2f + sd2d*z3 + sd2d*z4 + sd2e*zf - sd2f*z15 - sd2f*z16;
      pOut[N*2] = sd30*z5 - sd31*z17 + sd32*z13;
      pOut[N*3] = -sd33*z0 - sd33*z1 + sd34*z9 + sd34*zb + sd35*za + sd35*zd - sd36*z1b;
      pOut[N*4] = sd30*z7 - sd31*z19 + sd32*z14;
      pOut[N*5] = sd37*z0 - sd37*z1 + sd37*z9 - sd37*zb - sd38*za + sd38*zc + sd38*zd - sd38*ze;
      pOut[N*6] = sd39*z3 + sd39*z4 - sd3a*zf;
      pOut[N*7] = sd38*z10 - sd3b*z5 + sd3c*z17 + sd3d*z13 - sd3e*z18;
      pOut[N*8] = -sd3f*z3 + sd3f*z4 + sd40*z15 - sd40*z16;
      pOut[N*9] = pIn[N*2] - sd41*z0 - sd41*z1 - sd42*z9 - sd42*zb + sd43*za + sd43*zd + sd44*z1b - sd45*zc - sd45*ze;
      pOut[N*10] = -sd38*z11 + sd3b*z7 - sd3c*z19 - sd3d*z14 + sd3e*z1a;
      pOut[N*11] = pIn[N*8]*sd49 + sd46*z14 + sd46*z7 + sd47*z19 - sd48*z11 - sd48*z1a;
      pOut[N*12] = pIn[N*6]*sd49 + sd46*z13 + sd46*z5 + sd47*z17 - sd48*z10 - sd48*z18;
      pOut += 1;
      pIn += 1;
   }
   return;
}

static void ShTrC5(double * pOut, double const * pIn, size_t N)
{
   for (size_t i = 0; i < N; ++ i) {
      double z0 = pIn[N*0], z1 = pIn[N*1], z3 = pIn[N*3], z5 = pIn[N*5], z7 = pIn[N*7], z8 = pIn[N*8], z9 = pIn[N*9], za = pIn[N*10], zb = pIn[N*11], zc = pIn[N*12], zd = pIn[N*13], ze = pIn[N*14], zf = pIn[N*15], z10 = pIn[N*16], z12 = pIn[N*18], z13 = pIn[N*19], z14 = pIn[N*20];
      pOut[N*0] = pIn[N*4]*sd8 + sd17*z0 + sd17*z3 + sd18*z9 - sd19*z12 - sd19*za;
      pOut[N*1] = pIn[N*6]*sd8 + sd17*z1 + sd17*z5 + sd18*zb - sd19*z13 - sd19*zc;
      pOut[N*2] = -sd1a*z7 + sd1a*z8 + sd1b*zd - sd1b*ze;
      pOut[N*3] = -sd1c*z0 + sd1d*z9 + sd1e*za + sd1f*z3 - sd20*z12;
      pOut[N*4] = -sd21*z10 + sd21*zf;
      pOut[N*5] = sd1c*z1 - sd1d*zb - sd1e*zc - sd1f*z5 + sd20*z13;
      pOut[N*6] = sd22*z7 + sd22*z8 - sd23*z14;
      pOut[N*7] = sd24*z5 - sd25*zb + sd26*z1;
      pOut[N*8] = pIn[N*2] + sd27*z7 + sd27*z8 + sd28*z14 - sd29*zd - sd29*ze;
      pOut[N*9] = sd24*z3 - sd25*z9 + sd26*z0;
      pOut[N*10] = pIn[N*17]*sd2a - sd1b*z10 - sd1b*zf;
      pOut += 1;
      pIn += 1;
   }
   return;
}

static void ShTrC4(double * pOut, double const * pIn, size_t N)
{
   for (size_t i = 0; i < N; ++ i) {
      double z0 = pIn[N*0], z1 = pIn[N*1], z3 = pIn[N*3], z4 = pIn[N*4], z5 = pIn[N*5], z7 = pIn[N*7], z9 = pIn[N*9], za = pIn[N*10], zb = pIn[N*11], zd = pIn[N*13], ze = pIn[N*14];
      pOut[N*0] = pIn[N*2] + sda*z0 + sda*z1 + sdb*z9 - sdc*za - sdc*zb;
      pOut[N*1] = pIn[N*12]*sde - sdd*z3 - sdd*z4;
      pOut[N*2] = pIn[N*6]*sdf - sd7*z5 - sd7*zd;
      pOut[N*3] = sd10*z0 + sd10*z1 - sd11*z9;
      pOut[N*4] = pIn[N*8]*sdf - sd7*z7 - sd7*ze;
      pOut[N*5] = -sd12*z0 + sd12*z1 + sd13*za - sd13*zb;
      pOut[N*6] = sd14*z3 - sd14*z4;
      pOut[N*7] = sd15*z5 - sd16*zd;
      pOut[N*8] = -sd15*z7 + sd16*ze;
      pOut += 1;
      pIn += 1;
   }
   return;
}

static void ShTrC3(double * pOut, double const * pIn, size_t N)
{
   for (size_t i = 0; i < N; ++ i) {
      double z0 = pIn[N*0], z1 = pIn[N*1], z3 = pIn[N*3], z5 = pIn[N*5], z7 = pIn[N*7], z8 = pIn[N*8];
      pOut[N*0] = pIn[N*4]*sd4 - sd3*z0 - sd3*z3;
      pOut[N*1] = pIn[N*6]*sd4 - sd3*z1 - sd3*z5;
      pOut[N*2] = pIn[N*2] - sd5*z7 - sd5*z8;
      pOut[N*3] = sd6*z0 - sd7*z3;
      pOut[N*4] = pIn[N*9]*sd8;
      pOut[N*5] = -sd6*z1 + sd7*z5;
      pOut[N*6] = sd9*z7 - sd9*z8;
      pOut += 1;
      pIn += 1;
   }
   return;
}

static void ShTrC2(double * pOut, double const * pIn, size_t N)
{
   for (size_t i = 0; i < N; ++ i) {
      double z0 = pIn[N*0], z1 = pIn[N*1];
      pOut[N*0] = pIn[N*2] - sd0*z0 - sd0*z1;
      pOut[N*1] = pIn[N*3]*sd1;
      pOut[N*2] = pIn[N*4]*sd1;
      pOut[N*3] = sd2*z0 - sd2*z1;
      pOut[N*4] = pIn[N*5]*sd1;
      pOut += 1;
      pIn += 1;
   }
   return;
}

static void ShTrC1(double * pOut, double const * pIn, size_t N)
{
   for (size_t i = 0; i < N; ++ i) {
      pOut[N*0] = pIn[N*0];
      pOut[N*1] = pIn[N*1];
      pOut[N*2] = pIn[N*2];
      pOut += 1;
      pIn += 1;
   }
   return;
}

static void ShTrC0(double * pOut, double const * pIn, size_t N)
{
   for (size_t i = 0; i < N; ++ i) {
      pOut[N*0] = pIn[N*0];
      pOut += 1;
      pIn += 1;
   }
   return;
}

// Cartesian -> Solid harmonic transform: Transform a matrix
// N x nCartY(l) to N x (2*l+1).
void ShTrN(double * pOut, double const * pIn, size_t N, unsigned l)
{
   switch(l) {
      case 0: return ShTrC0(pOut, pIn, N);
      case 1: return ShTrC1(pOut, pIn, N);
      case 2: return ShTrC2(pOut, pIn, N);
      case 3: return ShTrC3(pOut, pIn, N);
      case 4: return ShTrC4(pOut, pIn, N);
      case 5: return ShTrC5(pOut, pIn, N);
      case 6: return ShTrC6(pOut, pIn, N);
   }
   //assert(0);
}

// Calculate (a0|c)^m from (a0|c-1x)^{m+1}, for a = la..lab
// i = _x/_y/_z is the reduction direction (x,y,z);
// fPmQi = PmQ[i] * rho/zeta_c; i2e = .5/eta_ABC = .5/(zeta_a + zeta_b + zeta_c)
// note: the la is not for performance reasons (would likely make the actual recurrence
//       slower for small lab) but for preventing overwriting lower components.
static void OsrrB_KerM_x(double * pOut, double const * pIn, double fPmQx, unsigned la, unsigned lab, double i2e)
{
   switch(la) {
   case 0:
      pOut[0] = fPmQx*pIn[0];
      if (lab == 0) return;
   case 1:
      pOut[1] = fPmQx*pIn[1] + i2e*pIn[0];
      pOut[2] = fPmQx*pIn[2];
      pOut[3] = fPmQx*pIn[3];
      if (lab == 1) return;
   case 2:
      pOut[4] = fPmQx*pIn[4] + 2*i2e*pIn[1];
      pOut[5] = fPmQx*pIn[5];
      pOut[6] = fPmQx*pIn[6];
      pOut[7] = fPmQx*pIn[7] + i2e*pIn[2];
      pOut[8] = fPmQx*pIn[8] + i2e*pIn[3];
      pOut[9] = fPmQx*pIn[9];
      if (lab == 2) return;
   case 3:
      pOut[10] = fPmQx*pIn[10] + 3*i2e*pIn[4];
      pOut[11] = fPmQx*pIn[11];
      pOut[12] = fPmQx*pIn[12];
      pOut[13] = fPmQx*pIn[13] + i2e*pIn[5];
      pOut[14] = fPmQx*pIn[14] + i2e*pIn[6];
      pOut[15] = fPmQx*pIn[15] + 2*i2e*pIn[7];
      pOut[16] = fPmQx*pIn[16];
      pOut[17] = fPmQx*pIn[17] + 2*i2e*pIn[8];
      pOut[18] = fPmQx*pIn[18];
      pOut[19] = fPmQx*pIn[19] + i2e*pIn[9];
      if (lab == 3) return;
   case 4:
      pOut[20] = fPmQx*pIn[20] + 4*i2e*pIn[10];
      pOut[21] = fPmQx*pIn[21];
      pOut[22] = fPmQx*pIn[22];
      pOut[23] = fPmQx*pIn[23] + 3*i2e*pIn[15];
      pOut[24] = fPmQx*pIn[24] + i2e*pIn[11];
      pOut[25] = fPmQx*pIn[25] + 3*i2e*pIn[17];
      pOut[26] = fPmQx*pIn[26] + i2e*pIn[12];
      pOut[27] = fPmQx*pIn[27];
      pOut[28] = fPmQx*pIn[28];
      pOut[29] = fPmQx*pIn[29] + 2*i2e*pIn[13];
      pOut[30] = fPmQx*pIn[30] + 2*i2e*pIn[14];
      pOut[31] = fPmQx*pIn[31];
      pOut[32] = fPmQx*pIn[32] + i2e*pIn[16];
      pOut[33] = fPmQx*pIn[33] + i2e*pIn[18];
      pOut[34] = fPmQx*pIn[34] + 2*i2e*pIn[19];
      if (lab == 4) return;
   case 5:
      pOut[35] = fPmQx*pIn[35] + 5*i2e*pIn[20];
      pOut[36] = fPmQx*pIn[36];
      pOut[37] = fPmQx*pIn[37];
      pOut[38] = fPmQx*pIn[38] + i2e*pIn[21];
      pOut[39] = fPmQx*pIn[39] + i2e*pIn[22];
      pOut[40] = fPmQx*pIn[40] + 4*i2e*pIn[23];
      pOut[41] = fPmQx*pIn[41];
      pOut[42] = fPmQx*pIn[42] + 4*i2e*pIn[25];
      pOut[43] = fPmQx*pIn[43];
      pOut[44] = fPmQx*pIn[44] + 3*i2e*pIn[29];
      pOut[45] = fPmQx*pIn[45] + 3*i2e*pIn[30];
      pOut[46] = fPmQx*pIn[46] + 2*i2e*pIn[24];
      pOut[47] = fPmQx*pIn[47];
      pOut[48] = fPmQx*pIn[48] + 2*i2e*pIn[26];
      pOut[49] = fPmQx*pIn[49];
      pOut[50] = fPmQx*pIn[50] + 3*i2e*pIn[34];
      pOut[51] = fPmQx*pIn[51] + i2e*pIn[27];
      pOut[52] = fPmQx*pIn[52] + i2e*pIn[28];
      pOut[53] = fPmQx*pIn[53] + i2e*pIn[31];
      pOut[54] = fPmQx*pIn[54] + 2*i2e*pIn[32];
      pOut[55] = fPmQx*pIn[55] + 2*i2e*pIn[33];
      if (lab == 5) return;
   case 6:
      pOut[56] = fPmQx*pIn[56] + 6*i2e*pIn[35];
      pOut[57] = fPmQx*pIn[57];
      pOut[58] = fPmQx*pIn[58];
      pOut[59] = fPmQx*pIn[59] + 5*i2e*pIn[40];
      pOut[60] = fPmQx*pIn[60] + i2e*pIn[36];
      pOut[61] = fPmQx*pIn[61] + 5*i2e*pIn[42];
      pOut[62] = fPmQx*pIn[62] + i2e*pIn[37];
      pOut[63] = fPmQx*pIn[63];
      pOut[64] = fPmQx*pIn[64];
      pOut[65] = fPmQx*pIn[65] + 4*i2e*pIn[44];
      pOut[66] = fPmQx*pIn[66] + 4*i2e*pIn[45];
      pOut[67] = fPmQx*pIn[67] + 2*i2e*pIn[38];
      pOut[68] = fPmQx*pIn[68] + 2*i2e*pIn[39];
      pOut[69] = fPmQx*pIn[69];
      pOut[70] = fPmQx*pIn[70];
      pOut[71] = fPmQx*pIn[71] + 3*i2e*pIn[46];
      pOut[72] = fPmQx*pIn[72] + 3*i2e*pIn[48];
      pOut[73] = fPmQx*pIn[73];
      pOut[74] = fPmQx*pIn[74] + i2e*pIn[41];
      pOut[75] = fPmQx*pIn[75] + i2e*pIn[43];
      pOut[76] = fPmQx*pIn[76] + 4*i2e*pIn[50];
      pOut[77] = fPmQx*pIn[77] + 3*i2e*pIn[54];
      pOut[78] = fPmQx*pIn[78] + i2e*pIn[47];
      pOut[79] = fPmQx*pIn[79] + 3*i2e*pIn[55];
      pOut[80] = fPmQx*pIn[80] + i2e*pIn[49];
      pOut[81] = fPmQx*pIn[81] + 2*i2e*pIn[51];
      pOut[82] = fPmQx*pIn[82] + 2*i2e*pIn[52];
      pOut[83] = fPmQx*pIn[83] + 2*i2e*pIn[53];
      if (lab == 6) return;
   case 7:
      pOut[84] = fPmQx*pIn[84] + 7*i2e*pIn[56];
      pOut[85] = fPmQx*pIn[85];
      pOut[86] = fPmQx*pIn[86];
      pOut[87] = fPmQx*pIn[87] + i2e*pIn[57];
      pOut[88] = fPmQx*pIn[88] + i2e*pIn[58];
      pOut[89] = fPmQx*pIn[89] + 6*i2e*pIn[59];
      pOut[90] = fPmQx*pIn[90];
      pOut[91] = fPmQx*pIn[91] + 6*i2e*pIn[61];
      pOut[92] = fPmQx*pIn[92];
      pOut[93] = fPmQx*pIn[93] + 5*i2e*pIn[65];
      pOut[94] = fPmQx*pIn[94] + 5*i2e*pIn[66];
      pOut[95] = fPmQx*pIn[95] + 2*i2e*pIn[60];
      pOut[96] = fPmQx*pIn[96];
      pOut[97] = fPmQx*pIn[97] + 2*i2e*pIn[62];
      pOut[98] = fPmQx*pIn[98];
      pOut[99] = fPmQx*pIn[99] + 3*i2e*pIn[67];
      pOut[100] = fPmQx*pIn[100] + 3*i2e*pIn[68];
      pOut[101] = fPmQx*pIn[101] + 4*i2e*pIn[71];
      pOut[102] = fPmQx*pIn[102];
      pOut[103] = fPmQx*pIn[103] + 4*i2e*pIn[72];
      pOut[104] = fPmQx*pIn[104];
      pOut[105] = fPmQx*pIn[105] + 5*i2e*pIn[76];
      pOut[106] = fPmQx*pIn[106] + i2e*pIn[63];
      pOut[107] = fPmQx*pIn[107] + i2e*pIn[64];
      pOut[108] = fPmQx*pIn[108] + i2e*pIn[69];
      pOut[109] = fPmQx*pIn[109] + i2e*pIn[70];
      pOut[110] = fPmQx*pIn[110] + 4*i2e*pIn[77];
      pOut[111] = fPmQx*pIn[111] + 2*i2e*pIn[74];
      pOut[112] = fPmQx*pIn[112] + 4*i2e*pIn[79];
      pOut[113] = fPmQx*pIn[113] + 2*i2e*pIn[75];
      pOut[114] = fPmQx*pIn[114] + 3*i2e*pIn[81];
      pOut[115] = fPmQx*pIn[115] + 3*i2e*pIn[82];
      pOut[116] = fPmQx*pIn[116] + i2e*pIn[73];
      pOut[117] = fPmQx*pIn[117] + 3*i2e*pIn[83];
      pOut[118] = fPmQx*pIn[118] + 2*i2e*pIn[78];
      pOut[119] = fPmQx*pIn[119] + 2*i2e*pIn[80];
      if (lab == 7) return;
   case 8:
      pOut[120] = fPmQx*pIn[120] + 8*i2e*pIn[84];
      pOut[121] = fPmQx*pIn[121];
      pOut[122] = fPmQx*pIn[122];
      pOut[123] = fPmQx*pIn[123] + 7*i2e*pIn[89];
      pOut[124] = fPmQx*pIn[124] + i2e*pIn[85];
      pOut[125] = fPmQx*pIn[125] + 7*i2e*pIn[91];
      pOut[126] = fPmQx*pIn[126] + i2e*pIn[86];
      pOut[127] = fPmQx*pIn[127];
      pOut[128] = fPmQx*pIn[128];
      pOut[129] = fPmQx*pIn[129] + 6*i2e*pIn[93];
      pOut[130] = fPmQx*pIn[130] + 6*i2e*pIn[94];
      pOut[131] = fPmQx*pIn[131] + 2*i2e*pIn[87];
      pOut[132] = fPmQx*pIn[132] + 2*i2e*pIn[88];
      pOut[133] = fPmQx*pIn[133];
      pOut[134] = fPmQx*pIn[134];
      pOut[135] = fPmQx*pIn[135] + 5*i2e*pIn[101];
      pOut[136] = fPmQx*pIn[136] + 3*i2e*pIn[95];
      pOut[137] = fPmQx*pIn[137] + 5*i2e*pIn[103];
      pOut[138] = fPmQx*pIn[138] + 3*i2e*pIn[97];
      pOut[139] = fPmQx*pIn[139];
      pOut[140] = fPmQx*pIn[140];
      pOut[141] = fPmQx*pIn[141] + 4*i2e*pIn[99];
      pOut[142] = fPmQx*pIn[142] + 4*i2e*pIn[100];
      pOut[143] = fPmQx*pIn[143];
      pOut[144] = fPmQx*pIn[144] + i2e*pIn[90];
      pOut[145] = fPmQx*pIn[145] + i2e*pIn[92];
      pOut[146] = fPmQx*pIn[146] + 6*i2e*pIn[105];
      pOut[147] = fPmQx*pIn[147] + 5*i2e*pIn[110];
      pOut[148] = fPmQx*pIn[148] + i2e*pIn[96];
      pOut[149] = fPmQx*pIn[149] + 5*i2e*pIn[112];
      pOut[150] = fPmQx*pIn[150] + i2e*pIn[98];
      pOut[151] = fPmQx*pIn[151] + 2*i2e*pIn[106];
      pOut[152] = fPmQx*pIn[152] + 2*i2e*pIn[107];
      pOut[153] = fPmQx*pIn[153] + 3*i2e*pIn[111];
      pOut[154] = fPmQx*pIn[154] + i2e*pIn[102];
      pOut[155] = fPmQx*pIn[155] + 3*i2e*pIn[113];
      pOut[156] = fPmQx*pIn[156] + i2e*pIn[104];
      pOut[157] = fPmQx*pIn[157] + 4*i2e*pIn[114];
      pOut[158] = fPmQx*pIn[158] + 4*i2e*pIn[115];
      pOut[159] = fPmQx*pIn[159] + 4*i2e*pIn[117];
      pOut[160] = fPmQx*pIn[160] + 2*i2e*pIn[108];
      pOut[161] = fPmQx*pIn[161] + 2*i2e*pIn[109];
      pOut[162] = fPmQx*pIn[162] + 3*i2e*pIn[118];
      pOut[163] = fPmQx*pIn[163] + 3*i2e*pIn[119];
      pOut[164] = fPmQx*pIn[164] + 2*i2e*pIn[116];
      if (lab == 8) return;
   case 9:
      pOut[165] = fPmQx*pIn[165] + 9*i2e*pIn[120];
      pOut[166] = fPmQx*pIn[166];
      pOut[167] = fPmQx*pIn[167];
      pOut[168] = fPmQx*pIn[168] + i2e*pIn[121];
      pOut[169] = fPmQx*pIn[169] + i2e*pIn[122];
      pOut[170] = fPmQx*pIn[170] + 8*i2e*pIn[123];
      pOut[171] = fPmQx*pIn[171];
      pOut[172] = fPmQx*pIn[172] + 8*i2e*pIn[125];
      pOut[173] = fPmQx*pIn[173];
      pOut[174] = fPmQx*pIn[174] + 7*i2e*pIn[129];
      pOut[175] = fPmQx*pIn[175] + 7*i2e*pIn[130];
      pOut[176] = fPmQx*pIn[176] + 2*i2e*pIn[124];
      pOut[177] = fPmQx*pIn[177];
      pOut[178] = fPmQx*pIn[178] + 2*i2e*pIn[126];
      pOut[179] = fPmQx*pIn[179];
      pOut[180] = fPmQx*pIn[180] + 3*i2e*pIn[131];
      pOut[181] = fPmQx*pIn[181] + 3*i2e*pIn[132];
      pOut[182] = fPmQx*pIn[182] + 6*i2e*pIn[135];
      pOut[183] = fPmQx*pIn[183];
      pOut[184] = fPmQx*pIn[184] + 6*i2e*pIn[137];
      pOut[185] = fPmQx*pIn[185];
      pOut[186] = fPmQx*pIn[186] + 5*i2e*pIn[141];
      pOut[187] = fPmQx*pIn[187] + 5*i2e*pIn[142];
      pOut[188] = fPmQx*pIn[188] + 4*i2e*pIn[136];
      pOut[189] = fPmQx*pIn[189];
      pOut[190] = fPmQx*pIn[190] + 4*i2e*pIn[138];
      pOut[191] = fPmQx*pIn[191];
      pOut[192] = fPmQx*pIn[192] + 7*i2e*pIn[146];
      pOut[193] = fPmQx*pIn[193] + i2e*pIn[127];
      pOut[194] = fPmQx*pIn[194] + i2e*pIn[128];
      pOut[195] = fPmQx*pIn[195] + i2e*pIn[133];
      pOut[196] = fPmQx*pIn[196] + i2e*pIn[134];
      pOut[197] = fPmQx*pIn[197] + 6*i2e*pIn[147];
      pOut[198] = fPmQx*pIn[198] + 2*i2e*pIn[144];
      pOut[199] = fPmQx*pIn[199] + 6*i2e*pIn[149];
      pOut[200] = fPmQx*pIn[200] + 2*i2e*pIn[145];
      pOut[201] = fPmQx*pIn[201] + 5*i2e*pIn[157];
      pOut[202] = fPmQx*pIn[202] + 5*i2e*pIn[158];
      pOut[203] = fPmQx*pIn[203] + 3*i2e*pIn[151];
      pOut[204] = fPmQx*pIn[204] + 3*i2e*pIn[152];
      pOut[205] = fPmQx*pIn[205] + i2e*pIn[139];
      pOut[206] = fPmQx*pIn[206] + i2e*pIn[140];
      pOut[207] = fPmQx*pIn[207] + i2e*pIn[143];
      pOut[208] = fPmQx*pIn[208] + 4*i2e*pIn[153];
      pOut[209] = fPmQx*pIn[209] + 4*i2e*pIn[155];
      pOut[210] = fPmQx*pIn[210] + 5*i2e*pIn[159];
      pOut[211] = fPmQx*pIn[211] + 2*i2e*pIn[148];
      pOut[212] = fPmQx*pIn[212] + 2*i2e*pIn[150];
      pOut[213] = fPmQx*pIn[213] + 3*i2e*pIn[160];
      pOut[214] = fPmQx*pIn[214] + 3*i2e*pIn[161];
      pOut[215] = fPmQx*pIn[215] + 4*i2e*pIn[162];
      pOut[216] = fPmQx*pIn[216] + 2*i2e*pIn[154];
      pOut[217] = fPmQx*pIn[217] + 4*i2e*pIn[163];
      pOut[218] = fPmQx*pIn[218] + 2*i2e*pIn[156];
      pOut[219] = fPmQx*pIn[219] + 3*i2e*pIn[164];
      if (lab == 9) return;
   case 10:
      pOut[220] = fPmQx*pIn[220] + 10*i2e*pIn[165];
      pOut[221] = fPmQx*pIn[221];
      pOut[222] = fPmQx*pIn[222];
      pOut[223] = fPmQx*pIn[223] + 9*i2e*pIn[170];
      pOut[224] = fPmQx*pIn[224] + i2e*pIn[166];
      pOut[225] = fPmQx*pIn[225] + 9*i2e*pIn[172];
      pOut[226] = fPmQx*pIn[226] + i2e*pIn[167];
      pOut[227] = fPmQx*pIn[227];
      pOut[228] = fPmQx*pIn[228];
      pOut[229] = fPmQx*pIn[229] + 8*i2e*pIn[174];
      pOut[230] = fPmQx*pIn[230] + 8*i2e*pIn[175];
      pOut[231] = fPmQx*pIn[231] + 2*i2e*pIn[168];
      pOut[232] = fPmQx*pIn[232] + 2*i2e*pIn[169];
      pOut[233] = fPmQx*pIn[233];
      pOut[234] = fPmQx*pIn[234];
      pOut[235] = fPmQx*pIn[235] + 7*i2e*pIn[182];
      pOut[236] = fPmQx*pIn[236] + 3*i2e*pIn[176];
      pOut[237] = fPmQx*pIn[237] + 7*i2e*pIn[184];
      pOut[238] = fPmQx*pIn[238] + 3*i2e*pIn[178];
      pOut[239] = fPmQx*pIn[239];
      pOut[240] = fPmQx*pIn[240];
      pOut[241] = fPmQx*pIn[241] + 6*i2e*pIn[186];
      pOut[242] = fPmQx*pIn[242] + 6*i2e*pIn[187];
      pOut[243] = fPmQx*pIn[243] + 4*i2e*pIn[180];
      pOut[244] = fPmQx*pIn[244] + 4*i2e*pIn[181];
      pOut[245] = fPmQx*pIn[245];
      pOut[246] = fPmQx*pIn[246];
      pOut[247] = fPmQx*pIn[247] + 5*i2e*pIn[188];
      pOut[248] = fPmQx*pIn[248] + 5*i2e*pIn[190];
      pOut[249] = fPmQx*pIn[249];
      pOut[250] = fPmQx*pIn[250] + i2e*pIn[171];
      pOut[251] = fPmQx*pIn[251] + i2e*pIn[173];
      pOut[252] = fPmQx*pIn[252] + 8*i2e*pIn[192];
      pOut[253] = fPmQx*pIn[253] + 7*i2e*pIn[197];
      pOut[254] = fPmQx*pIn[254] + i2e*pIn[177];
      pOut[255] = fPmQx*pIn[255] + 7*i2e*pIn[199];
      pOut[256] = fPmQx*pIn[256] + i2e*pIn[179];
      pOut[257] = fPmQx*pIn[257] + 2*i2e*pIn[193];
      pOut[258] = fPmQx*pIn[258] + 2*i2e*pIn[194];
      pOut[259] = fPmQx*pIn[259] + 3*i2e*pIn[198];
      pOut[260] = fPmQx*pIn[260] + i2e*pIn[183];
      pOut[261] = fPmQx*pIn[261] + 3*i2e*pIn[200];
      pOut[262] = fPmQx*pIn[262] + i2e*pIn[185];
      pOut[263] = fPmQx*pIn[263] + 6*i2e*pIn[201];
      pOut[264] = fPmQx*pIn[264] + 6*i2e*pIn[202];
      pOut[265] = fPmQx*pIn[265] + 5*i2e*pIn[208];
      pOut[266] = fPmQx*pIn[266] + i2e*pIn[189];
      pOut[267] = fPmQx*pIn[267] + 5*i2e*pIn[209];
      pOut[268] = fPmQx*pIn[268] + i2e*pIn[191];
      pOut[269] = fPmQx*pIn[269] + 4*i2e*pIn[203];
      pOut[270] = fPmQx*pIn[270] + 4*i2e*pIn[204];
      pOut[271] = fPmQx*pIn[271] + 6*i2e*pIn[210];
      pOut[272] = fPmQx*pIn[272] + 2*i2e*pIn[195];
      pOut[273] = fPmQx*pIn[273] + 2*i2e*pIn[196];
      pOut[274] = fPmQx*pIn[274] + 5*i2e*pIn[215];
      pOut[275] = fPmQx*pIn[275] + 3*i2e*pIn[211];
      pOut[276] = fPmQx*pIn[276] + 5*i2e*pIn[217];
      pOut[277] = fPmQx*pIn[277] + 3*i2e*pIn[212];
      pOut[278] = fPmQx*pIn[278] + 2*i2e*pIn[205];
      pOut[279] = fPmQx*pIn[279] + 2*i2e*pIn[206];
      pOut[280] = fPmQx*pIn[280] + 4*i2e*pIn[213];
      pOut[281] = fPmQx*pIn[281] + 4*i2e*pIn[214];
      pOut[282] = fPmQx*pIn[282] + 2*i2e*pIn[207];
      pOut[283] = fPmQx*pIn[283] + 3*i2e*pIn[216];
      pOut[284] = fPmQx*pIn[284] + 3*i2e*pIn[218];
      pOut[285] = fPmQx*pIn[285] + 4*i2e*pIn[219];
      if (lab == 10) return;
   case 11:
      pOut[286] = fPmQx*pIn[286] + 11*i2e*pIn[220];
      pOut[287] = fPmQx*pIn[287];
      pOut[288] = fPmQx*pIn[288];
      pOut[289] = fPmQx*pIn[289] + i2e*pIn[221];
      pOut[290] = fPmQx*pIn[290] + i2e*pIn[222];
      pOut[291] = fPmQx*pIn[291] + 10*i2e*pIn[223];
      pOut[292] = fPmQx*pIn[292];
      pOut[293] = fPmQx*pIn[293] + 10*i2e*pIn[225];
      pOut[294] = fPmQx*pIn[294];
      pOut[295] = fPmQx*pIn[295] + 9*i2e*pIn[229];
      pOut[296] = fPmQx*pIn[296] + 9*i2e*pIn[230];
      pOut[297] = fPmQx*pIn[297] + 2*i2e*pIn[224];
      pOut[298] = fPmQx*pIn[298];
      pOut[299] = fPmQx*pIn[299] + 2*i2e*pIn[226];
      pOut[300] = fPmQx*pIn[300];
      pOut[301] = fPmQx*pIn[301] + 3*i2e*pIn[231];
      pOut[302] = fPmQx*pIn[302] + 3*i2e*pIn[232];
      pOut[303] = fPmQx*pIn[303] + 8*i2e*pIn[235];
      pOut[304] = fPmQx*pIn[304];
      pOut[305] = fPmQx*pIn[305] + 8*i2e*pIn[237];
      pOut[306] = fPmQx*pIn[306];
      pOut[307] = fPmQx*pIn[307] + 7*i2e*pIn[241];
      pOut[308] = fPmQx*pIn[308] + 7*i2e*pIn[242];
      pOut[309] = fPmQx*pIn[309] + 4*i2e*pIn[236];
      pOut[310] = fPmQx*pIn[310];
      pOut[311] = fPmQx*pIn[311] + 4*i2e*pIn[238];
      pOut[312] = fPmQx*pIn[312];
      pOut[313] = fPmQx*pIn[313] + 5*i2e*pIn[243];
      pOut[314] = fPmQx*pIn[314] + 5*i2e*pIn[244];
      pOut[315] = fPmQx*pIn[315] + 6*i2e*pIn[247];
      pOut[316] = fPmQx*pIn[316];
      pOut[317] = fPmQx*pIn[317] + 6*i2e*pIn[248];
      pOut[318] = fPmQx*pIn[318];
      pOut[319] = fPmQx*pIn[319] + 9*i2e*pIn[252];
      pOut[320] = fPmQx*pIn[320] + i2e*pIn[227];
      pOut[321] = fPmQx*pIn[321] + i2e*pIn[228];
      pOut[322] = fPmQx*pIn[322] + i2e*pIn[233];
      pOut[323] = fPmQx*pIn[323] + i2e*pIn[234];
      pOut[324] = fPmQx*pIn[324] + 8*i2e*pIn[253];
      pOut[325] = fPmQx*pIn[325] + 2*i2e*pIn[250];
      pOut[326] = fPmQx*pIn[326] + 8*i2e*pIn[255];
      pOut[327] = fPmQx*pIn[327] + 2*i2e*pIn[251];
      pOut[328] = fPmQx*pIn[328] + 7*i2e*pIn[263];
      pOut[329] = fPmQx*pIn[329] + 7*i2e*pIn[264];
      pOut[330] = fPmQx*pIn[330] + 3*i2e*pIn[257];
      pOut[331] = fPmQx*pIn[331] + 3*i2e*pIn[258];
      pOut[332] = fPmQx*pIn[332] + i2e*pIn[239];
      pOut[333] = fPmQx*pIn[333] + i2e*pIn[240];
      pOut[334] = fPmQx*pIn[334] + i2e*pIn[245];
      pOut[335] = fPmQx*pIn[335] + i2e*pIn[246];
      pOut[336] = fPmQx*pIn[336] + 6*i2e*pIn[265];
      pOut[337] = fPmQx*pIn[337] + 4*i2e*pIn[259];
      pOut[338] = fPmQx*pIn[338] + 6*i2e*pIn[267];
      pOut[339] = fPmQx*pIn[339] + 4*i2e*pIn[261];
      pOut[340] = fPmQx*pIn[340] + 5*i2e*pIn[269];
      pOut[341] = fPmQx*pIn[341] + 5*i2e*pIn[270];
      pOut[342] = fPmQx*pIn[342] + i2e*pIn[249];
      pOut[343] = fPmQx*pIn[343] + 7*i2e*pIn[271];
      pOut[344] = fPmQx*pIn[344] + 2*i2e*pIn[254];
      pOut[345] = fPmQx*pIn[345] + 2*i2e*pIn[256];
      pOut[346] = fPmQx*pIn[346] + 3*i2e*pIn[272];
      pOut[347] = fPmQx*pIn[347] + 3*i2e*pIn[273];
      pOut[348] = fPmQx*pIn[348] + 6*i2e*pIn[274];
      pOut[349] = fPmQx*pIn[349] + 2*i2e*pIn[260];
      pOut[350] = fPmQx*pIn[350] + 6*i2e*pIn[276];
      pOut[351] = fPmQx*pIn[351] + 2*i2e*pIn[262];
      pOut[352] = fPmQx*pIn[352] + 5*i2e*pIn[280];
      pOut[353] = fPmQx*pIn[353] + 5*i2e*pIn[281];
      pOut[354] = fPmQx*pIn[354] + 4*i2e*pIn[275];
      pOut[355] = fPmQx*pIn[355] + 2*i2e*pIn[266];
      pOut[356] = fPmQx*pIn[356] + 4*i2e*pIn[277];
      pOut[357] = fPmQx*pIn[357] + 2*i2e*pIn[268];
      pOut[358] = fPmQx*pIn[358] + 5*i2e*pIn[285];
      pOut[359] = fPmQx*pIn[359] + 3*i2e*pIn[278];
      pOut[360] = fPmQx*pIn[360] + 3*i2e*pIn[279];
      pOut[361] = fPmQx*pIn[361] + 3*i2e*pIn[282];
      pOut[362] = fPmQx*pIn[362] + 4*i2e*pIn[283];
      pOut[363] = fPmQx*pIn[363] + 4*i2e*pIn[284];
      if (lab == 11) return;
   case 12:
      pOut[364] = fPmQx*pIn[364] + 12*i2e*pIn[286];
      pOut[365] = fPmQx*pIn[365];
      pOut[366] = fPmQx*pIn[366];
      pOut[367] = fPmQx*pIn[367] + 11*i2e*pIn[291];
      pOut[368] = fPmQx*pIn[368] + i2e*pIn[287];
      pOut[369] = fPmQx*pIn[369] + 11*i2e*pIn[293];
      pOut[370] = fPmQx*pIn[370] + i2e*pIn[288];
      pOut[371] = fPmQx*pIn[371];
      pOut[372] = fPmQx*pIn[372];
      pOut[373] = fPmQx*pIn[373] + 10*i2e*pIn[295];
      pOut[374] = fPmQx*pIn[374] + 10*i2e*pIn[296];
      pOut[375] = fPmQx*pIn[375] + 2*i2e*pIn[289];
      pOut[376] = fPmQx*pIn[376] + 2*i2e*pIn[290];
      pOut[377] = fPmQx*pIn[377];
      pOut[378] = fPmQx*pIn[378];
      pOut[379] = fPmQx*pIn[379] + 9*i2e*pIn[303];
      pOut[380] = fPmQx*pIn[380] + 3*i2e*pIn[297];
      pOut[381] = fPmQx*pIn[381] + 9*i2e*pIn[305];
      pOut[382] = fPmQx*pIn[382] + 3*i2e*pIn[299];
      pOut[383] = fPmQx*pIn[383];
      pOut[384] = fPmQx*pIn[384];
      pOut[385] = fPmQx*pIn[385] + 8*i2e*pIn[307];
      pOut[386] = fPmQx*pIn[386] + 8*i2e*pIn[308];
      pOut[387] = fPmQx*pIn[387] + 4*i2e*pIn[301];
      pOut[388] = fPmQx*pIn[388] + 4*i2e*pIn[302];
      pOut[389] = fPmQx*pIn[389];
      pOut[390] = fPmQx*pIn[390];
      pOut[391] = fPmQx*pIn[391] + 7*i2e*pIn[315];
      pOut[392] = fPmQx*pIn[392] + 5*i2e*pIn[309];
      pOut[393] = fPmQx*pIn[393] + 7*i2e*pIn[317];
      pOut[394] = fPmQx*pIn[394] + 5*i2e*pIn[311];
      pOut[395] = fPmQx*pIn[395];
      pOut[396] = fPmQx*pIn[396];
      pOut[397] = fPmQx*pIn[397] + 6*i2e*pIn[313];
      pOut[398] = fPmQx*pIn[398] + 6*i2e*pIn[314];
      pOut[399] = fPmQx*pIn[399];
      pOut[400] = fPmQx*pIn[400] + i2e*pIn[292];
      pOut[401] = fPmQx*pIn[401] + i2e*pIn[294];
      pOut[402] = fPmQx*pIn[402] + 10*i2e*pIn[319];
      pOut[403] = fPmQx*pIn[403] + 9*i2e*pIn[324];
      pOut[404] = fPmQx*pIn[404] + i2e*pIn[298];
      pOut[405] = fPmQx*pIn[405] + 9*i2e*pIn[326];
      pOut[406] = fPmQx*pIn[406] + i2e*pIn[300];
      pOut[407] = fPmQx*pIn[407] + 2*i2e*pIn[320];
      pOut[408] = fPmQx*pIn[408] + 2*i2e*pIn[321];
      pOut[409] = fPmQx*pIn[409] + 3*i2e*pIn[325];
      pOut[410] = fPmQx*pIn[410] + i2e*pIn[304];
      pOut[411] = fPmQx*pIn[411] + 3*i2e*pIn[327];
      pOut[412] = fPmQx*pIn[412] + i2e*pIn[306];
      pOut[413] = fPmQx*pIn[413] + 8*i2e*pIn[328];
      pOut[414] = fPmQx*pIn[414] + 8*i2e*pIn[329];
      pOut[415] = fPmQx*pIn[415] + 7*i2e*pIn[336];
      pOut[416] = fPmQx*pIn[416] + i2e*pIn[310];
      pOut[417] = fPmQx*pIn[417] + 7*i2e*pIn[338];
      pOut[418] = fPmQx*pIn[418] + i2e*pIn[312];
      pOut[419] = fPmQx*pIn[419] + 4*i2e*pIn[330];
      pOut[420] = fPmQx*pIn[420] + 4*i2e*pIn[331];
      pOut[421] = fPmQx*pIn[421] + 5*i2e*pIn[337];
      pOut[422] = fPmQx*pIn[422] + i2e*pIn[316];
      pOut[423] = fPmQx*pIn[423] + 5*i2e*pIn[339];
      pOut[424] = fPmQx*pIn[424] + i2e*pIn[318];
      pOut[425] = fPmQx*pIn[425] + 6*i2e*pIn[340];
      pOut[426] = fPmQx*pIn[426] + 6*i2e*pIn[341];
      pOut[427] = fPmQx*pIn[427] + 8*i2e*pIn[343];
      pOut[428] = fPmQx*pIn[428] + 2*i2e*pIn[322];
      pOut[429] = fPmQx*pIn[429] + 2*i2e*pIn[323];
      pOut[430] = fPmQx*pIn[430] + 7*i2e*pIn[348];
      pOut[431] = fPmQx*pIn[431] + 3*i2e*pIn[344];
      pOut[432] = fPmQx*pIn[432] + 7*i2e*pIn[350];
      pOut[433] = fPmQx*pIn[433] + 3*i2e*pIn[345];
      pOut[434] = fPmQx*pIn[434] + 2*i2e*pIn[332];
      pOut[435] = fPmQx*pIn[435] + 2*i2e*pIn[333];
      pOut[436] = fPmQx*pIn[436] + 6*i2e*pIn[352];
      pOut[437] = fPmQx*pIn[437] + 6*i2e*pIn[353];
      pOut[438] = fPmQx*pIn[438] + 4*i2e*pIn[346];
      pOut[439] = fPmQx*pIn[439] + 4*i2e*pIn[347];
      pOut[440] = fPmQx*pIn[440] + 2*i2e*pIn[334];
      pOut[441] = fPmQx*pIn[441] + 2*i2e*pIn[335];
      pOut[442] = fPmQx*pIn[442] + 5*i2e*pIn[354];
      pOut[443] = fPmQx*pIn[443] + 5*i2e*pIn[356];
      pOut[444] = fPmQx*pIn[444] + 2*i2e*pIn[342];
      pOut[445] = fPmQx*pIn[445] + 3*i2e*pIn[349];
      pOut[446] = fPmQx*pIn[446] + 3*i2e*pIn[351];
      pOut[447] = fPmQx*pIn[447] + 6*i2e*pIn[358];
      pOut[448] = fPmQx*pIn[448] + 5*i2e*pIn[362];
      pOut[449] = fPmQx*pIn[449] + 3*i2e*pIn[355];
      pOut[450] = fPmQx*pIn[450] + 5*i2e*pIn[363];
      pOut[451] = fPmQx*pIn[451] + 3*i2e*pIn[357];
      pOut[452] = fPmQx*pIn[452] + 4*i2e*pIn[359];
      pOut[453] = fPmQx*pIn[453] + 4*i2e*pIn[360];
      pOut[454] = fPmQx*pIn[454] + 4*i2e*pIn[361];
      if (lab == 12) return;
   case 13:
      pOut[455] = fPmQx*pIn[455] + 13*i2e*pIn[364];
      pOut[456] = fPmQx*pIn[456];
      pOut[457] = fPmQx*pIn[457];
      pOut[458] = fPmQx*pIn[458] + i2e*pIn[365];
      pOut[459] = fPmQx*pIn[459] + i2e*pIn[366];
      pOut[460] = fPmQx*pIn[460] + 12*i2e*pIn[367];
      pOut[461] = fPmQx*pIn[461];
      pOut[462] = fPmQx*pIn[462] + 12*i2e*pIn[369];
      pOut[463] = fPmQx*pIn[463];
      pOut[464] = fPmQx*pIn[464] + 11*i2e*pIn[373];
      pOut[465] = fPmQx*pIn[465] + 11*i2e*pIn[374];
      pOut[466] = fPmQx*pIn[466] + 2*i2e*pIn[368];
      pOut[467] = fPmQx*pIn[467];
      pOut[468] = fPmQx*pIn[468] + 2*i2e*pIn[370];
      pOut[469] = fPmQx*pIn[469];
      pOut[470] = fPmQx*pIn[470] + 3*i2e*pIn[375];
      pOut[471] = fPmQx*pIn[471] + 3*i2e*pIn[376];
      pOut[472] = fPmQx*pIn[472] + 10*i2e*pIn[379];
      pOut[473] = fPmQx*pIn[473];
      pOut[474] = fPmQx*pIn[474] + 10*i2e*pIn[381];
      pOut[475] = fPmQx*pIn[475];
      pOut[476] = fPmQx*pIn[476] + 9*i2e*pIn[385];
      pOut[477] = fPmQx*pIn[477] + 9*i2e*pIn[386];
      pOut[478] = fPmQx*pIn[478] + 4*i2e*pIn[380];
      pOut[479] = fPmQx*pIn[479];
      pOut[480] = fPmQx*pIn[480] + 4*i2e*pIn[382];
      pOut[481] = fPmQx*pIn[481];
      pOut[482] = fPmQx*pIn[482] + 5*i2e*pIn[387];
      pOut[483] = fPmQx*pIn[483] + 5*i2e*pIn[388];
      pOut[484] = fPmQx*pIn[484] + 8*i2e*pIn[391];
      pOut[485] = fPmQx*pIn[485];
      pOut[486] = fPmQx*pIn[486] + 8*i2e*pIn[393];
      pOut[487] = fPmQx*pIn[487];
      pOut[488] = fPmQx*pIn[488] + 7*i2e*pIn[397];
      pOut[489] = fPmQx*pIn[489] + 7*i2e*pIn[398];
      pOut[490] = fPmQx*pIn[490] + 6*i2e*pIn[392];
      pOut[491] = fPmQx*pIn[491];
      pOut[492] = fPmQx*pIn[492] + 6*i2e*pIn[394];
      pOut[493] = fPmQx*pIn[493];
      pOut[494] = fPmQx*pIn[494] + 11*i2e*pIn[402];
      pOut[495] = fPmQx*pIn[495] + i2e*pIn[371];
      pOut[496] = fPmQx*pIn[496] + i2e*pIn[372];
      pOut[497] = fPmQx*pIn[497] + i2e*pIn[377];
      pOut[498] = fPmQx*pIn[498] + i2e*pIn[378];
      pOut[499] = fPmQx*pIn[499] + 10*i2e*pIn[403];
      pOut[500] = fPmQx*pIn[500] + 2*i2e*pIn[400];
      pOut[501] = fPmQx*pIn[501] + 10*i2e*pIn[405];
      pOut[502] = fPmQx*pIn[502] + 2*i2e*pIn[401];
      pOut[503] = fPmQx*pIn[503] + 9*i2e*pIn[413];
      pOut[504] = fPmQx*pIn[504] + 9*i2e*pIn[414];
      pOut[505] = fPmQx*pIn[505] + 3*i2e*pIn[407];
      pOut[506] = fPmQx*pIn[506] + 3*i2e*pIn[408];
      pOut[507] = fPmQx*pIn[507] + i2e*pIn[383];
      pOut[508] = fPmQx*pIn[508] + i2e*pIn[384];
      pOut[509] = fPmQx*pIn[509] + i2e*pIn[389];
      pOut[510] = fPmQx*pIn[510] + i2e*pIn[390];
      pOut[511] = fPmQx*pIn[511] + 8*i2e*pIn[415];
      pOut[512] = fPmQx*pIn[512] + 4*i2e*pIn[409];
      pOut[513] = fPmQx*pIn[513] + 8*i2e*pIn[417];
      pOut[514] = fPmQx*pIn[514] + 4*i2e*pIn[411];
      pOut[515] = fPmQx*pIn[515] + 7*i2e*pIn[425];
      pOut[516] = fPmQx*pIn[516] + 7*i2e*pIn[426];
      pOut[517] = fPmQx*pIn[517] + 5*i2e*pIn[419];
      pOut[518] = fPmQx*pIn[518] + 5*i2e*pIn[420];
      pOut[519] = fPmQx*pIn[519] + i2e*pIn[395];
      pOut[520] = fPmQx*pIn[520] + i2e*pIn[396];
      pOut[521] = fPmQx*pIn[521] + i2e*pIn[399];
      pOut[522] = fPmQx*pIn[522] + 6*i2e*pIn[421];
      pOut[523] = fPmQx*pIn[523] + 6*i2e*pIn[423];
      pOut[524] = fPmQx*pIn[524] + 9*i2e*pIn[427];
      pOut[525] = fPmQx*pIn[525] + 2*i2e*pIn[404];
      pOut[526] = fPmQx*pIn[526] + 2*i2e*pIn[406];
      pOut[527] = fPmQx*pIn[527] + 3*i2e*pIn[428];
      pOut[528] = fPmQx*pIn[528] + 3*i2e*pIn[429];
      pOut[529] = fPmQx*pIn[529] + 8*i2e*pIn[430];
      pOut[530] = fPmQx*pIn[530] + 2*i2e*pIn[410];
      pOut[531] = fPmQx*pIn[531] + 8*i2e*pIn[432];
      pOut[532] = fPmQx*pIn[532] + 2*i2e*pIn[412];
      pOut[533] = fPmQx*pIn[533] + 7*i2e*pIn[436];
      pOut[534] = fPmQx*pIn[534] + 7*i2e*pIn[437];
      pOut[535] = fPmQx*pIn[535] + 4*i2e*pIn[431];
      pOut[536] = fPmQx*pIn[536] + 2*i2e*pIn[416];
      pOut[537] = fPmQx*pIn[537] + 4*i2e*pIn[433];
      pOut[538] = fPmQx*pIn[538] + 2*i2e*pIn[418];
      pOut[539] = fPmQx*pIn[539] + 5*i2e*pIn[438];
      pOut[540] = fPmQx*pIn[540] + 5*i2e*pIn[439];
      pOut[541] = fPmQx*pIn[541] + 6*i2e*pIn[442];
      pOut[542] = fPmQx*pIn[542] + 2*i2e*pIn[422];
      pOut[543] = fPmQx*pIn[543] + 6*i2e*pIn[443];
      pOut[544] = fPmQx*pIn[544] + 2*i2e*pIn[424];
      pOut[545] = fPmQx*pIn[545] + 7*i2e*pIn[447];
      pOut[546] = fPmQx*pIn[546] + 3*i2e*pIn[434];
      pOut[547] = fPmQx*pIn[547] + 3*i2e*pIn[435];
      pOut[548] = fPmQx*pIn[548] + 3*i2e*pIn[440];
      pOut[549] = fPmQx*pIn[549] + 3*i2e*pIn[441];
      pOut[550] = fPmQx*pIn[550] + 6*i2e*pIn[448];
      pOut[551] = fPmQx*pIn[551] + 4*i2e*pIn[445];
      pOut[552] = fPmQx*pIn[552] + 6*i2e*pIn[450];
      pOut[553] = fPmQx*pIn[553] + 4*i2e*pIn[446];
      pOut[554] = fPmQx*pIn[554] + 5*i2e*pIn[452];
      pOut[555] = fPmQx*pIn[555] + 5*i2e*pIn[453];
      pOut[556] = fPmQx*pIn[556] + 3*i2e*pIn[444];
      pOut[557] = fPmQx*pIn[557] + 5*i2e*pIn[454];
      pOut[558] = fPmQx*pIn[558] + 4*i2e*pIn[449];
      pOut[559] = fPmQx*pIn[559] + 4*i2e*pIn[451];
      if (lab == 13) return;
   case 14:
      pOut[560] = fPmQx*pIn[560] + 14*i2e*pIn[455];
      pOut[561] = fPmQx*pIn[561];
      pOut[562] = fPmQx*pIn[562];
      pOut[563] = fPmQx*pIn[563] + 13*i2e*pIn[460];
      pOut[564] = fPmQx*pIn[564] + i2e*pIn[456];
      pOut[565] = fPmQx*pIn[565] + 13*i2e*pIn[462];
      pOut[566] = fPmQx*pIn[566] + i2e*pIn[457];
      pOut[567] = fPmQx*pIn[567];
      pOut[568] = fPmQx*pIn[568];
      pOut[569] = fPmQx*pIn[569] + 12*i2e*pIn[464];
      pOut[570] = fPmQx*pIn[570] + 12*i2e*pIn[465];
      pOut[571] = fPmQx*pIn[571] + 2*i2e*pIn[458];
      pOut[572] = fPmQx*pIn[572] + 2*i2e*pIn[459];
      pOut[573] = fPmQx*pIn[573];
      pOut[574] = fPmQx*pIn[574];
      pOut[575] = fPmQx*pIn[575] + 11*i2e*pIn[472];
      pOut[576] = fPmQx*pIn[576] + 3*i2e*pIn[466];
      pOut[577] = fPmQx*pIn[577] + 11*i2e*pIn[474];
      pOut[578] = fPmQx*pIn[578] + 3*i2e*pIn[468];
      pOut[579] = fPmQx*pIn[579];
      pOut[580] = fPmQx*pIn[580];
      pOut[581] = fPmQx*pIn[581] + 10*i2e*pIn[476];
      pOut[582] = fPmQx*pIn[582] + 10*i2e*pIn[477];
      pOut[583] = fPmQx*pIn[583] + 4*i2e*pIn[470];
      pOut[584] = fPmQx*pIn[584] + 4*i2e*pIn[471];
      pOut[585] = fPmQx*pIn[585];
      pOut[586] = fPmQx*pIn[586];
      pOut[587] = fPmQx*pIn[587] + 9*i2e*pIn[484];
      pOut[588] = fPmQx*pIn[588] + 5*i2e*pIn[478];
      pOut[589] = fPmQx*pIn[589] + 9*i2e*pIn[486];
      pOut[590] = fPmQx*pIn[590] + 5*i2e*pIn[480];
      pOut[591] = fPmQx*pIn[591];
      pOut[592] = fPmQx*pIn[592];
      pOut[593] = fPmQx*pIn[593] + 8*i2e*pIn[488];
      pOut[594] = fPmQx*pIn[594] + 8*i2e*pIn[489];
      pOut[595] = fPmQx*pIn[595] + 6*i2e*pIn[482];
      pOut[596] = fPmQx*pIn[596] + 6*i2e*pIn[483];
      pOut[597] = fPmQx*pIn[597];
      pOut[598] = fPmQx*pIn[598];
      pOut[599] = fPmQx*pIn[599] + 7*i2e*pIn[490];
      pOut[600] = fPmQx*pIn[600] + 7*i2e*pIn[492];
      pOut[601] = fPmQx*pIn[601];
      pOut[602] = fPmQx*pIn[602] + i2e*pIn[461];
      pOut[603] = fPmQx*pIn[603] + i2e*pIn[463];
      pOut[604] = fPmQx*pIn[604] + 12*i2e*pIn[494];
      pOut[605] = fPmQx*pIn[605] + 11*i2e*pIn[499];
      pOut[606] = fPmQx*pIn[606] + i2e*pIn[467];
      pOut[607] = fPmQx*pIn[607] + 11*i2e*pIn[501];
      pOut[608] = fPmQx*pIn[608] + i2e*pIn[469];
      pOut[609] = fPmQx*pIn[609] + 2*i2e*pIn[495];
      pOut[610] = fPmQx*pIn[610] + 2*i2e*pIn[496];
      pOut[611] = fPmQx*pIn[611] + 3*i2e*pIn[500];
      pOut[612] = fPmQx*pIn[612] + i2e*pIn[473];
      pOut[613] = fPmQx*pIn[613] + 3*i2e*pIn[502];
      pOut[614] = fPmQx*pIn[614] + i2e*pIn[475];
      pOut[615] = fPmQx*pIn[615] + 10*i2e*pIn[503];
      pOut[616] = fPmQx*pIn[616] + 10*i2e*pIn[504];
      pOut[617] = fPmQx*pIn[617] + 9*i2e*pIn[511];
      pOut[618] = fPmQx*pIn[618] + i2e*pIn[479];
      pOut[619] = fPmQx*pIn[619] + 9*i2e*pIn[513];
      pOut[620] = fPmQx*pIn[620] + i2e*pIn[481];
      pOut[621] = fPmQx*pIn[621] + 4*i2e*pIn[505];
      pOut[622] = fPmQx*pIn[622] + 4*i2e*pIn[506];
      pOut[623] = fPmQx*pIn[623] + 5*i2e*pIn[512];
      pOut[624] = fPmQx*pIn[624] + i2e*pIn[485];
      pOut[625] = fPmQx*pIn[625] + 5*i2e*pIn[514];
      pOut[626] = fPmQx*pIn[626] + i2e*pIn[487];
      pOut[627] = fPmQx*pIn[627] + 8*i2e*pIn[515];
      pOut[628] = fPmQx*pIn[628] + 8*i2e*pIn[516];
      pOut[629] = fPmQx*pIn[629] + 7*i2e*pIn[522];
      pOut[630] = fPmQx*pIn[630] + i2e*pIn[491];
      pOut[631] = fPmQx*pIn[631] + 7*i2e*pIn[523];
      pOut[632] = fPmQx*pIn[632] + i2e*pIn[493];
      pOut[633] = fPmQx*pIn[633] + 6*i2e*pIn[517];
      pOut[634] = fPmQx*pIn[634] + 6*i2e*pIn[518];
      pOut[635] = fPmQx*pIn[635] + 10*i2e*pIn[524];
      pOut[636] = fPmQx*pIn[636] + 2*i2e*pIn[497];
      pOut[637] = fPmQx*pIn[637] + 2*i2e*pIn[498];
      pOut[638] = fPmQx*pIn[638] + 9*i2e*pIn[529];
      pOut[639] = fPmQx*pIn[639] + 3*i2e*pIn[525];
      pOut[640] = fPmQx*pIn[640] + 9*i2e*pIn[531];
      pOut[641] = fPmQx*pIn[641] + 3*i2e*pIn[526];
      pOut[642] = fPmQx*pIn[642] + 2*i2e*pIn[507];
      pOut[643] = fPmQx*pIn[643] + 2*i2e*pIn[508];
      pOut[644] = fPmQx*pIn[644] + 8*i2e*pIn[533];
      pOut[645] = fPmQx*pIn[645] + 8*i2e*pIn[534];
      pOut[646] = fPmQx*pIn[646] + 4*i2e*pIn[527];
      pOut[647] = fPmQx*pIn[647] + 4*i2e*pIn[528];
      pOut[648] = fPmQx*pIn[648] + 2*i2e*pIn[509];
      pOut[649] = fPmQx*pIn[649] + 2*i2e*pIn[510];
      pOut[650] = fPmQx*pIn[650] + 7*i2e*pIn[541];
      pOut[651] = fPmQx*pIn[651] + 5*i2e*pIn[535];
      pOut[652] = fPmQx*pIn[652] + 7*i2e*pIn[543];
      pOut[653] = fPmQx*pIn[653] + 5*i2e*pIn[537];
      pOut[654] = fPmQx*pIn[654] + 2*i2e*pIn[519];
      pOut[655] = fPmQx*pIn[655] + 2*i2e*pIn[520];
      pOut[656] = fPmQx*pIn[656] + 6*i2e*pIn[539];
      pOut[657] = fPmQx*pIn[657] + 6*i2e*pIn[540];
      pOut[658] = fPmQx*pIn[658] + 2*i2e*pIn[521];
      pOut[659] = fPmQx*pIn[659] + 3*i2e*pIn[530];
      pOut[660] = fPmQx*pIn[660] + 3*i2e*pIn[532];
      pOut[661] = fPmQx*pIn[661] + 8*i2e*pIn[545];
      pOut[662] = fPmQx*pIn[662] + 7*i2e*pIn[550];
      pOut[663] = fPmQx*pIn[663] + 3*i2e*pIn[536];
      pOut[664] = fPmQx*pIn[664] + 7*i2e*pIn[552];
      pOut[665] = fPmQx*pIn[665] + 3*i2e*pIn[538];
      pOut[666] = fPmQx*pIn[666] + 4*i2e*pIn[546];
      pOut[667] = fPmQx*pIn[667] + 4*i2e*pIn[547];
      pOut[668] = fPmQx*pIn[668] + 5*i2e*pIn[551];
      pOut[669] = fPmQx*pIn[669] + 3*i2e*pIn[542];
      pOut[670] = fPmQx*pIn[670] + 5*i2e*pIn[553];
      pOut[671] = fPmQx*pIn[671] + 3*i2e*pIn[544];
      pOut[672] = fPmQx*pIn[672] + 6*i2e*pIn[554];
      pOut[673] = fPmQx*pIn[673] + 6*i2e*pIn[555];
      pOut[674] = fPmQx*pIn[674] + 6*i2e*pIn[557];
      pOut[675] = fPmQx*pIn[675] + 4*i2e*pIn[548];
      pOut[676] = fPmQx*pIn[676] + 4*i2e*pIn[549];
      pOut[677] = fPmQx*pIn[677] + 5*i2e*pIn[558];
      pOut[678] = fPmQx*pIn[678] + 5*i2e*pIn[559];
      pOut[679] = fPmQx*pIn[679] + 4*i2e*pIn[556];
      if (lab == 14) return;
   }
   //assert(0);
}

// Calculate (a0|c)^m from (a0|c-1y)^{m+1}, for a = la..lab
// i = _x/_y/_z is the reduction direction (x,y,z);
// fPmQi = PmQ[i] * rho/zeta_c; i2e = .5/eta_ABC = .5/(zeta_a + zeta_b + zeta_c)
// note: the la is not for performance reasons (would likely make the actual recurrence
//       slower for small lab) but for preventing overwriting lower components.
static void OsrrB_KerM_y(double * pOut, double const * pIn, double fPmQy, unsigned la, unsigned lab, double i2e)
{
   switch(la) {
   case 0:
      pOut[0] = fPmQy*pIn[0];
      if (lab == 0) return;
   case 1:
      pOut[1] = fPmQy*pIn[1];
      pOut[2] = fPmQy*pIn[2] + i2e*pIn[0];
      pOut[3] = fPmQy*pIn[3];
      if (lab == 1) return;
   case 2:
      pOut[4] = fPmQy*pIn[4];
      pOut[5] = fPmQy*pIn[5] + 2*i2e*pIn[2];
      pOut[6] = fPmQy*pIn[6];
      pOut[7] = fPmQy*pIn[7] + i2e*pIn[1];
      pOut[8] = fPmQy*pIn[8];
      pOut[9] = fPmQy*pIn[9] + i2e*pIn[3];
      if (lab == 2) return;
   case 3:
      pOut[10] = fPmQy*pIn[10];
      pOut[11] = fPmQy*pIn[11] + 3*i2e*pIn[5];
      pOut[12] = fPmQy*pIn[12];
      pOut[13] = fPmQy*pIn[13] + 2*i2e*pIn[7];
      pOut[14] = fPmQy*pIn[14];
      pOut[15] = fPmQy*pIn[15] + i2e*pIn[4];
      pOut[16] = fPmQy*pIn[16] + i2e*pIn[6];
      pOut[17] = fPmQy*pIn[17];
      pOut[18] = fPmQy*pIn[18] + 2*i2e*pIn[9];
      pOut[19] = fPmQy*pIn[19] + i2e*pIn[8];
      if (lab == 3) return;
   case 4:
      pOut[20] = fPmQy*pIn[20];
      pOut[21] = fPmQy*pIn[21] + 4*i2e*pIn[11];
      pOut[22] = fPmQy*pIn[22];
      pOut[23] = fPmQy*pIn[23] + i2e*pIn[10];
      pOut[24] = fPmQy*pIn[24] + 3*i2e*pIn[13];
      pOut[25] = fPmQy*pIn[25];
      pOut[26] = fPmQy*pIn[26];
      pOut[27] = fPmQy*pIn[27] + 3*i2e*pIn[18];
      pOut[28] = fPmQy*pIn[28] + i2e*pIn[12];
      pOut[29] = fPmQy*pIn[29] + 2*i2e*pIn[15];
      pOut[30] = fPmQy*pIn[30];
      pOut[31] = fPmQy*pIn[31] + 2*i2e*pIn[16];
      pOut[32] = fPmQy*pIn[32] + i2e*pIn[14];
      pOut[33] = fPmQy*pIn[33] + 2*i2e*pIn[19];
      pOut[34] = fPmQy*pIn[34] + i2e*pIn[17];
      if (lab == 4) return;
   case 5:
      pOut[35] = fPmQy*pIn[35];
      pOut[36] = fPmQy*pIn[36] + 5*i2e*pIn[21];
      pOut[37] = fPmQy*pIn[37];
      pOut[38] = fPmQy*pIn[38] + 4*i2e*pIn[24];
      pOut[39] = fPmQy*pIn[39];
      pOut[40] = fPmQy*pIn[40] + i2e*pIn[20];
      pOut[41] = fPmQy*pIn[41] + i2e*pIn[22];
      pOut[42] = fPmQy*pIn[42];
      pOut[43] = fPmQy*pIn[43] + 4*i2e*pIn[27];
      pOut[44] = fPmQy*pIn[44] + 2*i2e*pIn[23];
      pOut[45] = fPmQy*pIn[45];
      pOut[46] = fPmQy*pIn[46] + 3*i2e*pIn[29];
      pOut[47] = fPmQy*pIn[47] + 3*i2e*pIn[31];
      pOut[48] = fPmQy*pIn[48];
      pOut[49] = fPmQy*pIn[49] + 2*i2e*pIn[28];
      pOut[50] = fPmQy*pIn[50] + i2e*pIn[25];
      pOut[51] = fPmQy*pIn[51] + 3*i2e*pIn[33];
      pOut[52] = fPmQy*pIn[52] + i2e*pIn[26];
      pOut[53] = fPmQy*pIn[53] + 2*i2e*pIn[32];
      pOut[54] = fPmQy*pIn[54] + i2e*pIn[30];
      pOut[55] = fPmQy*pIn[55] + 2*i2e*pIn[34];
      if (lab == 5) return;
   case 6:
      pOut[56] = fPmQy*pIn[56];
      pOut[57] = fPmQy*pIn[57] + 6*i2e*pIn[36];
      pOut[58] = fPmQy*pIn[58];
      pOut[59] = fPmQy*pIn[59] + i2e*pIn[35];
      pOut[60] = fPmQy*pIn[60] + 5*i2e*pIn[38];
      pOut[61] = fPmQy*pIn[61];
      pOut[62] = fPmQy*pIn[62];
      pOut[63] = fPmQy*pIn[63] + 5*i2e*pIn[43];
      pOut[64] = fPmQy*pIn[64] + i2e*pIn[37];
      pOut[65] = fPmQy*pIn[65] + 2*i2e*pIn[40];
      pOut[66] = fPmQy*pIn[66];
      pOut[67] = fPmQy*pIn[67] + 4*i2e*pIn[46];
      pOut[68] = fPmQy*pIn[68];
      pOut[69] = fPmQy*pIn[69] + 4*i2e*pIn[47];
      pOut[70] = fPmQy*pIn[70] + 2*i2e*pIn[41];
      pOut[71] = fPmQy*pIn[71] + 3*i2e*pIn[44];
      pOut[72] = fPmQy*pIn[72];
      pOut[73] = fPmQy*pIn[73] + 3*i2e*pIn[49];
      pOut[74] = fPmQy*pIn[74] + i2e*pIn[39];
      pOut[75] = fPmQy*pIn[75] + 4*i2e*pIn[51];
      pOut[76] = fPmQy*pIn[76] + i2e*pIn[42];
      pOut[77] = fPmQy*pIn[77] + i2e*pIn[45];
      pOut[78] = fPmQy*pIn[78] + 3*i2e*pIn[53];
      pOut[79] = fPmQy*pIn[79] + 2*i2e*pIn[50];
      pOut[80] = fPmQy*pIn[80] + 2*i2e*pIn[52];
      pOut[81] = fPmQy*pIn[81] + 3*i2e*pIn[55];
      pOut[82] = fPmQy*pIn[82] + i2e*pIn[48];
      pOut[83] = fPmQy*pIn[83] + 2*i2e*pIn[54];
      if (lab == 6) return;
   case 7:
      pOut[84] = fPmQy*pIn[84];
      pOut[85] = fPmQy*pIn[85] + 7*i2e*pIn[57];
      pOut[86] = fPmQy*pIn[86];
      pOut[87] = fPmQy*pIn[87] + 6*i2e*pIn[60];
      pOut[88] = fPmQy*pIn[88];
      pOut[89] = fPmQy*pIn[89] + i2e*pIn[56];
      pOut[90] = fPmQy*pIn[90] + i2e*pIn[58];
      pOut[91] = fPmQy*pIn[91];
      pOut[92] = fPmQy*pIn[92] + 6*i2e*pIn[63];
      pOut[93] = fPmQy*pIn[93] + 2*i2e*pIn[59];
      pOut[94] = fPmQy*pIn[94];
      pOut[95] = fPmQy*pIn[95] + 5*i2e*pIn[67];
      pOut[96] = fPmQy*pIn[96] + 5*i2e*pIn[69];
      pOut[97] = fPmQy*pIn[97];
      pOut[98] = fPmQy*pIn[98] + 2*i2e*pIn[64];
      pOut[99] = fPmQy*pIn[99] + 4*i2e*pIn[71];
      pOut[100] = fPmQy*pIn[100];
      pOut[101] = fPmQy*pIn[101] + 3*i2e*pIn[65];
      pOut[102] = fPmQy*pIn[102] + 3*i2e*pIn[70];
      pOut[103] = fPmQy*pIn[103];
      pOut[104] = fPmQy*pIn[104] + 4*i2e*pIn[73];
      pOut[105] = fPmQy*pIn[105] + i2e*pIn[61];
      pOut[106] = fPmQy*pIn[106] + 5*i2e*pIn[75];
      pOut[107] = fPmQy*pIn[107] + i2e*pIn[62];
      pOut[108] = fPmQy*pIn[108] + 4*i2e*pIn[78];
      pOut[109] = fPmQy*pIn[109] + 2*i2e*pIn[74];
      pOut[110] = fPmQy*pIn[110] + i2e*pIn[66];
      pOut[111] = fPmQy*pIn[111] + i2e*pIn[68];
      pOut[112] = fPmQy*pIn[112] + 2*i2e*pIn[76];
      pOut[113] = fPmQy*pIn[113] + 4*i2e*pIn[81];
      pOut[114] = fPmQy*pIn[114] + 3*i2e*pIn[79];
      pOut[115] = fPmQy*pIn[115] + i2e*pIn[72];
      pOut[116] = fPmQy*pIn[116] + 3*i2e*pIn[80];
      pOut[117] = fPmQy*pIn[117] + 2*i2e*pIn[77];
      pOut[118] = fPmQy*pIn[118] + 3*i2e*pIn[83];
      pOut[119] = fPmQy*pIn[119] + 2*i2e*pIn[82];
      if (lab == 7) return;
   case 8:
      pOut[120] = fPmQy*pIn[120];
      pOut[121] = fPmQy*pIn[121] + 8*i2e*pIn[85];
      pOut[122] = fPmQy*pIn[122];
      pOut[123] = fPmQy*pIn[123] + i2e*pIn[84];
      pOut[124] = fPmQy*pIn[124] + 7*i2e*pIn[87];
      pOut[125] = fPmQy*pIn[125];
      pOut[126] = fPmQy*pIn[126];
      pOut[127] = fPmQy*pIn[127] + 7*i2e*pIn[92];
      pOut[128] = fPmQy*pIn[128] + i2e*pIn[86];
      pOut[129] = fPmQy*pIn[129] + 2*i2e*pIn[89];
      pOut[130] = fPmQy*pIn[130];
      pOut[131] = fPmQy*pIn[131] + 6*i2e*pIn[95];
      pOut[132] = fPmQy*pIn[132];
      pOut[133] = fPmQy*pIn[133] + 6*i2e*pIn[96];
      pOut[134] = fPmQy*pIn[134] + 2*i2e*pIn[90];
      pOut[135] = fPmQy*pIn[135] + 3*i2e*pIn[93];
      pOut[136] = fPmQy*pIn[136] + 5*i2e*pIn[99];
      pOut[137] = fPmQy*pIn[137];
      pOut[138] = fPmQy*pIn[138];
      pOut[139] = fPmQy*pIn[139] + 5*i2e*pIn[104];
      pOut[140] = fPmQy*pIn[140] + 3*i2e*pIn[98];
      pOut[141] = fPmQy*pIn[141] + 4*i2e*pIn[101];
      pOut[142] = fPmQy*pIn[142];
      pOut[143] = fPmQy*pIn[143] + 4*i2e*pIn[102];
      pOut[144] = fPmQy*pIn[144] + i2e*pIn[88];
      pOut[145] = fPmQy*pIn[145] + 6*i2e*pIn[106];
      pOut[146] = fPmQy*pIn[146] + i2e*pIn[91];
      pOut[147] = fPmQy*pIn[147] + i2e*pIn[94];
      pOut[148] = fPmQy*pIn[148] + 5*i2e*pIn[108];
      pOut[149] = fPmQy*pIn[149] + 2*i2e*pIn[105];
      pOut[150] = fPmQy*pIn[150] + 2*i2e*pIn[107];
      pOut[151] = fPmQy*pIn[151] + 5*i2e*pIn[113];
      pOut[152] = fPmQy*pIn[152] + i2e*pIn[97];
      pOut[153] = fPmQy*pIn[153] + i2e*pIn[100];
      pOut[154] = fPmQy*pIn[154] + 3*i2e*pIn[109];
      pOut[155] = fPmQy*pIn[155] + 4*i2e*pIn[114];
      pOut[156] = fPmQy*pIn[156] + 4*i2e*pIn[116];
      pOut[157] = fPmQy*pIn[157] + 3*i2e*pIn[112];
      pOut[158] = fPmQy*pIn[158] + i2e*pIn[103];
      pOut[159] = fPmQy*pIn[159] + 2*i2e*pIn[110];
      pOut[160] = fPmQy*pIn[160] + 4*i2e*pIn[118];
      pOut[161] = fPmQy*pIn[161] + 2*i2e*pIn[111];
      pOut[162] = fPmQy*pIn[162] + 3*i2e*pIn[117];
      pOut[163] = fPmQy*pIn[163] + 2*i2e*pIn[115];
      pOut[164] = fPmQy*pIn[164] + 3*i2e*pIn[119];
      if (lab == 8) return;
   case 9:
      pOut[165] = fPmQy*pIn[165];
      pOut[166] = fPmQy*pIn[166] + 9*i2e*pIn[121];
      pOut[167] = fPmQy*pIn[167];
      pOut[168] = fPmQy*pIn[168] + 8*i2e*pIn[124];
      pOut[169] = fPmQy*pIn[169];
      pOut[170] = fPmQy*pIn[170] + i2e*pIn[120];
      pOut[171] = fPmQy*pIn[171] + i2e*pIn[122];
      pOut[172] = fPmQy*pIn[172];
      pOut[173] = fPmQy*pIn[173] + 8*i2e*pIn[127];
      pOut[174] = fPmQy*pIn[174] + 2*i2e*pIn[123];
      pOut[175] = fPmQy*pIn[175];
      pOut[176] = fPmQy*pIn[176] + 7*i2e*pIn[131];
      pOut[177] = fPmQy*pIn[177] + 7*i2e*pIn[133];
      pOut[178] = fPmQy*pIn[178];
      pOut[179] = fPmQy*pIn[179] + 2*i2e*pIn[128];
      pOut[180] = fPmQy*pIn[180] + 6*i2e*pIn[136];
      pOut[181] = fPmQy*pIn[181];
      pOut[182] = fPmQy*pIn[182] + 3*i2e*pIn[129];
      pOut[183] = fPmQy*pIn[183] + 3*i2e*pIn[134];
      pOut[184] = fPmQy*pIn[184];
      pOut[185] = fPmQy*pIn[185] + 6*i2e*pIn[139];
      pOut[186] = fPmQy*pIn[186] + 4*i2e*pIn[135];
      pOut[187] = fPmQy*pIn[187];
      pOut[188] = fPmQy*pIn[188] + 5*i2e*pIn[141];
      pOut[189] = fPmQy*pIn[189] + 5*i2e*pIn[143];
      pOut[190] = fPmQy*pIn[190];
      pOut[191] = fPmQy*pIn[191] + 4*i2e*pIn[140];
      pOut[192] = fPmQy*pIn[192] + i2e*pIn[125];
      pOut[193] = fPmQy*pIn[193] + 7*i2e*pIn[145];
      pOut[194] = fPmQy*pIn[194] + i2e*pIn[126];
      pOut[195] = fPmQy*pIn[195] + 6*i2e*pIn[148];
      pOut[196] = fPmQy*pIn[196] + 2*i2e*pIn[144];
      pOut[197] = fPmQy*pIn[197] + i2e*pIn[130];
      pOut[198] = fPmQy*pIn[198] + i2e*pIn[132];
      pOut[199] = fPmQy*pIn[199] + 2*i2e*pIn[146];
      pOut[200] = fPmQy*pIn[200] + 6*i2e*pIn[151];
      pOut[201] = fPmQy*pIn[201] + 3*i2e*pIn[149];
      pOut[202] = fPmQy*pIn[202] + i2e*pIn[137];
      pOut[203] = fPmQy*pIn[203] + 5*i2e*pIn[155];
      pOut[204] = fPmQy*pIn[204] + i2e*pIn[138];
      pOut[205] = fPmQy*pIn[205] + 5*i2e*pIn[156];
      pOut[206] = fPmQy*pIn[206] + 3*i2e*pIn[150];
      pOut[207] = fPmQy*pIn[207] + 4*i2e*pIn[154];
      pOut[208] = fPmQy*pIn[208] + i2e*pIn[142];
      pOut[209] = fPmQy*pIn[209] + 4*i2e*pIn[157];
      pOut[210] = fPmQy*pIn[210] + 2*i2e*pIn[147];
      pOut[211] = fPmQy*pIn[211] + 5*i2e*pIn[160];
      pOut[212] = fPmQy*pIn[212] + 2*i2e*pIn[152];
      pOut[213] = fPmQy*pIn[213] + 4*i2e*pIn[162];
      pOut[214] = fPmQy*pIn[214] + 2*i2e*pIn[153];
      pOut[215] = fPmQy*pIn[215] + 3*i2e*pIn[159];
      pOut[216] = fPmQy*pIn[216] + 3*i2e*pIn[161];
      pOut[217] = fPmQy*pIn[217] + 2*i2e*pIn[158];
      pOut[218] = fPmQy*pIn[218] + 4*i2e*pIn[164];
      pOut[219] = fPmQy*pIn[219] + 3*i2e*pIn[163];
      if (lab == 9) return;
   case 10:
      pOut[220] = fPmQy*pIn[220];
      pOut[221] = fPmQy*pIn[221] + 10*i2e*pIn[166];
      pOut[222] = fPmQy*pIn[222];
      pOut[223] = fPmQy*pIn[223] + i2e*pIn[165];
      pOut[224] = fPmQy*pIn[224] + 9*i2e*pIn[168];
      pOut[225] = fPmQy*pIn[225];
      pOut[226] = fPmQy*pIn[226];
      pOut[227] = fPmQy*pIn[227] + 9*i2e*pIn[173];
      pOut[228] = fPmQy*pIn[228] + i2e*pIn[167];
      pOut[229] = fPmQy*pIn[229] + 2*i2e*pIn[170];
      pOut[230] = fPmQy*pIn[230];
      pOut[231] = fPmQy*pIn[231] + 8*i2e*pIn[176];
      pOut[232] = fPmQy*pIn[232];
      pOut[233] = fPmQy*pIn[233] + 8*i2e*pIn[177];
      pOut[234] = fPmQy*pIn[234] + 2*i2e*pIn[171];
      pOut[235] = fPmQy*pIn[235] + 3*i2e*pIn[174];
      pOut[236] = fPmQy*pIn[236] + 7*i2e*pIn[180];
      pOut[237] = fPmQy*pIn[237];
      pOut[238] = fPmQy*pIn[238];
      pOut[239] = fPmQy*pIn[239] + 7*i2e*pIn[185];
      pOut[240] = fPmQy*pIn[240] + 3*i2e*pIn[179];
      pOut[241] = fPmQy*pIn[241] + 4*i2e*pIn[182];
      pOut[242] = fPmQy*pIn[242];
      pOut[243] = fPmQy*pIn[243] + 6*i2e*pIn[188];
      pOut[244] = fPmQy*pIn[244];
      pOut[245] = fPmQy*pIn[245] + 6*i2e*pIn[189];
      pOut[246] = fPmQy*pIn[246] + 4*i2e*pIn[183];
      pOut[247] = fPmQy*pIn[247] + 5*i2e*pIn[186];
      pOut[248] = fPmQy*pIn[248];
      pOut[249] = fPmQy*pIn[249] + 5*i2e*pIn[191];
      pOut[250] = fPmQy*pIn[250] + i2e*pIn[169];
      pOut[251] = fPmQy*pIn[251] + 8*i2e*pIn[193];
      pOut[252] = fPmQy*pIn[252] + i2e*pIn[172];
      pOut[253] = fPmQy*pIn[253] + i2e*pIn[175];
      pOut[254] = fPmQy*pIn[254] + 7*i2e*pIn[195];
      pOut[255] = fPmQy*pIn[255] + 2*i2e*pIn[192];
      pOut[256] = fPmQy*pIn[256] + 2*i2e*pIn[194];
      pOut[257] = fPmQy*pIn[257] + 7*i2e*pIn[200];
      pOut[258] = fPmQy*pIn[258] + i2e*pIn[178];
      pOut[259] = fPmQy*pIn[259] + i2e*pIn[181];
      pOut[260] = fPmQy*pIn[260] + 3*i2e*pIn[196];
      pOut[261] = fPmQy*pIn[261] + 6*i2e*pIn[203];
      pOut[262] = fPmQy*pIn[262] + 6*i2e*pIn[205];
      pOut[263] = fPmQy*pIn[263] + 3*i2e*pIn[199];
      pOut[264] = fPmQy*pIn[264] + i2e*pIn[184];
      pOut[265] = fPmQy*pIn[265] + i2e*pIn[187];
      pOut[266] = fPmQy*pIn[266] + 5*i2e*pIn[207];
      pOut[267] = fPmQy*pIn[267] + 4*i2e*pIn[201];
      pOut[268] = fPmQy*pIn[268] + 4*i2e*pIn[206];
      pOut[269] = fPmQy*pIn[269] + 5*i2e*pIn[209];
      pOut[270] = fPmQy*pIn[270] + i2e*pIn[190];
      pOut[271] = fPmQy*pIn[271] + 2*i2e*pIn[197];
      pOut[272] = fPmQy*pIn[272] + 6*i2e*pIn[211];
      pOut[273] = fPmQy*pIn[273] + 2*i2e*pIn[198];
      pOut[274] = fPmQy*pIn[274] + 3*i2e*pIn[210];
      pOut[275] = fPmQy*pIn[275] + 5*i2e*pIn[213];
      pOut[276] = fPmQy*pIn[276] + 2*i2e*pIn[202];
      pOut[277] = fPmQy*pIn[277] + 2*i2e*pIn[204];
      pOut[278] = fPmQy*pIn[278] + 5*i2e*pIn[218];
      pOut[279] = fPmQy*pIn[279] + 3*i2e*pIn[212];
      pOut[280] = fPmQy*pIn[280] + 4*i2e*pIn[215];
      pOut[281] = fPmQy*pIn[281] + 2*i2e*pIn[208];
      pOut[282] = fPmQy*pIn[282] + 4*i2e*pIn[216];
      pOut[283] = fPmQy*pIn[283] + 3*i2e*pIn[214];
      pOut[284] = fPmQy*pIn[284] + 4*i2e*pIn[219];
      pOut[285] = fPmQy*pIn[285] + 3*i2e*pIn[217];
      if (lab == 10) return;
   case 11:
      pOut[286] = fPmQy*pIn[286];
      pOut[287] = fPmQy*pIn[287] + 11*i2e*pIn[221];
      pOut[288] = fPmQy*pIn[288];
      pOut[289] = fPmQy*pIn[289] + 10*i2e*pIn[224];
      pOut[290] = fPmQy*pIn[290];
      pOut[291] = fPmQy*pIn[291] + i2e*pIn[220];
      pOut[292] = fPmQy*pIn[292] + i2e*pIn[222];
      pOut[293] = fPmQy*pIn[293];
      pOut[294] = fPmQy*pIn[294] + 10*i2e*pIn[227];
      pOut[295] = fPmQy*pIn[295] + 2*i2e*pIn[223];
      pOut[296] = fPmQy*pIn[296];
      pOut[297] = fPmQy*pIn[297] + 9*i2e*pIn[231];
      pOut[298] = fPmQy*pIn[298] + 9*i2e*pIn[233];
      pOut[299] = fPmQy*pIn[299];
      pOut[300] = fPmQy*pIn[300] + 2*i2e*pIn[228];
      pOut[301] = fPmQy*pIn[301] + 8*i2e*pIn[236];
      pOut[302] = fPmQy*pIn[302];
      pOut[303] = fPmQy*pIn[303] + 3*i2e*pIn[229];
      pOut[304] = fPmQy*pIn[304] + 3*i2e*pIn[234];
      pOut[305] = fPmQy*pIn[305];
      pOut[306] = fPmQy*pIn[306] + 8*i2e*pIn[239];
      pOut[307] = fPmQy*pIn[307] + 4*i2e*pIn[235];
      pOut[308] = fPmQy*pIn[308];
      pOut[309] = fPmQy*pIn[309] + 7*i2e*pIn[243];
      pOut[310] = fPmQy*pIn[310] + 7*i2e*pIn[245];
      pOut[311] = fPmQy*pIn[311];
      pOut[312] = fPmQy*pIn[312] + 4*i2e*pIn[240];
      pOut[313] = fPmQy*pIn[313] + 6*i2e*pIn[247];
      pOut[314] = fPmQy*pIn[314];
      pOut[315] = fPmQy*pIn[315] + 5*i2e*pIn[241];
      pOut[316] = fPmQy*pIn[316] + 5*i2e*pIn[246];
      pOut[317] = fPmQy*pIn[317];
      pOut[318] = fPmQy*pIn[318] + 6*i2e*pIn[249];
      pOut[319] = fPmQy*pIn[319] + i2e*pIn[225];
      pOut[320] = fPmQy*pIn[320] + 9*i2e*pIn[251];
      pOut[321] = fPmQy*pIn[321] + i2e*pIn[226];
      pOut[322] = fPmQy*pIn[322] + 8*i2e*pIn[254];
      pOut[323] = fPmQy*pIn[323] + 2*i2e*pIn[250];
      pOut[324] = fPmQy*pIn[324] + i2e*pIn[230];
      pOut[325] = fPmQy*pIn[325] + i2e*pIn[232];
      pOut[326] = fPmQy*pIn[326] + 2*i2e*pIn[252];
      pOut[327] = fPmQy*pIn[327] + 8*i2e*pIn[257];
      pOut[328] = fPmQy*pIn[328] + 3*i2e*pIn[255];
      pOut[329] = fPmQy*pIn[329] + i2e*pIn[237];
      pOut[330] = fPmQy*pIn[330] + 7*i2e*pIn[261];
      pOut[331] = fPmQy*pIn[331] + i2e*pIn[238];
      pOut[332] = fPmQy*pIn[332] + 7*i2e*pIn[262];
      pOut[333] = fPmQy*pIn[333] + 3*i2e*pIn[256];
      pOut[334] = fPmQy*pIn[334] + 6*i2e*pIn[266];
      pOut[335] = fPmQy*pIn[335] + 4*i2e*pIn[260];
      pOut[336] = fPmQy*pIn[336] + i2e*pIn[242];
      pOut[337] = fPmQy*pIn[337] + i2e*pIn[244];
      pOut[338] = fPmQy*pIn[338] + 4*i2e*pIn[263];
      pOut[339] = fPmQy*pIn[339] + 6*i2e*pIn[269];
      pOut[340] = fPmQy*pIn[340] + 5*i2e*pIn[267];
      pOut[341] = fPmQy*pIn[341] + i2e*pIn[248];
      pOut[342] = fPmQy*pIn[342] + 5*i2e*pIn[268];
      pOut[343] = fPmQy*pIn[343] + 2*i2e*pIn[253];
      pOut[344] = fPmQy*pIn[344] + 7*i2e*pIn[272];
      pOut[345] = fPmQy*pIn[345] + 2*i2e*pIn[258];
      pOut[346] = fPmQy*pIn[346] + 6*i2e*pIn[275];
      pOut[347] = fPmQy*pIn[347] + 2*i2e*pIn[259];
      pOut[348] = fPmQy*pIn[348] + 3*i2e*pIn[271];
      pOut[349] = fPmQy*pIn[349] + 3*i2e*pIn[273];
      pOut[350] = fPmQy*pIn[350] + 2*i2e*pIn[264];
      pOut[351] = fPmQy*pIn[351] + 6*i2e*pIn[278];
      pOut[352] = fPmQy*pIn[352] + 4*i2e*pIn[274];
      pOut[353] = fPmQy*pIn[353] + 2*i2e*pIn[265];
      pOut[354] = fPmQy*pIn[354] + 5*i2e*pIn[280];
      pOut[355] = fPmQy*pIn[355] + 5*i2e*pIn[282];
      pOut[356] = fPmQy*pIn[356] + 2*i2e*pIn[270];
      pOut[357] = fPmQy*pIn[357] + 4*i2e*pIn[279];
      pOut[358] = fPmQy*pIn[358] + 3*i2e*pIn[276];
      pOut[359] = fPmQy*pIn[359] + 5*i2e*pIn[284];
      pOut[360] = fPmQy*pIn[360] + 3*i2e*pIn[277];
      pOut[361] = fPmQy*pIn[361] + 4*i2e*pIn[283];
      pOut[362] = fPmQy*pIn[362] + 3*i2e*pIn[281];
      pOut[363] = fPmQy*pIn[363] + 4*i2e*pIn[285];
      if (lab == 11) return;
   case 12:
      pOut[364] = fPmQy*pIn[364];
      pOut[365] = fPmQy*pIn[365] + 12*i2e*pIn[287];
      pOut[366] = fPmQy*pIn[366];
      pOut[367] = fPmQy*pIn[367] + i2e*pIn[286];
      pOut[368] = fPmQy*pIn[368] + 11*i2e*pIn[289];
      pOut[369] = fPmQy*pIn[369];
      pOut[370] = fPmQy*pIn[370];
      pOut[371] = fPmQy*pIn[371] + 11*i2e*pIn[294];
      pOut[372] = fPmQy*pIn[372] + i2e*pIn[288];
      pOut[373] = fPmQy*pIn[373] + 2*i2e*pIn[291];
      pOut[374] = fPmQy*pIn[374];
      pOut[375] = fPmQy*pIn[375] + 10*i2e*pIn[297];
      pOut[376] = fPmQy*pIn[376];
      pOut[377] = fPmQy*pIn[377] + 10*i2e*pIn[298];
      pOut[378] = fPmQy*pIn[378] + 2*i2e*pIn[292];
      pOut[379] = fPmQy*pIn[379] + 3*i2e*pIn[295];
      pOut[380] = fPmQy*pIn[380] + 9*i2e*pIn[301];
      pOut[381] = fPmQy*pIn[381];
      pOut[382] = fPmQy*pIn[382];
      pOut[383] = fPmQy*pIn[383] + 9*i2e*pIn[306];
      pOut[384] = fPmQy*pIn[384] + 3*i2e*pIn[300];
      pOut[385] = fPmQy*pIn[385] + 4*i2e*pIn[303];
      pOut[386] = fPmQy*pIn[386];
      pOut[387] = fPmQy*pIn[387] + 8*i2e*pIn[309];
      pOut[388] = fPmQy*pIn[388];
      pOut[389] = fPmQy*pIn[389] + 8*i2e*pIn[310];
      pOut[390] = fPmQy*pIn[390] + 4*i2e*pIn[304];
      pOut[391] = fPmQy*pIn[391] + 5*i2e*pIn[307];
      pOut[392] = fPmQy*pIn[392] + 7*i2e*pIn[313];
      pOut[393] = fPmQy*pIn[393];
      pOut[394] = fPmQy*pIn[394];
      pOut[395] = fPmQy*pIn[395] + 7*i2e*pIn[318];
      pOut[396] = fPmQy*pIn[396] + 5*i2e*pIn[312];
      pOut[397] = fPmQy*pIn[397] + 6*i2e*pIn[315];
      pOut[398] = fPmQy*pIn[398];
      pOut[399] = fPmQy*pIn[399] + 6*i2e*pIn[316];
      pOut[400] = fPmQy*pIn[400] + i2e*pIn[290];
      pOut[401] = fPmQy*pIn[401] + 10*i2e*pIn[320];
      pOut[402] = fPmQy*pIn[402] + i2e*pIn[293];
      pOut[403] = fPmQy*pIn[403] + i2e*pIn[296];
      pOut[404] = fPmQy*pIn[404] + 9*i2e*pIn[322];
      pOut[405] = fPmQy*pIn[405] + 2*i2e*pIn[319];
      pOut[406] = fPmQy*pIn[406] + 2*i2e*pIn[321];
      pOut[407] = fPmQy*pIn[407] + 9*i2e*pIn[327];
      pOut[408] = fPmQy*pIn[408] + i2e*pIn[299];
      pOut[409] = fPmQy*pIn[409] + i2e*pIn[302];
      pOut[410] = fPmQy*pIn[410] + 3*i2e*pIn[323];
      pOut[411] = fPmQy*pIn[411] + 8*i2e*pIn[330];
      pOut[412] = fPmQy*pIn[412] + 8*i2e*pIn[332];
      pOut[413] = fPmQy*pIn[413] + 3*i2e*pIn[326];
      pOut[414] = fPmQy*pIn[414] + i2e*pIn[305];
      pOut[415] = fPmQy*pIn[415] + i2e*pIn[308];
      pOut[416] = fPmQy*pIn[416] + 7*i2e*pIn[334];
      pOut[417] = fPmQy*pIn[417] + 4*i2e*pIn[328];
      pOut[418] = fPmQy*pIn[418] + 4*i2e*pIn[333];
      pOut[419] = fPmQy*pIn[419] + 7*i2e*pIn[339];
      pOut[420] = fPmQy*pIn[420] + i2e*pIn[311];
      pOut[421] = fPmQy*pIn[421] + i2e*pIn[314];
      pOut[422] = fPmQy*pIn[422] + 5*i2e*pIn[335];
      pOut[423] = fPmQy*pIn[423] + 6*i2e*pIn[340];
      pOut[424] = fPmQy*pIn[424] + 6*i2e*pIn[342];
      pOut[425] = fPmQy*pIn[425] + 5*i2e*pIn[338];
      pOut[426] = fPmQy*pIn[426] + i2e*pIn[317];
      pOut[427] = fPmQy*pIn[427] + 2*i2e*pIn[324];
      pOut[428] = fPmQy*pIn[428] + 8*i2e*pIn[344];
      pOut[429] = fPmQy*pIn[429] + 2*i2e*pIn[325];
      pOut[430] = fPmQy*pIn[430] + 3*i2e*pIn[343];
      pOut[431] = fPmQy*pIn[431] + 7*i2e*pIn[346];
      pOut[432] = fPmQy*pIn[432] + 2*i2e*pIn[329];
      pOut[433] = fPmQy*pIn[433] + 2*i2e*pIn[331];
      pOut[434] = fPmQy*pIn[434] + 7*i2e*pIn[351];
      pOut[435] = fPmQy*pIn[435] + 3*i2e*pIn[345];
      pOut[436] = fPmQy*pIn[436] + 4*i2e*pIn[348];
      pOut[437] = fPmQy*pIn[437] + 2*i2e*pIn[336];
      pOut[438] = fPmQy*pIn[438] + 6*i2e*pIn[354];
      pOut[439] = fPmQy*pIn[439] + 2*i2e*pIn[337];
      pOut[440] = fPmQy*pIn[440] + 6*i2e*pIn[355];
      pOut[441] = fPmQy*pIn[441] + 4*i2e*pIn[349];
      pOut[442] = fPmQy*pIn[442] + 5*i2e*pIn[352];
      pOut[443] = fPmQy*pIn[443] + 2*i2e*pIn[341];
      pOut[444] = fPmQy*pIn[444] + 5*i2e*pIn[357];
      pOut[445] = fPmQy*pIn[445] + 3*i2e*pIn[347];
      pOut[446] = fPmQy*pIn[446] + 6*i2e*pIn[359];
      pOut[447] = fPmQy*pIn[447] + 3*i2e*pIn[350];
      pOut[448] = fPmQy*pIn[448] + 3*i2e*pIn[353];
      pOut[449] = fPmQy*pIn[449] + 5*i2e*pIn[361];
      pOut[450] = fPmQy*pIn[450] + 4*i2e*pIn[358];
      pOut[451] = fPmQy*pIn[451] + 4*i2e*pIn[360];
      pOut[452] = fPmQy*pIn[452] + 5*i2e*pIn[363];
      pOut[453] = fPmQy*pIn[453] + 3*i2e*pIn[356];
      pOut[454] = fPmQy*pIn[454] + 4*i2e*pIn[362];
      if (lab == 12) return;
   case 13:
      pOut[455] = fPmQy*pIn[455];
      pOut[456] = fPmQy*pIn[456] + 13*i2e*pIn[365];
      pOut[457] = fPmQy*pIn[457];
      pOut[458] = fPmQy*pIn[458] + 12*i2e*pIn[368];
      pOut[459] = fPmQy*pIn[459];
      pOut[460] = fPmQy*pIn[460] + i2e*pIn[364];
      pOut[461] = fPmQy*pIn[461] + i2e*pIn[366];
      pOut[462] = fPmQy*pIn[462];
      pOut[463] = fPmQy*pIn[463] + 12*i2e*pIn[371];
      pOut[464] = fPmQy*pIn[464] + 2*i2e*pIn[367];
      pOut[465] = fPmQy*pIn[465];
      pOut[466] = fPmQy*pIn[466] + 11*i2e*pIn[375];
      pOut[467] = fPmQy*pIn[467] + 11*i2e*pIn[377];
      pOut[468] = fPmQy*pIn[468];
      pOut[469] = fPmQy*pIn[469] + 2*i2e*pIn[372];
      pOut[470] = fPmQy*pIn[470] + 10*i2e*pIn[380];
      pOut[471] = fPmQy*pIn[471];
      pOut[472] = fPmQy*pIn[472] + 3*i2e*pIn[373];
      pOut[473] = fPmQy*pIn[473] + 3*i2e*pIn[378];
      pOut[474] = fPmQy*pIn[474];
      pOut[475] = fPmQy*pIn[475] + 10*i2e*pIn[383];
      pOut[476] = fPmQy*pIn[476] + 4*i2e*pIn[379];
      pOut[477] = fPmQy*pIn[477];
      pOut[478] = fPmQy*pIn[478] + 9*i2e*pIn[387];
      pOut[479] = fPmQy*pIn[479] + 9*i2e*pIn[389];
      pOut[480] = fPmQy*pIn[480];
      pOut[481] = fPmQy*pIn[481] + 4*i2e*pIn[384];
      pOut[482] = fPmQy*pIn[482] + 8*i2e*pIn[392];
      pOut[483] = fPmQy*pIn[483];
      pOut[484] = fPmQy*pIn[484] + 5*i2e*pIn[385];
      pOut[485] = fPmQy*pIn[485] + 5*i2e*pIn[390];
      pOut[486] = fPmQy*pIn[486];
      pOut[487] = fPmQy*pIn[487] + 8*i2e*pIn[395];
      pOut[488] = fPmQy*pIn[488] + 6*i2e*pIn[391];
      pOut[489] = fPmQy*pIn[489];
      pOut[490] = fPmQy*pIn[490] + 7*i2e*pIn[397];
      pOut[491] = fPmQy*pIn[491] + 7*i2e*pIn[399];
      pOut[492] = fPmQy*pIn[492];
      pOut[493] = fPmQy*pIn[493] + 6*i2e*pIn[396];
      pOut[494] = fPmQy*pIn[494] + i2e*pIn[369];
      pOut[495] = fPmQy*pIn[495] + 11*i2e*pIn[401];
      pOut[496] = fPmQy*pIn[496] + i2e*pIn[370];
      pOut[497] = fPmQy*pIn[497] + 10*i2e*pIn[404];
      pOut[498] = fPmQy*pIn[498] + 2*i2e*pIn[400];
      pOut[499] = fPmQy*pIn[499] + i2e*pIn[374];
      pOut[500] = fPmQy*pIn[500] + i2e*pIn[376];
      pOut[501] = fPmQy*pIn[501] + 2*i2e*pIn[402];
      pOut[502] = fPmQy*pIn[502] + 10*i2e*pIn[407];
      pOut[503] = fPmQy*pIn[503] + 3*i2e*pIn[405];
      pOut[504] = fPmQy*pIn[504] + i2e*pIn[381];
      pOut[505] = fPmQy*pIn[505] + 9*i2e*pIn[411];
      pOut[506] = fPmQy*pIn[506] + i2e*pIn[382];
      pOut[507] = fPmQy*pIn[507] + 9*i2e*pIn[412];
      pOut[508] = fPmQy*pIn[508] + 3*i2e*pIn[406];
      pOut[509] = fPmQy*pIn[509] + 8*i2e*pIn[416];
      pOut[510] = fPmQy*pIn[510] + 4*i2e*pIn[410];
      pOut[511] = fPmQy*pIn[511] + i2e*pIn[386];
      pOut[512] = fPmQy*pIn[512] + i2e*pIn[388];
      pOut[513] = fPmQy*pIn[513] + 4*i2e*pIn[413];
      pOut[514] = fPmQy*pIn[514] + 8*i2e*pIn[419];
      pOut[515] = fPmQy*pIn[515] + 5*i2e*pIn[417];
      pOut[516] = fPmQy*pIn[516] + i2e*pIn[393];
      pOut[517] = fPmQy*pIn[517] + 7*i2e*pIn[423];
      pOut[518] = fPmQy*pIn[518] + i2e*pIn[394];
      pOut[519] = fPmQy*pIn[519] + 7*i2e*pIn[424];
      pOut[520] = fPmQy*pIn[520] + 5*i2e*pIn[418];
      pOut[521] = fPmQy*pIn[521] + 6*i2e*pIn[422];
      pOut[522] = fPmQy*pIn[522] + i2e*pIn[398];
      pOut[523] = fPmQy*pIn[523] + 6*i2e*pIn[425];
      pOut[524] = fPmQy*pIn[524] + 2*i2e*pIn[403];
      pOut[525] = fPmQy*pIn[525] + 9*i2e*pIn[428];
      pOut[526] = fPmQy*pIn[526] + 2*i2e*pIn[408];
      pOut[527] = fPmQy*pIn[527] + 8*i2e*pIn[431];
      pOut[528] = fPmQy*pIn[528] + 2*i2e*pIn[409];
      pOut[529] = fPmQy*pIn[529] + 3*i2e*pIn[427];
      pOut[530] = fPmQy*pIn[530] + 3*i2e*pIn[429];
      pOut[531] = fPmQy*pIn[531] + 2*i2e*pIn[414];
      pOut[532] = fPmQy*pIn[532] + 8*i2e*pIn[434];
      pOut[533] = fPmQy*pIn[533] + 4*i2e*pIn[430];
      pOut[534] = fPmQy*pIn[534] + 2*i2e*pIn[415];
      pOut[535] = fPmQy*pIn[535] + 7*i2e*pIn[438];
      pOut[536] = fPmQy*pIn[536] + 7*i2e*pIn[440];
      pOut[537] = fPmQy*pIn[537] + 2*i2e*pIn[420];
      pOut[538] = fPmQy*pIn[538] + 4*i2e*pIn[435];
      pOut[539] = fPmQy*pIn[539] + 6*i2e*pIn[442];
      pOut[540] = fPmQy*pIn[540] + 2*i2e*pIn[421];
      pOut[541] = fPmQy*pIn[541] + 5*i2e*pIn[436];
      pOut[542] = fPmQy*pIn[542] + 5*i2e*pIn[441];
      pOut[543] = fPmQy*pIn[543] + 2*i2e*pIn[426];
      pOut[544] = fPmQy*pIn[544] + 6*i2e*pIn[444];
      pOut[545] = fPmQy*pIn[545] + 3*i2e*pIn[432];
      pOut[546] = fPmQy*pIn[546] + 7*i2e*pIn[446];
      pOut[547] = fPmQy*pIn[547] + 3*i2e*pIn[433];
      pOut[548] = fPmQy*pIn[548] + 6*i2e*pIn[449];
      pOut[549] = fPmQy*pIn[549] + 4*i2e*pIn[445];
      pOut[550] = fPmQy*pIn[550] + 3*i2e*pIn[437];
      pOut[551] = fPmQy*pIn[551] + 3*i2e*pIn[439];
      pOut[552] = fPmQy*pIn[552] + 4*i2e*pIn[447];
      pOut[553] = fPmQy*pIn[553] + 6*i2e*pIn[452];
      pOut[554] = fPmQy*pIn[554] + 5*i2e*pIn[450];
      pOut[555] = fPmQy*pIn[555] + 3*i2e*pIn[443];
      pOut[556] = fPmQy*pIn[556] + 5*i2e*pIn[451];
      pOut[557] = fPmQy*pIn[557] + 4*i2e*pIn[448];
      pOut[558] = fPmQy*pIn[558] + 5*i2e*pIn[454];
      pOut[559] = fPmQy*pIn[559] + 4*i2e*pIn[453];
      if (lab == 13) return;
   case 14:
      pOut[560] = fPmQy*pIn[560];
      pOut[561] = fPmQy*pIn[561] + 14*i2e*pIn[456];
      pOut[562] = fPmQy*pIn[562];
      pOut[563] = fPmQy*pIn[563] + i2e*pIn[455];
      pOut[564] = fPmQy*pIn[564] + 13*i2e*pIn[458];
      pOut[565] = fPmQy*pIn[565];
      pOut[566] = fPmQy*pIn[566];
      pOut[567] = fPmQy*pIn[567] + 13*i2e*pIn[463];
      pOut[568] = fPmQy*pIn[568] + i2e*pIn[457];
      pOut[569] = fPmQy*pIn[569] + 2*i2e*pIn[460];
      pOut[570] = fPmQy*pIn[570];
      pOut[571] = fPmQy*pIn[571] + 12*i2e*pIn[466];
      pOut[572] = fPmQy*pIn[572];
      pOut[573] = fPmQy*pIn[573] + 12*i2e*pIn[467];
      pOut[574] = fPmQy*pIn[574] + 2*i2e*pIn[461];
      pOut[575] = fPmQy*pIn[575] + 3*i2e*pIn[464];
      pOut[576] = fPmQy*pIn[576] + 11*i2e*pIn[470];
      pOut[577] = fPmQy*pIn[577];
      pOut[578] = fPmQy*pIn[578];
      pOut[579] = fPmQy*pIn[579] + 11*i2e*pIn[475];
      pOut[580] = fPmQy*pIn[580] + 3*i2e*pIn[469];
      pOut[581] = fPmQy*pIn[581] + 4*i2e*pIn[472];
      pOut[582] = fPmQy*pIn[582];
      pOut[583] = fPmQy*pIn[583] + 10*i2e*pIn[478];
      pOut[584] = fPmQy*pIn[584];
      pOut[585] = fPmQy*pIn[585] + 10*i2e*pIn[479];
      pOut[586] = fPmQy*pIn[586] + 4*i2e*pIn[473];
      pOut[587] = fPmQy*pIn[587] + 5*i2e*pIn[476];
      pOut[588] = fPmQy*pIn[588] + 9*i2e*pIn[482];
      pOut[589] = fPmQy*pIn[589];
      pOut[590] = fPmQy*pIn[590];
      pOut[591] = fPmQy*pIn[591] + 9*i2e*pIn[487];
      pOut[592] = fPmQy*pIn[592] + 5*i2e*pIn[481];
      pOut[593] = fPmQy*pIn[593] + 6*i2e*pIn[484];
      pOut[594] = fPmQy*pIn[594];
      pOut[595] = fPmQy*pIn[595] + 8*i2e*pIn[490];
      pOut[596] = fPmQy*pIn[596];
      pOut[597] = fPmQy*pIn[597] + 8*i2e*pIn[491];
      pOut[598] = fPmQy*pIn[598] + 6*i2e*pIn[485];
      pOut[599] = fPmQy*pIn[599] + 7*i2e*pIn[488];
      pOut[600] = fPmQy*pIn[600];
      pOut[601] = fPmQy*pIn[601] + 7*i2e*pIn[493];
      pOut[602] = fPmQy*pIn[602] + i2e*pIn[459];
      pOut[603] = fPmQy*pIn[603] + 12*i2e*pIn[495];
      pOut[604] = fPmQy*pIn[604] + i2e*pIn[462];
      pOut[605] = fPmQy*pIn[605] + i2e*pIn[465];
      pOut[606] = fPmQy*pIn[606] + 11*i2e*pIn[497];
      pOut[607] = fPmQy*pIn[607] + 2*i2e*pIn[494];
      pOut[608] = fPmQy*pIn[608] + 2*i2e*pIn[496];
      pOut[609] = fPmQy*pIn[609] + 11*i2e*pIn[502];
      pOut[610] = fPmQy*pIn[610] + i2e*pIn[468];
      pOut[611] = fPmQy*pIn[611] + i2e*pIn[471];
      pOut[612] = fPmQy*pIn[612] + 3*i2e*pIn[498];
      pOut[613] = fPmQy*pIn[613] + 10*i2e*pIn[505];
      pOut[614] = fPmQy*pIn[614] + 10*i2e*pIn[507];
      pOut[615] = fPmQy*pIn[615] + 3*i2e*pIn[501];
      pOut[616] = fPmQy*pIn[616] + i2e*pIn[474];
      pOut[617] = fPmQy*pIn[617] + i2e*pIn[477];
      pOut[618] = fPmQy*pIn[618] + 9*i2e*pIn[509];
      pOut[619] = fPmQy*pIn[619] + 4*i2e*pIn[503];
      pOut[620] = fPmQy*pIn[620] + 4*i2e*pIn[508];
      pOut[621] = fPmQy*pIn[621] + 9*i2e*pIn[514];
      pOut[622] = fPmQy*pIn[622] + i2e*pIn[480];
      pOut[623] = fPmQy*pIn[623] + i2e*pIn[483];
      pOut[624] = fPmQy*pIn[624] + 5*i2e*pIn[510];
      pOut[625] = fPmQy*pIn[625] + 8*i2e*pIn[517];
      pOut[626] = fPmQy*pIn[626] + 8*i2e*pIn[519];
      pOut[627] = fPmQy*pIn[627] + 5*i2e*pIn[513];
      pOut[628] = fPmQy*pIn[628] + i2e*pIn[486];
      pOut[629] = fPmQy*pIn[629] + i2e*pIn[489];
      pOut[630] = fPmQy*pIn[630] + 7*i2e*pIn[521];
      pOut[631] = fPmQy*pIn[631] + 6*i2e*pIn[515];
      pOut[632] = fPmQy*pIn[632] + 6*i2e*pIn[520];
      pOut[633] = fPmQy*pIn[633] + 7*i2e*pIn[523];
      pOut[634] = fPmQy*pIn[634] + i2e*pIn[492];
      pOut[635] = fPmQy*pIn[635] + 2*i2e*pIn[499];
      pOut[636] = fPmQy*pIn[636] + 10*i2e*pIn[525];
      pOut[637] = fPmQy*pIn[637] + 2*i2e*pIn[500];
      pOut[638] = fPmQy*pIn[638] + 3*i2e*pIn[524];
      pOut[639] = fPmQy*pIn[639] + 9*i2e*pIn[527];
      pOut[640] = fPmQy*pIn[640] + 2*i2e*pIn[504];
      pOut[641] = fPmQy*pIn[641] + 2*i2e*pIn[506];
      pOut[642] = fPmQy*pIn[642] + 9*i2e*pIn[532];
      pOut[643] = fPmQy*pIn[643] + 3*i2e*pIn[526];
      pOut[644] = fPmQy*pIn[644] + 4*i2e*pIn[529];
      pOut[645] = fPmQy*pIn[645] + 2*i2e*pIn[511];
      pOut[646] = fPmQy*pIn[646] + 8*i2e*pIn[535];
      pOut[647] = fPmQy*pIn[647] + 2*i2e*pIn[512];
      pOut[648] = fPmQy*pIn[648] + 8*i2e*pIn[536];
      pOut[649] = fPmQy*pIn[649] + 4*i2e*pIn[530];
      pOut[650] = fPmQy*pIn[650] + 5*i2e*pIn[533];
      pOut[651] = fPmQy*pIn[651] + 7*i2e*pIn[539];
      pOut[652] = fPmQy*pIn[652] + 2*i2e*pIn[516];
      pOut[653] = fPmQy*pIn[653] + 2*i2e*pIn[518];
      pOut[654] = fPmQy*pIn[654] + 7*i2e*pIn[544];
      pOut[655] = fPmQy*pIn[655] + 5*i2e*pIn[538];
      pOut[656] = fPmQy*pIn[656] + 6*i2e*pIn[541];
      pOut[657] = fPmQy*pIn[657] + 2*i2e*pIn[522];
      pOut[658] = fPmQy*pIn[658] + 6*i2e*pIn[542];
      pOut[659] = fPmQy*pIn[659] + 3*i2e*pIn[528];
      pOut[660] = fPmQy*pIn[660] + 8*i2e*pIn[546];
      pOut[661] = fPmQy*pIn[661] + 3*i2e*pIn[531];
      pOut[662] = fPmQy*pIn[662] + 3*i2e*pIn[534];
      pOut[663] = fPmQy*pIn[663] + 7*i2e*pIn[548];
      pOut[664] = fPmQy*pIn[664] + 4*i2e*pIn[545];
      pOut[665] = fPmQy*pIn[665] + 4*i2e*pIn[547];
      pOut[666] = fPmQy*pIn[666] + 7*i2e*pIn[553];
      pOut[667] = fPmQy*pIn[667] + 3*i2e*pIn[537];
      pOut[668] = fPmQy*pIn[668] + 3*i2e*pIn[540];
      pOut[669] = fPmQy*pIn[669] + 5*i2e*pIn[549];
      pOut[670] = fPmQy*pIn[670] + 6*i2e*pIn[554];
      pOut[671] = fPmQy*pIn[671] + 6*i2e*pIn[556];
      pOut[672] = fPmQy*pIn[672] + 5*i2e*pIn[552];
      pOut[673] = fPmQy*pIn[673] + 3*i2e*pIn[543];
      pOut[674] = fPmQy*pIn[674] + 4*i2e*pIn[550];
      pOut[675] = fPmQy*pIn[675] + 6*i2e*pIn[558];
      pOut[676] = fPmQy*pIn[676] + 4*i2e*pIn[551];
      pOut[677] = fPmQy*pIn[677] + 5*i2e*pIn[557];
      pOut[678] = fPmQy*pIn[678] + 4*i2e*pIn[555];
      pOut[679] = fPmQy*pIn[679] + 5*i2e*pIn[559];
      if (lab == 14) return;
   }
   //assert(0);
}

// Calculate (a0|c)^m from (a0|c-1z)^{m+1}, for a = la..lab
// i = _x/_y/_z is the reduction direction (x,y,z);
// fPmQi = PmQ[i] * rho/zeta_c; i2e = .5/eta_ABC = .5/(zeta_a + zeta_b + zeta_c)
// note: the la is not for performance reasons (would likely make the actual recurrence
//       slower for small lab) but for preventing overwriting lower components.
static void OsrrB_KerM_z(double * pOut, double const * pIn, double fPmQz, unsigned la, unsigned lab, double i2e)
{
   switch(la) {
   case 0:
      pOut[0] = fPmQz*pIn[0];
      if (lab == 0) return;
   case 1:
      pOut[1] = fPmQz*pIn[1];
      pOut[2] = fPmQz*pIn[2];
      pOut[3] = fPmQz*pIn[3] + i2e*pIn[0];
      if (lab == 1) return;
   case 2:
      pOut[4] = fPmQz*pIn[4];
      pOut[5] = fPmQz*pIn[5];
      pOut[6] = fPmQz*pIn[6] + 2*i2e*pIn[3];
      pOut[7] = fPmQz*pIn[7];
      pOut[8] = fPmQz*pIn[8] + i2e*pIn[1];
      pOut[9] = fPmQz*pIn[9] + i2e*pIn[2];
      if (lab == 2) return;
   case 3:
      pOut[10] = fPmQz*pIn[10];
      pOut[11] = fPmQz*pIn[11];
      pOut[12] = fPmQz*pIn[12] + 3*i2e*pIn[6];
      pOut[13] = fPmQz*pIn[13];
      pOut[14] = fPmQz*pIn[14] + 2*i2e*pIn[8];
      pOut[15] = fPmQz*pIn[15];
      pOut[16] = fPmQz*pIn[16] + 2*i2e*pIn[9];
      pOut[17] = fPmQz*pIn[17] + i2e*pIn[4];
      pOut[18] = fPmQz*pIn[18] + i2e*pIn[5];
      pOut[19] = fPmQz*pIn[19] + i2e*pIn[7];
      if (lab == 3) return;
   case 4:
      pOut[20] = fPmQz*pIn[20];
      pOut[21] = fPmQz*pIn[21];
      pOut[22] = fPmQz*pIn[22] + 4*i2e*pIn[12];
      pOut[23] = fPmQz*pIn[23];
      pOut[24] = fPmQz*pIn[24];
      pOut[25] = fPmQz*pIn[25] + i2e*pIn[10];
      pOut[26] = fPmQz*pIn[26] + 3*i2e*pIn[14];
      pOut[27] = fPmQz*pIn[27] + i2e*pIn[11];
      pOut[28] = fPmQz*pIn[28] + 3*i2e*pIn[16];
      pOut[29] = fPmQz*pIn[29];
      pOut[30] = fPmQz*pIn[30] + 2*i2e*pIn[17];
      pOut[31] = fPmQz*pIn[31] + 2*i2e*pIn[18];
      pOut[32] = fPmQz*pIn[32] + 2*i2e*pIn[19];
      pOut[33] = fPmQz*pIn[33] + i2e*pIn[13];
      pOut[34] = fPmQz*pIn[34] + i2e*pIn[15];
      if (lab == 4) return;
   case 5:
      pOut[35] = fPmQz*pIn[35];
      pOut[36] = fPmQz*pIn[36];
      pOut[37] = fPmQz*pIn[37] + 5*i2e*pIn[22];
      pOut[38] = fPmQz*pIn[38];
      pOut[39] = fPmQz*pIn[39] + 4*i2e*pIn[26];
      pOut[40] = fPmQz*pIn[40];
      pOut[41] = fPmQz*pIn[41] + 4*i2e*pIn[28];
      pOut[42] = fPmQz*pIn[42] + i2e*pIn[20];
      pOut[43] = fPmQz*pIn[43] + i2e*pIn[21];
      pOut[44] = fPmQz*pIn[44];
      pOut[45] = fPmQz*pIn[45] + 2*i2e*pIn[25];
      pOut[46] = fPmQz*pIn[46];
      pOut[47] = fPmQz*pIn[47] + 2*i2e*pIn[27];
      pOut[48] = fPmQz*pIn[48] + 3*i2e*pIn[30];
      pOut[49] = fPmQz*pIn[49] + 3*i2e*pIn[31];
      pOut[50] = fPmQz*pIn[50] + i2e*pIn[23];
      pOut[51] = fPmQz*pIn[51] + i2e*pIn[24];
      pOut[52] = fPmQz*pIn[52] + 3*i2e*pIn[32];
      pOut[53] = fPmQz*pIn[53] + 2*i2e*pIn[33];
      pOut[54] = fPmQz*pIn[54] + 2*i2e*pIn[34];
      pOut[55] = fPmQz*pIn[55] + i2e*pIn[29];
      if (lab == 5) return;
   case 6:
      pOut[56] = fPmQz*pIn[56];
      pOut[57] = fPmQz*pIn[57];
      pOut[58] = fPmQz*pIn[58] + 6*i2e*pIn[37];
      pOut[59] = fPmQz*pIn[59];
      pOut[60] = fPmQz*pIn[60];
      pOut[61] = fPmQz*pIn[61] + i2e*pIn[35];
      pOut[62] = fPmQz*pIn[62] + 5*i2e*pIn[39];
      pOut[63] = fPmQz*pIn[63] + i2e*pIn[36];
      pOut[64] = fPmQz*pIn[64] + 5*i2e*pIn[41];
      pOut[65] = fPmQz*pIn[65];
      pOut[66] = fPmQz*pIn[66] + 2*i2e*pIn[42];
      pOut[67] = fPmQz*pIn[67];
      pOut[68] = fPmQz*pIn[68] + 4*i2e*pIn[48];
      pOut[69] = fPmQz*pIn[69] + 2*i2e*pIn[43];
      pOut[70] = fPmQz*pIn[70] + 4*i2e*pIn[49];
      pOut[71] = fPmQz*pIn[71];
      pOut[72] = fPmQz*pIn[72] + 3*i2e*pIn[45];
      pOut[73] = fPmQz*pIn[73] + 3*i2e*pIn[47];
      pOut[74] = fPmQz*pIn[74] + 4*i2e*pIn[52];
      pOut[75] = fPmQz*pIn[75] + i2e*pIn[38];
      pOut[76] = fPmQz*pIn[76] + i2e*pIn[40];
      pOut[77] = fPmQz*pIn[77] + 2*i2e*pIn[50];
      pOut[78] = fPmQz*pIn[78] + 2*i2e*pIn[51];
      pOut[79] = fPmQz*pIn[79] + i2e*pIn[44];
      pOut[80] = fPmQz*pIn[80] + 3*i2e*pIn[53];
      pOut[81] = fPmQz*pIn[81] + i2e*pIn[46];
      pOut[82] = fPmQz*pIn[82] + 3*i2e*pIn[54];
      pOut[83] = fPmQz*pIn[83] + 2*i2e*pIn[55];
      if (lab == 6) return;
   case 7:
      pOut[84] = fPmQz*pIn[84];
      pOut[85] = fPmQz*pIn[85];
      pOut[86] = fPmQz*pIn[86] + 7*i2e*pIn[58];
      pOut[87] = fPmQz*pIn[87];
      pOut[88] = fPmQz*pIn[88] + 6*i2e*pIn[62];
      pOut[89] = fPmQz*pIn[89];
      pOut[90] = fPmQz*pIn[90] + 6*i2e*pIn[64];
      pOut[91] = fPmQz*pIn[91] + i2e*pIn[56];
      pOut[92] = fPmQz*pIn[92] + i2e*pIn[57];
      pOut[93] = fPmQz*pIn[93];
      pOut[94] = fPmQz*pIn[94] + 2*i2e*pIn[61];
      pOut[95] = fPmQz*pIn[95];
      pOut[96] = fPmQz*pIn[96] + 2*i2e*pIn[63];
      pOut[97] = fPmQz*pIn[97] + 5*i2e*pIn[68];
      pOut[98] = fPmQz*pIn[98] + 5*i2e*pIn[70];
      pOut[99] = fPmQz*pIn[99];
      pOut[100] = fPmQz*pIn[100] + 4*i2e*pIn[72];
      pOut[101] = fPmQz*pIn[101];
      pOut[102] = fPmQz*pIn[102] + 4*i2e*pIn[73];
      pOut[103] = fPmQz*pIn[103] + 3*i2e*pIn[66];
      pOut[104] = fPmQz*pIn[104] + 3*i2e*pIn[69];
      pOut[105] = fPmQz*pIn[105] + i2e*pIn[59];
      pOut[106] = fPmQz*pIn[106] + i2e*pIn[60];
      pOut[107] = fPmQz*pIn[107] + 5*i2e*pIn[74];
      pOut[108] = fPmQz*pIn[108] + 2*i2e*pIn[75];
      pOut[109] = fPmQz*pIn[109] + 4*i2e*pIn[80];
      pOut[110] = fPmQz*pIn[110] + 2*i2e*pIn[76];
      pOut[111] = fPmQz*pIn[111] + 4*i2e*pIn[82];
      pOut[112] = fPmQz*pIn[112] + i2e*pIn[65];
      pOut[113] = fPmQz*pIn[113] + i2e*pIn[67];
      pOut[114] = fPmQz*pIn[114] + i2e*pIn[71];
      pOut[115] = fPmQz*pIn[115] + 3*i2e*pIn[77];
      pOut[116] = fPmQz*pIn[116] + 3*i2e*pIn[78];
      pOut[117] = fPmQz*pIn[117] + 2*i2e*pIn[79];
      pOut[118] = fPmQz*pIn[118] + 2*i2e*pIn[81];
      pOut[119] = fPmQz*pIn[119] + 3*i2e*pIn[83];
      if (lab == 7) return;
   case 8:
      pOut[120] = fPmQz*pIn[120];
      pOut[121] = fPmQz*pIn[121];
      pOut[122] = fPmQz*pIn[122] + 8*i2e*pIn[86];
      pOut[123] = fPmQz*pIn[123];
      pOut[124] = fPmQz*pIn[124];
      pOut[125] = fPmQz*pIn[125] + i2e*pIn[84];
      pOut[126] = fPmQz*pIn[126] + 7*i2e*pIn[88];
      pOut[127] = fPmQz*pIn[127] + i2e*pIn[85];
      pOut[128] = fPmQz*pIn[128] + 7*i2e*pIn[90];
      pOut[129] = fPmQz*pIn[129];
      pOut[130] = fPmQz*pIn[130] + 2*i2e*pIn[91];
      pOut[131] = fPmQz*pIn[131];
      pOut[132] = fPmQz*pIn[132] + 6*i2e*pIn[97];
      pOut[133] = fPmQz*pIn[133] + 2*i2e*pIn[92];
      pOut[134] = fPmQz*pIn[134] + 6*i2e*pIn[98];
      pOut[135] = fPmQz*pIn[135];
      pOut[136] = fPmQz*pIn[136];
      pOut[137] = fPmQz*pIn[137] + 3*i2e*pIn[94];
      pOut[138] = fPmQz*pIn[138] + 5*i2e*pIn[100];
      pOut[139] = fPmQz*pIn[139] + 3*i2e*pIn[96];
      pOut[140] = fPmQz*pIn[140] + 5*i2e*pIn[102];
      pOut[141] = fPmQz*pIn[141];
      pOut[142] = fPmQz*pIn[142] + 4*i2e*pIn[103];
      pOut[143] = fPmQz*pIn[143] + 4*i2e*pIn[104];
      pOut[144] = fPmQz*pIn[144] + 6*i2e*pIn[107];
      pOut[145] = fPmQz*pIn[145] + i2e*pIn[87];
      pOut[146] = fPmQz*pIn[146] + i2e*pIn[89];
      pOut[147] = fPmQz*pIn[147] + 2*i2e*pIn[105];
      pOut[148] = fPmQz*pIn[148] + 2*i2e*pIn[106];
      pOut[149] = fPmQz*pIn[149] + i2e*pIn[93];
      pOut[150] = fPmQz*pIn[150] + 5*i2e*pIn[109];
      pOut[151] = fPmQz*pIn[151] + i2e*pIn[95];
      pOut[152] = fPmQz*pIn[152] + 5*i2e*pIn[111];
      pOut[153] = fPmQz*pIn[153] + 4*i2e*pIn[115];
      pOut[154] = fPmQz*pIn[154] + 4*i2e*pIn[116];
      pOut[155] = fPmQz*pIn[155] + i2e*pIn[99];
      pOut[156] = fPmQz*pIn[156] + 3*i2e*pIn[108];
      pOut[157] = fPmQz*pIn[157] + i2e*pIn[101];
      pOut[158] = fPmQz*pIn[158] + 3*i2e*pIn[110];
      pOut[159] = fPmQz*pIn[159] + 2*i2e*pIn[112];
      pOut[160] = fPmQz*pIn[160] + 2*i2e*pIn[113];
      pOut[161] = fPmQz*pIn[161] + 4*i2e*pIn[119];
      pOut[162] = fPmQz*pIn[162] + 2*i2e*pIn[114];
      pOut[163] = fPmQz*pIn[163] + 3*i2e*pIn[117];
      pOut[164] = fPmQz*pIn[164] + 3*i2e*pIn[118];
      if (lab == 8) return;
   case 9:
      pOut[165] = fPmQz*pIn[165];
      pOut[166] = fPmQz*pIn[166];
      pOut[167] = fPmQz*pIn[167] + 9*i2e*pIn[122];
      pOut[168] = fPmQz*pIn[168];
      pOut[169] = fPmQz*pIn[169] + 8*i2e*pIn[126];
      pOut[170] = fPmQz*pIn[170];
      pOut[171] = fPmQz*pIn[171] + 8*i2e*pIn[128];
      pOut[172] = fPmQz*pIn[172] + i2e*pIn[120];
      pOut[173] = fPmQz*pIn[173] + i2e*pIn[121];
      pOut[174] = fPmQz*pIn[174];
      pOut[175] = fPmQz*pIn[175] + 2*i2e*pIn[125];
      pOut[176] = fPmQz*pIn[176];
      pOut[177] = fPmQz*pIn[177] + 2*i2e*pIn[127];
      pOut[178] = fPmQz*pIn[178] + 7*i2e*pIn[132];
      pOut[179] = fPmQz*pIn[179] + 7*i2e*pIn[134];
      pOut[180] = fPmQz*pIn[180];
      pOut[181] = fPmQz*pIn[181] + 6*i2e*pIn[138];
      pOut[182] = fPmQz*pIn[182];
      pOut[183] = fPmQz*pIn[183] + 6*i2e*pIn[140];
      pOut[184] = fPmQz*pIn[184] + 3*i2e*pIn[130];
      pOut[185] = fPmQz*pIn[185] + 3*i2e*pIn[133];
      pOut[186] = fPmQz*pIn[186];
      pOut[187] = fPmQz*pIn[187] + 4*i2e*pIn[137];
      pOut[188] = fPmQz*pIn[188];
      pOut[189] = fPmQz*pIn[189] + 4*i2e*pIn[139];
      pOut[190] = fPmQz*pIn[190] + 5*i2e*pIn[142];
      pOut[191] = fPmQz*pIn[191] + 5*i2e*pIn[143];
      pOut[192] = fPmQz*pIn[192] + i2e*pIn[123];
      pOut[193] = fPmQz*pIn[193] + i2e*pIn[124];
      pOut[194] = fPmQz*pIn[194] + 7*i2e*pIn[144];
      pOut[195] = fPmQz*pIn[195] + 2*i2e*pIn[145];
      pOut[196] = fPmQz*pIn[196] + 6*i2e*pIn[150];
      pOut[197] = fPmQz*pIn[197] + 2*i2e*pIn[146];
      pOut[198] = fPmQz*pIn[198] + 6*i2e*pIn[152];
      pOut[199] = fPmQz*pIn[199] + i2e*pIn[129];
      pOut[200] = fPmQz*pIn[200] + i2e*pIn[131];
      pOut[201] = fPmQz*pIn[201] + i2e*pIn[135];
      pOut[202] = fPmQz*pIn[202] + 3*i2e*pIn[147];
      pOut[203] = fPmQz*pIn[203] + i2e*pIn[136];
      pOut[204] = fPmQz*pIn[204] + 5*i2e*pIn[153];
      pOut[205] = fPmQz*pIn[205] + 3*i2e*pIn[148];
      pOut[206] = fPmQz*pIn[206] + 5*i2e*pIn[154];
      pOut[207] = fPmQz*pIn[207] + 4*i2e*pIn[156];
      pOut[208] = fPmQz*pIn[208] + 4*i2e*pIn[158];
      pOut[209] = fPmQz*pIn[209] + i2e*pIn[141];
      pOut[210] = fPmQz*pIn[210] + 2*i2e*pIn[149];
      pOut[211] = fPmQz*pIn[211] + 2*i2e*pIn[151];
      pOut[212] = fPmQz*pIn[212] + 5*i2e*pIn[161];
      pOut[213] = fPmQz*pIn[213] + 2*i2e*pIn[155];
      pOut[214] = fPmQz*pIn[214] + 4*i2e*pIn[163];
      pOut[215] = fPmQz*pIn[215] + 2*i2e*pIn[157];
      pOut[216] = fPmQz*pIn[216] + 4*i2e*pIn[164];
      pOut[217] = fPmQz*pIn[217] + 3*i2e*pIn[159];
      pOut[218] = fPmQz*pIn[218] + 3*i2e*pIn[160];
      pOut[219] = fPmQz*pIn[219] + 3*i2e*pIn[162];
      if (lab == 9) return;
   case 10:
      pOut[220] = fPmQz*pIn[220];
      pOut[221] = fPmQz*pIn[221];
      pOut[222] = fPmQz*pIn[222] + 10*i2e*pIn[167];
      pOut[223] = fPmQz*pIn[223];
      pOut[224] = fPmQz*pIn[224];
      pOut[225] = fPmQz*pIn[225] + i2e*pIn[165];
      pOut[226] = fPmQz*pIn[226] + 9*i2e*pIn[169];
      pOut[227] = fPmQz*pIn[227] + i2e*pIn[166];
      pOut[228] = fPmQz*pIn[228] + 9*i2e*pIn[171];
      pOut[229] = fPmQz*pIn[229];
      pOut[230] = fPmQz*pIn[230] + 2*i2e*pIn[172];
      pOut[231] = fPmQz*pIn[231];
      pOut[232] = fPmQz*pIn[232] + 8*i2e*pIn[178];
      pOut[233] = fPmQz*pIn[233] + 2*i2e*pIn[173];
      pOut[234] = fPmQz*pIn[234] + 8*i2e*pIn[179];
      pOut[235] = fPmQz*pIn[235];
      pOut[236] = fPmQz*pIn[236];
      pOut[237] = fPmQz*pIn[237] + 3*i2e*pIn[175];
      pOut[238] = fPmQz*pIn[238] + 7*i2e*pIn[181];
      pOut[239] = fPmQz*pIn[239] + 3*i2e*pIn[177];
      pOut[240] = fPmQz*pIn[240] + 7*i2e*pIn[183];
      pOut[241] = fPmQz*pIn[241];
      pOut[242] = fPmQz*pIn[242] + 4*i2e*pIn[184];
      pOut[243] = fPmQz*pIn[243];
      pOut[244] = fPmQz*pIn[244] + 6*i2e*pIn[190];
      pOut[245] = fPmQz*pIn[245] + 4*i2e*pIn[185];
      pOut[246] = fPmQz*pIn[246] + 6*i2e*pIn[191];
      pOut[247] = fPmQz*pIn[247];
      pOut[248] = fPmQz*pIn[248] + 5*i2e*pIn[187];
      pOut[249] = fPmQz*pIn[249] + 5*i2e*pIn[189];
      pOut[250] = fPmQz*pIn[250] + 8*i2e*pIn[194];
      pOut[251] = fPmQz*pIn[251] + i2e*pIn[168];
      pOut[252] = fPmQz*pIn[252] + i2e*pIn[170];
      pOut[253] = fPmQz*pIn[253] + 2*i2e*pIn[192];
      pOut[254] = fPmQz*pIn[254] + 2*i2e*pIn[193];
      pOut[255] = fPmQz*pIn[255] + i2e*pIn[174];
      pOut[256] = fPmQz*pIn[256] + 7*i2e*pIn[196];
      pOut[257] = fPmQz*pIn[257] + i2e*pIn[176];
      pOut[258] = fPmQz*pIn[258] + 7*i2e*pIn[198];
      pOut[259] = fPmQz*pIn[259] + 6*i2e*pIn[204];
      pOut[260] = fPmQz*pIn[260] + 6*i2e*pIn[206];
      pOut[261] = fPmQz*pIn[261] + i2e*pIn[180];
      pOut[262] = fPmQz*pIn[262] + 3*i2e*pIn[195];
      pOut[263] = fPmQz*pIn[263] + i2e*pIn[182];
      pOut[264] = fPmQz*pIn[264] + 3*i2e*pIn[197];
      pOut[265] = fPmQz*pIn[265] + 4*i2e*pIn[202];
      pOut[266] = fPmQz*pIn[266] + 4*i2e*pIn[205];
      pOut[267] = fPmQz*pIn[267] + i2e*pIn[186];
      pOut[268] = fPmQz*pIn[268] + 5*i2e*pIn[207];
      pOut[269] = fPmQz*pIn[269] + i2e*pIn[188];
      pOut[270] = fPmQz*pIn[270] + 5*i2e*pIn[208];
      pOut[271] = fPmQz*pIn[271] + 2*i2e*pIn[199];
      pOut[272] = fPmQz*pIn[272] + 2*i2e*pIn[200];
      pOut[273] = fPmQz*pIn[273] + 6*i2e*pIn[212];
      pOut[274] = fPmQz*pIn[274] + 2*i2e*pIn[201];
      pOut[275] = fPmQz*pIn[275] + 2*i2e*pIn[203];
      pOut[276] = fPmQz*pIn[276] + 3*i2e*pIn[210];
      pOut[277] = fPmQz*pIn[277] + 5*i2e*pIn[214];
      pOut[278] = fPmQz*pIn[278] + 3*i2e*pIn[211];
      pOut[279] = fPmQz*pIn[279] + 5*i2e*pIn[216];
      pOut[280] = fPmQz*pIn[280] + 2*i2e*pIn[209];
      pOut[281] = fPmQz*pIn[281] + 4*i2e*pIn[217];
      pOut[282] = fPmQz*pIn[282] + 4*i2e*pIn[218];
      pOut[283] = fPmQz*pIn[283] + 4*i2e*pIn[219];
      pOut[284] = fPmQz*pIn[284] + 3*i2e*pIn[213];
      pOut[285] = fPmQz*pIn[285] + 3*i2e*pIn[215];
      if (lab == 10) return;
   case 11:
      pOut[286] = fPmQz*pIn[286];
      pOut[287] = fPmQz*pIn[287];
      pOut[288] = fPmQz*pIn[288] + 11*i2e*pIn[222];
      pOut[289] = fPmQz*pIn[289];
      pOut[290] = fPmQz*pIn[290] + 10*i2e*pIn[226];
      pOut[291] = fPmQz*pIn[291];
      pOut[292] = fPmQz*pIn[292] + 10*i2e*pIn[228];
      pOut[293] = fPmQz*pIn[293] + i2e*pIn[220];
      pOut[294] = fPmQz*pIn[294] + i2e*pIn[221];
      pOut[295] = fPmQz*pIn[295];
      pOut[296] = fPmQz*pIn[296] + 2*i2e*pIn[225];
      pOut[297] = fPmQz*pIn[297];
      pOut[298] = fPmQz*pIn[298] + 2*i2e*pIn[227];
      pOut[299] = fPmQz*pIn[299] + 9*i2e*pIn[232];
      pOut[300] = fPmQz*pIn[300] + 9*i2e*pIn[234];
      pOut[301] = fPmQz*pIn[301];
      pOut[302] = fPmQz*pIn[302] + 8*i2e*pIn[238];
      pOut[303] = fPmQz*pIn[303];
      pOut[304] = fPmQz*pIn[304] + 8*i2e*pIn[240];
      pOut[305] = fPmQz*pIn[305] + 3*i2e*pIn[230];
      pOut[306] = fPmQz*pIn[306] + 3*i2e*pIn[233];
      pOut[307] = fPmQz*pIn[307];
      pOut[308] = fPmQz*pIn[308] + 4*i2e*pIn[237];
      pOut[309] = fPmQz*pIn[309];
      pOut[310] = fPmQz*pIn[310] + 4*i2e*pIn[239];
      pOut[311] = fPmQz*pIn[311] + 7*i2e*pIn[244];
      pOut[312] = fPmQz*pIn[312] + 7*i2e*pIn[246];
      pOut[313] = fPmQz*pIn[313];
      pOut[314] = fPmQz*pIn[314] + 6*i2e*pIn[248];
      pOut[315] = fPmQz*pIn[315];
      pOut[316] = fPmQz*pIn[316] + 6*i2e*pIn[249];
      pOut[317] = fPmQz*pIn[317] + 5*i2e*pIn[242];
      pOut[318] = fPmQz*pIn[318] + 5*i2e*pIn[245];
      pOut[319] = fPmQz*pIn[319] + i2e*pIn[223];
      pOut[320] = fPmQz*pIn[320] + i2e*pIn[224];
      pOut[321] = fPmQz*pIn[321] + 9*i2e*pIn[250];
      pOut[322] = fPmQz*pIn[322] + 2*i2e*pIn[251];
      pOut[323] = fPmQz*pIn[323] + 8*i2e*pIn[256];
      pOut[324] = fPmQz*pIn[324] + 2*i2e*pIn[252];
      pOut[325] = fPmQz*pIn[325] + 8*i2e*pIn[258];
      pOut[326] = fPmQz*pIn[326] + i2e*pIn[229];
      pOut[327] = fPmQz*pIn[327] + i2e*pIn[231];
      pOut[328] = fPmQz*pIn[328] + i2e*pIn[235];
      pOut[329] = fPmQz*pIn[329] + 3*i2e*pIn[253];
      pOut[330] = fPmQz*pIn[330] + i2e*pIn[236];
      pOut[331] = fPmQz*pIn[331] + 7*i2e*pIn[259];
      pOut[332] = fPmQz*pIn[332] + 3*i2e*pIn[254];
      pOut[333] = fPmQz*pIn[333] + 7*i2e*pIn[260];
      pOut[334] = fPmQz*pIn[334] + 4*i2e*pIn[262];
      pOut[335] = fPmQz*pIn[335] + 6*i2e*pIn[268];
      pOut[336] = fPmQz*pIn[336] + 4*i2e*pIn[264];
      pOut[337] = fPmQz*pIn[337] + 6*i2e*pIn[270];
      pOut[338] = fPmQz*pIn[338] + i2e*pIn[241];
      pOut[339] = fPmQz*pIn[339] + i2e*pIn[243];
      pOut[340] = fPmQz*pIn[340] + i2e*pIn[247];
      pOut[341] = fPmQz*pIn[341] + 5*i2e*pIn[265];
      pOut[342] = fPmQz*pIn[342] + 5*i2e*pIn[266];
      pOut[343] = fPmQz*pIn[343] + 2*i2e*pIn[255];
      pOut[344] = fPmQz*pIn[344] + 2*i2e*pIn[257];
      pOut[345] = fPmQz*pIn[345] + 7*i2e*pIn[273];
      pOut[346] = fPmQz*pIn[346] + 2*i2e*pIn[261];
      pOut[347] = fPmQz*pIn[347] + 6*i2e*pIn[277];
      pOut[348] = fPmQz*pIn[348] + 2*i2e*pIn[263];
      pOut[349] = fPmQz*pIn[349] + 6*i2e*pIn[279];
      pOut[350] = fPmQz*pIn[350] + 3*i2e*pIn[271];
      pOut[351] = fPmQz*pIn[351] + 3*i2e*pIn[272];
      pOut[352] = fPmQz*pIn[352] + 2*i2e*pIn[267];
      pOut[353] = fPmQz*pIn[353] + 4*i2e*pIn[276];
      pOut[354] = fPmQz*pIn[354] + 2*i2e*pIn[269];
      pOut[355] = fPmQz*pIn[355] + 4*i2e*pIn[278];
      pOut[356] = fPmQz*pIn[356] + 5*i2e*pIn[281];
      pOut[357] = fPmQz*pIn[357] + 5*i2e*pIn[282];
      pOut[358] = fPmQz*pIn[358] + 3*i2e*pIn[274];
      pOut[359] = fPmQz*pIn[359] + 3*i2e*pIn[275];
      pOut[360] = fPmQz*pIn[360] + 5*i2e*pIn[283];
      pOut[361] = fPmQz*pIn[361] + 4*i2e*pIn[284];
      pOut[362] = fPmQz*pIn[362] + 4*i2e*pIn[285];
      pOut[363] = fPmQz*pIn[363] + 3*i2e*pIn[280];
      if (lab == 11) return;
   case 12:
      pOut[364] = fPmQz*pIn[364];
      pOut[365] = fPmQz*pIn[365];
      pOut[366] = fPmQz*pIn[366] + 12*i2e*pIn[288];
      pOut[367] = fPmQz*pIn[367];
      pOut[368] = fPmQz*pIn[368];
      pOut[369] = fPmQz*pIn[369] + i2e*pIn[286];
      pOut[370] = fPmQz*pIn[370] + 11*i2e*pIn[290];
      pOut[371] = fPmQz*pIn[371] + i2e*pIn[287];
      pOut[372] = fPmQz*pIn[372] + 11*i2e*pIn[292];
      pOut[373] = fPmQz*pIn[373];
      pOut[374] = fPmQz*pIn[374] + 2*i2e*pIn[293];
      pOut[375] = fPmQz*pIn[375];
      pOut[376] = fPmQz*pIn[376] + 10*i2e*pIn[299];
      pOut[377] = fPmQz*pIn[377] + 2*i2e*pIn[294];
      pOut[378] = fPmQz*pIn[378] + 10*i2e*pIn[300];
      pOut[379] = fPmQz*pIn[379];
      pOut[380] = fPmQz*pIn[380];
      pOut[381] = fPmQz*pIn[381] + 3*i2e*pIn[296];
      pOut[382] = fPmQz*pIn[382] + 9*i2e*pIn[302];
      pOut[383] = fPmQz*pIn[383] + 3*i2e*pIn[298];
      pOut[384] = fPmQz*pIn[384] + 9*i2e*pIn[304];
      pOut[385] = fPmQz*pIn[385];
      pOut[386] = fPmQz*pIn[386] + 4*i2e*pIn[305];
      pOut[387] = fPmQz*pIn[387];
      pOut[388] = fPmQz*pIn[388] + 8*i2e*pIn[311];
      pOut[389] = fPmQz*pIn[389] + 4*i2e*pIn[306];
      pOut[390] = fPmQz*pIn[390] + 8*i2e*pIn[312];
      pOut[391] = fPmQz*pIn[391];
      pOut[392] = fPmQz*pIn[392];
      pOut[393] = fPmQz*pIn[393] + 5*i2e*pIn[308];
      pOut[394] = fPmQz*pIn[394] + 7*i2e*pIn[314];
      pOut[395] = fPmQz*pIn[395] + 5*i2e*pIn[310];
      pOut[396] = fPmQz*pIn[396] + 7*i2e*pIn[316];
      pOut[397] = fPmQz*pIn[397];
      pOut[398] = fPmQz*pIn[398] + 6*i2e*pIn[317];
      pOut[399] = fPmQz*pIn[399] + 6*i2e*pIn[318];
      pOut[400] = fPmQz*pIn[400] + 10*i2e*pIn[321];
      pOut[401] = fPmQz*pIn[401] + i2e*pIn[289];
      pOut[402] = fPmQz*pIn[402] + i2e*pIn[291];
      pOut[403] = fPmQz*pIn[403] + 2*i2e*pIn[319];
      pOut[404] = fPmQz*pIn[404] + 2*i2e*pIn[320];
      pOut[405] = fPmQz*pIn[405] + i2e*pIn[295];
      pOut[406] = fPmQz*pIn[406] + 9*i2e*pIn[323];
      pOut[407] = fPmQz*pIn[407] + i2e*pIn[297];
      pOut[408] = fPmQz*pIn[408] + 9*i2e*pIn[325];
      pOut[409] = fPmQz*pIn[409] + 8*i2e*pIn[331];
      pOut[410] = fPmQz*pIn[410] + 8*i2e*pIn[333];
      pOut[411] = fPmQz*pIn[411] + i2e*pIn[301];
      pOut[412] = fPmQz*pIn[412] + 3*i2e*pIn[322];
      pOut[413] = fPmQz*pIn[413] + i2e*pIn[303];
      pOut[414] = fPmQz*pIn[414] + 3*i2e*pIn[324];
      pOut[415] = fPmQz*pIn[415] + 4*i2e*pIn[329];
      pOut[416] = fPmQz*pIn[416] + 4*i2e*pIn[332];
      pOut[417] = fPmQz*pIn[417] + i2e*pIn[307];
      pOut[418] = fPmQz*pIn[418] + 7*i2e*pIn[335];
      pOut[419] = fPmQz*pIn[419] + i2e*pIn[309];
      pOut[420] = fPmQz*pIn[420] + 7*i2e*pIn[337];
      pOut[421] = fPmQz*pIn[421] + 6*i2e*pIn[341];
      pOut[422] = fPmQz*pIn[422] + 6*i2e*pIn[342];
      pOut[423] = fPmQz*pIn[423] + i2e*pIn[313];
      pOut[424] = fPmQz*pIn[424] + 5*i2e*pIn[334];
      pOut[425] = fPmQz*pIn[425] + i2e*pIn[315];
      pOut[426] = fPmQz*pIn[426] + 5*i2e*pIn[336];
      pOut[427] = fPmQz*pIn[427] + 2*i2e*pIn[326];
      pOut[428] = fPmQz*pIn[428] + 2*i2e*pIn[327];
      pOut[429] = fPmQz*pIn[429] + 8*i2e*pIn[345];
      pOut[430] = fPmQz*pIn[430] + 2*i2e*pIn[328];
      pOut[431] = fPmQz*pIn[431] + 2*i2e*pIn[330];
      pOut[432] = fPmQz*pIn[432] + 3*i2e*pIn[343];
      pOut[433] = fPmQz*pIn[433] + 7*i2e*pIn[347];
      pOut[434] = fPmQz*pIn[434] + 3*i2e*pIn[344];
      pOut[435] = fPmQz*pIn[435] + 7*i2e*pIn[349];
      pOut[436] = fPmQz*pIn[436] + 2*i2e*pIn[338];
      pOut[437] = fPmQz*pIn[437] + 4*i2e*pIn[350];
      pOut[438] = fPmQz*pIn[438] + 2*i2e*pIn[339];
      pOut[439] = fPmQz*pIn[439] + 6*i2e*pIn[356];
      pOut[440] = fPmQz*pIn[440] + 4*i2e*pIn[351];
      pOut[441] = fPmQz*pIn[441] + 6*i2e*pIn[357];
      pOut[442] = fPmQz*pIn[442] + 2*i2e*pIn[340];
      pOut[443] = fPmQz*pIn[443] + 5*i2e*pIn[353];
      pOut[444] = fPmQz*pIn[444] + 5*i2e*pIn[355];
      pOut[445] = fPmQz*pIn[445] + 6*i2e*pIn[360];
      pOut[446] = fPmQz*pIn[446] + 3*i2e*pIn[346];
      pOut[447] = fPmQz*pIn[447] + 3*i2e*pIn[348];
      pOut[448] = fPmQz*pIn[448] + 4*i2e*pIn[358];
      pOut[449] = fPmQz*pIn[449] + 4*i2e*pIn[359];
      pOut[450] = fPmQz*pIn[450] + 3*i2e*pIn[352];
      pOut[451] = fPmQz*pIn[451] + 5*i2e*pIn[361];
      pOut[452] = fPmQz*pIn[452] + 3*i2e*pIn[354];
      pOut[453] = fPmQz*pIn[453] + 5*i2e*pIn[362];
      pOut[454] = fPmQz*pIn[454] + 4*i2e*pIn[363];
      if (lab == 12) return;
   case 13:
      pOut[455] = fPmQz*pIn[455];
      pOut[456] = fPmQz*pIn[456];
      pOut[457] = fPmQz*pIn[457] + 13*i2e*pIn[366];
      pOut[458] = fPmQz*pIn[458];
      pOut[459] = fPmQz*pIn[459] + 12*i2e*pIn[370];
      pOut[460] = fPmQz*pIn[460];
      pOut[461] = fPmQz*pIn[461] + 12*i2e*pIn[372];
      pOut[462] = fPmQz*pIn[462] + i2e*pIn[364];
      pOut[463] = fPmQz*pIn[463] + i2e*pIn[365];
      pOut[464] = fPmQz*pIn[464];
      pOut[465] = fPmQz*pIn[465] + 2*i2e*pIn[369];
      pOut[466] = fPmQz*pIn[466];
      pOut[467] = fPmQz*pIn[467] + 2*i2e*pIn[371];
      pOut[468] = fPmQz*pIn[468] + 11*i2e*pIn[376];
      pOut[469] = fPmQz*pIn[469] + 11*i2e*pIn[378];
      pOut[470] = fPmQz*pIn[470];
      pOut[471] = fPmQz*pIn[471] + 10*i2e*pIn[382];
      pOut[472] = fPmQz*pIn[472];
      pOut[473] = fPmQz*pIn[473] + 10*i2e*pIn[384];
      pOut[474] = fPmQz*pIn[474] + 3*i2e*pIn[374];
      pOut[475] = fPmQz*pIn[475] + 3*i2e*pIn[377];
      pOut[476] = fPmQz*pIn[476];
      pOut[477] = fPmQz*pIn[477] + 4*i2e*pIn[381];
      pOut[478] = fPmQz*pIn[478];
      pOut[479] = fPmQz*pIn[479] + 4*i2e*pIn[383];
      pOut[480] = fPmQz*pIn[480] + 9*i2e*pIn[388];
      pOut[481] = fPmQz*pIn[481] + 9*i2e*pIn[390];
      pOut[482] = fPmQz*pIn[482];
      pOut[483] = fPmQz*pIn[483] + 8*i2e*pIn[394];
      pOut[484] = fPmQz*pIn[484];
      pOut[485] = fPmQz*pIn[485] + 8*i2e*pIn[396];
      pOut[486] = fPmQz*pIn[486] + 5*i2e*pIn[386];
      pOut[487] = fPmQz*pIn[487] + 5*i2e*pIn[389];
      pOut[488] = fPmQz*pIn[488];
      pOut[489] = fPmQz*pIn[489] + 6*i2e*pIn[393];
      pOut[490] = fPmQz*pIn[490];
      pOut[491] = fPmQz*pIn[491] + 6*i2e*pIn[395];
      pOut[492] = fPmQz*pIn[492] + 7*i2e*pIn[398];
      pOut[493] = fPmQz*pIn[493] + 7*i2e*pIn[399];
      pOut[494] = fPmQz*pIn[494] + i2e*pIn[367];
      pOut[495] = fPmQz*pIn[495] + i2e*pIn[368];
      pOut[496] = fPmQz*pIn[496] + 11*i2e*pIn[400];
      pOut[497] = fPmQz*pIn[497] + 2*i2e*pIn[401];
      pOut[498] = fPmQz*pIn[498] + 10*i2e*pIn[406];
      pOut[499] = fPmQz*pIn[499] + 2*i2e*pIn[402];
      pOut[500] = fPmQz*pIn[500] + 10*i2e*pIn[408];
      pOut[501] = fPmQz*pIn[501] + i2e*pIn[373];
      pOut[502] = fPmQz*pIn[502] + i2e*pIn[375];
      pOut[503] = fPmQz*pIn[503] + i2e*pIn[379];
      pOut[504] = fPmQz*pIn[504] + 3*i2e*pIn[403];
      pOut[505] = fPmQz*pIn[505] + i2e*pIn[380];
      pOut[506] = fPmQz*pIn[506] + 9*i2e*pIn[409];
      pOut[507] = fPmQz*pIn[507] + 3*i2e*pIn[404];
      pOut[508] = fPmQz*pIn[508] + 9*i2e*pIn[410];
      pOut[509] = fPmQz*pIn[509] + 4*i2e*pIn[412];
      pOut[510] = fPmQz*pIn[510] + 8*i2e*pIn[418];
      pOut[511] = fPmQz*pIn[511] + 4*i2e*pIn[414];
      pOut[512] = fPmQz*pIn[512] + 8*i2e*pIn[420];
      pOut[513] = fPmQz*pIn[513] + i2e*pIn[385];
      pOut[514] = fPmQz*pIn[514] + i2e*pIn[387];
      pOut[515] = fPmQz*pIn[515] + i2e*pIn[391];
      pOut[516] = fPmQz*pIn[516] + 5*i2e*pIn[415];
      pOut[517] = fPmQz*pIn[517] + i2e*pIn[392];
      pOut[518] = fPmQz*pIn[518] + 7*i2e*pIn[421];
      pOut[519] = fPmQz*pIn[519] + 5*i2e*pIn[416];
      pOut[520] = fPmQz*pIn[520] + 7*i2e*pIn[422];
      pOut[521] = fPmQz*pIn[521] + 6*i2e*pIn[424];
      pOut[522] = fPmQz*pIn[522] + 6*i2e*pIn[426];
      pOut[523] = fPmQz*pIn[523] + i2e*pIn[397];
      pOut[524] = fPmQz*pIn[524] + 2*i2e*pIn[405];
      pOut[525] = fPmQz*pIn[525] + 2*i2e*pIn[407];
      pOut[526] = fPmQz*pIn[526] + 9*i2e*pIn[429];
      pOut[527] = fPmQz*pIn[527] + 2*i2e*pIn[411];
      pOut[528] = fPmQz*pIn[528] + 8*i2e*pIn[433];
      pOut[529] = fPmQz*pIn[529] + 2*i2e*pIn[413];
      pOut[530] = fPmQz*pIn[530] + 8*i2e*pIn[435];
      pOut[531] = fPmQz*pIn[531] + 3*i2e*pIn[427];
      pOut[532] = fPmQz*pIn[532] + 3*i2e*pIn[428];
      pOut[533] = fPmQz*pIn[533] + 2*i2e*pIn[417];
      pOut[534] = fPmQz*pIn[534] + 4*i2e*pIn[432];
      pOut[535] = fPmQz*pIn[535] + 2*i2e*pIn[419];
      pOut[536] = fPmQz*pIn[536] + 4*i2e*pIn[434];
      pOut[537] = fPmQz*pIn[537] + 7*i2e*pIn[439];
      pOut[538] = fPmQz*pIn[538] + 7*i2e*pIn[441];
      pOut[539] = fPmQz*pIn[539] + 2*i2e*pIn[423];
      pOut[540] = fPmQz*pIn[540] + 6*i2e*pIn[443];
      pOut[541] = fPmQz*pIn[541] + 2*i2e*pIn[425];
      pOut[542] = fPmQz*pIn[542] + 6*i2e*pIn[444];
      pOut[543] = fPmQz*pIn[543] + 5*i2e*pIn[437];
      pOut[544] = fPmQz*pIn[544] + 5*i2e*pIn[440];
      pOut[545] = fPmQz*pIn[545] + 3*i2e*pIn[430];
      pOut[546] = fPmQz*pIn[546] + 3*i2e*pIn[431];
      pOut[547] = fPmQz*pIn[547] + 7*i2e*pIn[445];
      pOut[548] = fPmQz*pIn[548] + 4*i2e*pIn[446];
      pOut[549] = fPmQz*pIn[549] + 6*i2e*pIn[451];
      pOut[550] = fPmQz*pIn[550] + 4*i2e*pIn[447];
      pOut[551] = fPmQz*pIn[551] + 6*i2e*pIn[453];
      pOut[552] = fPmQz*pIn[552] + 3*i2e*pIn[436];
      pOut[553] = fPmQz*pIn[553] + 3*i2e*pIn[438];
      pOut[554] = fPmQz*pIn[554] + 3*i2e*pIn[442];
      pOut[555] = fPmQz*pIn[555] + 5*i2e*pIn[448];
      pOut[556] = fPmQz*pIn[556] + 5*i2e*pIn[449];
      pOut[557] = fPmQz*pIn[557] + 4*i2e*pIn[450];
      pOut[558] = fPmQz*pIn[558] + 4*i2e*pIn[452];
      pOut[559] = fPmQz*pIn[559] + 5*i2e*pIn[454];
      if (lab == 13) return;
   case 14:
      pOut[560] = fPmQz*pIn[560];
      pOut[561] = fPmQz*pIn[561];
      pOut[562] = fPmQz*pIn[562] + 14*i2e*pIn[457];
      pOut[563] = fPmQz*pIn[563];
      pOut[564] = fPmQz*pIn[564];
      pOut[565] = fPmQz*pIn[565] + i2e*pIn[455];
      pOut[566] = fPmQz*pIn[566] + 13*i2e*pIn[459];
      pOut[567] = fPmQz*pIn[567] + i2e*pIn[456];
      pOut[568] = fPmQz*pIn[568] + 13*i2e*pIn[461];
      pOut[569] = fPmQz*pIn[569];
      pOut[570] = fPmQz*pIn[570] + 2*i2e*pIn[462];
      pOut[571] = fPmQz*pIn[571];
      pOut[572] = fPmQz*pIn[572] + 12*i2e*pIn[468];
      pOut[573] = fPmQz*pIn[573] + 2*i2e*pIn[463];
      pOut[574] = fPmQz*pIn[574] + 12*i2e*pIn[469];
      pOut[575] = fPmQz*pIn[575];
      pOut[576] = fPmQz*pIn[576];
      pOut[577] = fPmQz*pIn[577] + 3*i2e*pIn[465];
      pOut[578] = fPmQz*pIn[578] + 11*i2e*pIn[471];
      pOut[579] = fPmQz*pIn[579] + 3*i2e*pIn[467];
      pOut[580] = fPmQz*pIn[580] + 11*i2e*pIn[473];
      pOut[581] = fPmQz*pIn[581];
      pOut[582] = fPmQz*pIn[582] + 4*i2e*pIn[474];
      pOut[583] = fPmQz*pIn[583];
      pOut[584] = fPmQz*pIn[584] + 10*i2e*pIn[480];
      pOut[585] = fPmQz*pIn[585] + 4*i2e*pIn[475];
      pOut[586] = fPmQz*pIn[586] + 10*i2e*pIn[481];
      pOut[587] = fPmQz*pIn[587];
      pOut[588] = fPmQz*pIn[588];
      pOut[589] = fPmQz*pIn[589] + 5*i2e*pIn[477];
      pOut[590] = fPmQz*pIn[590] + 9*i2e*pIn[483];
      pOut[591] = fPmQz*pIn[591] + 5*i2e*pIn[479];
      pOut[592] = fPmQz*pIn[592] + 9*i2e*pIn[485];
      pOut[593] = fPmQz*pIn[593];
      pOut[594] = fPmQz*pIn[594] + 6*i2e*pIn[486];
      pOut[595] = fPmQz*pIn[595];
      pOut[596] = fPmQz*pIn[596] + 8*i2e*pIn[492];
      pOut[597] = fPmQz*pIn[597] + 6*i2e*pIn[487];
      pOut[598] = fPmQz*pIn[598] + 8*i2e*pIn[493];
      pOut[599] = fPmQz*pIn[599];
      pOut[600] = fPmQz*pIn[600] + 7*i2e*pIn[489];
      pOut[601] = fPmQz*pIn[601] + 7*i2e*pIn[491];
      pOut[602] = fPmQz*pIn[602] + 12*i2e*pIn[496];
      pOut[603] = fPmQz*pIn[603] + i2e*pIn[458];
      pOut[604] = fPmQz*pIn[604] + i2e*pIn[460];
      pOut[605] = fPmQz*pIn[605] + 2*i2e*pIn[494];
      pOut[606] = fPmQz*pIn[606] + 2*i2e*pIn[495];
      pOut[607] = fPmQz*pIn[607] + i2e*pIn[464];
      pOut[608] = fPmQz*pIn[608] + 11*i2e*pIn[498];
      pOut[609] = fPmQz*pIn[609] + i2e*pIn[466];
      pOut[610] = fPmQz*pIn[610] + 11*i2e*pIn[500];
      pOut[611] = fPmQz*pIn[611] + 10*i2e*pIn[506];
      pOut[612] = fPmQz*pIn[612] + 10*i2e*pIn[508];
      pOut[613] = fPmQz*pIn[613] + i2e*pIn[470];
      pOut[614] = fPmQz*pIn[614] + 3*i2e*pIn[497];
      pOut[615] = fPmQz*pIn[615] + i2e*pIn[472];
      pOut[616] = fPmQz*pIn[616] + 3*i2e*pIn[499];
      pOut[617] = fPmQz*pIn[617] + 4*i2e*pIn[504];
      pOut[618] = fPmQz*pIn[618] + 4*i2e*pIn[507];
      pOut[619] = fPmQz*pIn[619] + i2e*pIn[476];
      pOut[620] = fPmQz*pIn[620] + 9*i2e*pIn[510];
      pOut[621] = fPmQz*pIn[621] + i2e*pIn[478];
      pOut[622] = fPmQz*pIn[622] + 9*i2e*pIn[512];
      pOut[623] = fPmQz*pIn[623] + 8*i2e*pIn[518];
      pOut[624] = fPmQz*pIn[624] + 8*i2e*pIn[520];
      pOut[625] = fPmQz*pIn[625] + i2e*pIn[482];
      pOut[626] = fPmQz*pIn[626] + 5*i2e*pIn[509];
      pOut[627] = fPmQz*pIn[627] + i2e*pIn[484];
      pOut[628] = fPmQz*pIn[628] + 5*i2e*pIn[511];
      pOut[629] = fPmQz*pIn[629] + 6*i2e*pIn[516];
      pOut[630] = fPmQz*pIn[630] + 6*i2e*pIn[519];
      pOut[631] = fPmQz*pIn[631] + i2e*pIn[488];
      pOut[632] = fPmQz*pIn[632] + 7*i2e*pIn[521];
      pOut[633] = fPmQz*pIn[633] + i2e*pIn[490];
      pOut[634] = fPmQz*pIn[634] + 7*i2e*pIn[522];
      pOut[635] = fPmQz*pIn[635] + 2*i2e*pIn[501];
      pOut[636] = fPmQz*pIn[636] + 2*i2e*pIn[502];
      pOut[637] = fPmQz*pIn[637] + 10*i2e*pIn[526];
      pOut[638] = fPmQz*pIn[638] + 2*i2e*pIn[503];
      pOut[639] = fPmQz*pIn[639] + 2*i2e*pIn[505];
      pOut[640] = fPmQz*pIn[640] + 3*i2e*pIn[524];
      pOut[641] = fPmQz*pIn[641] + 9*i2e*pIn[528];
      pOut[642] = fPmQz*pIn[642] + 3*i2e*pIn[525];
      pOut[643] = fPmQz*pIn[643] + 9*i2e*pIn[530];
      pOut[644] = fPmQz*pIn[644] + 2*i2e*pIn[513];
      pOut[645] = fPmQz*pIn[645] + 4*i2e*pIn[531];
      pOut[646] = fPmQz*pIn[646] + 2*i2e*pIn[514];
      pOut[647] = fPmQz*pIn[647] + 8*i2e*pIn[537];
      pOut[648] = fPmQz*pIn[648] + 4*i2e*pIn[532];
      pOut[649] = fPmQz*pIn[649] + 8*i2e*pIn[538];
      pOut[650] = fPmQz*pIn[650] + 2*i2e*pIn[515];
      pOut[651] = fPmQz*pIn[651] + 2*i2e*pIn[517];
      pOut[652] = fPmQz*pIn[652] + 5*i2e*pIn[534];
      pOut[653] = fPmQz*pIn[653] + 7*i2e*pIn[540];
      pOut[654] = fPmQz*pIn[654] + 5*i2e*pIn[536];
      pOut[655] = fPmQz*pIn[655] + 7*i2e*pIn[542];
      pOut[656] = fPmQz*pIn[656] + 2*i2e*pIn[523];
      pOut[657] = fPmQz*pIn[657] + 6*i2e*pIn[543];
      pOut[658] = fPmQz*pIn[658] + 6*i2e*pIn[544];
      pOut[659] = fPmQz*pIn[659] + 8*i2e*pIn[547];
      pOut[660] = fPmQz*pIn[660] + 3*i2e*pIn[527];
      pOut[661] = fPmQz*pIn[661] + 3*i2e*pIn[529];
      pOut[662] = fPmQz*pIn[662] + 4*i2e*pIn[545];
      pOut[663] = fPmQz*pIn[663] + 4*i2e*pIn[546];
      pOut[664] = fPmQz*pIn[664] + 3*i2e*pIn[533];
      pOut[665] = fPmQz*pIn[665] + 7*i2e*pIn[549];
      pOut[666] = fPmQz*pIn[666] + 3*i2e*pIn[535];
      pOut[667] = fPmQz*pIn[667] + 7*i2e*pIn[551];
      pOut[668] = fPmQz*pIn[668] + 6*i2e*pIn[555];
      pOut[669] = fPmQz*pIn[669] + 6*i2e*pIn[556];
      pOut[670] = fPmQz*pIn[670] + 3*i2e*pIn[539];
      pOut[671] = fPmQz*pIn[671] + 5*i2e*pIn[548];
      pOut[672] = fPmQz*pIn[672] + 3*i2e*pIn[541];
      pOut[673] = fPmQz*pIn[673] + 5*i2e*pIn[550];
      pOut[674] = fPmQz*pIn[674] + 4*i2e*pIn[552];
      pOut[675] = fPmQz*pIn[675] + 4*i2e*pIn[553];
      pOut[676] = fPmQz*pIn[676] + 6*i2e*pIn[559];
      pOut[677] = fPmQz*pIn[677] + 4*i2e*pIn[554];
      pOut[678] = fPmQz*pIn[678] + 5*i2e*pIn[557];
      pOut[679] = fPmQz*pIn[679] + 5*i2e*pIn[558];
      if (lab == 14) return;
   }
   //assert(0);
}

// Calculate (a0|c)^0 from (a0|0)^{m}, for a = la..lab
// Output is [nCartX(lab) - nCartX(la-1)] x (2*lc+1). Input is nCartX(lab).
// pMem must hold memory for nCartX(lab) x nCartX(lc) doubles.
// InvEtaABC = 1/(ZetaA+ZetaB+ZetaC); PmQ = (P-Q); riz = rho/zeta_c
void OsrrB_3c_shc(double * pOut, double const * pIn, double * pMem, int la, unsigned lab, unsigned lc, double fPmQx, double fPmQy, double fPmQz, double InvEtaABC, double riz)
{
   size_t nCompA = nCartX(lab);
   size_t iCompA = nCartX(la-1);
   size_t nCompA_Out = nCompA - iCompA;
   double i2e = .5 * InvEtaABC;
   fPmQx *= riz; fPmQy *= riz; fPmQz *= riz;
   switch(lc) {
      case 0: {
         for (size_t i = 0; i < nCompA_Out; ++ i)
            pOut[i] = pIn[i+iCompA];
         return;
      }
      case 1: {
         double * pOut_ = pOut - iCompA;
         OsrrB_KerM_x(&pOut_[ 0*nCompA_Out], &pIn[0], fPmQx, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[ 1*nCompA_Out], &pIn[0], fPmQy, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[ 2*nCompA_Out], &pIn[0], fPmQz, la, lab, i2e);
         return;
      }
      case 2: {
         unsigned la1 = 0; if (la > 1) la1 = (unsigned)la - 1;
         OsrrB_KerM_x(&pMem[ 0*nCompA], &pIn[0], fPmQx, la1, lab, i2e);
         OsrrB_KerM_y(&pMem[ 1*nCompA], &pIn[0], fPmQy, la1, lab, i2e);
         OsrrB_KerM_z(&pMem[ 2*nCompA], &pIn[0], fPmQz, la1, lab, i2e);
         double * pOut_ = pMem + 3 * nCompA;
         OsrrB_KerM_x(&pOut_[ 0*nCompA_Out], &pMem[ 0*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[ 1*nCompA_Out], &pMem[ 1*nCompA], fPmQy, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[ 2*nCompA_Out], &pMem[ 2*nCompA], fPmQz, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[ 3*nCompA_Out], &pMem[ 1*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[ 4*nCompA_Out], &pMem[ 2*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[ 5*nCompA_Out], &pMem[ 2*nCompA], fPmQy, la, lab, i2e);
         ShTrC2(pOut, pOut_ + iCompA, nCompA_Out);
         return;
      }
      case 3: {
         unsigned la2 = 0; if (la > 2) la2 = (unsigned)la - 2;
         OsrrB_KerM_x(&pMem[ 0*nCompA], &pIn[0], fPmQx, la2, lab, i2e);
         OsrrB_KerM_y(&pMem[ 1*nCompA], &pIn[0], fPmQy, la2, lab, i2e);
         OsrrB_KerM_z(&pMem[ 2*nCompA], &pIn[0], fPmQz, la2, lab, i2e);
         unsigned la1 = 0; if (la > 1) la1 = (unsigned)la - 1;
         OsrrB_KerM_x(&pMem[ 3*nCompA], &pMem[ 0*nCompA], fPmQx, la1, lab, i2e);
         OsrrB_KerM_y(&pMem[ 4*nCompA], &pMem[ 1*nCompA], fPmQy, la1, lab, i2e);
         OsrrB_KerM_z(&pMem[ 5*nCompA], &pMem[ 2*nCompA], fPmQz, la1, lab, i2e);
         OsrrB_KerM_y(&pMem[ 6*nCompA], &pMem[ 2*nCompA], fPmQy, la1, lab, i2e);
         double * pOut_ = pMem + 7 * nCompA;
         OsrrB_KerM_x(&pOut_[ 0*nCompA_Out], &pMem[ 3*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[ 1*nCompA_Out], &pMem[ 4*nCompA], fPmQy, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[ 2*nCompA_Out], &pMem[ 5*nCompA], fPmQz, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[ 3*nCompA_Out], &pMem[ 4*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[ 4*nCompA_Out], &pMem[ 5*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[ 5*nCompA_Out], &pMem[ 3*nCompA], fPmQy, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[ 6*nCompA_Out], &pMem[ 5*nCompA], fPmQy, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[ 7*nCompA_Out], &pMem[ 3*nCompA], fPmQz, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[ 8*nCompA_Out], &pMem[ 4*nCompA], fPmQz, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[ 9*nCompA_Out], &pMem[ 6*nCompA], fPmQx, la, lab, i2e);
         ShTrC3(pOut, pOut_ + iCompA, nCompA_Out);
         return;
      }
      case 4: {
         unsigned la3 = 0; if (la > 3) la3 = (unsigned)la - 3;
         OsrrB_KerM_x(&pMem[ 0*nCompA], &pIn[0], fPmQx, la3, lab, i2e);
         OsrrB_KerM_y(&pMem[ 1*nCompA], &pIn[0], fPmQy, la3, lab, i2e);
         OsrrB_KerM_z(&pMem[ 2*nCompA], &pIn[0], fPmQz, la3, lab, i2e);
         unsigned la2 = 0; if (la > 2) la2 = (unsigned)la - 2;
         OsrrB_KerM_x(&pMem[ 3*nCompA], &pMem[ 0*nCompA], fPmQx, la2, lab, i2e);
         OsrrB_KerM_y(&pMem[ 4*nCompA], &pMem[ 1*nCompA], fPmQy, la2, lab, i2e);
         OsrrB_KerM_z(&pMem[ 5*nCompA], &pMem[ 2*nCompA], fPmQz, la2, lab, i2e);
         unsigned la1 = 0; if (la > 1) la1 = (unsigned)la - 1;
         OsrrB_KerM_x(&pMem[ 6*nCompA], &pMem[ 3*nCompA], fPmQx, la1, lab, i2e);
         OsrrB_KerM_y(&pMem[ 7*nCompA], &pMem[ 4*nCompA], fPmQy, la1, lab, i2e);
         OsrrB_KerM_z(&pMem[ 8*nCompA], &pMem[ 5*nCompA], fPmQz, la1, lab, i2e);
         OsrrB_KerM_x(&pMem[ 9*nCompA], &pMem[ 4*nCompA], fPmQx, la1, lab, i2e);
         OsrrB_KerM_y(&pMem[10*nCompA], &pMem[ 5*nCompA], fPmQy, la1, lab, i2e);
         OsrrB_KerM_z(&pMem[11*nCompA], &pMem[ 3*nCompA], fPmQz, la1, lab, i2e);
         double * pOut_ = pMem + 12 * nCompA;
         OsrrB_KerM_x(&pOut_[ 0*nCompA_Out], &pMem[ 6*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[ 1*nCompA_Out], &pMem[ 7*nCompA], fPmQy, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[ 2*nCompA_Out], &pMem[ 8*nCompA], fPmQz, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[ 3*nCompA_Out], &pMem[ 6*nCompA], fPmQy, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[ 4*nCompA_Out], &pMem[ 7*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[ 5*nCompA_Out], &pMem[ 6*nCompA], fPmQz, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[ 6*nCompA_Out], &pMem[ 8*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[ 7*nCompA_Out], &pMem[ 7*nCompA], fPmQz, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[ 8*nCompA_Out], &pMem[ 8*nCompA], fPmQy, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[ 9*nCompA_Out], &pMem[ 9*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[10*nCompA_Out], &pMem[11*nCompA], fPmQz, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[11*nCompA_Out], &pMem[10*nCompA], fPmQy, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[12*nCompA_Out], &pMem[10*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[13*nCompA_Out], &pMem[ 9*nCompA], fPmQz, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[14*nCompA_Out], &pMem[11*nCompA], fPmQy, la, lab, i2e);
         ShTrC4(pOut, pOut_ + iCompA, nCompA_Out);
         return;
      }
      case 5: {
         unsigned la4 = 0; if (la > 4) la4 = (unsigned)la - 4;
         OsrrB_KerM_x(&pMem[ 0*nCompA], &pIn[0], fPmQx, la4, lab, i2e);
         OsrrB_KerM_y(&pMem[ 1*nCompA], &pIn[0], fPmQy, la4, lab, i2e);
         OsrrB_KerM_z(&pMem[ 2*nCompA], &pIn[0], fPmQz, la4, lab, i2e);
         unsigned la3 = 0; if (la > 3) la3 = (unsigned)la - 3;
         OsrrB_KerM_x(&pMem[ 3*nCompA], &pMem[ 0*nCompA], fPmQx, la3, lab, i2e);
         OsrrB_KerM_y(&pMem[ 4*nCompA], &pMem[ 1*nCompA], fPmQy, la3, lab, i2e);
         OsrrB_KerM_z(&pMem[ 5*nCompA], &pMem[ 2*nCompA], fPmQz, la3, lab, i2e);
         unsigned la2 = 0; if (la > 2) la2 = (unsigned)la - 2;
         OsrrB_KerM_x(&pMem[ 6*nCompA], &pMem[ 3*nCompA], fPmQx, la2, lab, i2e);
         OsrrB_KerM_y(&pMem[ 7*nCompA], &pMem[ 4*nCompA], fPmQy, la2, lab, i2e);
         OsrrB_KerM_z(&pMem[ 8*nCompA], &pMem[ 5*nCompA], fPmQz, la2, lab, i2e);
         OsrrB_KerM_x(&pMem[ 9*nCompA], &pMem[ 4*nCompA], fPmQx, la2, lab, i2e);
         OsrrB_KerM_y(&pMem[10*nCompA], &pMem[ 5*nCompA], fPmQy, la2, lab, i2e);
         unsigned la1 = 0; if (la > 1) la1 = (unsigned)la - 1;
         OsrrB_KerM_x(&pMem[11*nCompA], &pMem[ 6*nCompA], fPmQx, la1, lab, i2e);
         OsrrB_KerM_y(&pMem[12*nCompA], &pMem[ 7*nCompA], fPmQy, la1, lab, i2e);
         OsrrB_KerM_z(&pMem[13*nCompA], &pMem[ 8*nCompA], fPmQz, la1, lab, i2e);
         OsrrB_KerM_x(&pMem[14*nCompA], &pMem[ 7*nCompA], fPmQx, la1, lab, i2e);
         OsrrB_KerM_z(&pMem[15*nCompA], &pMem[ 6*nCompA], fPmQz, la1, lab, i2e);
         OsrrB_KerM_x(&pMem[16*nCompA], &pMem[ 8*nCompA], fPmQx, la1, lab, i2e);
         OsrrB_KerM_x(&pMem[17*nCompA], &pMem[ 9*nCompA], fPmQx, la1, lab, i2e);
         OsrrB_KerM_y(&pMem[18*nCompA], &pMem[10*nCompA], fPmQy, la1, lab, i2e);
         OsrrB_KerM_x(&pMem[19*nCompA], &pMem[10*nCompA], fPmQx, la1, lab, i2e);
         double * pOut_ = pMem + 20 * nCompA;
         OsrrB_KerM_x(&pOut_[ 0*nCompA_Out], &pMem[11*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[ 1*nCompA_Out], &pMem[12*nCompA], fPmQy, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[ 2*nCompA_Out], &pMem[13*nCompA], fPmQz, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[ 3*nCompA_Out], &pMem[12*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[ 4*nCompA_Out], &pMem[13*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[ 5*nCompA_Out], &pMem[11*nCompA], fPmQy, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[ 6*nCompA_Out], &pMem[13*nCompA], fPmQy, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[ 7*nCompA_Out], &pMem[15*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[ 8*nCompA_Out], &pMem[12*nCompA], fPmQz, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[ 9*nCompA_Out], &pMem[17*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[10*nCompA_Out], &pMem[15*nCompA], fPmQz, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[11*nCompA_Out], &pMem[14*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[12*nCompA_Out], &pMem[18*nCompA], fPmQy, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[13*nCompA_Out], &pMem[16*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[14*nCompA_Out], &pMem[18*nCompA], fPmQz, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[15*nCompA_Out], &pMem[15*nCompA], fPmQy, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[16*nCompA_Out], &pMem[14*nCompA], fPmQz, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[17*nCompA_Out], &pMem[19*nCompA], fPmQz, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[18*nCompA_Out], &pMem[18*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[19*nCompA_Out], &pMem[19*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[20*nCompA_Out], &pMem[17*nCompA], fPmQz, la, lab, i2e);
         ShTrC5(pOut, pOut_ + iCompA, nCompA_Out);
         return;
      }
      case 6: {
         unsigned la5 = 0; if (la > 5) la5 = (unsigned)la - 5;
         OsrrB_KerM_x(&pMem[ 0*nCompA], &pIn[0], fPmQx, la5, lab, i2e);
         OsrrB_KerM_y(&pMem[ 1*nCompA], &pIn[0], fPmQy, la5, lab, i2e);
         OsrrB_KerM_z(&pMem[ 2*nCompA], &pIn[0], fPmQz, la5, lab, i2e);
         unsigned la4 = 0; if (la > 4) la4 = (unsigned)la - 4;
         OsrrB_KerM_x(&pMem[ 3*nCompA], &pMem[ 0*nCompA], fPmQx, la4, lab, i2e);
         OsrrB_KerM_y(&pMem[ 4*nCompA], &pMem[ 1*nCompA], fPmQy, la4, lab, i2e);
         OsrrB_KerM_z(&pMem[ 5*nCompA], &pMem[ 2*nCompA], fPmQz, la4, lab, i2e);
         unsigned la3 = 0; if (la > 3) la3 = (unsigned)la - 3;
         OsrrB_KerM_x(&pMem[ 6*nCompA], &pMem[ 3*nCompA], fPmQx, la3, lab, i2e);
         OsrrB_KerM_y(&pMem[ 7*nCompA], &pMem[ 4*nCompA], fPmQy, la3, lab, i2e);
         OsrrB_KerM_z(&pMem[ 8*nCompA], &pMem[ 5*nCompA], fPmQz, la3, lab, i2e);
         OsrrB_KerM_y(&pMem[ 9*nCompA], &pMem[ 5*nCompA], fPmQy, la3, lab, i2e);
         unsigned la2 = 0; if (la > 2) la2 = (unsigned)la - 2;
         OsrrB_KerM_x(&pMem[10*nCompA], &pMem[ 6*nCompA], fPmQx, la2, lab, i2e);
         OsrrB_KerM_y(&pMem[11*nCompA], &pMem[ 7*nCompA], fPmQy, la2, lab, i2e);
         OsrrB_KerM_z(&pMem[12*nCompA], &pMem[ 8*nCompA], fPmQz, la2, lab, i2e);
         OsrrB_KerM_x(&pMem[13*nCompA], &pMem[ 7*nCompA], fPmQx, la2, lab, i2e);
         OsrrB_KerM_z(&pMem[14*nCompA], &pMem[ 6*nCompA], fPmQz, la2, lab, i2e);
         OsrrB_KerM_y(&pMem[15*nCompA], &pMem[ 9*nCompA], fPmQy, la2, lab, i2e);
         OsrrB_KerM_x(&pMem[16*nCompA], &pMem[ 9*nCompA], fPmQx, la2, lab, i2e);
         unsigned la1 = 0; if (la > 1) la1 = (unsigned)la - 1;
         OsrrB_KerM_x(&pMem[17*nCompA], &pMem[10*nCompA], fPmQx, la1, lab, i2e);
         OsrrB_KerM_y(&pMem[18*nCompA], &pMem[11*nCompA], fPmQy, la1, lab, i2e);
         OsrrB_KerM_z(&pMem[19*nCompA], &pMem[12*nCompA], fPmQz, la1, lab, i2e);
         OsrrB_KerM_x(&pMem[20*nCompA], &pMem[12*nCompA], fPmQx, la1, lab, i2e);
         OsrrB_KerM_y(&pMem[21*nCompA], &pMem[10*nCompA], fPmQy, la1, lab, i2e);
         OsrrB_KerM_z(&pMem[22*nCompA], &pMem[14*nCompA], fPmQz, la1, lab, i2e);
         OsrrB_KerM_x(&pMem[23*nCompA], &pMem[13*nCompA], fPmQx, la1, lab, i2e);
         OsrrB_KerM_y(&pMem[24*nCompA], &pMem[15*nCompA], fPmQy, la1, lab, i2e);
         OsrrB_KerM_z(&pMem[25*nCompA], &pMem[15*nCompA], fPmQz, la1, lab, i2e);
         OsrrB_KerM_y(&pMem[26*nCompA], &pMem[14*nCompA], fPmQy, la1, lab, i2e);
         OsrrB_KerM_z(&pMem[27*nCompA], &pMem[13*nCompA], fPmQz, la1, lab, i2e);
         OsrrB_KerM_x(&pMem[28*nCompA], &pMem[16*nCompA], fPmQx, la1, lab, i2e);
         double * pOut_ = pMem + 29 * nCompA;
         OsrrB_KerM_x(&pOut_[ 0*nCompA_Out], &pMem[17*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[ 1*nCompA_Out], &pMem[18*nCompA], fPmQy, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[ 2*nCompA_Out], &pMem[19*nCompA], fPmQz, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[ 3*nCompA_Out], &pMem[21*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[ 4*nCompA_Out], &pMem[18*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[ 5*nCompA_Out], &pMem[17*nCompA], fPmQz, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[ 6*nCompA_Out], &pMem[19*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[ 7*nCompA_Out], &pMem[18*nCompA], fPmQz, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[ 8*nCompA_Out], &pMem[19*nCompA], fPmQy, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[ 9*nCompA_Out], &pMem[21*nCompA], fPmQy, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[10*nCompA_Out], &pMem[22*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[11*nCompA_Out], &pMem[23*nCompA], fPmQy, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[12*nCompA_Out], &pMem[20*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[13*nCompA_Out], &pMem[24*nCompA], fPmQy, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[14*nCompA_Out], &pMem[25*nCompA], fPmQz, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[15*nCompA_Out], &pMem[23*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[16*nCompA_Out], &pMem[22*nCompA], fPmQz, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[17*nCompA_Out], &pMem[25*nCompA], fPmQy, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[18*nCompA_Out], &pMem[20*nCompA], fPmQy, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[19*nCompA_Out], &pMem[27*nCompA], fPmQy, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[20*nCompA_Out], &pMem[26*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[21*nCompA_Out], &pMem[28*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[22*nCompA_Out], &pMem[24*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[23*nCompA_Out], &pMem[26*nCompA], fPmQy, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[24*nCompA_Out], &pMem[25*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[25*nCompA_Out], &pMem[27*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[26*nCompA_Out], &pMem[28*nCompA], fPmQz, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[27*nCompA_Out], &pMem[28*nCompA], fPmQy, la, lab, i2e);
         ShTrC6(pOut, pOut_ + iCompA, nCompA_Out);
         return;
      }
   }
   //assert(0);
}

// Calculate (a0|c)^0 from (a0|0)^{m}, for a = la..lab
// Output is [nCartX(lab) - nCartX(la-1)] x nCartY(lc). Input is nCartX(lab).
// pMem must hold memory for nCartX(lab) x nCartX(lc) doubles.
// InvEtaABC = 1/(ZetaA+ZetaB+ZetaC); PmQ = (P-Q); riz = rho/zeta_c
void OsrrB_3c_cac(double * pOut, double const * pIn, double * pMem, int la, unsigned lab, unsigned lc, double fPmQx, double fPmQy, double fPmQz, double InvEtaABC, double riz)
{
   size_t nCompA = nCartX(lab);
   size_t iCompA = nCartX(la-1);
   size_t nCompA_Out = nCompA - iCompA;
   double i2e = .5 * InvEtaABC;
   double * pOut_ = pOut - iCompA;
   fPmQx *= riz; fPmQy *= riz; fPmQz *= riz;
   switch(lc) {
      case 0: {
         for (size_t i = 0; i < nCompA_Out; ++ i)
            pOut[i] = pIn[i+iCompA];
         return;
      }
      case 1: {
         OsrrB_KerM_x(&pOut_[ 0*nCompA_Out], &pIn[0], fPmQx, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[ 1*nCompA_Out], &pIn[0], fPmQy, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[ 2*nCompA_Out], &pIn[0], fPmQz, la, lab, i2e);
         return;
      }
      case 2: {
         unsigned la1 = 0; if (la > 1) la1 = (unsigned)la - 1;
         OsrrB_KerM_x(&pMem[ 0*nCompA], &pIn[0], fPmQx, la1, lab, i2e);
         OsrrB_KerM_y(&pMem[ 1*nCompA], &pIn[0], fPmQy, la1, lab, i2e);
         OsrrB_KerM_z(&pMem[ 2*nCompA], &pIn[0], fPmQz, la1, lab, i2e);
         OsrrB_KerM_x(&pOut_[ 0*nCompA_Out], &pMem[ 0*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[ 1*nCompA_Out], &pMem[ 1*nCompA], fPmQy, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[ 2*nCompA_Out], &pMem[ 2*nCompA], fPmQz, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[ 3*nCompA_Out], &pMem[ 1*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[ 4*nCompA_Out], &pMem[ 2*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[ 5*nCompA_Out], &pMem[ 2*nCompA], fPmQy, la, lab, i2e);
         return;
      }
      case 3: {
         unsigned la2 = 0; if (la > 2) la2 = (unsigned)la - 2;
         OsrrB_KerM_x(&pMem[ 0*nCompA], &pIn[0], fPmQx, la2, lab, i2e);
         OsrrB_KerM_y(&pMem[ 1*nCompA], &pIn[0], fPmQy, la2, lab, i2e);
         OsrrB_KerM_z(&pMem[ 2*nCompA], &pIn[0], fPmQz, la2, lab, i2e);
         unsigned la1 = 0; if (la > 1) la1 = (unsigned)la - 1;
         OsrrB_KerM_x(&pMem[ 3*nCompA], &pMem[ 0*nCompA], fPmQx, la1, lab, i2e);
         OsrrB_KerM_y(&pMem[ 4*nCompA], &pMem[ 1*nCompA], fPmQy, la1, lab, i2e);
         OsrrB_KerM_z(&pMem[ 5*nCompA], &pMem[ 2*nCompA], fPmQz, la1, lab, i2e);
         OsrrB_KerM_y(&pMem[ 6*nCompA], &pMem[ 2*nCompA], fPmQy, la1, lab, i2e);
         OsrrB_KerM_x(&pOut_[ 0*nCompA_Out], &pMem[ 3*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[ 1*nCompA_Out], &pMem[ 4*nCompA], fPmQy, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[ 2*nCompA_Out], &pMem[ 5*nCompA], fPmQz, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[ 3*nCompA_Out], &pMem[ 4*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[ 4*nCompA_Out], &pMem[ 5*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[ 5*nCompA_Out], &pMem[ 3*nCompA], fPmQy, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[ 6*nCompA_Out], &pMem[ 5*nCompA], fPmQy, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[ 7*nCompA_Out], &pMem[ 3*nCompA], fPmQz, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[ 8*nCompA_Out], &pMem[ 4*nCompA], fPmQz, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[ 9*nCompA_Out], &pMem[ 6*nCompA], fPmQx, la, lab, i2e);
         return;
      }
      case 4: {
         unsigned la3 = 0; if (la > 3) la3 = (unsigned)la - 3;
         OsrrB_KerM_x(&pMem[ 0*nCompA], &pIn[0], fPmQx, la3, lab, i2e);
         OsrrB_KerM_y(&pMem[ 1*nCompA], &pIn[0], fPmQy, la3, lab, i2e);
         OsrrB_KerM_z(&pMem[ 2*nCompA], &pIn[0], fPmQz, la3, lab, i2e);
         unsigned la2 = 0; if (la > 2) la2 = (unsigned)la - 2;
         OsrrB_KerM_x(&pMem[ 3*nCompA], &pMem[ 0*nCompA], fPmQx, la2, lab, i2e);
         OsrrB_KerM_y(&pMem[ 4*nCompA], &pMem[ 1*nCompA], fPmQy, la2, lab, i2e);
         OsrrB_KerM_z(&pMem[ 5*nCompA], &pMem[ 2*nCompA], fPmQz, la2, lab, i2e);
         unsigned la1 = 0; if (la > 1) la1 = (unsigned)la - 1;
         OsrrB_KerM_x(&pMem[ 6*nCompA], &pMem[ 3*nCompA], fPmQx, la1, lab, i2e);
         OsrrB_KerM_y(&pMem[ 7*nCompA], &pMem[ 4*nCompA], fPmQy, la1, lab, i2e);
         OsrrB_KerM_z(&pMem[ 8*nCompA], &pMem[ 5*nCompA], fPmQz, la1, lab, i2e);
         OsrrB_KerM_x(&pMem[ 9*nCompA], &pMem[ 4*nCompA], fPmQx, la1, lab, i2e);
         OsrrB_KerM_y(&pMem[10*nCompA], &pMem[ 5*nCompA], fPmQy, la1, lab, i2e);
         OsrrB_KerM_z(&pMem[11*nCompA], &pMem[ 3*nCompA], fPmQz, la1, lab, i2e);
         OsrrB_KerM_x(&pOut_[ 0*nCompA_Out], &pMem[ 6*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[ 1*nCompA_Out], &pMem[ 7*nCompA], fPmQy, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[ 2*nCompA_Out], &pMem[ 8*nCompA], fPmQz, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[ 3*nCompA_Out], &pMem[ 6*nCompA], fPmQy, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[ 4*nCompA_Out], &pMem[ 7*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[ 5*nCompA_Out], &pMem[ 6*nCompA], fPmQz, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[ 6*nCompA_Out], &pMem[ 8*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[ 7*nCompA_Out], &pMem[ 7*nCompA], fPmQz, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[ 8*nCompA_Out], &pMem[ 8*nCompA], fPmQy, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[ 9*nCompA_Out], &pMem[ 9*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[10*nCompA_Out], &pMem[11*nCompA], fPmQz, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[11*nCompA_Out], &pMem[10*nCompA], fPmQy, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[12*nCompA_Out], &pMem[10*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[13*nCompA_Out], &pMem[ 9*nCompA], fPmQz, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[14*nCompA_Out], &pMem[11*nCompA], fPmQy, la, lab, i2e);
         return;
      }
      case 5: {
         unsigned la4 = 0; if (la > 4) la4 = (unsigned)la - 4;
         OsrrB_KerM_x(&pMem[ 0*nCompA], &pIn[0], fPmQx, la4, lab, i2e);
         OsrrB_KerM_y(&pMem[ 1*nCompA], &pIn[0], fPmQy, la4, lab, i2e);
         OsrrB_KerM_z(&pMem[ 2*nCompA], &pIn[0], fPmQz, la4, lab, i2e);
         unsigned la3 = 0; if (la > 3) la3 = (unsigned)la - 3;
         OsrrB_KerM_x(&pMem[ 3*nCompA], &pMem[ 0*nCompA], fPmQx, la3, lab, i2e);
         OsrrB_KerM_y(&pMem[ 4*nCompA], &pMem[ 1*nCompA], fPmQy, la3, lab, i2e);
         OsrrB_KerM_z(&pMem[ 5*nCompA], &pMem[ 2*nCompA], fPmQz, la3, lab, i2e);
         unsigned la2 = 0; if (la > 2) la2 = (unsigned)la - 2;
         OsrrB_KerM_x(&pMem[ 6*nCompA], &pMem[ 3*nCompA], fPmQx, la2, lab, i2e);
         OsrrB_KerM_y(&pMem[ 7*nCompA], &pMem[ 4*nCompA], fPmQy, la2, lab, i2e);
         OsrrB_KerM_z(&pMem[ 8*nCompA], &pMem[ 5*nCompA], fPmQz, la2, lab, i2e);
         OsrrB_KerM_x(&pMem[ 9*nCompA], &pMem[ 4*nCompA], fPmQx, la2, lab, i2e);
         OsrrB_KerM_y(&pMem[10*nCompA], &pMem[ 5*nCompA], fPmQy, la2, lab, i2e);
         unsigned la1 = 0; if (la > 1) la1 = (unsigned)la - 1;
         OsrrB_KerM_x(&pMem[11*nCompA], &pMem[ 6*nCompA], fPmQx, la1, lab, i2e);
         OsrrB_KerM_y(&pMem[12*nCompA], &pMem[ 7*nCompA], fPmQy, la1, lab, i2e);
         OsrrB_KerM_z(&pMem[13*nCompA], &pMem[ 8*nCompA], fPmQz, la1, lab, i2e);
         OsrrB_KerM_x(&pMem[14*nCompA], &pMem[ 7*nCompA], fPmQx, la1, lab, i2e);
         OsrrB_KerM_z(&pMem[15*nCompA], &pMem[ 6*nCompA], fPmQz, la1, lab, i2e);
         OsrrB_KerM_x(&pMem[16*nCompA], &pMem[ 8*nCompA], fPmQx, la1, lab, i2e);
         OsrrB_KerM_x(&pMem[17*nCompA], &pMem[ 9*nCompA], fPmQx, la1, lab, i2e);
         OsrrB_KerM_y(&pMem[18*nCompA], &pMem[10*nCompA], fPmQy, la1, lab, i2e);
         OsrrB_KerM_x(&pMem[19*nCompA], &pMem[10*nCompA], fPmQx, la1, lab, i2e);
         OsrrB_KerM_x(&pOut_[ 0*nCompA_Out], &pMem[11*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[ 1*nCompA_Out], &pMem[12*nCompA], fPmQy, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[ 2*nCompA_Out], &pMem[13*nCompA], fPmQz, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[ 3*nCompA_Out], &pMem[12*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[ 4*nCompA_Out], &pMem[13*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[ 5*nCompA_Out], &pMem[11*nCompA], fPmQy, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[ 6*nCompA_Out], &pMem[13*nCompA], fPmQy, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[ 7*nCompA_Out], &pMem[15*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[ 8*nCompA_Out], &pMem[12*nCompA], fPmQz, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[ 9*nCompA_Out], &pMem[17*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[10*nCompA_Out], &pMem[15*nCompA], fPmQz, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[11*nCompA_Out], &pMem[14*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[12*nCompA_Out], &pMem[18*nCompA], fPmQy, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[13*nCompA_Out], &pMem[16*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[14*nCompA_Out], &pMem[18*nCompA], fPmQz, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[15*nCompA_Out], &pMem[15*nCompA], fPmQy, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[16*nCompA_Out], &pMem[14*nCompA], fPmQz, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[17*nCompA_Out], &pMem[19*nCompA], fPmQz, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[18*nCompA_Out], &pMem[18*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[19*nCompA_Out], &pMem[19*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[20*nCompA_Out], &pMem[17*nCompA], fPmQz, la, lab, i2e);
         return;
      }
      case 6: {
         unsigned la5 = 0; if (la > 5) la5 = (unsigned)la - 5;
         OsrrB_KerM_x(&pMem[ 0*nCompA], &pIn[0], fPmQx, la5, lab, i2e);
         OsrrB_KerM_y(&pMem[ 1*nCompA], &pIn[0], fPmQy, la5, lab, i2e);
         OsrrB_KerM_z(&pMem[ 2*nCompA], &pIn[0], fPmQz, la5, lab, i2e);
         unsigned la4 = 0; if (la > 4) la4 = (unsigned)la - 4;
         OsrrB_KerM_x(&pMem[ 3*nCompA], &pMem[ 0*nCompA], fPmQx, la4, lab, i2e);
         OsrrB_KerM_y(&pMem[ 4*nCompA], &pMem[ 1*nCompA], fPmQy, la4, lab, i2e);
         OsrrB_KerM_z(&pMem[ 5*nCompA], &pMem[ 2*nCompA], fPmQz, la4, lab, i2e);
         unsigned la3 = 0; if (la > 3) la3 = (unsigned)la - 3;
         OsrrB_KerM_x(&pMem[ 6*nCompA], &pMem[ 3*nCompA], fPmQx, la3, lab, i2e);
         OsrrB_KerM_y(&pMem[ 7*nCompA], &pMem[ 4*nCompA], fPmQy, la3, lab, i2e);
         OsrrB_KerM_z(&pMem[ 8*nCompA], &pMem[ 5*nCompA], fPmQz, la3, lab, i2e);
         OsrrB_KerM_y(&pMem[ 9*nCompA], &pMem[ 5*nCompA], fPmQy, la3, lab, i2e);
         unsigned la2 = 0; if (la > 2) la2 = (unsigned)la - 2;
         OsrrB_KerM_x(&pMem[10*nCompA], &pMem[ 6*nCompA], fPmQx, la2, lab, i2e);
         OsrrB_KerM_y(&pMem[11*nCompA], &pMem[ 7*nCompA], fPmQy, la2, lab, i2e);
         OsrrB_KerM_z(&pMem[12*nCompA], &pMem[ 8*nCompA], fPmQz, la2, lab, i2e);
         OsrrB_KerM_x(&pMem[13*nCompA], &pMem[ 7*nCompA], fPmQx, la2, lab, i2e);
         OsrrB_KerM_z(&pMem[14*nCompA], &pMem[ 6*nCompA], fPmQz, la2, lab, i2e);
         OsrrB_KerM_y(&pMem[15*nCompA], &pMem[ 9*nCompA], fPmQy, la2, lab, i2e);
         OsrrB_KerM_x(&pMem[16*nCompA], &pMem[ 9*nCompA], fPmQx, la2, lab, i2e);
         unsigned la1 = 0; if (la > 1) la1 = (unsigned)la - 1;
         OsrrB_KerM_x(&pMem[17*nCompA], &pMem[10*nCompA], fPmQx, la1, lab, i2e);
         OsrrB_KerM_y(&pMem[18*nCompA], &pMem[11*nCompA], fPmQy, la1, lab, i2e);
         OsrrB_KerM_z(&pMem[19*nCompA], &pMem[12*nCompA], fPmQz, la1, lab, i2e);
         OsrrB_KerM_x(&pMem[20*nCompA], &pMem[12*nCompA], fPmQx, la1, lab, i2e);
         OsrrB_KerM_y(&pMem[21*nCompA], &pMem[10*nCompA], fPmQy, la1, lab, i2e);
         OsrrB_KerM_z(&pMem[22*nCompA], &pMem[14*nCompA], fPmQz, la1, lab, i2e);
         OsrrB_KerM_x(&pMem[23*nCompA], &pMem[13*nCompA], fPmQx, la1, lab, i2e);
         OsrrB_KerM_y(&pMem[24*nCompA], &pMem[15*nCompA], fPmQy, la1, lab, i2e);
         OsrrB_KerM_z(&pMem[25*nCompA], &pMem[15*nCompA], fPmQz, la1, lab, i2e);
         OsrrB_KerM_y(&pMem[26*nCompA], &pMem[14*nCompA], fPmQy, la1, lab, i2e);
         OsrrB_KerM_z(&pMem[27*nCompA], &pMem[13*nCompA], fPmQz, la1, lab, i2e);
         OsrrB_KerM_x(&pMem[28*nCompA], &pMem[16*nCompA], fPmQx, la1, lab, i2e);
         OsrrB_KerM_x(&pOut_[ 0*nCompA_Out], &pMem[17*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[ 1*nCompA_Out], &pMem[18*nCompA], fPmQy, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[ 2*nCompA_Out], &pMem[19*nCompA], fPmQz, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[ 3*nCompA_Out], &pMem[21*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[ 4*nCompA_Out], &pMem[18*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[ 5*nCompA_Out], &pMem[17*nCompA], fPmQz, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[ 6*nCompA_Out], &pMem[19*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[ 7*nCompA_Out], &pMem[18*nCompA], fPmQz, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[ 8*nCompA_Out], &pMem[19*nCompA], fPmQy, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[ 9*nCompA_Out], &pMem[21*nCompA], fPmQy, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[10*nCompA_Out], &pMem[22*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[11*nCompA_Out], &pMem[23*nCompA], fPmQy, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[12*nCompA_Out], &pMem[20*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[13*nCompA_Out], &pMem[24*nCompA], fPmQy, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[14*nCompA_Out], &pMem[25*nCompA], fPmQz, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[15*nCompA_Out], &pMem[23*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[16*nCompA_Out], &pMem[22*nCompA], fPmQz, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[17*nCompA_Out], &pMem[25*nCompA], fPmQy, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[18*nCompA_Out], &pMem[20*nCompA], fPmQy, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[19*nCompA_Out], &pMem[27*nCompA], fPmQy, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[20*nCompA_Out], &pMem[26*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[21*nCompA_Out], &pMem[28*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[22*nCompA_Out], &pMem[24*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[23*nCompA_Out], &pMem[26*nCompA], fPmQy, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[24*nCompA_Out], &pMem[25*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_x(&pOut_[25*nCompA_Out], &pMem[27*nCompA], fPmQx, la, lab, i2e);
         OsrrB_KerM_z(&pOut_[26*nCompA_Out], &pMem[28*nCompA], fPmQz, la, lab, i2e);
         OsrrB_KerM_y(&pOut_[27*nCompA_Out], &pMem[28*nCompA], fPmQy, la, lab, i2e);
         return;
      }
   }
   //assert(0);
}

// cart_vec_t representations of the components in CartX(14)
cart_vec_t const ix2v[680] = {
   0, 1, 15, 225, 2, 30, 450, 16, 226, 240, 3, 45, 675, 31, 451, 17, 465, 227, 255, 241, 4, 60, 900, 18, 46, 228,
   676, 270, 690, 32, 452, 480, 466, 256, 242, 5, 75, 1125, 61, 901, 19, 915, 229, 285, 33, 453, 47, 495, 677, 705, 243, 271,
   691, 481, 467, 257, 6, 90, 1350, 20, 76, 230, 1126, 300, 1140, 34, 454, 62, 902, 510, 930, 48, 678, 720, 916, 286, 244, 468,
   496, 258, 706, 272, 692, 482, 7, 105, 1575, 91, 1351, 21, 1365, 231, 315, 35, 455, 77, 525, 1127, 1155, 63, 903, 49, 945, 679,
   735, 245, 301, 1141, 511, 931, 469, 917, 259, 287, 273, 693, 721, 483, 497, 707, 8, 120, 1800, 22, 106, 232, 1576, 330, 1590, 36,
   456, 92, 1352, 540, 1380, 50, 78, 680, 1128, 750, 1170, 64, 904, 960, 1366, 316, 246, 470, 526, 260, 1156, 302, 1142, 918, 946, 288,
   736, 274, 694, 484, 512, 932, 498, 708, 722, 9, 135, 2025, 121, 1801, 23, 1815, 233, 345, 37, 457, 107, 555, 1577, 1605, 93, 1353,
   51, 1395, 681, 765, 65, 905, 79, 975, 1129, 1185, 247, 331, 1591, 541, 1381, 471, 1367, 261, 317, 275, 695, 303, 1143, 751, 1171, 961,
   919, 289, 485, 527, 1157, 513, 933, 499, 947, 709, 737, 723, 10, 150, 2250, 24, 136, 234, 2026, 360, 2040, 38, 458, 122, 1802, 570,
   1830, 52, 108, 682, 1578, 780, 1620, 66, 906, 94, 1354, 990, 1410, 80, 1130, 1200, 1816, 346, 248, 472, 556, 262, 1606, 332, 1592, 1368,
   1396, 318, 766, 276, 696, 920, 976, 290, 1186, 304, 1144, 486, 542, 1382, 500, 528, 710, 1158, 752, 1172, 514, 934, 962, 948, 738, 724,
   11, 165, 2475, 151, 2251, 25, 2265, 235, 375, 39, 459, 137, 585, 2027, 2055, 123, 1803, 53, 1845, 683, 795, 67, 907, 109, 1005, 1579,
   1635, 95, 1355, 81, 1425, 1131, 1215, 249, 361, 2041, 571, 1831, 473, 1817, 263, 347, 277, 697, 333, 1593, 781, 1621, 991, 1411, 921, 1369,
   291, 319, 305, 1145, 1201, 487, 557, 1607, 543, 1383, 501, 1397, 711, 767, 515, 935, 529, 977, 1159, 1187, 725, 753, 1173, 963, 949, 739,
   12, 180, 2700, 26, 166, 236, 2476, 390, 2490, 40, 460, 152, 2252, 600, 2280, 54, 138, 684, 2028, 810, 2070, 68, 908, 124, 1804, 1020,
   1860, 82, 110, 1132, 1580, 1230, 1650, 96, 1356, 1440, 2266, 376, 250, 474, 586, 264, 2056, 362, 2042, 1818, 1846, 348, 796, 278, 698, 922,
   1006, 292, 1636, 334, 1594, 1370, 1426, 320, 1216, 306, 1146, 488, 572, 1832, 502, 558, 712, 1608, 782, 1622, 516, 936, 544, 1384, 992, 1412,
   530, 1160, 1202, 1398, 768, 726, 950, 978, 740, 1188, 754, 1174, 964, 13, 195, 2925, 181, 2701, 27, 2715, 237, 405, 41, 461, 167, 615,
   2477, 2505, 153, 2253, 55, 2295, 685, 825, 69, 909, 139, 1035, 2029, 2085, 125, 1805, 83, 1875, 1133, 1245, 97, 1357, 111, 1455, 1581, 1665,
   251, 391, 2491, 601, 2281, 475, 2267, 265, 377, 279, 699, 363, 2043, 811, 2071, 1021, 1861, 923, 1819, 293, 349, 307, 1147, 335, 1595, 1231,
   1651, 1441, 1371, 321, 489, 587, 2057, 573, 1833, 503, 1847, 713, 797, 517, 937, 559, 1007, 1609, 1637, 545, 1385, 531, 1427, 1161, 1217, 727,
   783, 1623, 993, 1413, 951, 1399, 741, 769, 755, 1175, 1203, 965, 979, 1189, 14, 210, 3150, 28, 196, 238, 2926, 420, 2940, 42, 462, 182,
   2702, 630, 2730, 56, 168, 686, 2478, 840, 2520, 70, 910, 154, 2254, 1050, 2310, 84, 140, 1134, 2030, 1260, 2100, 98, 1358, 126, 1806, 1470,
   1890, 112, 1582, 1680, 2716, 406, 252, 476, 616, 266, 2506, 392, 2492, 2268, 2296, 378, 826, 280, 700, 924, 1036, 294, 2086, 364, 2044, 1820,
   1876, 350, 1246, 308, 1148, 1372, 1456, 322, 1666, 336, 1596, 490, 602, 2282, 504, 588, 714, 2058, 812, 2072, 518, 938, 574, 1834, 1022, 1862,
   532, 560, 1162, 1610, 1232, 1652, 546, 1386, 1442, 1848, 798, 728, 952, 1008, 742, 1638, 784, 1624, 1400, 1428, 770, 1218, 756, 1176, 966, 994,
   1414, 980, 1190, 1204
}; // 1.33 kb

// indices for mapping cart_vec_t objects into CartX. It's a 15^3 array.
cart_index_t const iv2x[3151] = {
   0, 1, 4, 10, 20, 35, 56, 84, 120, 165, 220, 286, 364, 455, 560, 2, 7, 15, 23, 40, 59, 89, 123, 170, 223, 291,
   367, 460, 563, 0, 5, 13, 29, 44, 65, 93, 129, 174, 229, 295, 373, 464, 569, 0, 0, 11, 24, 46, 71, 101, 135, 182,
   235, 303, 379, 472, 575, 0, 0, 0, 21, 38, 67, 99, 141, 186, 241, 307, 385, 476, 581, 0, 0, 0, 0, 36, 60, 95,
   136, 188, 247, 315, 391, 484, 587, 0, 0, 0, 0, 0, 57, 87, 131, 180, 243, 313, 397, 488, 593, 0, 0, 0, 0, 0,
   0, 85, 124, 176, 236, 309, 392, 490, 599, 0, 0, 0, 0, 0, 0, 0, 121, 168, 231, 301, 387, 482, 595, 0, 0, 0,
   0, 0, 0, 0, 0, 166, 224, 297, 380, 478, 588, 0, 0, 0, 0, 0, 0, 0, 0, 0, 221, 289, 375, 470, 583, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 287, 368, 466, 576, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 365, 458,
   571, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 456, 564, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 561, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 8, 17, 25, 42, 61, 91, 125, 172,
   225, 293, 369, 462, 565, 0, 9, 19, 34, 50, 76, 105, 146, 192, 252, 319, 402, 494, 604, 0, 0, 18, 33, 55, 79, 112,
   149, 199, 255, 326, 405, 501, 607, 0, 0, 0, 27, 51, 81, 114, 157, 201, 263, 328, 413, 503, 615, 0, 0, 0, 0, 43,
   75, 113, 155, 209, 267, 338, 417, 513, 619, 0, 0, 0, 0, 0, 63, 106, 151, 203, 269, 340, 425, 515, 627, 0, 0, 0,
   0, 0, 0, 92, 145, 200, 261, 339, 423, 523, 631, 0, 0, 0, 0, 0, 0, 0, 127, 193, 257, 330, 419, 517, 633, 0,
   0, 0, 0, 0, 0, 0, 0, 173, 251, 327, 411, 514, 625, 0, 0, 0, 0, 0, 0, 0, 0, 0, 227, 320, 407, 505,
   621, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 294, 401, 502, 613, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   371, 495, 609, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 463, 603, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 567, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 30, 45, 66, 94, 130, 175, 230, 296, 374, 465, 570, 0, 0, 16, 32, 54,
   77, 110, 147, 197, 253, 324, 403, 499, 605, 0, 0, 0, 31, 53, 83, 117, 159, 210, 271, 343, 427, 524, 635, 0, 0, 0,
   0, 47, 78, 118, 162, 215, 274, 348, 430, 529, 638, 0, 0, 0, 0, 0, 69, 108, 160, 213, 280, 352, 436, 533, 644, 0,
   0, 0, 0, 0, 0, 96, 148, 211, 275, 354, 442, 541, 650, 0, 0, 0, 0, 0, 0, 0, 133, 195, 272, 346, 438, 539,
   656, 0, 0, 0, 0, 0, 0, 0, 0, 177, 254, 344, 431, 535, 651, 0, 0, 0, 0, 0, 0, 0, 0, 0, 233, 322,
   428, 527, 646, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 298, 404, 525, 639, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 377, 497, 636, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 467, 606, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 573, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12,
   26, 48, 72, 103, 137, 184, 237, 305, 381, 474, 577, 0, 0, 0, 28, 52, 82, 115, 158, 202, 264, 329, 414, 504, 616, 0,
   0, 0, 0, 49, 80, 119, 163, 217, 276, 350, 432, 531, 640, 0, 0, 0, 0, 0, 73, 116, 164, 219, 285, 358, 447, 545,
   661, 0, 0, 0, 0, 0, 0, 104, 156, 218, 284, 363, 450, 552, 664, 0, 0, 0, 0, 0, 0, 0, 139, 205, 278, 359,
   452, 554, 672, 0, 0, 0, 0, 0, 0, 0, 0, 185, 262, 351, 446, 553, 670, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   239, 332, 434, 546, 666, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 306, 412, 532, 660, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 383, 507, 642, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 475, 614, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 579, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 39, 68, 100, 142, 187, 242, 308, 386, 477,
   582, 0, 0, 0, 0, 41, 74, 111, 153, 208, 265, 336, 415, 511, 617, 0, 0, 0, 0, 0, 70, 109, 161, 214, 281, 353,
   437, 534, 645, 0, 0, 0, 0, 0, 0, 102, 154, 216, 283, 362, 448, 550, 662, 0, 0, 0, 0, 0, 0, 0, 143, 207,
   282, 361, 454, 557, 674, 0, 0, 0, 0, 0, 0, 0, 0, 189, 266, 355, 449, 558, 677, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 245, 334, 440, 548, 675, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 310, 416, 536, 663, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 389, 509, 648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 479, 618, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 585, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 37, 62, 97, 138, 190, 248, 317, 393, 486, 589, 0, 0, 0, 0, 0, 64, 107, 152, 204,
   270, 341, 426, 516, 628, 0, 0, 0, 0, 0, 0, 98, 150, 212, 277, 356, 443, 543, 652, 0, 0, 0, 0, 0, 0, 0,
   140, 206, 279, 360, 453, 555, 673, 0, 0, 0, 0, 0, 0, 0, 0, 191, 268, 357, 451, 559, 678, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 249, 342, 444, 556, 679, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 318, 424, 544, 671, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 395, 519, 654, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 487, 626, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 591, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 88,
   132, 181, 244, 314, 398, 489, 594, 0, 0, 0, 0, 0, 0, 90, 144, 198, 259, 337, 421, 522, 629, 0, 0, 0, 0, 0,
   0, 0, 134, 196, 273, 347, 439, 540, 657, 0, 0, 0, 0, 0, 0, 0, 0, 183, 260, 349, 445, 551, 668, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 246, 335, 441, 549, 676, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 316, 422, 542, 669, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 399, 521, 658, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 491,
   630, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 597, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 126, 178, 238, 311, 394, 492, 600, 0, 0, 0,
   0, 0, 0, 0, 128, 194, 258, 331, 420, 518, 634, 0, 0, 0, 0, 0, 0, 0, 0, 179, 256, 345, 433, 537, 653, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 240, 333, 435, 547, 667, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 312, 418, 538,
   665, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 396, 520, 655, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 493, 632, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 601, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 122, 169, 232, 302, 388, 483, 596, 0, 0, 0, 0, 0, 0, 0, 0, 171, 250, 325, 409, 512,
   623, 0, 0, 0, 0, 0, 0, 0, 0, 0, 234, 323, 429, 528, 647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 304,
   410, 530, 659, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 390, 510, 649, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 485, 624, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 598, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 167, 226, 299,
   382, 480, 590, 0, 0, 0, 0, 0, 0, 0, 0, 0, 228, 321, 408, 506, 622, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 300, 406, 526, 641, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 384, 508, 643, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 481, 620, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 592, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 222, 290, 376, 471, 584, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 292, 400, 500, 611, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 378, 498, 637, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 473, 612, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 586, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 288, 370, 468, 578, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 372, 496, 610, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 469, 608, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 580, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 366, 459, 572, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 461, 602, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   574, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 457, 566, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 568, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 562
}; // 6.15 kb

// indices for factoring [CartX(la+lb) - nCartX(la)] into [CartX(lb)] x [CartY(la)]
// format: nCartY(la) x CartX(lb)
static const cart_index_t iCartXY_ab0_a0[1] = {
   0
}; // 0.00 kb
static const cart_index_t iCartXY_ab1_a0[4] = {
   0, 1, 2, 3
}; // 0.01 kb
static const cart_index_t iCartXY_ab1_a1[3] = {
   0, 1, 2
}; // 0.01 kb
static const cart_index_t iCartXY_ab2_a0[10] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9
}; // 0.02 kb
static const cart_index_t iCartXY_ab2_a1[12] = {
   0, 1, 2, 3, 6, 7, 6, 4, 8, 7, 8, 5
}; // 0.02 kb
static const cart_index_t iCartXY_ab2_a2[6] = {
   0, 1, 2, 3, 4, 5
}; // 0.01 kb
static const cart_index_t iCartXY_ab3_a0[20] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19
}; // 0.04 kb
static const cart_index_t iCartXY_ab3_a1[30] = {
   0, 1, 2, 3, 6, 7, 6, 4, 8, 7, 8, 5, 9, 14, 16, 12, 10, 17, 13, 15, 11, 14, 12, 18, 16, 18,
   13, 18, 17, 15
}; // 0.06 kb
static const cart_index_t iCartXY_ab3_a2[24] = {
   0, 1, 2, 3, 4, 5, 6, 9, 10, 11, 13, 15, 11, 7, 12, 9, 15, 14, 13, 14, 8, 15, 10, 12
}; // 0.05 kb
static const cart_index_t iCartXY_ab3_a3[10] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9
}; // 0.02 kb
static const cart_index_t iCartXY_ab4_a0[35] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
   26, 27, 28, 29, 30, 31, 32, 33, 34
}; // 0.07 kb
static const cart_index_t iCartXY_ab4_a1[60] = {
   0, 1, 2, 3, 6, 7, 6, 4, 8, 7, 8, 5, 9, 14, 16, 12, 10, 17, 13, 15, 11, 14, 12, 18, 16, 18,
   13, 18, 17, 15, 19, 22, 24, 23, 20, 26, 25, 27, 21, 28, 23, 32, 29, 31, 25, 22, 28, 33, 31, 30, 27, 24,
   33, 29, 32, 26, 30, 33, 32, 31
}; // 0.12 kb
static const cart_index_t iCartXY_ab4_a2[60] = {
   0, 1, 2, 3, 4, 5, 6, 9, 10, 11, 13, 15, 11, 7, 12, 9, 15, 14, 13, 14, 8, 15, 10, 12, 16, 25,
   26, 19, 21, 30, 25, 17, 27, 20, 29, 23, 26, 27, 18, 28, 22, 24, 19, 20, 28, 25, 30, 29, 21, 29, 22, 30,
   26, 28, 30, 23, 24, 29, 28, 27
}; // 0.12 kb
static const cart_index_t iCartXY_ab4_a3[40] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 16, 19, 20, 13, 22, 15, 23, 24, 13, 11, 18, 14, 22, 19,
   21, 24, 17, 23, 15, 17, 12, 23, 16, 24, 18, 20, 21, 22
}; // 0.08 kb
static const cart_index_t iCartXY_ab4_a4[15] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14
}; // 0.03 kb
static const cart_index_t iCartXY_ab5_a0[56] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
   52, 53, 54, 55
}; // 0.11 kb
static const cart_index_t iCartXY_ab5_a1[105] = {
   0, 1, 2, 3, 6, 7, 6, 4, 8, 7, 8, 5, 9, 14, 16, 12, 10, 17, 13, 15, 11, 14, 12, 18, 16, 18,
   13, 18, 17, 15, 19, 22, 24, 23, 20, 26, 25, 27, 21, 28, 23, 32, 29, 31, 25, 22, 28, 33, 31, 30, 27, 24,
   33, 29, 32, 26, 30, 33, 32, 31, 34, 39, 41, 37, 35, 42, 38, 40, 36, 39, 43, 49, 45, 37, 50, 41, 49, 44,
   47, 51, 38, 50, 42, 46, 51, 48, 40, 43, 45, 54, 44, 53, 47, 52, 46, 48, 53, 52, 51, 54, 50, 52, 49, 54,
   53
}; // 0.21 kb
static const cart_index_t iCartXY_ab5_a2[120] = {
   0, 1, 2, 3, 4, 5, 6, 9, 10, 11, 13, 15, 11, 7, 12, 9, 15, 14, 13, 14, 8, 15, 10, 12, 16, 25,
   26, 19, 21, 30, 25, 17, 27, 20, 29, 23, 26, 27, 18, 28, 22, 24, 19, 20, 28, 25, 30, 29, 21, 29, 22, 30,
   26, 28, 30, 23, 24, 29, 28, 27, 31, 40, 41, 36, 38, 46, 42, 32, 43, 34, 47, 39, 44, 45, 33, 48, 35, 37,
   40, 34, 49, 42, 51, 47, 41, 49, 35, 50, 44, 48, 36, 42, 50, 40, 46, 51, 50, 43, 37, 49, 48, 45, 38, 51,
   44, 46, 41, 50, 51, 39, 45, 47, 49, 43, 46, 47, 48, 51, 50, 49
}; // 0.23 kb
static const cart_index_t iCartXY_ab5_a3[100] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 16, 19, 20, 13, 22, 15, 23, 24, 13, 11, 18, 14, 22, 19,
   21, 24, 17, 23, 15, 17, 12, 23, 16, 24, 18, 20, 21, 22, 25, 36, 38, 34, 35, 30, 44, 32, 45, 40, 34, 26,
   39, 28, 43, 36, 37, 45, 33, 41, 35, 37, 27, 43, 29, 44, 31, 38, 39, 42, 30, 28, 42, 36, 44, 34, 43, 40,
   41, 45, 32, 41, 29, 45, 38, 40, 42, 35, 43, 44, 40, 33, 31, 41, 42, 45, 39, 44, 37, 43
}; // 0.20 kb
static const cart_index_t iCartXY_ab5_a4[60] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 26, 22, 28, 31, 32, 24, 25,
   33, 34, 35, 30, 20, 16, 21, 24, 18, 30, 32, 23, 29, 26, 34, 27, 33, 31, 35, 22, 23, 17, 30, 31, 25, 19,
   27, 21, 35, 28, 29, 32, 33, 34
}; // 0.12 kb
static const cart_index_t iCartXY_ab5_a5[21] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20
}; // 0.04 kb
static const cart_index_t iCartXY_ab6_a0[84] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
   52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
   78, 79, 80, 81, 82, 83
}; // 0.16 kb
static const cart_index_t iCartXY_ab6_a1[168] = {
   0, 1, 2, 3, 6, 7, 6, 4, 8, 7, 8, 5, 9, 14, 16, 12, 10, 17, 13, 15, 11, 14, 12, 18, 16, 18,
   13, 18, 17, 15, 19, 22, 24, 23, 20, 26, 25, 27, 21, 28, 23, 32, 29, 31, 25, 22, 28, 33, 31, 30, 27, 24,
   33, 29, 32, 26, 30, 33, 32, 31, 34, 39, 41, 37, 35, 42, 38, 40, 36, 39, 43, 49, 45, 37, 50, 41, 49, 44,
   47, 51, 38, 50, 42, 46, 51, 48, 40, 43, 45, 54, 44, 53, 47, 52, 46, 48, 53, 52, 51, 54, 50, 52, 49, 54,
   53, 55, 58, 60, 59, 56, 62, 61, 63, 57, 66, 59, 74, 67, 73, 61, 58, 64, 75, 73, 69, 63, 60, 75, 65, 74,
   62, 68, 64, 70, 78, 65, 76, 71, 70, 66, 80, 77, 68, 72, 71, 81, 67, 79, 72, 69, 75, 78, 76, 80, 74, 77,
   81, 79, 73, 82, 77, 79, 76, 82, 81, 78, 80, 82
}; // 0.33 kb
static const cart_index_t iCartXY_ab6_a2[210] = {
   0, 1, 2, 3, 4, 5, 6, 9, 10, 11, 13, 15, 11, 7, 12, 9, 15, 14, 13, 14, 8, 15, 10, 12, 16, 25,
   26, 19, 21, 30, 25, 17, 27, 20, 29, 23, 26, 27, 18, 28, 22, 24, 19, 20, 28, 25, 30, 29, 21, 29, 22, 30,
   26, 28, 30, 23, 24, 29, 28, 27, 31, 40, 41, 36, 38, 46, 42, 32, 43, 34, 47, 39, 44, 45, 33, 48, 35, 37,
   40, 34, 49, 42, 51, 47, 41, 49, 35, 50, 44, 48, 36, 42, 50, 40, 46, 51, 50, 43, 37, 49, 48, 45, 38, 51,
   44, 46, 41, 50, 51, 39, 45, 47, 49, 43, 46, 47, 48, 51, 50, 49, 52, 61, 62, 55, 57, 72, 63, 53, 65, 56,
   71, 59, 64, 66, 54, 70, 58, 60, 55, 67, 73, 61, 72, 75, 67, 56, 74, 63, 77, 71, 57, 75, 68, 72, 62, 73,
   68, 76, 58, 78, 64, 70, 77, 59, 69, 71, 74, 65, 78, 69, 60, 76, 70, 66, 61, 63, 79, 67, 75, 77, 62, 79,
   64, 73, 68, 78, 79, 65, 66, 74, 76, 69, 73, 74, 70, 79, 78, 76, 75, 71, 76, 77, 79, 74, 72, 77, 78, 75,
   73, 79
}; // 0.41 kb
static const cart_index_t iCartXY_ab6_a3[200] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 16, 19, 20, 13, 22, 15, 23, 24, 13, 11, 18, 14, 22, 19,
   21, 24, 17, 23, 15, 17, 12, 23, 16, 24, 18, 20, 21, 22, 25, 36, 38, 34, 35, 30, 44, 32, 45, 40, 34, 26,
   39, 28, 43, 36, 37, 45, 33, 41, 35, 37, 27, 43, 29, 44, 31, 38, 39, 42, 30, 28, 42, 36, 44, 34, 43, 40,
   41, 45, 32, 41, 29, 45, 38, 40, 42, 35, 43, 44, 40, 33, 31, 41, 42, 45, 39, 44, 37, 43, 46, 61, 62, 55,
   56, 49, 67, 51, 69, 66, 61, 47, 63, 50, 68, 57, 59, 71, 53, 65, 62, 63, 48, 70, 52, 72, 54, 58, 60, 64,
   55, 50, 70, 57, 73, 61, 68, 69, 65, 71, 56, 68, 52, 73, 58, 67, 64, 62, 70, 72, 49, 57, 72, 61, 67, 55,
   73, 66, 71, 69, 67, 59, 54, 68, 64, 73, 60, 72, 63, 70, 51, 71, 58, 69, 62, 66, 72, 56, 73, 67, 69, 53,
   60, 65, 70, 71, 63, 73, 59, 68, 66, 65, 64, 71, 72, 69, 70, 67, 68, 73
}; // 0.39 kb
static const cart_index_t iCartXY_ab6_a4[150] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 26, 22, 28, 31, 32, 24, 25,
   33, 34, 35, 30, 20, 16, 21, 24, 18, 30, 32, 23, 29, 26, 34, 27, 33, 31, 35, 22, 23, 17, 30, 31, 25, 19,
   27, 21, 35, 28, 29, 32, 33, 34, 36, 47, 48, 39, 51, 41, 52, 61, 62, 45, 46, 63, 57, 59, 56, 45, 37, 50,
   51, 40, 59, 60, 43, 53, 47, 63, 49, 58, 55, 61, 46, 49, 38, 57, 58, 52, 42, 53, 44, 63, 48, 50, 54, 60,
   62, 39, 40, 54, 45, 47, 56, 62, 55, 60, 51, 57, 58, 63, 61, 59, 41, 55, 42, 56, 61, 46, 48, 58, 54, 59,
   52, 60, 62, 63, 57, 56, 43, 44, 59, 55, 57, 54, 49, 50, 61, 62, 53, 60, 58, 63
}; // 0.29 kb
static const cart_index_t iCartXY_ab6_a5[84] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 27, 32, 33,
   24, 39, 26, 40, 30, 31, 36, 43, 37, 45, 41, 46, 47, 48, 42, 44, 24, 22, 29, 25, 39, 30, 35, 41, 28, 36,
   42, 32, 34, 47, 38, 44, 40, 45, 43, 48, 46, 26, 28, 23, 40, 27, 41, 29, 31, 34, 44, 37, 46, 38, 33, 35,
   42, 43, 39, 45, 47, 48
}; // 0.16 kb
static const cart_index_t iCartXY_ab6_a6[28] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
   26, 27
}; // 0.05 kb
static const cart_index_t iCartXY_ab7_a0[120] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
   52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
   78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
   104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119
}; // 0.23 kb
static const cart_index_t iCartXY_ab7_a1[252] = {
   0, 1, 2, 3, 6, 7, 6, 4, 8, 7, 8, 5, 9, 14, 16, 12, 10, 17, 13, 15, 11, 14, 12, 18, 16, 18,
   13, 18, 17, 15, 19, 22, 24, 23, 20, 26, 25, 27, 21, 28, 23, 32, 29, 31, 25, 22, 28, 33, 31, 30, 27, 24,
   33, 29, 32, 26, 30, 33, 32, 31, 34, 39, 41, 37, 35, 42, 38, 40, 36, 39, 43, 49, 45, 37, 50, 41, 49, 44,
   47, 51, 38, 50, 42, 46, 51, 48, 40, 43, 45, 54, 44, 53, 47, 52, 46, 48, 53, 52, 51, 54, 50, 52, 49, 54,
   53, 55, 58, 60, 59, 56, 62, 61, 63, 57, 66, 59, 74, 67, 73, 61, 58, 64, 75, 73, 69, 63, 60, 75, 65, 74,
   62, 68, 64, 70, 78, 65, 76, 71, 70, 66, 80, 77, 68, 72, 71, 81, 67, 79, 72, 69, 75, 78, 76, 80, 74, 77,
   81, 79, 73, 82, 77, 79, 76, 82, 81, 78, 80, 82, 83, 88, 90, 86, 84, 91, 87, 89, 85, 88, 92, 104, 94, 86,
   105, 90, 104, 93, 96, 106, 87, 105, 91, 95, 106, 97, 89, 92, 100, 111, 93, 109, 102, 98, 94, 112, 99, 110, 96, 107,
   95, 103, 108, 101, 97, 100, 98, 113, 102, 114, 99, 115, 103, 101, 110, 108, 106, 112, 105, 107, 104, 111, 109, 109, 116, 114,
   117, 107, 115, 111, 113, 116, 118, 115, 108, 113, 112, 117, 114, 118, 110, 116, 117, 118
}; // 0.49 kb
static const cart_index_t iCartXY_ab7_a2[336] = {
   0, 1, 2, 3, 4, 5, 6, 9, 10, 11, 13, 15, 11, 7, 12, 9, 15, 14, 13, 14, 8, 15, 10, 12, 16, 25,
   26, 19, 21, 30, 25, 17, 27, 20, 29, 23, 26, 27, 18, 28, 22, 24, 19, 20, 28, 25, 30, 29, 21, 29, 22, 30,
   26, 28, 30, 23, 24, 29, 28, 27, 31, 40, 41, 36, 38, 46, 42, 32, 43, 34, 47, 39, 44, 45, 33, 48, 35, 37,
   40, 34, 49, 42, 51, 47, 41, 49, 35, 50, 44, 48, 36, 42, 50, 40, 46, 51, 50, 43, 37, 49, 48, 45, 38, 51,
   44, 46, 41, 50, 51, 39, 45, 47, 49, 43, 46, 47, 48, 51, 50, 49, 52, 61, 62, 55, 57, 72, 63, 53, 65, 56,
   71, 59, 64, 66, 54, 70, 58, 60, 55, 67, 73, 61, 72, 75, 67, 56, 74, 63, 77, 71, 57, 75, 68, 72, 62, 73,
   68, 76, 58, 78, 64, 70, 77, 59, 69, 71, 74, 65, 78, 69, 60, 76, 70, 66, 61, 63, 79, 67, 75, 77, 62, 79,
   64, 73, 68, 78, 79, 65, 66, 74, 76, 69, 73, 74, 70, 79, 78, 76, 75, 71, 76, 77, 79, 74, 72, 77, 78, 75,
   73, 79, 80, 89, 90, 85, 87, 101, 91, 81, 92, 83, 102, 88, 93, 94, 82, 103, 84, 86, 95, 83, 104, 91, 109, 102,
   96, 105, 84, 107, 93, 103, 85, 97, 106, 89, 101, 108, 107, 98, 86, 105, 103, 94, 87, 108, 99, 101, 90, 106, 109, 88,
   100, 102, 104, 92, 89, 95, 113, 97, 108, 110, 90, 113, 96, 106, 99, 111, 97, 91, 114, 95, 110, 109, 114, 92, 98, 104,
   112, 100, 99, 115, 93, 111, 96, 107, 115, 100, 94, 112, 105, 98, 101, 110, 111, 108, 106, 113, 110, 102, 112, 109, 114, 104,
   111, 112, 103, 115, 107, 105, 113, 104, 105, 114, 115, 112, 106, 114, 107, 113, 111, 115, 108, 109, 115, 110, 113, 114
}; // 0.66 kb
static const cart_index_t iCartXY_ab7_a3[350] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 16, 19, 20, 13, 22, 15, 23, 24, 13, 11, 18, 14, 22, 19,
   21, 24, 17, 23, 15, 17, 12, 23, 16, 24, 18, 20, 21, 22, 25, 36, 38, 34, 35, 30, 44, 32, 45, 40, 34, 26,
   39, 28, 43, 36, 37, 45, 33, 41, 35, 37, 27, 43, 29, 44, 31, 38, 39, 42, 30, 28, 42, 36, 44, 34, 43, 40,
   41, 45, 32, 41, 29, 45, 38, 40, 42, 35, 43, 44, 40, 33, 31, 41, 42, 45, 39, 44, 37, 43, 46, 61, 62, 55,
   56, 49, 67, 51, 69, 66, 61, 47, 63, 50, 68, 57, 59, 71, 53, 65, 62, 63, 48, 70, 52, 72, 54, 58, 60, 64,
   55, 50, 70, 57, 73, 61, 68, 69, 65, 71, 56, 68, 52, 73, 58, 67, 64, 62, 70, 72, 49, 57, 72, 61, 67, 55,
   73, 66, 71, 69, 67, 59, 54, 68, 64, 73, 60, 72, 63, 70, 51, 71, 58, 69, 62, 66, 72, 56, 73, 67, 69, 53,
   60, 65, 70, 71, 63, 73, 59, 68, 66, 65, 64, 71, 72, 69, 70, 67, 68, 73, 74, 91, 93, 83, 84, 79, 100, 81,
   102, 95, 89, 75, 94, 77, 98, 85, 86, 103, 82, 96, 90, 92, 76, 99, 78, 101, 80, 87, 88, 97, 79, 89, 105, 91,
   100, 83, 107, 95, 104, 102, 91, 77, 106, 85, 108, 89, 98, 104, 96, 103, 81, 104, 90, 102, 93, 95, 105, 84, 107, 100,
   93, 106, 78, 109, 87, 105, 97, 90, 99, 101, 104, 82, 92, 96, 106, 103, 94, 108, 86, 98, 105, 94, 80, 106, 97, 109,
   88, 101, 92, 99, 83, 85, 109, 89, 107, 91, 108, 102, 103, 104, 84, 108, 87, 107, 90, 100, 101, 93, 109, 105, 107, 86,
   88, 98, 99, 108, 92, 109, 94, 106, 100, 98, 97, 108, 101, 107, 99, 105, 106, 109, 102, 96, 99, 103, 109, 104, 106, 107,
   98, 108, 95, 103, 101, 104, 105, 102, 109, 100, 108, 107
}; // 0.68 kb
static const cart_index_t iCartXY_ab7_a4[300] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 26, 22, 28, 31, 32, 24, 25,
   33, 34, 35, 30, 20, 16, 21, 24, 18, 30, 32, 23, 29, 26, 34, 27, 33, 31, 35, 22, 23, 17, 30, 31, 25, 19,
   27, 21, 35, 28, 29, 32, 33, 34, 36, 47, 48, 39, 51, 41, 52, 61, 62, 45, 46, 63, 57, 59, 56, 45, 37, 50,
   51, 40, 59, 60, 43, 53, 47, 63, 49, 58, 55, 61, 46, 49, 38, 57, 58, 52, 42, 53, 44, 63, 48, 50, 54, 60,
   62, 39, 40, 54, 45, 47, 56, 62, 55, 60, 51, 57, 58, 63, 61, 59, 41, 55, 42, 56, 61, 46, 48, 58, 54, 59,
   52, 60, 62, 63, 57, 56, 43, 44, 59, 55, 57, 54, 49, 50, 61, 62, 53, 60, 58, 63, 64, 79, 80, 69, 81, 71,
   83, 94, 95, 73, 74, 97, 90, 92, 85, 81, 65, 82, 79, 67, 94, 96, 72, 84, 75, 98, 76, 88, 86, 93, 83, 84,
   66, 95, 96, 80, 68, 82, 70, 99, 77, 78, 87, 89, 91, 73, 67, 89, 81, 75, 92, 99, 86, 96, 79, 97, 88, 98,
   93, 94, 74, 88, 68, 90, 98, 83, 77, 96, 87, 97, 80, 89, 91, 99, 95, 69, 75, 91, 73, 79, 85, 95, 93, 99,
   81, 90, 98, 97, 94, 92, 90, 76, 70, 97, 88, 95, 87, 84, 78, 98, 91, 82, 89, 96, 99, 71, 93, 77, 85, 94,
   74, 80, 98, 91, 92, 83, 99, 95, 97, 90, 92, 72, 78, 94, 86, 97, 89, 76, 82, 93, 99, 84, 96, 88, 98, 85,
   86, 87, 92, 93, 90, 91, 88, 89, 94, 95, 96, 99, 98, 97
}; // 0.59 kb
static const cart_index_t iCartXY_ab7_a5[210] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 27, 32, 33,
   24, 39, 26, 40, 30, 31, 36, 43, 37, 45, 41, 46, 47, 48, 42, 44, 24, 22, 29, 25, 39, 30, 35, 41, 28, 36,
   42, 32, 34, 47, 38, 44, 40, 45, 43, 48, 46, 26, 28, 23, 40, 27, 41, 29, 31, 34, 44, 37, 46, 38, 33, 35,
   42, 43, 39, 45, 47, 48, 49, 60, 62, 64, 65, 54, 76, 56, 78, 58, 59, 66, 83, 68, 84, 70, 79, 80, 82, 75,
   77, 58, 50, 63, 52, 74, 66, 67, 77, 57, 64, 82, 60, 61, 84, 69, 79, 71, 81, 73, 83, 78, 59, 61, 51, 73,
   53, 75, 55, 68, 69, 82, 65, 83, 67, 62, 63, 80, 81, 72, 74, 76, 84, 54, 52, 72, 60, 76, 58, 74, 70, 71,
   66, 75, 64, 73, 80, 81, 77, 78, 84, 83, 82, 79, 56, 71, 53, 78, 62, 70, 72, 59, 73, 77, 68, 79, 81, 65,
   74, 75, 83, 76, 84, 80, 82, 70, 57, 55, 71, 72, 77, 63, 75, 61, 79, 80, 78, 69, 76, 67, 82, 73, 74, 81,
   84, 83
}; // 0.41 kb
static const cart_index_t iCartXY_ab7_a6[112] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
   26, 27, 28, 31, 32, 33, 39, 35, 41, 50, 51, 37, 38, 43, 44, 52, 53, 45, 47, 60, 55, 57, 49, 54, 62, 56,
   63, 58, 59, 61, 33, 29, 34, 37, 31, 49, 51, 36, 42, 45, 54, 39, 55, 40, 46, 43, 59, 48, 53, 50, 56, 61,
   52, 58, 60, 57, 63, 62, 35, 36, 30, 49, 50, 38, 32, 40, 34, 56, 47, 57, 41, 48, 42, 58, 44, 46, 51, 52,
   54, 59, 60, 61, 53, 62, 55, 63
}; // 0.22 kb
static const cart_index_t iCartXY_ab8_a0[165] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
   52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
   78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
   104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
   130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
   156, 157, 158, 159, 160, 161, 162, 163, 164
}; // 0.32 kb
static const cart_index_t iCartXY_ab8_a1[360] = {
   0, 1, 2, 3, 6, 7, 6, 4, 8, 7, 8, 5, 9, 14, 16, 12, 10, 17, 13, 15, 11, 14, 12, 18, 16, 18,
   13, 18, 17, 15, 19, 22, 24, 23, 20, 26, 25, 27, 21, 28, 23, 32, 29, 31, 25, 22, 28, 33, 31, 30, 27, 24,
   33, 29, 32, 26, 30, 33, 32, 31, 34, 39, 41, 37, 35, 42, 38, 40, 36, 39, 43, 49, 45, 37, 50, 41, 49, 44,
   47, 51, 38, 50, 42, 46, 51, 48, 40, 43, 45, 54, 44, 53, 47, 52, 46, 48, 53, 52, 51, 54, 50, 52, 49, 54,
   53, 55, 58, 60, 59, 56, 62, 61, 63, 57, 66, 59, 74, 67, 73, 61, 58, 64, 75, 73, 69, 63, 60, 75, 65, 74,
   62, 68, 64, 70, 78, 65, 76, 71, 70, 66, 80, 77, 68, 72, 71, 81, 67, 79, 72, 69, 75, 78, 76, 80, 74, 77,
   81, 79, 73, 82, 77, 79, 76, 82, 81, 78, 80, 82, 83, 88, 90, 86, 84, 91, 87, 89, 85, 88, 92, 104, 94, 86,
   105, 90, 104, 93, 96, 106, 87, 105, 91, 95, 106, 97, 89, 92, 100, 111, 93, 109, 102, 98, 94, 112, 99, 110, 96, 107,
   95, 103, 108, 101, 97, 100, 98, 113, 102, 114, 99, 115, 103, 101, 110, 108, 106, 112, 105, 107, 104, 111, 109, 109, 116, 114,
   117, 107, 115, 111, 113, 116, 118, 115, 108, 113, 112, 117, 114, 118, 110, 116, 117, 118, 119, 122, 124, 123, 120, 126, 125, 127,
   121, 130, 123, 144, 131, 143, 125, 122, 128, 145, 143, 133, 127, 124, 145, 129, 144, 126, 132, 128, 134, 148, 129, 146, 136, 135,
   130, 150, 147, 132, 138, 137, 151, 131, 149, 139, 133, 140, 135, 154, 141, 152, 137, 134, 140, 156, 153, 142, 139, 136, 157, 141,
   155, 138, 142, 145, 148, 146, 150, 144, 147, 151, 149, 143, 159, 147, 155, 160, 153, 149, 146, 158, 157, 152, 160, 151, 148, 156,
   158, 154, 150, 159, 156, 154, 161, 157, 162, 152, 163, 155, 153, 158, 161, 162, 161, 159, 163, 162, 163, 160
}; // 0.70 kb
static const cart_index_t iCartXY_ab8_a2[504] = {
   0, 1, 2, 3, 4, 5, 6, 9, 10, 11, 13, 15, 11, 7, 12, 9, 15, 14, 13, 14, 8, 15, 10, 12, 16, 25,
   26, 19, 21, 30, 25, 17, 27, 20, 29, 23, 26, 27, 18, 28, 22, 24, 19, 20, 28, 25, 30, 29, 21, 29, 22, 30,
   26, 28, 30, 23, 24, 29, 28, 27, 31, 40, 41, 36, 38, 46, 42, 32, 43, 34, 47, 39, 44, 45, 33, 48, 35, 37,
   40, 34, 49, 42, 51, 47, 41, 49, 35, 50, 44, 48, 36, 42, 50, 40, 46, 51, 50, 43, 37, 49, 48, 45, 38, 51,
   44, 46, 41, 50, 51, 39, 45, 47, 49, 43, 46, 47, 48, 51, 50, 49, 52, 61, 62, 55, 57, 72, 63, 53, 65, 56,
   71, 59, 64, 66, 54, 70, 58, 60, 55, 67, 73, 61, 72, 75, 67, 56, 74, 63, 77, 71, 57, 75, 68, 72, 62, 73,
   68, 76, 58, 78, 64, 70, 77, 59, 69, 71, 74, 65, 78, 69, 60, 76, 70, 66, 61, 63, 79, 67, 75, 77, 62, 79,
   64, 73, 68, 78, 79, 65, 66, 74, 76, 69, 73, 74, 70, 79, 78, 76, 75, 71, 76, 77, 79, 74, 72, 77, 78, 75,
   73, 79, 80, 89, 90, 85, 87, 101, 91, 81, 92, 83, 102, 88, 93, 94, 82, 103, 84, 86, 95, 83, 104, 91, 109, 102,
   96, 105, 84, 107, 93, 103, 85, 97, 106, 89, 101, 108, 107, 98, 86, 105, 103, 94, 87, 108, 99, 101, 90, 106, 109, 88,
   100, 102, 104, 92, 89, 95, 113, 97, 108, 110, 90, 113, 96, 106, 99, 111, 97, 91, 114, 95, 110, 109, 114, 92, 98, 104,
   112, 100, 99, 115, 93, 111, 96, 107, 115, 100, 94, 112, 105, 98, 101, 110, 111, 108, 106, 113, 110, 102, 112, 109, 114, 104,
   111, 112, 103, 115, 107, 105, 113, 104, 105, 114, 115, 112, 106, 114, 107, 113, 111, 115, 108, 109, 115, 110, 113, 114, 116, 125,
   126, 119, 121, 142, 127, 117, 129, 120, 141, 123, 128, 130, 118, 140, 122, 124, 119, 131, 143, 125, 142, 145, 132, 120, 144, 127,
   147, 141, 121, 145, 133, 142, 126, 143, 134, 146, 122, 148, 128, 140, 147, 123, 135, 141, 144, 129, 148, 136, 124, 146, 140, 130,
   125, 137, 155, 131, 145, 153, 126, 155, 138, 143, 133, 154, 137, 127, 156, 132, 151, 147, 138, 157, 128, 149, 134, 148, 156, 129,
   139, 144, 152, 135, 157, 139, 130, 150, 146, 136, 131, 132, 158, 137, 153, 151, 133, 159, 134, 154, 138, 149, 160, 135, 136, 152,
   150, 139, 149, 150, 140, 157, 148, 146, 151, 141, 152, 147, 156, 144, 142, 153, 154, 145, 143, 155, 143, 158, 149, 155, 154, 159,
   158, 144, 150, 156, 160, 152, 145, 151, 159, 153, 155, 158, 159, 152, 146, 160, 157, 150, 153, 147, 160, 151, 158, 156, 154, 160,
   148, 159, 149, 157, 155, 156, 157, 158, 159, 160
}; // 0.98 kb
static const cart_index_t iCartXY_ab8_a3[560] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 16, 19, 20, 13, 22, 15, 23, 24, 13, 11, 18, 14, 22, 19,
   21, 24, 17, 23, 15, 17, 12, 23, 16, 24, 18, 20, 21, 22, 25, 36, 38, 34, 35, 30, 44, 32, 45, 40, 34, 26,
   39, 28, 43, 36, 37, 45, 33, 41, 35, 37, 27, 43, 29, 44, 31, 38, 39, 42, 30, 28, 42, 36, 44, 34, 43, 40,
   41, 45, 32, 41, 29, 45, 38, 40, 42, 35, 43, 44, 40, 33, 31, 41, 42, 45, 39, 44, 37, 43, 46, 61, 62, 55,
   56, 49, 67, 51, 69, 66, 61, 47, 63, 50, 68, 57, 59, 71, 53, 65, 62, 63, 48, 70, 52, 72, 54, 58, 60, 64,
   55, 50, 70, 57, 73, 61, 68, 69, 65, 71, 56, 68, 52, 73, 58, 67, 64, 62, 70, 72, 49, 57, 72, 61, 67, 55,
   73, 66, 71, 69, 67, 59, 54, 68, 64, 73, 60, 72, 63, 70, 51, 71, 58, 69, 62, 66, 72, 56, 73, 67, 69, 53,
   60, 65, 70, 71, 63, 73, 59, 68, 66, 65, 64, 71, 72, 69, 70, 67, 68, 73, 74, 91, 93, 83, 84, 79, 100, 81,
   102, 95, 89, 75, 94, 77, 98, 85, 86, 103, 82, 96, 90, 92, 76, 99, 78, 101, 80, 87, 88, 97, 79, 89, 105, 91,
   100, 83, 107, 95, 104, 102, 91, 77, 106, 85, 108, 89, 98, 104, 96, 103, 81, 104, 90, 102, 93, 95, 105, 84, 107, 100,
   93, 106, 78, 109, 87, 105, 97, 90, 99, 101, 104, 82, 92, 96, 106, 103, 94, 108, 86, 98, 105, 94, 80, 106, 97, 109,
   88, 101, 92, 99, 83, 85, 109, 89, 107, 91, 108, 102, 103, 104, 84, 108, 87, 107, 90, 100, 101, 93, 109, 105, 107, 86,
   88, 98, 99, 108, 92, 109, 94, 106, 100, 98, 97, 108, 101, 107, 99, 105, 106, 109, 102, 96, 99, 103, 109, 104, 106, 107,
   98, 108, 95, 103, 101, 104, 105, 102, 109, 100, 108, 107, 110, 125, 127, 119, 120, 113, 137, 115, 139, 136, 126, 111, 129, 114,
   138, 121, 123, 141, 117, 135, 128, 130, 112, 140, 116, 142, 118, 122, 124, 134, 131, 114, 146, 121, 150, 126, 138, 145, 135, 141,
   132, 144, 116, 151, 122, 143, 134, 128, 140, 142, 113, 131, 148, 125, 137, 119, 149, 136, 147, 139, 143, 133, 118, 144, 134, 151,
   124, 142, 130, 140, 115, 147, 132, 139, 127, 136, 148, 120, 149, 137, 145, 117, 133, 135, 146, 141, 129, 150, 123, 138, 119, 126,
   153, 131, 149, 125, 152, 139, 145, 147, 120, 152, 128, 149, 132, 137, 143, 127, 153, 148, 125, 121, 154, 126, 152, 131, 150, 147,
   141, 145, 152, 123, 130, 138, 144, 150, 133, 154, 129, 146, 127, 154, 122, 153, 128, 148, 142, 132, 151, 143, 153, 129, 124, 146,
   140, 154, 130, 151, 133, 144, 136, 145, 143, 147, 148, 139, 153, 137, 152, 149, 147, 135, 144, 141, 154, 145, 146, 152, 138, 150,
   148, 146, 134, 154, 142, 153, 140, 143, 144, 151, 149, 138, 140, 150, 151, 152, 144, 153, 146, 154, 137, 150, 142, 152, 143, 149,
   151, 148, 154, 153, 139, 141, 151, 145, 153, 147, 154, 149, 150, 152
}; // 1.09 kb
static const cart_index_t iCartXY_ab8_a4[525] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 26, 22, 28, 31, 32, 24, 25,
   33, 34, 35, 30, 20, 16, 21, 24, 18, 30, 32, 23, 29, 26, 34, 27, 33, 31, 35, 22, 23, 17, 30, 31, 25, 19,
   27, 21, 35, 28, 29, 32, 33, 34, 36, 47, 48, 39, 51, 41, 52, 61, 62, 45, 46, 63, 57, 59, 56, 45, 37, 50,
   51, 40, 59, 60, 43, 53, 47, 63, 49, 58, 55, 61, 46, 49, 38, 57, 58, 52, 42, 53, 44, 63, 48, 50, 54, 60,
   62, 39, 40, 54, 45, 47, 56, 62, 55, 60, 51, 57, 58, 63, 61, 59, 41, 55, 42, 56, 61, 46, 48, 58, 54, 59,
   52, 60, 62, 63, 57, 56, 43, 44, 59, 55, 57, 54, 49, 50, 61, 62, 53, 60, 58, 63, 64, 79, 80, 69, 81, 71,
   83, 94, 95, 73, 74, 97, 90, 92, 85, 81, 65, 82, 79, 67, 94, 96, 72, 84, 75, 98, 76, 88, 86, 93, 83, 84,
   66, 95, 96, 80, 68, 82, 70, 99, 77, 78, 87, 89, 91, 73, 67, 89, 81, 75, 92, 99, 86, 96, 79, 97, 88, 98,
   93, 94, 74, 88, 68, 90, 98, 83, 77, 96, 87, 97, 80, 89, 91, 99, 95, 69, 75, 91, 73, 79, 85, 95, 93, 99,
   81, 90, 98, 97, 94, 92, 90, 76, 70, 97, 88, 95, 87, 84, 78, 98, 91, 82, 89, 96, 99, 71, 93, 77, 85, 94,
   74, 80, 98, 91, 92, 83, 99, 95, 97, 90, 92, 72, 78, 94, 86, 97, 89, 76, 82, 93, 99, 84, 96, 88, 98, 85,
   86, 87, 92, 93, 90, 91, 88, 89, 94, 95, 96, 99, 98, 97, 100, 121, 122, 103, 115, 105, 117, 137, 138, 109, 110, 139,
   127, 129, 126, 121, 101, 123, 116, 104, 135, 136, 107, 119, 111, 140, 113, 128, 125, 131, 122, 123, 102, 133, 134, 118, 106, 120,
   108, 141, 112, 114, 124, 130, 132, 103, 116, 133, 109, 121, 126, 138, 135, 143, 115, 127, 142, 139, 137, 129, 115, 104, 134, 121,
   111, 137, 144, 125, 136, 116, 142, 128, 140, 131, 135, 105, 135, 118, 126, 137, 110, 122, 142, 133, 129, 117, 143, 138, 139, 127,
   117, 136, 106, 138, 144, 122, 112, 134, 124, 143, 118, 130, 132, 141, 133, 137, 107, 120, 135, 125, 142, 134, 113, 123, 131, 144,
   119, 136, 128, 140, 138, 119, 108, 143, 136, 133, 124, 123, 114, 144, 132, 120, 130, 134, 141, 109, 111, 141, 115, 116, 129, 143,
   131, 144, 121, 139, 140, 142, 135, 137, 110, 140, 112, 127, 142, 117, 118, 144, 132, 139, 122, 141, 133, 143, 138, 139, 113, 114,
   142, 128, 143, 130, 119, 120, 140, 141, 123, 134, 136, 144, 127, 128, 124, 139, 140, 138, 132, 136, 130, 142, 133, 134, 141, 144,
   143, 129, 125, 130, 137, 131, 139, 141, 128, 134, 135, 143, 136, 144, 140, 142, 126, 131, 132, 129, 135, 127, 133, 140, 141, 137,
   138, 144, 143, 142, 139
}; // 1.03 kb
static const cart_index_t iCartXY_ab8_a5[420] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 27, 32, 33,
   24, 39, 26, 40, 30, 31, 36, 43, 37, 45, 41, 46, 47, 48, 42, 44, 24, 22, 29, 25, 39, 30, 35, 41, 28, 36,
   42, 32, 34, 47, 38, 44, 40, 45, 43, 48, 46, 26, 28, 23, 40, 27, 41, 29, 31, 34, 44, 37, 46, 38, 33, 35,
   42, 43, 39, 45, 47, 48, 49, 60, 62, 64, 65, 54, 76, 56, 78, 58, 59, 66, 83, 68, 84, 70, 79, 80, 82, 75,
   77, 58, 50, 63, 52, 74, 66, 67, 77, 57, 64, 82, 60, 61, 84, 69, 79, 71, 81, 73, 83, 78, 59, 61, 51, 73,
   53, 75, 55, 68, 69, 82, 65, 83, 67, 62, 63, 80, 81, 72, 74, 76, 84, 54, 52, 72, 60, 76, 58, 74, 70, 71,
   66, 75, 64, 73, 80, 81, 77, 78, 84, 83, 82, 79, 56, 71, 53, 78, 62, 70, 72, 59, 73, 77, 68, 79, 81, 65,
   74, 75, 83, 76, 84, 80, 82, 70, 57, 55, 71, 72, 77, 63, 75, 61, 79, 80, 78, 69, 76, 67, 82, 73, 74, 81,
   84, 83, 85, 101, 103, 106, 107, 88, 118, 90, 120, 94, 95, 100, 127, 102, 128, 111, 122, 123, 124, 112, 114, 100, 86, 105,
   89, 119, 106, 108, 122, 92, 101, 127, 96, 98, 129, 104, 120, 110, 121, 113, 125, 116, 102, 104, 87, 121, 91, 123, 93, 107,
   108, 128, 103, 129, 105, 97, 99, 118, 119, 109, 115, 117, 126, 94, 89, 115, 96, 126, 100, 119, 114, 110, 106, 124, 101, 113,
   128, 121, 122, 116, 129, 125, 127, 120, 95, 113, 91, 125, 97, 112, 109, 102, 121, 124, 107, 127, 119, 103, 115, 123, 129, 117,
   126, 118, 128, 88, 96, 117, 101, 118, 94, 126, 111, 116, 100, 112, 106, 125, 123, 129, 114, 120, 128, 127, 124, 122, 112, 98,
   93, 113, 109, 124, 99, 123, 104, 127, 118, 125, 108, 117, 105, 128, 121, 115, 119, 126, 129, 90, 116, 97, 120, 103, 111, 117,
   95, 125, 114, 102, 122, 129, 107, 126, 112, 127, 118, 128, 123, 124, 114, 92, 99, 110, 115, 122, 105, 124, 98, 120, 128, 116,
   104, 126, 108, 127, 113, 119, 121, 129, 125, 111, 110, 109, 116, 117, 114, 115, 112, 113, 122, 123, 120, 121, 118, 119, 124, 125,
   126, 129, 128, 127
}; // 0.82 kb
static const cart_index_t iCartXY_ab8_a6[280] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
   26, 27, 28, 31, 32, 33, 39, 35, 41, 50, 51, 37, 38, 43, 44, 52, 53, 45, 47, 60, 55, 57, 49, 54, 62, 56,
   63, 58, 59, 61, 33, 29, 34, 37, 31, 49, 51, 36, 42, 45, 54, 39, 55, 40, 46, 43, 59, 48, 53, 50, 56, 61,
   52, 58, 60, 57, 63, 62, 35, 36, 30, 49, 50, 38, 32, 40, 34, 56, 47, 57, 41, 48, 42, 58, 44, 46, 51, 52,
   54, 59, 60, 61, 53, 62, 55, 63, 64, 75, 76, 67, 80, 69, 82, 95, 96, 73, 74, 85, 86, 104, 105, 79, 81, 108,
   97, 99, 90, 91, 106, 93, 107, 101, 102, 103, 73, 65, 78, 79, 68, 93, 94, 71, 84, 85, 103, 75, 105, 77, 87, 80,
   107, 83, 98, 89, 101, 106, 92, 99, 100, 95, 108, 104, 74, 77, 66, 91, 92, 81, 70, 83, 72, 103, 86, 104, 76, 87,
   78, 106, 82, 84, 88, 100, 102, 97, 98, 107, 94, 108, 96, 105, 67, 68, 88, 73, 75, 90, 96, 89, 94, 79, 91, 80,
   97, 92, 98, 85, 102, 100, 105, 95, 93, 103, 104, 101, 108, 99, 107, 106, 69, 89, 70, 90, 95, 74, 76, 92, 88, 93,
   81, 99, 82, 100, 94, 101, 86, 98, 96, 104, 91, 102, 108, 103, 105, 106, 97, 107, 90, 71, 72, 93, 89, 91, 88, 77,
   78, 101, 102, 95, 96, 83, 84, 99, 97, 87, 94, 92, 103, 107, 100, 106, 98, 104, 105, 108
}; // 0.55 kb
static const cart_index_t iCartXY_ab9_a0[220] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
   52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
   78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
   104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
   130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
   156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
   182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
   208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219
}; // 0.43 kb
static const cart_index_t iCartXY_ab9_a1[495] = {
   0, 1, 2, 3, 6, 7, 6, 4, 8, 7, 8, 5, 9, 14, 16, 12, 10, 17, 13, 15, 11, 14, 12, 18, 16, 18,
   13, 18, 17, 15, 19, 22, 24, 23, 20, 26, 25, 27, 21, 28, 23, 32, 29, 31, 25, 22, 28, 33, 31, 30, 27, 24,
   33, 29, 32, 26, 30, 33, 32, 31, 34, 39, 41, 37, 35, 42, 38, 40, 36, 39, 43, 49, 45, 37, 50, 41, 49, 44,
   47, 51, 38, 50, 42, 46, 51, 48, 40, 43, 45, 54, 44, 53, 47, 52, 46, 48, 53, 52, 51, 54, 50, 52, 49, 54,
   53, 55, 58, 60, 59, 56, 62, 61, 63, 57, 66, 59, 74, 67, 73, 61, 58, 64, 75, 73, 69, 63, 60, 75, 65, 74,
   62, 68, 64, 70, 78, 65, 76, 71, 70, 66, 80, 77, 68, 72, 71, 81, 67, 79, 72, 69, 75, 78, 76, 80, 74, 77,
   81, 79, 73, 82, 77, 79, 76, 82, 81, 78, 80, 82, 83, 88, 90, 86, 84, 91, 87, 89, 85, 88, 92, 104, 94, 86,
   105, 90, 104, 93, 96, 106, 87, 105, 91, 95, 106, 97, 89, 92, 100, 111, 93, 109, 102, 98, 94, 112, 99, 110, 96, 107,
   95, 103, 108, 101, 97, 100, 98, 113, 102, 114, 99, 115, 103, 101, 110, 108, 106, 112, 105, 107, 104, 111, 109, 109, 116, 114,
   117, 107, 115, 111, 113, 116, 118, 115, 108, 113, 112, 117, 114, 118, 110, 116, 117, 118, 119, 122, 124, 123, 120, 126, 125, 127,
   121, 130, 123, 144, 131, 143, 125, 122, 128, 145, 143, 133, 127, 124, 145, 129, 144, 126, 132, 128, 134, 148, 129, 146, 136, 135,
   130, 150, 147, 132, 138, 137, 151, 131, 149, 139, 133, 140, 135, 154, 141, 152, 137, 134, 140, 156, 153, 142, 139, 136, 157, 141,
   155, 138, 142, 145, 148, 146, 150, 144, 147, 151, 149, 143, 159, 147, 155, 160, 153, 149, 146, 158, 157, 152, 160, 151, 148, 156,
   158, 154, 150, 159, 156, 154, 161, 157, 162, 152, 163, 155, 153, 158, 161, 162, 161, 159, 163, 162, 163, 160, 164, 169, 171, 167,
   165, 172, 168, 170, 166, 169, 173, 191, 175, 167, 192, 171, 191, 174, 177, 193, 168, 192, 172, 176, 193, 178, 170, 173, 181, 198,
   174, 196, 183, 179, 175, 199, 180, 197, 177, 194, 176, 184, 195, 182, 178, 181, 185, 200, 187, 179, 202, 183, 201, 186, 189, 203,
   180, 204, 184, 188, 205, 190, 182, 185, 187, 208, 186, 207, 189, 206, 188, 190, 197, 195, 193, 199, 192, 194, 191, 198, 196, 196,
   209, 201, 210, 194, 204, 198, 200, 209, 211, 205, 195, 202, 199, 210, 203, 211, 197, 207, 213, 203, 215, 206, 205, 208, 202, 212,
   217, 204, 206, 200, 208, 214, 201, 216, 207, 209, 214, 216, 212, 210, 217, 213, 215, 211, 214, 212, 218, 216, 218, 213, 218, 217,
   215
}; // 0.97 kb
static const cart_index_t iCartXY_ab9_a2[720] = {
   0, 1, 2, 3, 4, 5, 6, 9, 10, 11, 13, 15, 11, 7, 12, 9, 15, 14, 13, 14, 8, 15, 10, 12, 16, 25,
   26, 19, 21, 30, 25, 17, 27, 20, 29, 23, 26, 27, 18, 28, 22, 24, 19, 20, 28, 25, 30, 29, 21, 29, 22, 30,
   26, 28, 30, 23, 24, 29, 28, 27, 31, 40, 41, 36, 38, 46, 42, 32, 43, 34, 47, 39, 44, 45, 33, 48, 35, 37,
   40, 34, 49, 42, 51, 47, 41, 49, 35, 50, 44, 48, 36, 42, 50, 40, 46, 51, 50, 43, 37, 49, 48, 45, 38, 51,
   44, 46, 41, 50, 51, 39, 45, 47, 49, 43, 46, 47, 48, 51, 50, 49, 52, 61, 62, 55, 57, 72, 63, 53, 65, 56,
   71, 59, 64, 66, 54, 70, 58, 60, 55, 67, 73, 61, 72, 75, 67, 56, 74, 63, 77, 71, 57, 75, 68, 72, 62, 73,
   68, 76, 58, 78, 64, 70, 77, 59, 69, 71, 74, 65, 78, 69, 60, 76, 70, 66, 61, 63, 79, 67, 75, 77, 62, 79,
   64, 73, 68, 78, 79, 65, 66, 74, 76, 69, 73, 74, 70, 79, 78, 76, 75, 71, 76, 77, 79, 74, 72, 77, 78, 75,
   73, 79, 80, 89, 90, 85, 87, 101, 91, 81, 92, 83, 102, 88, 93, 94, 82, 103, 84, 86, 95, 83, 104, 91, 109, 102,
   96, 105, 84, 107, 93, 103, 85, 97, 106, 89, 101, 108, 107, 98, 86, 105, 103, 94, 87, 108, 99, 101, 90, 106, 109, 88,
   100, 102, 104, 92, 89, 95, 113, 97, 108, 110, 90, 113, 96, 106, 99, 111, 97, 91, 114, 95, 110, 109, 114, 92, 98, 104,
   112, 100, 99, 115, 93, 111, 96, 107, 115, 100, 94, 112, 105, 98, 101, 110, 111, 108, 106, 113, 110, 102, 112, 109, 114, 104,
   111, 112, 103, 115, 107, 105, 113, 104, 105, 114, 115, 112, 106, 114, 107, 113, 111, 115, 108, 109, 115, 110, 113, 114, 116, 125,
   126, 119, 121, 142, 127, 117, 129, 120, 141, 123, 128, 130, 118, 140, 122, 124, 119, 131, 143, 125, 142, 145, 132, 120, 144, 127,
   147, 141, 121, 145, 133, 142, 126, 143, 134, 146, 122, 148, 128, 140, 147, 123, 135, 141, 144, 129, 148, 136, 124, 146, 140, 130,
   125, 137, 155, 131, 145, 153, 126, 155, 138, 143, 133, 154, 137, 127, 156, 132, 151, 147, 138, 157, 128, 149, 134, 148, 156, 129,
   139, 144, 152, 135, 157, 139, 130, 150, 146, 136, 131, 132, 158, 137, 153, 151, 133, 159, 134, 154, 138, 149, 160, 135, 136, 152,
   150, 139, 149, 150, 140, 157, 148, 146, 151, 141, 152, 147, 156, 144, 142, 153, 154, 145, 143, 155, 143, 158, 149, 155, 154, 159,
   158, 144, 150, 156, 160, 152, 145, 151, 159, 153, 155, 158, 159, 152, 146, 160, 157, 150, 153, 147, 160, 151, 158, 156, 154, 160,
   148, 159, 149, 157, 155, 156, 157, 158, 159, 160, 161, 170, 171, 166, 168, 188, 172, 162, 173, 164, 189, 169, 174, 175, 163, 190,
   165, 167, 176, 164, 191, 172, 196, 189, 177, 192, 165, 194, 174, 190, 166, 178, 193, 170, 188, 195, 194, 179, 167, 192, 190, 175,
   168, 195, 180, 188, 171, 193, 196, 169, 181, 189, 191, 173, 170, 182, 206, 178, 195, 197, 171, 206, 183, 193, 180, 198, 184, 172,
   207, 176, 199, 196, 207, 173, 185, 191, 201, 181, 186, 208, 174, 200, 177, 194, 208, 187, 175, 202, 192, 179, 182, 176, 209, 184,
   205, 199, 183, 210, 177, 204, 186, 200, 178, 184, 211, 182, 197, 205, 212, 185, 179, 203, 202, 187, 180, 213, 186, 198, 183, 204,
   214, 181, 187, 201, 203, 185, 188, 197, 198, 195, 193, 206, 199, 189, 201, 196, 207, 191, 200, 202, 190, 208, 194, 192, 209, 191,
   203, 207, 214, 201, 210, 203, 192, 212, 208, 202, 193, 211, 204, 206, 198, 213, 204, 212, 194, 210, 200, 208, 195, 205, 213, 197,
   206, 211, 205, 196, 214, 199, 209, 207, 197, 199, 215, 205, 211, 209, 198, 215, 200, 213, 204, 210, 215, 201, 202, 214, 212, 203,
   206, 209, 210, 211, 213, 215, 211, 207, 212, 209, 215, 214, 213, 214, 208, 215, 210, 212
}; // 1.41 kb
static const cart_index_t iCartXY_ab9_a3[840] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 16, 19, 20, 13, 22, 15, 23, 24, 13, 11, 18, 14, 22, 19,
   21, 24, 17, 23, 15, 17, 12, 23, 16, 24, 18, 20, 21, 22, 25, 36, 38, 34, 35, 30, 44, 32, 45, 40, 34, 26,
   39, 28, 43, 36, 37, 45, 33, 41, 35, 37, 27, 43, 29, 44, 31, 38, 39, 42, 30, 28, 42, 36, 44, 34, 43, 40,
   41, 45, 32, 41, 29, 45, 38, 40, 42, 35, 43, 44, 40, 33, 31, 41, 42, 45, 39, 44, 37, 43, 46, 61, 62, 55,
   56, 49, 67, 51, 69, 66, 61, 47, 63, 50, 68, 57, 59, 71, 53, 65, 62, 63, 48, 70, 52, 72, 54, 58, 60, 64,
   55, 50, 70, 57, 73, 61, 68, 69, 65, 71, 56, 68, 52, 73, 58, 67, 64, 62, 70, 72, 49, 57, 72, 61, 67, 55,
   73, 66, 71, 69, 67, 59, 54, 68, 64, 73, 60, 72, 63, 70, 51, 71, 58, 69, 62, 66, 72, 56, 73, 67, 69, 53,
   60, 65, 70, 71, 63, 73, 59, 68, 66, 65, 64, 71, 72, 69, 70, 67, 68, 73, 74, 91, 93, 83, 84, 79, 100, 81,
   102, 95, 89, 75, 94, 77, 98, 85, 86, 103, 82, 96, 90, 92, 76, 99, 78, 101, 80, 87, 88, 97, 79, 89, 105, 91,
   100, 83, 107, 95, 104, 102, 91, 77, 106, 85, 108, 89, 98, 104, 96, 103, 81, 104, 90, 102, 93, 95, 105, 84, 107, 100,
   93, 106, 78, 109, 87, 105, 97, 90, 99, 101, 104, 82, 92, 96, 106, 103, 94, 108, 86, 98, 105, 94, 80, 106, 97, 109,
   88, 101, 92, 99, 83, 85, 109, 89, 107, 91, 108, 102, 103, 104, 84, 108, 87, 107, 90, 100, 101, 93, 109, 105, 107, 86,
   88, 98, 99, 108, 92, 109, 94, 106, 100, 98, 97, 108, 101, 107, 99, 105, 106, 109, 102, 96, 99, 103, 109, 104, 106, 107,
   98, 108, 95, 103, 101, 104, 105, 102, 109, 100, 108, 107, 110, 125, 127, 119, 120, 113, 137, 115, 139, 136, 126, 111, 129, 114,
   138, 121, 123, 141, 117, 135, 128, 130, 112, 140, 116, 142, 118, 122, 124, 134, 131, 114, 146, 121, 150, 126, 138, 145, 135, 141,
   132, 144, 116, 151, 122, 143, 134, 128, 140, 142, 113, 131, 148, 125, 137, 119, 149, 136, 147, 139, 143, 133, 118, 144, 134, 151,
   124, 142, 130, 140, 115, 147, 132, 139, 127, 136, 148, 120, 149, 137, 145, 117, 133, 135, 146, 141, 129, 150, 123, 138, 119, 126,
   153, 131, 149, 125, 152, 139, 145, 147, 120, 152, 128, 149, 132, 137, 143, 127, 153, 148, 125, 121, 154, 126, 152, 131, 150, 147,
   141, 145, 152, 123, 130, 138, 144, 150, 133, 154, 129, 146, 127, 154, 122, 153, 128, 148, 142, 132, 151, 143, 153, 129, 124, 146,
   140, 154, 130, 151, 133, 144, 136, 145, 143, 147, 148, 139, 153, 137, 152, 149, 147, 135, 144, 141, 154, 145, 146, 152, 138, 150,
   148, 146, 134, 154, 142, 153, 140, 143, 144, 151, 149, 138, 140, 150, 151, 152, 144, 153, 146, 154, 137, 150, 142, 152, 143, 149,
   151, 148, 154, 153, 139, 141, 151, 145, 153, 147, 154, 149, 150, 152, 155, 172, 174, 164, 165, 160, 187, 162, 189, 182, 170, 156,
   175, 158, 185, 166, 167, 190, 163, 183, 171, 173, 157, 186, 159, 188, 161, 168, 169, 184, 160, 176, 192, 172, 187, 164, 200, 182,
   191, 189, 178, 158, 195, 166, 201, 170, 185, 193, 183, 190, 162, 191, 177, 189, 174, 182, 192, 165, 200, 187, 180, 196, 159, 202,
   168, 194, 184, 171, 186, 188, 193, 163, 179, 183, 195, 190, 175, 201, 167, 185, 194, 181, 161, 196, 184, 202, 169, 188, 173, 186,
   164, 178, 207, 176, 200, 172, 205, 189, 199, 191, 165, 205, 180, 200, 177, 187, 198, 174, 207, 192, 176, 166, 208, 170, 203, 178,
   201, 199, 190, 193, 177, 206, 168, 204, 171, 198, 188, 180, 202, 194, 203, 167, 181, 185, 197, 201, 179, 208, 175, 195, 204, 179,
   169, 197, 186, 206, 173, 202, 181, 196, 172, 170, 209, 178, 205, 176, 203, 191, 193, 199, 174, 209, 171, 207, 180, 192, 194, 177,
   204, 198, 209, 175, 173, 195, 196, 208, 181, 206, 179, 197, 198, 197, 184, 206, 188, 204, 186, 194, 196, 202, 199, 183, 197, 190,
   208, 193, 195, 203, 185, 201, 182, 199, 198, 191, 192, 189, 207, 187, 205, 200, 187, 203, 194, 205, 198, 200, 204, 192, 209, 207,
   205, 185, 196, 201, 206, 203, 197, 209, 195, 208, 189, 193, 204, 199, 207, 191, 209, 200, 203, 205, 207, 195, 186, 208, 202, 209,
   196, 204, 197, 206, 191, 190, 206, 193, 209, 199, 208, 205, 201, 203, 192, 208, 188, 209, 194, 207, 202, 198, 206, 204, 200, 201,
   202, 203, 204, 205, 206, 207, 208, 209
}; // 1.64 kb
static const cart_index_t iCartXY_ab9_a4[840] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 26, 22, 28, 31, 32, 24, 25,
   33, 34, 35, 30, 20, 16, 21, 24, 18, 30, 32, 23, 29, 26, 34, 27, 33, 31, 35, 22, 23, 17, 30, 31, 25, 19,
   27, 21, 35, 28, 29, 32, 33, 34, 36, 47, 48, 39, 51, 41, 52, 61, 62, 45, 46, 63, 57, 59, 56, 45, 37, 50,
   51, 40, 59, 60, 43, 53, 47, 63, 49, 58, 55, 61, 46, 49, 38, 57, 58, 52, 42, 53, 44, 63, 48, 50, 54, 60,
   62, 39, 40, 54, 45, 47, 56, 62, 55, 60, 51, 57, 58, 63, 61, 59, 41, 55, 42, 56, 61, 46, 48, 58, 54, 59,
   52, 60, 62, 63, 57, 56, 43, 44, 59, 55, 57, 54, 49, 50, 61, 62, 53, 60, 58, 63, 64, 79, 80, 69, 81, 71,
   83, 94, 95, 73, 74, 97, 90, 92, 85, 81, 65, 82, 79, 67, 94, 96, 72, 84, 75, 98, 76, 88, 86, 93, 83, 84,
   66, 95, 96, 80, 68, 82, 70, 99, 77, 78, 87, 89, 91, 73, 67, 89, 81, 75, 92, 99, 86, 96, 79, 97, 88, 98,
   93, 94, 74, 88, 68, 90, 98, 83, 77, 96, 87, 97, 80, 89, 91, 99, 95, 69, 75, 91, 73, 79, 85, 95, 93, 99,
   81, 90, 98, 97, 94, 92, 90, 76, 70, 97, 88, 95, 87, 84, 78, 98, 91, 82, 89, 96, 99, 71, 93, 77, 85, 94,
   74, 80, 98, 91, 92, 83, 99, 95, 97, 90, 92, 72, 78, 94, 86, 97, 89, 76, 82, 93, 99, 84, 96, 88, 98, 85,
   86, 87, 92, 93, 90, 91, 88, 89, 94, 95, 96, 99, 98, 97, 100, 121, 122, 103, 115, 105, 117, 137, 138, 109, 110, 139,
   127, 129, 126, 121, 101, 123, 116, 104, 135, 136, 107, 119, 111, 140, 113, 128, 125, 131, 122, 123, 102, 133, 134, 118, 106, 120,
   108, 141, 112, 114, 124, 130, 132, 103, 116, 133, 109, 121, 126, 138, 135, 143, 115, 127, 142, 139, 137, 129, 115, 104, 134, 121,
   111, 137, 144, 125, 136, 116, 142, 128, 140, 131, 135, 105, 135, 118, 126, 137, 110, 122, 142, 133, 129, 117, 143, 138, 139, 127,
   117, 136, 106, 138, 144, 122, 112, 134, 124, 143, 118, 130, 132, 141, 133, 137, 107, 120, 135, 125, 142, 134, 113, 123, 131, 144,
   119, 136, 128, 140, 138, 119, 108, 143, 136, 133, 124, 123, 114, 144, 132, 120, 130, 134, 141, 109, 111, 141, 115, 116, 129, 143,
   131, 144, 121, 139, 140, 142, 135, 137, 110, 140, 112, 127, 142, 117, 118, 144, 132, 139, 122, 141, 133, 143, 138, 139, 113, 114,
   142, 128, 143, 130, 119, 120, 140, 141, 123, 134, 136, 144, 127, 128, 124, 139, 140, 138, 132, 136, 130, 142, 133, 134, 141, 144,
   143, 129, 125, 130, 137, 131, 139, 141, 128, 134, 135, 143, 136, 144, 140, 142, 126, 131, 132, 129, 135, 127, 133, 140, 141, 137,
   138, 144, 143, 142, 139, 145, 166, 167, 150, 162, 152, 164, 181, 182, 154, 155, 190, 177, 179, 172, 168, 146, 169, 160, 148, 183,
   185, 153, 165, 156, 191, 157, 175, 173, 180, 170, 171, 147, 184, 186, 161, 149, 163, 151, 192, 158, 159, 174, 176, 178, 166, 148,
   187, 168, 156, 189, 198, 173, 185, 160, 193, 175, 191, 180, 183, 167, 187, 149, 188, 196, 170, 158, 186, 174, 194, 161, 176, 178,
   192, 184, 150, 168, 188, 154, 166, 172, 182, 189, 197, 162, 177, 195, 190, 181, 179, 188, 169, 151, 194, 187, 184, 174, 171, 159,
   196, 178, 163, 176, 186, 192, 152, 189, 170, 172, 181, 155, 167, 195, 188, 179, 164, 197, 182, 190, 177, 189, 153, 171, 183, 173,
   193, 187, 157, 169, 180, 198, 165, 185, 175, 191, 154, 160, 194, 162, 168, 179, 197, 183, 199, 166, 190, 193, 195, 189, 181, 155,
   193, 161, 177, 195, 164, 170, 199, 184, 190, 167, 194, 188, 197, 182, 162, 156, 196, 166, 160, 181, 199, 180, 198, 168, 195, 191,
   193, 183, 189, 195, 157, 163, 193, 175, 199, 186, 165, 171, 191, 196, 169, 187, 185, 198, 164, 198, 158, 182, 199, 167, 161, 196,
   178, 197, 170, 192, 184, 194, 188, 197, 165, 159, 199, 185, 194, 176, 169, 163, 198, 192, 171, 186, 187, 196, 172, 183, 184, 179,
   189, 177, 188, 193, 194, 181, 182, 199, 197, 195, 190, 181, 173, 186, 189, 180, 195, 196, 175, 187, 183, 199, 185, 198, 191, 193,
   182, 185, 174, 197, 198, 188, 178, 187, 176, 199, 184, 186, 192, 196, 194, 190, 175, 176, 195, 191, 197, 192, 185, 186, 193, 194,
   187, 196, 198, 199, 177, 191, 178, 190, 193, 182, 184, 198, 192, 195, 188, 196, 194, 199, 197, 179, 180, 192, 181, 183, 190, 194,
   191, 196, 189, 197, 198, 199, 193, 195
}; // 1.64 kb
static const cart_index_t iCartXY_ab9_a5[735] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 27, 32, 33,
   24, 39, 26, 40, 30, 31, 36, 43, 37, 45, 41, 46, 47, 48, 42, 44, 24, 22, 29, 25, 39, 30, 35, 41, 28, 36,
   42, 32, 34, 47, 38, 44, 40, 45, 43, 48, 46, 26, 28, 23, 40, 27, 41, 29, 31, 34, 44, 37, 46, 38, 33, 35,
   42, 43, 39, 45, 47, 48, 49, 60, 62, 64, 65, 54, 76, 56, 78, 58, 59, 66, 83, 68, 84, 70, 79, 80, 82, 75,
   77, 58, 50, 63, 52, 74, 66, 67, 77, 57, 64, 82, 60, 61, 84, 69, 79, 71, 81, 73, 83, 78, 59, 61, 51, 73,
   53, 75, 55, 68, 69, 82, 65, 83, 67, 62, 63, 80, 81, 72, 74, 76, 84, 54, 52, 72, 60, 76, 58, 74, 70, 71,
   66, 75, 64, 73, 80, 81, 77, 78, 84, 83, 82, 79, 56, 71, 53, 78, 62, 70, 72, 59, 73, 77, 68, 79, 81, 65,
   74, 75, 83, 76, 84, 80, 82, 70, 57, 55, 71, 72, 77, 63, 75, 61, 79, 80, 78, 69, 76, 67, 82, 73, 74, 81,
   84, 83, 85, 101, 103, 106, 107, 88, 118, 90, 120, 94, 95, 100, 127, 102, 128, 111, 122, 123, 124, 112, 114, 100, 86, 105,
   89, 119, 106, 108, 122, 92, 101, 127, 96, 98, 129, 104, 120, 110, 121, 113, 125, 116, 102, 104, 87, 121, 91, 123, 93, 107,
   108, 128, 103, 129, 105, 97, 99, 118, 119, 109, 115, 117, 126, 94, 89, 115, 96, 126, 100, 119, 114, 110, 106, 124, 101, 113,
   128, 121, 122, 116, 129, 125, 127, 120, 95, 113, 91, 125, 97, 112, 109, 102, 121, 124, 107, 127, 119, 103, 115, 123, 129, 117,
   126, 118, 128, 88, 96, 117, 101, 118, 94, 126, 111, 116, 100, 112, 106, 125, 123, 129, 114, 120, 128, 127, 124, 122, 112, 98,
   93, 113, 109, 124, 99, 123, 104, 127, 118, 125, 108, 117, 105, 128, 121, 115, 119, 126, 129, 90, 116, 97, 120, 103, 111, 117,
   95, 125, 114, 102, 122, 129, 107, 126, 112, 127, 118, 128, 123, 124, 114, 92, 99, 110, 115, 122, 105, 124, 98, 120, 128, 116,
   104, 126, 108, 127, 113, 119, 121, 129, 125, 111, 110, 109, 116, 117, 114, 115, 112, 113, 122, 123, 120, 121, 118, 119, 124, 125,
   126, 129, 128, 127, 130, 153, 155, 151, 152, 135, 173, 137, 174, 139, 140, 147, 180, 149, 182, 157, 166, 167, 175, 162, 164, 151,
   131, 156, 133, 172, 153, 154, 174, 138, 145, 178, 141, 142, 183, 150, 168, 158, 170, 160, 176, 165, 152, 154, 132, 172, 134, 173,
   136, 155, 156, 179, 146, 181, 148, 143, 144, 169, 171, 159, 161, 163, 177, 135, 145, 169, 153, 173, 139, 179, 157, 168, 147, 162,
   151, 178, 167, 184, 164, 174, 182, 180, 175, 166, 147, 133, 171, 141, 181, 151, 172, 166, 158, 153, 180, 145, 160, 184, 170, 174,
   165, 183, 176, 178, 168, 137, 168, 146, 174, 155, 157, 169, 140, 178, 164, 149, 166, 184, 152, 179, 162, 180, 173, 182, 167, 175,
   149, 170, 134, 183, 143, 167, 159, 152, 172, 182, 155, 184, 171, 146, 161, 173, 181, 163, 177, 169, 179, 166, 138, 148, 158, 171,
   174, 156, 180, 142, 168, 184, 165, 150, 181, 154, 178, 160, 172, 170, 183, 176, 167, 150, 136, 170, 159, 182, 144, 173, 154, 184,
   169, 183, 156, 163, 148, 179, 172, 161, 171, 177, 181, 139, 141, 177, 145, 179, 147, 181, 164, 165, 151, 175, 153, 176, 182, 183,
   166, 168, 184, 178, 180, 174, 140, 176, 143, 178, 146, 162, 163, 149, 183, 175, 152, 180, 181, 155, 177, 167, 184, 169, 179, 173,
   182, 175, 142, 144, 160, 161, 180, 148, 182, 150, 178, 179, 176, 154, 177, 156, 184, 170, 171, 172, 181, 183, 162, 160, 159, 176,
   163, 175, 161, 167, 170, 180, 173, 178, 172, 169, 171, 182, 183, 177, 181, 179, 184, 164, 158, 161, 165, 177, 166, 171, 175, 160,
   174, 182, 168, 170, 179, 172, 180, 176, 181, 183, 184, 178, 157, 165, 163, 168, 169, 164, 177, 162, 176, 166, 167, 174, 183, 173,
   181, 175, 178, 179, 184, 182, 180
}; // 1.44 kb
static const cart_index_t iCartXY_ab9_a6[560] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
   26, 27, 28, 31, 32, 33, 39, 35, 41, 50, 51, 37, 38, 43, 44, 52, 53, 45, 47, 60, 55, 57, 49, 54, 62, 56,
   63, 58, 59, 61, 33, 29, 34, 37, 31, 49, 51, 36, 42, 45, 54, 39, 55, 40, 46, 43, 59, 48, 53, 50, 56, 61,
   52, 58, 60, 57, 63, 62, 35, 36, 30, 49, 50, 38, 32, 40, 34, 56, 47, 57, 41, 48, 42, 58, 44, 46, 51, 52,
   54, 59, 60, 61, 53, 62, 55, 63, 64, 75, 76, 67, 80, 69, 82, 95, 96, 73, 74, 85, 86, 104, 105, 79, 81, 108,
   97, 99, 90, 91, 106, 93, 107, 101, 102, 103, 73, 65, 78, 79, 68, 93, 94, 71, 84, 85, 103, 75, 105, 77, 87, 80,
   107, 83, 98, 89, 101, 106, 92, 99, 100, 95, 108, 104, 74, 77, 66, 91, 92, 81, 70, 83, 72, 103, 86, 104, 76, 87,
   78, 106, 82, 84, 88, 100, 102, 97, 98, 107, 94, 108, 96, 105, 67, 68, 88, 73, 75, 90, 96, 89, 94, 79, 91, 80,
   97, 92, 98, 85, 102, 100, 105, 95, 93, 103, 104, 101, 108, 99, 107, 106, 69, 89, 70, 90, 95, 74, 76, 92, 88, 93,
   81, 99, 82, 100, 94, 101, 86, 98, 96, 104, 91, 102, 108, 103, 105, 106, 97, 107, 90, 71, 72, 93, 89, 91, 88, 77,
   78, 101, 102, 95, 96, 83, 84, 99, 97, 87, 94, 92, 103, 107, 100, 106, 98, 104, 105, 108, 109, 124, 125, 114, 132, 116,
   134, 147, 148, 118, 119, 130, 131, 157, 158, 126, 128, 163, 152, 153, 136, 141, 159, 143, 161, 145, 146, 154, 126, 110, 127, 130,
   112, 145, 150, 117, 135, 132, 159, 120, 160, 121, 133, 124, 163, 129, 151, 137, 153, 157, 139, 147, 149, 144, 162, 155, 128, 129,
   111, 146, 149, 131, 113, 133, 115, 161, 134, 162, 122, 135, 123, 163, 125, 127, 138, 151, 152, 148, 150, 158, 140, 160, 142, 156,
   118, 112, 140, 126, 120, 143, 156, 137, 150, 130, 154, 124, 158, 139, 151, 132, 161, 149, 160, 144, 145, 159, 155, 153, 162, 147,
   163, 157, 119, 139, 113, 141, 155, 128, 122, 149, 138, 154, 131, 157, 125, 151, 140, 159, 134, 150, 142, 162, 146, 152, 160, 161,
   156, 163, 148, 158, 114, 120, 142, 118, 124, 136, 148, 144, 156, 126, 141, 132, 152, 155, 160, 130, 146, 162, 158, 147, 143, 154,
   157, 145, 163, 153, 161, 159, 141, 121, 115, 154, 139, 146, 138, 129, 123, 159, 152, 155, 142, 133, 127, 157, 148, 135, 140, 149,
   161, 158, 151, 163, 150, 162, 156, 160, 116, 144, 122, 136, 147, 119, 125, 155, 142, 143, 128, 153, 134, 162, 156, 145, 131, 160,
   148, 157, 141, 146, 163, 154, 158, 159, 152, 161, 143, 117, 123, 145, 137, 154, 140, 121, 127, 153, 161, 144, 156, 129, 135, 147,
   158, 133, 150, 139, 159, 163, 149, 157, 151, 155, 160, 162, 136, 137, 138, 143, 144, 141, 142, 139, 140, 145, 146, 147, 148, 149,
   150, 153, 152, 151, 156, 155, 154, 161, 162, 159, 160, 157, 158, 163
}; // 1.09 kb
static const cart_index_t iCartXY_ab10_a0[286] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
   52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
   78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
   104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
   130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
   156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
   182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
   208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
   234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259,
   260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285
}; // 0.56 kb
static const cart_index_t iCartXY_ab10_a1[660] = {
   0, 1, 2, 3, 6, 7, 6, 4, 8, 7, 8, 5, 9, 14, 16, 12, 10, 17, 13, 15, 11, 14, 12, 18, 16, 18,
   13, 18, 17, 15, 19, 22, 24, 23, 20, 26, 25, 27, 21, 28, 23, 32, 29, 31, 25, 22, 28, 33, 31, 30, 27, 24,
   33, 29, 32, 26, 30, 33, 32, 31, 34, 39, 41, 37, 35, 42, 38, 40, 36, 39, 43, 49, 45, 37, 50, 41, 49, 44,
   47, 51, 38, 50, 42, 46, 51, 48, 40, 43, 45, 54, 44, 53, 47, 52, 46, 48, 53, 52, 51, 54, 50, 52, 49, 54,
   53, 55, 58, 60, 59, 56, 62, 61, 63, 57, 66, 59, 74, 67, 73, 61, 58, 64, 75, 73, 69, 63, 60, 75, 65, 74,
   62, 68, 64, 70, 78, 65, 76, 71, 70, 66, 80, 77, 68, 72, 71, 81, 67, 79, 72, 69, 75, 78, 76, 80, 74, 77,
   81, 79, 73, 82, 77, 79, 76, 82, 81, 78, 80, 82, 83, 88, 90, 86, 84, 91, 87, 89, 85, 88, 92, 104, 94, 86,
   105, 90, 104, 93, 96, 106, 87, 105, 91, 95, 106, 97, 89, 92, 100, 111, 93, 109, 102, 98, 94, 112, 99, 110, 96, 107,
   95, 103, 108, 101, 97, 100, 98, 113, 102, 114, 99, 115, 103, 101, 110, 108, 106, 112, 105, 107, 104, 111, 109, 109, 116, 114,
   117, 107, 115, 111, 113, 116, 118, 115, 108, 113, 112, 117, 114, 118, 110, 116, 117, 118, 119, 122, 124, 123, 120, 126, 125, 127,
   121, 130, 123, 144, 131, 143, 125, 122, 128, 145, 143, 133, 127, 124, 145, 129, 144, 126, 132, 128, 134, 148, 129, 146, 136, 135,
   130, 150, 147, 132, 138, 137, 151, 131, 149, 139, 133, 140, 135, 154, 141, 152, 137, 134, 140, 156, 153, 142, 139, 136, 157, 141,
   155, 138, 142, 145, 148, 146, 150, 144, 147, 151, 149, 143, 159, 147, 155, 160, 153, 149, 146, 158, 157, 152, 160, 151, 148, 156,
   158, 154, 150, 159, 156, 154, 161, 157, 162, 152, 163, 155, 153, 158, 161, 162, 161, 159, 163, 162, 163, 160, 164, 169, 171, 167,
   165, 172, 168, 170, 166, 169, 173, 191, 175, 167, 192, 171, 191, 174, 177, 193, 168, 192, 172, 176, 193, 178, 170, 173, 181, 198,
   174, 196, 183, 179, 175, 199, 180, 197, 177, 194, 176, 184, 195, 182, 178, 181, 185, 200, 187, 179, 202, 183, 201, 186, 189, 203,
   180, 204, 184, 188, 205, 190, 182, 185, 187, 208, 186, 207, 189, 206, 188, 190, 197, 195, 193, 199, 192, 194, 191, 198, 196, 196,
   209, 201, 210, 194, 204, 198, 200, 209, 211, 205, 195, 202, 199, 210, 203, 211, 197, 207, 213, 203, 215, 206, 205, 208, 202, 212,
   217, 204, 206, 200, 208, 214, 201, 216, 207, 209, 214, 216, 212, 210, 217, 213, 215, 211, 214, 212, 218, 216, 218, 213, 218, 217,
   215, 219, 222, 224, 223, 220, 226, 225, 227, 221, 230, 223, 250, 231, 249, 225, 222, 228, 251, 249, 233, 227, 224, 251, 229, 250,
   226, 232, 228, 234, 254, 229, 252, 236, 235, 230, 256, 253, 232, 238, 237, 257, 231, 255, 239, 233, 242, 235, 260, 243, 258, 237,
   234, 240, 262, 259, 245, 239, 236, 263, 241, 261, 238, 244, 240, 246, 266, 241, 264, 247, 246, 242, 268, 265, 244, 248, 247, 269,
   243, 267, 248, 245, 251, 254, 252, 256, 250, 253, 257, 255, 249, 271, 253, 261, 272, 259, 255, 252, 270, 263, 258, 272, 257, 254,
   262, 270, 260, 256, 271, 262, 266, 273, 263, 275, 264, 268, 260, 274, 269, 276, 258, 277, 261, 265, 278, 267, 259, 281, 265, 267,
   264, 280, 269, 266, 268, 279, 270, 273, 275, 274, 271, 277, 276, 278, 272, 279, 274, 283, 280, 282, 276, 273, 279, 284, 282, 281,
   278, 275, 284, 280, 283, 277, 281, 284, 283, 282
}; // 1.29 kb
static const cart_index_t iCartXY_ab10_a2[990] = {
   0, 1, 2, 3, 4, 5, 6, 9, 10, 11, 13, 15, 11, 7, 12, 9, 15, 14, 13, 14, 8, 15, 10, 12, 16, 25,
   26, 19, 21, 30, 25, 17, 27, 20, 29, 23, 26, 27, 18, 28, 22, 24, 19, 20, 28, 25, 30, 29, 21, 29, 22, 30,
   26, 28, 30, 23, 24, 29, 28, 27, 31, 40, 41, 36, 38, 46, 42, 32, 43, 34, 47, 39, 44, 45, 33, 48, 35, 37,
   40, 34, 49, 42, 51, 47, 41, 49, 35, 50, 44, 48, 36, 42, 50, 40, 46, 51, 50, 43, 37, 49, 48, 45, 38, 51,
   44, 46, 41, 50, 51, 39, 45, 47, 49, 43, 46, 47, 48, 51, 50, 49, 52, 61, 62, 55, 57, 72, 63, 53, 65, 56,
   71, 59, 64, 66, 54, 70, 58, 60, 55, 67, 73, 61, 72, 75, 67, 56, 74, 63, 77, 71, 57, 75, 68, 72, 62, 73,
   68, 76, 58, 78, 64, 70, 77, 59, 69, 71, 74, 65, 78, 69, 60, 76, 70, 66, 61, 63, 79, 67, 75, 77, 62, 79,
   64, 73, 68, 78, 79, 65, 66, 74, 76, 69, 73, 74, 70, 79, 78, 76, 75, 71, 76, 77, 79, 74, 72, 77, 78, 75,
   73, 79, 80, 89, 90, 85, 87, 101, 91, 81, 92, 83, 102, 88, 93, 94, 82, 103, 84, 86, 95, 83, 104, 91, 109, 102,
   96, 105, 84, 107, 93, 103, 85, 97, 106, 89, 101, 108, 107, 98, 86, 105, 103, 94, 87, 108, 99, 101, 90, 106, 109, 88,
   100, 102, 104, 92, 89, 95, 113, 97, 108, 110, 90, 113, 96, 106, 99, 111, 97, 91, 114, 95, 110, 109, 114, 92, 98, 104,
   112, 100, 99, 115, 93, 111, 96, 107, 115, 100, 94, 112, 105, 98, 101, 110, 111, 108, 106, 113, 110, 102, 112, 109, 114, 104,
   111, 112, 103, 115, 107, 105, 113, 104, 105, 114, 115, 112, 106, 114, 107, 113, 111, 115, 108, 109, 115, 110, 113, 114, 116, 125,
   126, 119, 121, 142, 127, 117, 129, 120, 141, 123, 128, 130, 118, 140, 122, 124, 119, 131, 143, 125, 142, 145, 132, 120, 144, 127,
   147, 141, 121, 145, 133, 142, 126, 143, 134, 146, 122, 148, 128, 140, 147, 123, 135, 141, 144, 129, 148, 136, 124, 146, 140, 130,
   125, 137, 155, 131, 145, 153, 126, 155, 138, 143, 133, 154, 137, 127, 156, 132, 151, 147, 138, 157, 128, 149, 134, 148, 156, 129,
   139, 144, 152, 135, 157, 139, 130, 150, 146, 136, 131, 132, 158, 137, 153, 151, 133, 159, 134, 154, 138, 149, 160, 135, 136, 152,
   150, 139, 149, 150, 140, 157, 148, 146, 151, 141, 152, 147, 156, 144, 142, 153, 154, 145, 143, 155, 143, 158, 149, 155, 154, 159,
   158, 144, 150, 156, 160, 152, 145, 151, 159, 153, 155, 158, 159, 152, 146, 160, 157, 150, 153, 147, 160, 151, 158, 156, 154, 160,
   148, 159, 149, 157, 155, 156, 157, 158, 159, 160, 161, 170, 171, 166, 168, 188, 172, 162, 173, 164, 189, 169, 174, 175, 163, 190,
   165, 167, 176, 164, 191, 172, 196, 189, 177, 192, 165, 194, 174, 190, 166, 178, 193, 170, 188, 195, 194, 179, 167, 192, 190, 175,
   168, 195, 180, 188, 171, 193, 196, 169, 181, 189, 191, 173, 170, 182, 206, 178, 195, 197, 171, 206, 183, 193, 180, 198, 184, 172,
   207, 176, 199, 196, 207, 173, 185, 191, 201, 181, 186, 208, 174, 200, 177, 194, 208, 187, 175, 202, 192, 179, 182, 176, 209, 184,
   205, 199, 183, 210, 177, 204, 186, 200, 178, 184, 211, 182, 197, 205, 212, 185, 179, 203, 202, 187, 180, 213, 186, 198, 183, 204,
   214, 181, 187, 201, 203, 185, 188, 197, 198, 195, 193, 206, 199, 189, 201, 196, 207, 191, 200, 202, 190, 208, 194, 192, 209, 191,
   203, 207, 214, 201, 210, 203, 192, 212, 208, 202, 193, 211, 204, 206, 198, 213, 204, 212, 194, 210, 200, 208, 195, 205, 213, 197,
   206, 211, 205, 196, 214, 199, 209, 207, 197, 199, 215, 205, 211, 209, 198, 215, 200, 213, 204, 210, 215, 201, 202, 214, 212, 203,
   206, 209, 210, 211, 213, 215, 211, 207, 212, 209, 215, 214, 213, 214, 208, 215, 210, 212, 216, 225, 226, 219, 221, 248, 227, 217,
   229, 220, 247, 223, 228, 230, 218, 246, 222, 224, 219, 231, 249, 225, 248, 251, 232, 220, 250, 227, 253, 247, 221, 251, 233, 248,
   226, 249, 234, 252, 222, 254, 228, 246, 253, 223, 235, 247, 250, 229, 254, 236, 224, 252, 246, 230, 225, 237, 267, 231, 251, 259,
   226, 267, 238, 249, 233, 260, 239, 227, 268, 232, 257, 253, 240, 269, 228, 255, 234, 254, 268, 229, 241, 250, 258, 235, 269, 242,
   230, 256, 252, 236, 231, 243, 270, 237, 259, 263, 243, 232, 271, 239, 265, 257, 233, 272, 244, 260, 238, 261, 244, 273, 234, 266,
   240, 255, 274, 235, 245, 258, 262, 241, 275, 245, 236, 264, 256, 242, 237, 239, 276, 243, 263, 265, 238, 277, 240, 261, 244, 266,
   278, 241, 242, 262, 264, 245, 255, 256, 246, 269, 254, 252, 257, 247, 258, 253, 268, 250, 248, 259, 260, 251, 249, 267, 249, 270,
   261, 267, 260, 272, 271, 250, 262, 268, 274, 258, 251, 263, 272, 259, 267, 270, 273, 264, 252, 275, 269, 256, 265, 253, 274, 257,
   271, 268, 266, 275, 254, 273, 255, 269, 261, 279, 255, 277, 266, 273, 279, 262, 256, 278, 275, 264, 263, 257, 280, 265, 276, 271,
   280, 258, 264, 274, 278, 262, 259, 265, 281, 263, 270, 276, 260, 281, 266, 272, 261, 277, 267, 276, 277, 270, 272, 281, 276, 268,
   278, 271, 280, 274, 277, 278, 269, 279, 273, 275, 270, 271, 279, 276, 281, 280, 272, 280, 273, 281, 277, 279, 281, 274, 275, 280,
   279, 278
}; // 1.93 kb
static const cart_index_t iCartXY_ab10_a3[1200] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 16, 19, 20, 13, 22, 15, 23, 24, 13, 11, 18, 14, 22, 19,
   21, 24, 17, 23, 15, 17, 12, 23, 16, 24, 18, 20, 21, 22, 25, 36, 38, 34, 35, 30, 44, 32, 45, 40, 34, 26,
   39, 28, 43, 36, 37, 45, 33, 41, 35, 37, 27, 43, 29, 44, 31, 38, 39, 42, 30, 28, 42, 36, 44, 34, 43, 40,
   41, 45, 32, 41, 29, 45, 38, 40, 42, 35, 43, 44, 40, 33, 31, 41, 42, 45, 39, 44, 37, 43, 46, 61, 62, 55,
   56, 49, 67, 51, 69, 66, 61, 47, 63, 50, 68, 57, 59, 71, 53, 65, 62, 63, 48, 70, 52, 72, 54, 58, 60, 64,
   55, 50, 70, 57, 73, 61, 68, 69, 65, 71, 56, 68, 52, 73, 58, 67, 64, 62, 70, 72, 49, 57, 72, 61, 67, 55,
   73, 66, 71, 69, 67, 59, 54, 68, 64, 73, 60, 72, 63, 70, 51, 71, 58, 69, 62, 66, 72, 56, 73, 67, 69, 53,
   60, 65, 70, 71, 63, 73, 59, 68, 66, 65, 64, 71, 72, 69, 70, 67, 68, 73, 74, 91, 93, 83, 84, 79, 100, 81,
   102, 95, 89, 75, 94, 77, 98, 85, 86, 103, 82, 96, 90, 92, 76, 99, 78, 101, 80, 87, 88, 97, 79, 89, 105, 91,
   100, 83, 107, 95, 104, 102, 91, 77, 106, 85, 108, 89, 98, 104, 96, 103, 81, 104, 90, 102, 93, 95, 105, 84, 107, 100,
   93, 106, 78, 109, 87, 105, 97, 90, 99, 101, 104, 82, 92, 96, 106, 103, 94, 108, 86, 98, 105, 94, 80, 106, 97, 109,
   88, 101, 92, 99, 83, 85, 109, 89, 107, 91, 108, 102, 103, 104, 84, 108, 87, 107, 90, 100, 101, 93, 109, 105, 107, 86,
   88, 98, 99, 108, 92, 109, 94, 106, 100, 98, 97, 108, 101, 107, 99, 105, 106, 109, 102, 96, 99, 103, 109, 104, 106, 107,
   98, 108, 95, 103, 101, 104, 105, 102, 109, 100, 108, 107, 110, 125, 127, 119, 120, 113, 137, 115, 139, 136, 126, 111, 129, 114,
   138, 121, 123, 141, 117, 135, 128, 130, 112, 140, 116, 142, 118, 122, 124, 134, 131, 114, 146, 121, 150, 126, 138, 145, 135, 141,
   132, 144, 116, 151, 122, 143, 134, 128, 140, 142, 113, 131, 148, 125, 137, 119, 149, 136, 147, 139, 143, 133, 118, 144, 134, 151,
   124, 142, 130, 140, 115, 147, 132, 139, 127, 136, 148, 120, 149, 137, 145, 117, 133, 135, 146, 141, 129, 150, 123, 138, 119, 126,
   153, 131, 149, 125, 152, 139, 145, 147, 120, 152, 128, 149, 132, 137, 143, 127, 153, 148, 125, 121, 154, 126, 152, 131, 150, 147,
   141, 145, 152, 123, 130, 138, 144, 150, 133, 154, 129, 146, 127, 154, 122, 153, 128, 148, 142, 132, 151, 143, 153, 129, 124, 146,
   140, 154, 130, 151, 133, 144, 136, 145, 143, 147, 148, 139, 153, 137, 152, 149, 147, 135, 144, 141, 154, 145, 146, 152, 138, 150,
   148, 146, 134, 154, 142, 153, 140, 143, 144, 151, 149, 138, 140, 150, 151, 152, 144, 153, 146, 154, 137, 150, 142, 152, 143, 149,
   151, 148, 154, 153, 139, 141, 151, 145, 153, 147, 154, 149, 150, 152, 155, 172, 174, 164, 165, 160, 187, 162, 189, 182, 170, 156,
   175, 158, 185, 166, 167, 190, 163, 183, 171, 173, 157, 186, 159, 188, 161, 168, 169, 184, 160, 176, 192, 172, 187, 164, 200, 182,
   191, 189, 178, 158, 195, 166, 201, 170, 185, 193, 183, 190, 162, 191, 177, 189, 174, 182, 192, 165, 200, 187, 180, 196, 159, 202,
   168, 194, 184, 171, 186, 188, 193, 163, 179, 183, 195, 190, 175, 201, 167, 185, 194, 181, 161, 196, 184, 202, 169, 188, 173, 186,
   164, 178, 207, 176, 200, 172, 205, 189, 199, 191, 165, 205, 180, 200, 177, 187, 198, 174, 207, 192, 176, 166, 208, 170, 203, 178,
   201, 199, 190, 193, 177, 206, 168, 204, 171, 198, 188, 180, 202, 194, 203, 167, 181, 185, 197, 201, 179, 208, 175, 195, 204, 179,
   169, 197, 186, 206, 173, 202, 181, 196, 172, 170, 209, 178, 205, 176, 203, 191, 193, 199, 174, 209, 171, 207, 180, 192, 194, 177,
   204, 198, 209, 175, 173, 195, 196, 208, 181, 206, 179, 197, 198, 197, 184, 206, 188, 204, 186, 194, 196, 202, 199, 183, 197, 190,
   208, 193, 195, 203, 185, 201, 182, 199, 198, 191, 192, 189, 207, 187, 205, 200, 187, 203, 194, 205, 198, 200, 204, 192, 209, 207,
   205, 185, 196, 201, 206, 203, 197, 209, 195, 208, 189, 193, 204, 199, 207, 191, 209, 200, 203, 205, 207, 195, 186, 208, 202, 209,
   196, 204, 197, 206, 191, 190, 206, 193, 209, 199, 208, 205, 201, 203, 192, 208, 188, 209, 194, 207, 202, 198, 206, 204, 200, 201,
   202, 203, 204, 205, 206, 207, 208, 209, 210, 225, 227, 219, 220, 213, 243, 215, 245, 242, 226, 211, 229, 214, 244, 221, 223, 247,
   217, 241, 228, 230, 212, 246, 216, 248, 218, 222, 224, 240, 233, 214, 252, 221, 262, 226, 244, 251, 241, 247, 234, 250, 216, 263,
   222, 249, 240, 228, 246, 248, 213, 231, 254, 225, 243, 219, 261, 242, 253, 245, 249, 236, 218, 250, 240, 263, 224, 248, 230, 246,
   215, 253, 232, 245, 227, 242, 254, 220, 261, 243, 251, 217, 235, 241, 252, 247, 229, 262, 223, 244, 219, 237, 266, 231, 261, 225,
   264, 245, 257, 253, 220, 264, 238, 261, 232, 243, 255, 227, 266, 254, 237, 221, 268, 226, 265, 233, 262, 259, 247, 251, 265, 223,
   239, 244, 256, 262, 235, 268, 229, 252, 238, 269, 222, 267, 228, 260, 248, 234, 263, 249, 267, 239, 224, 258, 246, 269, 230, 263,
   236, 250, 231, 226, 274, 233, 270, 237, 265, 257, 251, 259, 232, 273, 228, 271, 234, 255, 249, 238, 267, 260, 225, 233, 275, 237,
   264, 231, 270, 253, 259, 257, 273, 235, 230, 256, 250, 272, 236, 269, 239, 258, 227, 275, 234, 266, 238, 254, 260, 232, 271, 255,
   274, 229, 236, 252, 258, 268, 239, 272, 235, 256, 242, 257, 255, 253, 254, 245, 266, 243, 264, 261, 259, 241, 256, 247, 268, 251,
   252, 265, 244, 262, 260, 258, 240, 269, 248, 267, 246, 249, 250, 263, 270, 244, 258, 262, 272, 265, 256, 274, 252, 268, 271, 256,
   246, 272, 263, 273, 250, 267, 258, 269, 243, 270, 260, 264, 255, 261, 271, 254, 275, 266, 255, 272, 248, 273, 249, 271, 263, 260,
   269, 267, 245, 259, 271, 257, 266, 253, 275, 261, 270, 264, 257, 247, 272, 251, 274, 259, 268, 270, 262, 265, 253, 251, 273, 259,
   275, 257, 274, 264, 265, 270, 254, 274, 249, 275, 260, 266, 267, 255, 273, 271, 275, 252, 250, 268, 269, 274, 258, 273, 256, 272,
   261, 265, 267, 270, 271, 264, 273, 266, 274, 275, 264, 262, 269, 265, 273, 270, 272, 275, 268, 274, 266, 268, 263, 274, 267, 275,
   269, 271, 272, 273
}; // 2.34 kb
static const cart_index_t iCartXY_ab10_a4[1260] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 26, 22, 28, 31, 32, 24, 25,
   33, 34, 35, 30, 20, 16, 21, 24, 18, 30, 32, 23, 29, 26, 34, 27, 33, 31, 35, 22, 23, 17, 30, 31, 25, 19,
   27, 21, 35, 28, 29, 32, 33, 34, 36, 47, 48, 39, 51, 41, 52, 61, 62, 45, 46, 63, 57, 59, 56, 45, 37, 50,
   51, 40, 59, 60, 43, 53, 47, 63, 49, 58, 55, 61, 46, 49, 38, 57, 58, 52, 42, 53, 44, 63, 48, 50, 54, 60,
   62, 39, 40, 54, 45, 47, 56, 62, 55, 60, 51, 57, 58, 63, 61, 59, 41, 55, 42, 56, 61, 46, 48, 58, 54, 59,
   52, 60, 62, 63, 57, 56, 43, 44, 59, 55, 57, 54, 49, 50, 61, 62, 53, 60, 58, 63, 64, 79, 80, 69, 81, 71,
   83, 94, 95, 73, 74, 97, 90, 92, 85, 81, 65, 82, 79, 67, 94, 96, 72, 84, 75, 98, 76, 88, 86, 93, 83, 84,
   66, 95, 96, 80, 68, 82, 70, 99, 77, 78, 87, 89, 91, 73, 67, 89, 81, 75, 92, 99, 86, 96, 79, 97, 88, 98,
   93, 94, 74, 88, 68, 90, 98, 83, 77, 96, 87, 97, 80, 89, 91, 99, 95, 69, 75, 91, 73, 79, 85, 95, 93, 99,
   81, 90, 98, 97, 94, 92, 90, 76, 70, 97, 88, 95, 87, 84, 78, 98, 91, 82, 89, 96, 99, 71, 93, 77, 85, 94,
   74, 80, 98, 91, 92, 83, 99, 95, 97, 90, 92, 72, 78, 94, 86, 97, 89, 76, 82, 93, 99, 84, 96, 88, 98, 85,
   86, 87, 92, 93, 90, 91, 88, 89, 94, 95, 96, 99, 98, 97, 100, 121, 122, 103, 115, 105, 117, 137, 138, 109, 110, 139,
   127, 129, 126, 121, 101, 123, 116, 104, 135, 136, 107, 119, 111, 140, 113, 128, 125, 131, 122, 123, 102, 133, 134, 118, 106, 120,
   108, 141, 112, 114, 124, 130, 132, 103, 116, 133, 109, 121, 126, 138, 135, 143, 115, 127, 142, 139, 137, 129, 115, 104, 134, 121,
   111, 137, 144, 125, 136, 116, 142, 128, 140, 131, 135, 105, 135, 118, 126, 137, 110, 122, 142, 133, 129, 117, 143, 138, 139, 127,
   117, 136, 106, 138, 144, 122, 112, 134, 124, 143, 118, 130, 132, 141, 133, 137, 107, 120, 135, 125, 142, 134, 113, 123, 131, 144,
   119, 136, 128, 140, 138, 119, 108, 143, 136, 133, 124, 123, 114, 144, 132, 120, 130, 134, 141, 109, 111, 141, 115, 116, 129, 143,
   131, 144, 121, 139, 140, 142, 135, 137, 110, 140, 112, 127, 142, 117, 118, 144, 132, 139, 122, 141, 133, 143, 138, 139, 113, 114,
   142, 128, 143, 130, 119, 120, 140, 141, 123, 134, 136, 144, 127, 128, 124, 139, 140, 138, 132, 136, 130, 142, 133, 134, 141, 144,
   143, 129, 125, 130, 137, 131, 139, 141, 128, 134, 135, 143, 136, 144, 140, 142, 126, 131, 132, 129, 135, 127, 133, 140, 141, 137,
   138, 144, 143, 142, 139, 145, 166, 167, 150, 162, 152, 164, 181, 182, 154, 155, 190, 177, 179, 172, 168, 146, 169, 160, 148, 183,
   185, 153, 165, 156, 191, 157, 175, 173, 180, 170, 171, 147, 184, 186, 161, 149, 163, 151, 192, 158, 159, 174, 176, 178, 166, 148,
   187, 168, 156, 189, 198, 173, 185, 160, 193, 175, 191, 180, 183, 167, 187, 149, 188, 196, 170, 158, 186, 174, 194, 161, 176, 178,
   192, 184, 150, 168, 188, 154, 166, 172, 182, 189, 197, 162, 177, 195, 190, 181, 179, 188, 169, 151, 194, 187, 184, 174, 171, 159,
   196, 178, 163, 176, 186, 192, 152, 189, 170, 172, 181, 155, 167, 195, 188, 179, 164, 197, 182, 190, 177, 189, 153, 171, 183, 173,
   193, 187, 157, 169, 180, 198, 165, 185, 175, 191, 154, 160, 194, 162, 168, 179, 197, 183, 199, 166, 190, 193, 195, 189, 181, 155,
   193, 161, 177, 195, 164, 170, 199, 184, 190, 167, 194, 188, 197, 182, 162, 156, 196, 166, 160, 181, 199, 180, 198, 168, 195, 191,
   193, 183, 189, 195, 157, 163, 193, 175, 199, 186, 165, 171, 191, 196, 169, 187, 185, 198, 164, 198, 158, 182, 199, 167, 161, 196,
   178, 197, 170, 192, 184, 194, 188, 197, 165, 159, 199, 185, 194, 176, 169, 163, 198, 192, 171, 186, 187, 196, 172, 183, 184, 179,
   189, 177, 188, 193, 194, 181, 182, 199, 197, 195, 190, 181, 173, 186, 189, 180, 195, 196, 175, 187, 183, 199, 185, 198, 191, 193,
   182, 185, 174, 197, 198, 188, 178, 187, 176, 199, 184, 186, 192, 196, 194, 190, 175, 176, 195, 191, 197, 192, 185, 186, 193, 194,
   187, 196, 198, 199, 177, 191, 178, 190, 193, 182, 184, 198, 192, 195, 188, 196, 194, 199, 197, 179, 180, 192, 181, 183, 190, 194,
   191, 196, 189, 197, 198, 199, 193, 195, 200, 221, 222, 203, 215, 205, 217, 243, 244, 209, 210, 251, 233, 235, 232, 223, 201, 225,
   216, 204, 241, 242, 207, 219, 211, 252, 213, 234, 231, 237, 224, 226, 202, 239, 240, 218, 206, 220, 208, 253, 212, 214, 230, 236,
   238, 203, 227, 245, 209, 221, 232, 244, 247, 256, 215, 233, 254, 251, 243, 235, 227, 204, 246, 223, 211, 249, 258, 231, 242, 216,
   255, 234, 252, 237, 241, 205, 247, 228, 232, 243, 210, 222, 254, 245, 235, 217, 256, 244, 251, 233, 228, 248, 206, 250, 259, 224,
   212, 240, 230, 257, 218, 236, 238, 253, 239, 249, 207, 229, 241, 231, 255, 246, 213, 225, 237, 258, 219, 242, 234, 252, 250, 229,
   208, 257, 248, 239, 230, 226, 214, 259, 238, 220, 236, 240, 253, 209, 223, 261, 215, 227, 235, 256, 249, 265, 221, 251, 260, 254,
   247, 243, 210, 260, 224, 233, 254, 217, 228, 265, 250, 251, 222, 261, 245, 256, 244, 221, 211, 262, 227, 216, 247, 264, 237, 258,
   223, 260, 252, 255, 241, 249, 222, 262, 212, 245, 263, 228, 218, 259, 238, 261, 224, 253, 239, 257, 250, 260, 213, 226, 255, 234,
   264, 248, 219, 229, 252, 262, 225, 246, 242, 258, 261, 225, 214, 263, 246, 257, 236, 229, 220, 262, 253, 226, 240, 248, 259, 215,
   216, 263, 221, 223, 243, 265, 241, 264, 227, 254, 255, 260, 249, 247, 217, 264, 218, 244, 265, 222, 224, 263, 239, 256, 228, 257,
   250, 261, 245, 265, 219, 220, 264, 242, 263, 240, 225, 226, 258, 259, 229, 248, 246, 262, 245, 246, 230, 261, 262, 250, 238, 248,
   236, 263, 239, 240, 253, 259, 257, 247, 231, 248, 249, 237, 260, 262, 234, 246, 241, 264, 242, 258, 252, 255, 232, 249, 250, 235,
   247, 233, 245, 260, 261, 243, 244, 265, 256, 254, 251, 233, 255, 239, 251, 260, 244, 250, 264, 257, 254, 245, 263, 261, 265, 256,
   254, 234, 240, 260, 252, 265, 259, 242, 248, 255, 263, 246, 262, 258, 264, 235, 241, 257, 243, 249, 251, 261, 255, 263, 247, 256,
   264, 265, 260, 254, 256, 242, 236, 265, 258, 261, 253, 246, 240, 264, 257, 248, 259, 262, 263, 243, 237, 259, 247, 241, 254, 263,
   252, 262, 249, 265, 258, 264, 255, 260, 244, 258, 238, 256, 264, 245, 239, 262, 253, 265, 250, 259, 257, 263, 261, 251, 252, 253,
   254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265
}; // 2.46 kb
static const cart_index_t iCartXY_ab10_a5[1176] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 27, 32, 33,
   24, 39, 26, 40, 30, 31, 36, 43, 37, 45, 41, 46, 47, 48, 42, 44, 24, 22, 29, 25, 39, 30, 35, 41, 28, 36,
   42, 32, 34, 47, 38, 44, 40, 45, 43, 48, 46, 26, 28, 23, 40, 27, 41, 29, 31, 34, 44, 37, 46, 38, 33, 35,
   42, 43, 39, 45, 47, 48, 49, 60, 62, 64, 65, 54, 76, 56, 78, 58, 59, 66, 83, 68, 84, 70, 79, 80, 82, 75,
   77, 58, 50, 63, 52, 74, 66, 67, 77, 57, 64, 82, 60, 61, 84, 69, 79, 71, 81, 73, 83, 78, 59, 61, 51, 73,
   53, 75, 55, 68, 69, 82, 65, 83, 67, 62, 63, 80, 81, 72, 74, 76, 84, 54, 52, 72, 60, 76, 58, 74, 70, 71,
   66, 75, 64, 73, 80, 81, 77, 78, 84, 83, 82, 79, 56, 71, 53, 78, 62, 70, 72, 59, 73, 77, 68, 79, 81, 65,
   74, 75, 83, 76, 84, 80, 82, 70, 57, 55, 71, 72, 77, 63, 75, 61, 79, 80, 78, 69, 76, 67, 82, 73, 74, 81,
   84, 83, 85, 101, 103, 106, 107, 88, 118, 90, 120, 94, 95, 100, 127, 102, 128, 111, 122, 123, 124, 112, 114, 100, 86, 105,
   89, 119, 106, 108, 122, 92, 101, 127, 96, 98, 129, 104, 120, 110, 121, 113, 125, 116, 102, 104, 87, 121, 91, 123, 93, 107,
   108, 128, 103, 129, 105, 97, 99, 118, 119, 109, 115, 117, 126, 94, 89, 115, 96, 126, 100, 119, 114, 110, 106, 124, 101, 113,
   128, 121, 122, 116, 129, 125, 127, 120, 95, 113, 91, 125, 97, 112, 109, 102, 121, 124, 107, 127, 119, 103, 115, 123, 129, 117,
   126, 118, 128, 88, 96, 117, 101, 118, 94, 126, 111, 116, 100, 112, 106, 125, 123, 129, 114, 120, 128, 127, 124, 122, 112, 98,
   93, 113, 109, 124, 99, 123, 104, 127, 118, 125, 108, 117, 105, 128, 121, 115, 119, 126, 129, 90, 116, 97, 120, 103, 111, 117,
   95, 125, 114, 102, 122, 129, 107, 126, 112, 127, 118, 128, 123, 124, 114, 92, 99, 110, 115, 122, 105, 124, 98, 120, 128, 116,
   104, 126, 108, 127, 113, 119, 121, 129, 125, 111, 110, 109, 116, 117, 114, 115, 112, 113, 122, 123, 120, 121, 118, 119, 124, 125,
   126, 129, 128, 127, 130, 153, 155, 151, 152, 135, 173, 137, 174, 139, 140, 147, 180, 149, 182, 157, 166, 167, 175, 162, 164, 151,
   131, 156, 133, 172, 153, 154, 174, 138, 145, 178, 141, 142, 183, 150, 168, 158, 170, 160, 176, 165, 152, 154, 132, 172, 134, 173,
   136, 155, 156, 179, 146, 181, 148, 143, 144, 169, 171, 159, 161, 163, 177, 135, 145, 169, 153, 173, 139, 179, 157, 168, 147, 162,
   151, 178, 167, 184, 164, 174, 182, 180, 175, 166, 147, 133, 171, 141, 181, 151, 172, 166, 158, 153, 180, 145, 160, 184, 170, 174,
   165, 183, 176, 178, 168, 137, 168, 146, 174, 155, 157, 169, 140, 178, 164, 149, 166, 184, 152, 179, 162, 180, 173, 182, 167, 175,
   149, 170, 134, 183, 143, 167, 159, 152, 172, 182, 155, 184, 171, 146, 161, 173, 181, 163, 177, 169, 179, 166, 138, 148, 158, 171,
   174, 156, 180, 142, 168, 184, 165, 150, 181, 154, 178, 160, 172, 170, 183, 176, 167, 150, 136, 170, 159, 182, 144, 173, 154, 184,
   169, 183, 156, 163, 148, 179, 172, 161, 171, 177, 181, 139, 141, 177, 145, 179, 147, 181, 164, 165, 151, 175, 153, 176, 182, 183,
   166, 168, 184, 178, 180, 174, 140, 176, 143, 178, 146, 162, 163, 149, 183, 175, 152, 180, 181, 155, 177, 167, 184, 169, 179, 173,
   182, 175, 142, 144, 160, 161, 180, 148, 182, 150, 178, 179, 176, 154, 177, 156, 184, 170, 171, 172, 181, 183, 162, 160, 159, 176,
   163, 175, 161, 167, 170, 180, 173, 178, 172, 169, 171, 182, 183, 177, 181, 179, 184, 164, 158, 161, 165, 177, 166, 171, 175, 160,
   174, 182, 168, 170, 179, 172, 180, 176, 181, 183, 184, 178, 157, 165, 163, 168, 169, 164, 177, 162, 176, 166, 167, 174, 183, 173,
   181, 175, 178, 179, 184, 182, 180, 185, 212, 213, 206, 207, 188, 230, 190, 232, 194, 195, 200, 239, 202, 241, 217, 228, 229, 236,
   218, 220, 212, 186, 214, 189, 231, 208, 210, 234, 192, 201, 240, 196, 198, 243, 204, 226, 216, 227, 219, 237, 222, 213, 214, 187,
   233, 191, 235, 193, 209, 211, 242, 203, 244, 205, 197, 199, 224, 225, 215, 221, 223, 238, 206, 189, 233, 196, 247, 212, 231, 232,
   216, 208, 245, 201, 219, 249, 227, 234, 222, 243, 237, 240, 226, 207, 231, 191, 247, 197, 230, 215, 213, 233, 246, 209, 248, 225,
   203, 221, 235, 244, 223, 238, 224, 242, 188, 208, 235, 212, 230, 194, 246, 217, 234, 200, 218, 206, 245, 229, 250, 220, 232, 241,
   239, 236, 228, 230, 210, 193, 231, 215, 246, 199, 235, 214, 248, 224, 247, 211, 223, 205, 242, 233, 221, 225, 238, 244, 190, 234,
   209, 232, 213, 217, 235, 195, 245, 220, 202, 228, 250, 207, 246, 218, 239, 230, 241, 229, 236, 232, 192, 211, 216, 233, 234, 214,
   245, 198, 226, 249, 222, 204, 247, 210, 240, 219, 231, 227, 243, 237, 194, 201, 242, 208, 246, 200, 248, 220, 226, 206, 236, 212,
   240, 241, 249, 228, 234, 250, 245, 239, 232, 195, 240, 203, 245, 209, 218, 224, 202, 249, 236, 207, 239, 248, 213, 242, 229, 250,
   235, 246, 230, 241, 200, 196, 244, 201, 248, 206, 247, 228, 222, 212, 239, 208, 237, 250, 243, 232, 226, 249, 240, 245, 234, 239,
   198, 205, 219, 225, 245, 211, 250, 204, 240, 248, 237, 210, 244, 214, 249, 227, 233, 231, 247, 243, 202, 243, 197, 249, 203, 229,
   223, 207, 247, 241, 213, 250, 244, 209, 238, 230, 248, 224, 242, 235, 246, 241, 204, 199, 227, 221, 250, 205, 246, 210, 249, 242,
   243, 214, 238, 211, 248, 231, 225, 233, 244, 247, 217, 226, 224, 234, 235, 220, 242, 218, 240, 228, 229, 232, 249, 230, 248, 236,
   245, 246, 250, 241, 239, 228, 216, 225, 222, 244, 232, 233, 239, 219, 234, 250, 226, 227, 248, 231, 245, 237, 247, 243, 249, 240,
   229, 227, 215, 243, 223, 241, 221, 230, 231, 250, 235, 249, 233, 224, 225, 246, 247, 238, 244, 242, 248, 236, 219, 221, 237, 238,
   239, 225, 241, 227, 245, 246, 240, 231, 242, 233, 250, 243, 244, 247, 248, 249, 218, 237, 223, 240, 224, 236, 238, 229, 243, 239,
   230, 245, 247, 235, 244, 241, 249, 242, 248, 246, 250, 220, 222, 238, 226, 242, 228, 244, 236, 237, 232, 241, 234, 243, 246, 247,
   239, 240, 248, 249, 250, 245
}; // 2.30 kb
static const cart_index_t iCartXY_ab10_a6[980] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
   26, 27, 28, 31, 32, 33, 39, 35, 41, 50, 51, 37, 38, 43, 44, 52, 53, 45, 47, 60, 55, 57, 49, 54, 62, 56,
   63, 58, 59, 61, 33, 29, 34, 37, 31, 49, 51, 36, 42, 45, 54, 39, 55, 40, 46, 43, 59, 48, 53, 50, 56, 61,
   52, 58, 60, 57, 63, 62, 35, 36, 30, 49, 50, 38, 32, 40, 34, 56, 47, 57, 41, 48, 42, 58, 44, 46, 51, 52,
   54, 59, 60, 61, 53, 62, 55, 63, 64, 75, 76, 67, 80, 69, 82, 95, 96, 73, 74, 85, 86, 104, 105, 79, 81, 108,
   97, 99, 90, 91, 106, 93, 107, 101, 102, 103, 73, 65, 78, 79, 68, 93, 94, 71, 84, 85, 103, 75, 105, 77, 87, 80,
   107, 83, 98, 89, 101, 106, 92, 99, 100, 95, 108, 104, 74, 77, 66, 91, 92, 81, 70, 83, 72, 103, 86, 104, 76, 87,
   78, 106, 82, 84, 88, 100, 102, 97, 98, 107, 94, 108, 96, 105, 67, 68, 88, 73, 75, 90, 96, 89, 94, 79, 91, 80,
   97, 92, 98, 85, 102, 100, 105, 95, 93, 103, 104, 101, 108, 99, 107, 106, 69, 89, 70, 90, 95, 74, 76, 92, 88, 93,
   81, 99, 82, 100, 94, 101, 86, 98, 96, 104, 91, 102, 108, 103, 105, 106, 97, 107, 90, 71, 72, 93, 89, 91, 88, 77,
   78, 101, 102, 95, 96, 83, 84, 99, 97, 87, 94, 92, 103, 107, 100, 106, 98, 104, 105, 108, 109, 124, 125, 114, 132, 116,
   134, 147, 148, 118, 119, 130, 131, 157, 158, 126, 128, 163, 152, 153, 136, 141, 159, 143, 161, 145, 146, 154, 126, 110, 127, 130,
   112, 145, 150, 117, 135, 132, 159, 120, 160, 121, 133, 124, 163, 129, 151, 137, 153, 157, 139, 147, 149, 144, 162, 155, 128, 129,
   111, 146, 149, 131, 113, 133, 115, 161, 134, 162, 122, 135, 123, 163, 125, 127, 138, 151, 152, 148, 150, 158, 140, 160, 142, 156,
   118, 112, 140, 126, 120, 143, 156, 137, 150, 130, 154, 124, 158, 139, 151, 132, 161, 149, 160, 144, 145, 159, 155, 153, 162, 147,
   163, 157, 119, 139, 113, 141, 155, 128, 122, 149, 138, 154, 131, 157, 125, 151, 140, 159, 134, 150, 142, 162, 146, 152, 160, 161,
   156, 163, 148, 158, 114, 120, 142, 118, 124, 136, 148, 144, 156, 126, 141, 132, 152, 155, 160, 130, 146, 162, 158, 147, 143, 154,
   157, 145, 163, 153, 161, 159, 141, 121, 115, 154, 139, 146, 138, 129, 123, 159, 152, 155, 142, 133, 127, 157, 148, 135, 140, 149,
   161, 158, 151, 163, 150, 162, 156, 160, 116, 144, 122, 136, 147, 119, 125, 155, 142, 143, 128, 153, 134, 162, 156, 145, 131, 160,
   148, 157, 141, 146, 163, 154, 158, 159, 152, 161, 143, 117, 123, 145, 137, 154, 140, 121, 127, 153, 161, 144, 156, 129, 135, 147,
   158, 133, 150, 139, 159, 163, 149, 157, 151, 155, 160, 162, 136, 137, 138, 143, 144, 141, 142, 139, 140, 145, 146, 147, 148, 149,
   150, 153, 152, 151, 156, 155, 154, 161, 162, 159, 160, 157, 158, 163, 164, 187, 188, 167, 191, 169, 192, 213, 214, 173, 174, 185,
   186, 224, 225, 179, 181, 229, 209, 211, 196, 197, 218, 199, 220, 207, 208, 215, 185, 165, 190, 191, 168, 211, 212, 171, 193, 187,
   224, 175, 226, 177, 189, 180, 228, 183, 210, 195, 213, 219, 198, 205, 206, 201, 222, 216, 186, 189, 166, 209, 210, 192, 170, 193,
   172, 225, 188, 226, 176, 190, 178, 227, 182, 184, 194, 212, 214, 203, 204, 221, 200, 223, 202, 217, 167, 180, 203, 173, 187, 196,
   214, 205, 221, 179, 197, 191, 209, 219, 227, 185, 208, 228, 225, 213, 199, 215, 224, 207, 229, 211, 220, 218, 179, 168, 204, 185,
   175, 207, 223, 195, 212, 191, 218, 180, 227, 198, 210, 187, 229, 206, 226, 201, 211, 224, 216, 213, 222, 205, 228, 219, 169, 205,
   182, 196, 213, 174, 188, 219, 203, 199, 181, 211, 192, 228, 221, 207, 186, 227, 214, 224, 197, 208, 229, 215, 225, 218, 209, 220,
   181, 206, 170, 208, 222, 186, 176, 210, 194, 220, 192, 228, 182, 212, 200, 229, 188, 204, 202, 226, 209, 214, 223, 225, 217, 227,
   203, 221, 207, 171, 184, 211, 195, 218, 204, 177, 190, 213, 229, 201, 223, 183, 193, 205, 227, 189, 212, 198, 224, 228, 206, 219,
   210, 216, 226, 222, 208, 183, 172, 220, 206, 209, 194, 189, 178, 229, 214, 222, 202, 193, 184, 228, 203, 190, 200, 210, 225, 221,
   212, 227, 204, 226, 217, 223, 173, 175, 217, 179, 180, 199, 221, 201, 223, 185, 215, 187, 225, 216, 226, 191, 220, 222, 227, 205,
   207, 218, 219, 211, 228, 213, 229, 224, 174, 216, 176, 197, 219, 181, 182, 222, 202, 215, 186, 224, 188, 226, 217, 218, 192, 223,
   203, 228, 208, 209, 227, 220, 221, 229, 214, 225, 215, 177, 178, 218, 198, 220, 200, 183, 184, 224, 225, 216, 217, 189, 190, 219,
   221, 193, 204, 206, 229, 227, 210, 228, 212, 222, 223, 226, 197, 198, 194, 215, 216, 208, 202, 206, 200, 218, 209, 219, 203, 210,
   204, 224, 214, 212, 217, 222, 220, 225, 226, 229, 223, 228, 221, 227, 199, 195, 200, 207, 201, 215, 217, 198, 204, 211, 220, 205,
   221, 206, 212, 213, 225, 210, 223, 216, 218, 229, 222, 224, 226, 219, 227, 228, 196, 201, 202, 199, 205, 197, 203, 216, 217, 207,
   208, 213, 214, 222, 223, 211, 209, 226, 221, 219, 215, 220, 228, 218, 227, 224, 225, 229
}; // 1.91 kb
static const cart_index_t iCartXY_ab11_a0[364] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
   52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
   78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
   104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
   130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
   156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
   182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
   208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
   234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259,
   260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
   286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311,
   312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337,
   338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363
}; // 0.71 kb
static const cart_index_t iCartXY_ab11_a1[858] = {
   0, 1, 2, 3, 6, 7, 6, 4, 8, 7, 8, 5, 9, 14, 16, 12, 10, 17, 13, 15, 11, 14, 12, 18, 16, 18,
   13, 18, 17, 15, 19, 22, 24, 23, 20, 26, 25, 27, 21, 28, 23, 32, 29, 31, 25, 22, 28, 33, 31, 30, 27, 24,
   33, 29, 32, 26, 30, 33, 32, 31, 34, 39, 41, 37, 35, 42, 38, 40, 36, 39, 43, 49, 45, 37, 50, 41, 49, 44,
   47, 51, 38, 50, 42, 46, 51, 48, 40, 43, 45, 54, 44, 53, 47, 52, 46, 48, 53, 52, 51, 54, 50, 52, 49, 54,
   53, 55, 58, 60, 59, 56, 62, 61, 63, 57, 66, 59, 74, 67, 73, 61, 58, 64, 75, 73, 69, 63, 60, 75, 65, 74,
   62, 68, 64, 70, 78, 65, 76, 71, 70, 66, 80, 77, 68, 72, 71, 81, 67, 79, 72, 69, 75, 78, 76, 80, 74, 77,
   81, 79, 73, 82, 77, 79, 76, 82, 81, 78, 80, 82, 83, 88, 90, 86, 84, 91, 87, 89, 85, 88, 92, 104, 94, 86,
   105, 90, 104, 93, 96, 106, 87, 105, 91, 95, 106, 97, 89, 92, 100, 111, 93, 109, 102, 98, 94, 112, 99, 110, 96, 107,
   95, 103, 108, 101, 97, 100, 98, 113, 102, 114, 99, 115, 103, 101, 110, 108, 106, 112, 105, 107, 104, 111, 109, 109, 116, 114,
   117, 107, 115, 111, 113, 116, 118, 115, 108, 113, 112, 117, 114, 118, 110, 116, 117, 118, 119, 122, 124, 123, 120, 126, 125, 127,
   121, 130, 123, 144, 131, 143, 125, 122, 128, 145, 143, 133, 127, 124, 145, 129, 144, 126, 132, 128, 134, 148, 129, 146, 136, 135,
   130, 150, 147, 132, 138, 137, 151, 131, 149, 139, 133, 140, 135, 154, 141, 152, 137, 134, 140, 156, 153, 142, 139, 136, 157, 141,
   155, 138, 142, 145, 148, 146, 150, 144, 147, 151, 149, 143, 159, 147, 155, 160, 153, 149, 146, 158, 157, 152, 160, 151, 148, 156,
   158, 154, 150, 159, 156, 154, 161, 157, 162, 152, 163, 155, 153, 158, 161, 162, 161, 159, 163, 162, 163, 160, 164, 169, 171, 167,
   165, 172, 168, 170, 166, 169, 173, 191, 175, 167, 192, 171, 191, 174, 177, 193, 168, 192, 172, 176, 193, 178, 170, 173, 181, 198,
   174, 196, 183, 179, 175, 199, 180, 197, 177, 194, 176, 184, 195, 182, 178, 181, 185, 200, 187, 179, 202, 183, 201, 186, 189, 203,
   180, 204, 184, 188, 205, 190, 182, 185, 187, 208, 186, 207, 189, 206, 188, 190, 197, 195, 193, 199, 192, 194, 191, 198, 196, 196,
   209, 201, 210, 194, 204, 198, 200, 209, 211, 205, 195, 202, 199, 210, 203, 211, 197, 207, 213, 203, 215, 206, 205, 208, 202, 212,
   217, 204, 206, 200, 208, 214, 201, 216, 207, 209, 214, 216, 212, 210, 217, 213, 215, 211, 214, 212, 218, 216, 218, 213, 218, 217,
   215, 219, 222, 224, 223, 220, 226, 225, 227, 221, 230, 223, 250, 231, 249, 225, 222, 228, 251, 249, 233, 227, 224, 251, 229, 250,
   226, 232, 228, 234, 254, 229, 252, 236, 235, 230, 256, 253, 232, 238, 237, 257, 231, 255, 239, 233, 242, 235, 260, 243, 258, 237,
   234, 240, 262, 259, 245, 239, 236, 263, 241, 261, 238, 244, 240, 246, 266, 241, 264, 247, 246, 242, 268, 265, 244, 248, 247, 269,
   243, 267, 248, 245, 251, 254, 252, 256, 250, 253, 257, 255, 249, 271, 253, 261, 272, 259, 255, 252, 270, 263, 258, 272, 257, 254,
   262, 270, 260, 256, 271, 262, 266, 273, 263, 275, 264, 268, 260, 274, 269, 276, 258, 277, 261, 265, 278, 267, 259, 281, 265, 267,
   264, 280, 269, 266, 268, 279, 270, 273, 275, 274, 271, 277, 276, 278, 272, 279, 274, 283, 280, 282, 276, 273, 279, 284, 282, 281,
   278, 275, 284, 280, 283, 277, 281, 284, 283, 282, 285, 290, 292, 288, 286, 293, 289, 291, 287, 290, 294, 318, 296, 288, 319, 292,
   318, 295, 298, 320, 289, 319, 293, 297, 320, 299, 291, 294, 302, 325, 295, 323, 304, 300, 296, 326, 301, 324, 298, 321, 297, 305,
   322, 303, 299, 302, 306, 327, 308, 300, 329, 304, 328, 307, 310, 330, 301, 331, 305, 309, 332, 311, 303, 306, 314, 337, 307, 335,
   316, 312, 308, 338, 313, 336, 310, 333, 309, 317, 334, 315, 311, 314, 312, 339, 316, 340, 313, 341, 317, 315, 324, 322, 320, 326,
   319, 321, 318, 325, 323, 323, 342, 328, 343, 321, 331, 325, 327, 342, 344, 332, 322, 329, 326, 343, 330, 344, 324, 336, 346, 330,
   348, 334, 332, 338, 329, 345, 350, 331, 333, 327, 337, 347, 328, 349, 335, 335, 352, 340, 354, 333, 341, 337, 339, 351, 356, 341,
   334, 339, 338, 353, 340, 355, 336, 342, 347, 349, 345, 343, 350, 346, 348, 344, 347, 351, 357, 353, 345, 358, 349, 357, 352, 355,
   359, 346, 358, 350, 354, 359, 356, 348, 351, 353, 362, 352, 361, 355, 360, 354, 356, 361, 360, 359, 362, 358, 360, 357, 362, 361
}; // 1.68 kb
static const cart_index_t iCartXY_ab11_a2[1320] = {
   0, 1, 2, 3, 4, 5, 6, 9, 10, 11, 13, 15, 11, 7, 12, 9, 15, 14, 13, 14, 8, 15, 10, 12, 16, 25,
   26, 19, 21, 30, 25, 17, 27, 20, 29, 23, 26, 27, 18, 28, 22, 24, 19, 20, 28, 25, 30, 29, 21, 29, 22, 30,
   26, 28, 30, 23, 24, 29, 28, 27, 31, 40, 41, 36, 38, 46, 42, 32, 43, 34, 47, 39, 44, 45, 33, 48, 35, 37,
   40, 34, 49, 42, 51, 47, 41, 49, 35, 50, 44, 48, 36, 42, 50, 40, 46, 51, 50, 43, 37, 49, 48, 45, 38, 51,
   44, 46, 41, 50, 51, 39, 45, 47, 49, 43, 46, 47, 48, 51, 50, 49, 52, 61, 62, 55, 57, 72, 63, 53, 65, 56,
   71, 59, 64, 66, 54, 70, 58, 60, 55, 67, 73, 61, 72, 75, 67, 56, 74, 63, 77, 71, 57, 75, 68, 72, 62, 73,
   68, 76, 58, 78, 64, 70, 77, 59, 69, 71, 74, 65, 78, 69, 60, 76, 70, 66, 61, 63, 79, 67, 75, 77, 62, 79,
   64, 73, 68, 78, 79, 65, 66, 74, 76, 69, 73, 74, 70, 79, 78, 76, 75, 71, 76, 77, 79, 74, 72, 77, 78, 75,
   73, 79, 80, 89, 90, 85, 87, 101, 91, 81, 92, 83, 102, 88, 93, 94, 82, 103, 84, 86, 95, 83, 104, 91, 109, 102,
   96, 105, 84, 107, 93, 103, 85, 97, 106, 89, 101, 108, 107, 98, 86, 105, 103, 94, 87, 108, 99, 101, 90, 106, 109, 88,
   100, 102, 104, 92, 89, 95, 113, 97, 108, 110, 90, 113, 96, 106, 99, 111, 97, 91, 114, 95, 110, 109, 114, 92, 98, 104,
   112, 100, 99, 115, 93, 111, 96, 107, 115, 100, 94, 112, 105, 98, 101, 110, 111, 108, 106, 113, 110, 102, 112, 109, 114, 104,
   111, 112, 103, 115, 107, 105, 113, 104, 105, 114, 115, 112, 106, 114, 107, 113, 111, 115, 108, 109, 115, 110, 113, 114, 116, 125,
   126, 119, 121, 142, 127, 117, 129, 120, 141, 123, 128, 130, 118, 140, 122, 124, 119, 131, 143, 125, 142, 145, 132, 120, 144, 127,
   147, 141, 121, 145, 133, 142, 126, 143, 134, 146, 122, 148, 128, 140, 147, 123, 135, 141, 144, 129, 148, 136, 124, 146, 140, 130,
   125, 137, 155, 131, 145, 153, 126, 155, 138, 143, 133, 154, 137, 127, 156, 132, 151, 147, 138, 157, 128, 149, 134, 148, 156, 129,
   139, 144, 152, 135, 157, 139, 130, 150, 146, 136, 131, 132, 158, 137, 153, 151, 133, 159, 134, 154, 138, 149, 160, 135, 136, 152,
   150, 139, 149, 150, 140, 157, 148, 146, 151, 141, 152, 147, 156, 144, 142, 153, 154, 145, 143, 155, 143, 158, 149, 155, 154, 159,
   158, 144, 150, 156, 160, 152, 145, 151, 159, 153, 155, 158, 159, 152, 146, 160, 157, 150, 153, 147, 160, 151, 158, 156, 154, 160,
   148, 159, 149, 157, 155, 156, 157, 158, 159, 160, 161, 170, 171, 166, 168, 188, 172, 162, 173, 164, 189, 169, 174, 175, 163, 190,
   165, 167, 176, 164, 191, 172, 196, 189, 177, 192, 165, 194, 174, 190, 166, 178, 193, 170, 188, 195, 194, 179, 167, 192, 190, 175,
   168, 195, 180, 188, 171, 193, 196, 169, 181, 189, 191, 173, 170, 182, 206, 178, 195, 197, 171, 206, 183, 193, 180, 198, 184, 172,
   207, 176, 199, 196, 207, 173, 185, 191, 201, 181, 186, 208, 174, 200, 177, 194, 208, 187, 175, 202, 192, 179, 182, 176, 209, 184,
   205, 199, 183, 210, 177, 204, 186, 200, 178, 184, 211, 182, 197, 205, 212, 185, 179, 203, 202, 187, 180, 213, 186, 198, 183, 204,
   214, 181, 187, 201, 203, 185, 188, 197, 198, 195, 193, 206, 199, 189, 201, 196, 207, 191, 200, 202, 190, 208, 194, 192, 209, 191,
   203, 207, 214, 201, 210, 203, 192, 212, 208, 202, 193, 211, 204, 206, 198, 213, 204, 212, 194, 210, 200, 208, 195, 205, 213, 197,
   206, 211, 205, 196, 214, 199, 209, 207, 197, 199, 215, 205, 211, 209, 198, 215, 200, 213, 204, 210, 215, 201, 202, 214, 212, 203,
   206, 209, 210, 211, 213, 215, 211, 207, 212, 209, 215, 214, 213, 214, 208, 215, 210, 212, 216, 225, 226, 219, 221, 248, 227, 217,
   229, 220, 247, 223, 228, 230, 218, 246, 222, 224, 219, 231, 249, 225, 248, 251, 232, 220, 250, 227, 253, 247, 221, 251, 233, 248,
   226, 249, 234, 252, 222, 254, 228, 246, 253, 223, 235, 247, 250, 229, 254, 236, 224, 252, 246, 230, 225, 237, 267, 231, 251, 259,
   226, 267, 238, 249, 233, 260, 239, 227, 268, 232, 257, 253, 240, 269, 228, 255, 234, 254, 268, 229, 241, 250, 258, 235, 269, 242,
   230, 256, 252, 236, 231, 243, 270, 237, 259, 263, 243, 232, 271, 239, 265, 257, 233, 272, 244, 260, 238, 261, 244, 273, 234, 266,
   240, 255, 274, 235, 245, 258, 262, 241, 275, 245, 236, 264, 256, 242, 237, 239, 276, 243, 263, 265, 238, 277, 240, 261, 244, 266,
   278, 241, 242, 262, 264, 245, 255, 256, 246, 269, 254, 252, 257, 247, 258, 253, 268, 250, 248, 259, 260, 251, 249, 267, 249, 270,
   261, 267, 260, 272, 271, 250, 262, 268, 274, 258, 251, 263, 272, 259, 267, 270, 273, 264, 252, 275, 269, 256, 265, 253, 274, 257,
   271, 268, 266, 275, 254, 273, 255, 269, 261, 279, 255, 277, 266, 273, 279, 262, 256, 278, 275, 264, 263, 257, 280, 265, 276, 271,
   280, 258, 264, 274, 278, 262, 259, 265, 281, 263, 270, 276, 260, 281, 266, 272, 261, 277, 267, 276, 277, 270, 272, 281, 276, 268,
   278, 271, 280, 274, 277, 278, 269, 279, 273, 275, 270, 271, 279, 276, 281, 280, 272, 280, 273, 281, 277, 279, 281, 274, 275, 280,
   279, 278, 282, 291, 292, 287, 289, 315, 293, 283, 294, 285, 316, 290, 295, 296, 284, 317, 286, 288, 297, 285, 318, 293, 323, 316,
   298, 319, 286, 321, 295, 317, 287, 299, 320, 291, 315, 322, 321, 300, 288, 319, 317, 296, 289, 322, 301, 315, 292, 320, 323, 290,
   302, 316, 318, 294, 291, 303, 339, 299, 322, 324, 292, 339, 304, 320, 301, 325, 305, 293, 340, 297, 326, 323, 340, 294, 306, 318,
   328, 302, 307, 341, 295, 327, 298, 321, 341, 308, 296, 329, 319, 300, 309, 297, 342, 305, 335, 326, 310, 343, 298, 333, 307, 327,
   299, 311, 344, 303, 324, 334, 345, 312, 300, 331, 329, 308, 301, 346, 313, 325, 304, 332, 347, 302, 314, 328, 330, 306, 303, 309,
   348, 311, 334, 336, 304, 349, 310, 332, 313, 337, 311, 305, 350, 309, 336, 335, 351, 306, 312, 330, 338, 314, 313, 352, 307, 337,
   310, 333, 353, 314, 308, 338, 331, 312, 315, 324, 325, 322, 320, 339, 326, 316, 328, 323, 340, 318, 327, 329, 317, 341, 321, 319,
   342, 318, 330, 340, 347, 328, 343, 331, 319, 345, 341, 329, 320, 344, 332, 339, 325, 346, 333, 345, 321, 343, 327, 341, 322, 334,
   346, 324, 339, 344, 335, 323, 347, 326, 342, 340, 324, 336, 354, 334, 344, 348, 325, 354, 337, 346, 332, 349, 336, 326, 355, 335,
   350, 342, 337, 356, 327, 352, 333, 343, 355, 328, 338, 347, 351, 330, 356, 338, 329, 353, 345, 331, 357, 330, 331, 351, 353, 338,
   332, 358, 333, 349, 337, 352, 334, 335, 359, 336, 348, 350, 339, 348, 349, 344, 346, 354, 350, 340, 351, 342, 355, 347, 352, 353,
   341, 356, 343, 345, 348, 342, 357, 350, 359, 355, 349, 357, 343, 358, 352, 356, 344, 350, 358, 348, 354, 359, 358, 351, 345, 357,
   356, 353, 346, 359, 352, 354, 349, 358, 359, 347, 353, 355, 357, 351, 354, 355, 356, 359, 358, 357
}; // 2.58 kb
static const cart_index_t iCartXY_ab11_a3[1650] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 16, 19, 20, 13, 22, 15, 23, 24, 13, 11, 18, 14, 22, 19,
   21, 24, 17, 23, 15, 17, 12, 23, 16, 24, 18, 20, 21, 22, 25, 36, 38, 34, 35, 30, 44, 32, 45, 40, 34, 26,
   39, 28, 43, 36, 37, 45, 33, 41, 35, 37, 27, 43, 29, 44, 31, 38, 39, 42, 30, 28, 42, 36, 44, 34, 43, 40,
   41, 45, 32, 41, 29, 45, 38, 40, 42, 35, 43, 44, 40, 33, 31, 41, 42, 45, 39, 44, 37, 43, 46, 61, 62, 55,
   56, 49, 67, 51, 69, 66, 61, 47, 63, 50, 68, 57, 59, 71, 53, 65, 62, 63, 48, 70, 52, 72, 54, 58, 60, 64,
   55, 50, 70, 57, 73, 61, 68, 69, 65, 71, 56, 68, 52, 73, 58, 67, 64, 62, 70, 72, 49, 57, 72, 61, 67, 55,
   73, 66, 71, 69, 67, 59, 54, 68, 64, 73, 60, 72, 63, 70, 51, 71, 58, 69, 62, 66, 72, 56, 73, 67, 69, 53,
   60, 65, 70, 71, 63, 73, 59, 68, 66, 65, 64, 71, 72, 69, 70, 67, 68, 73, 74, 91, 93, 83, 84, 79, 100, 81,
   102, 95, 89, 75, 94, 77, 98, 85, 86, 103, 82, 96, 90, 92, 76, 99, 78, 101, 80, 87, 88, 97, 79, 89, 105, 91,
   100, 83, 107, 95, 104, 102, 91, 77, 106, 85, 108, 89, 98, 104, 96, 103, 81, 104, 90, 102, 93, 95, 105, 84, 107, 100,
   93, 106, 78, 109, 87, 105, 97, 90, 99, 101, 104, 82, 92, 96, 106, 103, 94, 108, 86, 98, 105, 94, 80, 106, 97, 109,
   88, 101, 92, 99, 83, 85, 109, 89, 107, 91, 108, 102, 103, 104, 84, 108, 87, 107, 90, 100, 101, 93, 109, 105, 107, 86,
   88, 98, 99, 108, 92, 109, 94, 106, 100, 98, 97, 108, 101, 107, 99, 105, 106, 109, 102, 96, 99, 103, 109, 104, 106, 107,
   98, 108, 95, 103, 101, 104, 105, 102, 109, 100, 108, 107, 110, 125, 127, 119, 120, 113, 137, 115, 139, 136, 126, 111, 129, 114,
   138, 121, 123, 141, 117, 135, 128, 130, 112, 140, 116, 142, 118, 122, 124, 134, 131, 114, 146, 121, 150, 126, 138, 145, 135, 141,
   132, 144, 116, 151, 122, 143, 134, 128, 140, 142, 113, 131, 148, 125, 137, 119, 149, 136, 147, 139, 143, 133, 118, 144, 134, 151,
   124, 142, 130, 140, 115, 147, 132, 139, 127, 136, 148, 120, 149, 137, 145, 117, 133, 135, 146, 141, 129, 150, 123, 138, 119, 126,
   153, 131, 149, 125, 152, 139, 145, 147, 120, 152, 128, 149, 132, 137, 143, 127, 153, 148, 125, 121, 154, 126, 152, 131, 150, 147,
   141, 145, 152, 123, 130, 138, 144, 150, 133, 154, 129, 146, 127, 154, 122, 153, 128, 148, 142, 132, 151, 143, 153, 129, 124, 146,
   140, 154, 130, 151, 133, 144, 136, 145, 143, 147, 148, 139, 153, 137, 152, 149, 147, 135, 144, 141, 154, 145, 146, 152, 138, 150,
   148, 146, 134, 154, 142, 153, 140, 143, 144, 151, 149, 138, 140, 150, 151, 152, 144, 153, 146, 154, 137, 150, 142, 152, 143, 149,
   151, 148, 154, 153, 139, 141, 151, 145, 153, 147, 154, 149, 150, 152, 155, 172, 174, 164, 165, 160, 187, 162, 189, 182, 170, 156,
   175, 158, 185, 166, 167, 190, 163, 183, 171, 173, 157, 186, 159, 188, 161, 168, 169, 184, 160, 176, 192, 172, 187, 164, 200, 182,
   191, 189, 178, 158, 195, 166, 201, 170, 185, 193, 183, 190, 162, 191, 177, 189, 174, 182, 192, 165, 200, 187, 180, 196, 159, 202,
   168, 194, 184, 171, 186, 188, 193, 163, 179, 183, 195, 190, 175, 201, 167, 185, 194, 181, 161, 196, 184, 202, 169, 188, 173, 186,
   164, 178, 207, 176, 200, 172, 205, 189, 199, 191, 165, 205, 180, 200, 177, 187, 198, 174, 207, 192, 176, 166, 208, 170, 203, 178,
   201, 199, 190, 193, 177, 206, 168, 204, 171, 198, 188, 180, 202, 194, 203, 167, 181, 185, 197, 201, 179, 208, 175, 195, 204, 179,
   169, 197, 186, 206, 173, 202, 181, 196, 172, 170, 209, 178, 205, 176, 203, 191, 193, 199, 174, 209, 171, 207, 180, 192, 194, 177,
   204, 198, 209, 175, 173, 195, 196, 208, 181, 206, 179, 197, 198, 197, 184, 206, 188, 204, 186, 194, 196, 202, 199, 183, 197, 190,
   208, 193, 195, 203, 185, 201, 182, 199, 198, 191, 192, 189, 207, 187, 205, 200, 187, 203, 194, 205, 198, 200, 204, 192, 209, 207,
   205, 185, 196, 201, 206, 203, 197, 209, 195, 208, 189, 193, 204, 199, 207, 191, 209, 200, 203, 205, 207, 195, 186, 208, 202, 209,
   196, 204, 197, 206, 191, 190, 206, 193, 209, 199, 208, 205, 201, 203, 192, 208, 188, 209, 194, 207, 202, 198, 206, 204, 200, 201,
   202, 203, 204, 205, 206, 207, 208, 209, 210, 225, 227, 219, 220, 213, 243, 215, 245, 242, 226, 211, 229, 214, 244, 221, 223, 247,
   217, 241, 228, 230, 212, 246, 216, 248, 218, 222, 224, 240, 233, 214, 252, 221, 262, 226, 244, 251, 241, 247, 234, 250, 216, 263,
   222, 249, 240, 228, 246, 248, 213, 231, 254, 225, 243, 219, 261, 242, 253, 245, 249, 236, 218, 250, 240, 263, 224, 248, 230, 246,
   215, 253, 232, 245, 227, 242, 254, 220, 261, 243, 251, 217, 235, 241, 252, 247, 229, 262, 223, 244, 219, 237, 266, 231, 261, 225,
   264, 245, 257, 253, 220, 264, 238, 261, 232, 243, 255, 227, 266, 254, 237, 221, 268, 226, 265, 233, 262, 259, 247, 251, 265, 223,
   239, 244, 256, 262, 235, 268, 229, 252, 238, 269, 222, 267, 228, 260, 248, 234, 263, 249, 267, 239, 224, 258, 246, 269, 230, 263,
   236, 250, 231, 226, 274, 233, 270, 237, 265, 257, 251, 259, 232, 273, 228, 271, 234, 255, 249, 238, 267, 260, 225, 233, 275, 237,
   264, 231, 270, 253, 259, 257, 273, 235, 230, 256, 250, 272, 236, 269, 239, 258, 227, 275, 234, 266, 238, 254, 260, 232, 271, 255,
   274, 229, 236, 252, 258, 268, 239, 272, 235, 256, 242, 257, 255, 253, 254, 245, 266, 243, 264, 261, 259, 241, 256, 247, 268, 251,
   252, 265, 244, 262, 260, 258, 240, 269, 248, 267, 246, 249, 250, 263, 270, 244, 258, 262, 272, 265, 256, 274, 252, 268, 271, 256,
   246, 272, 263, 273, 250, 267, 258, 269, 243, 270, 260, 264, 255, 261, 271, 254, 275, 266, 255, 272, 248, 273, 249, 271, 263, 260,
   269, 267, 245, 259, 271, 257, 266, 253, 275, 261, 270, 264, 257, 247, 272, 251, 274, 259, 268, 270, 262, 265, 253, 251, 273, 259,
   275, 257, 274, 264, 265, 270, 254, 274, 249, 275, 260, 266, 267, 255, 273, 271, 275, 252, 250, 268, 269, 274, 258, 273, 256, 272,
   261, 265, 267, 270, 271, 264, 273, 266, 274, 275, 264, 262, 269, 265, 273, 270, 272, 275, 268, 274, 266, 268, 263, 274, 267, 275,
   269, 271, 272, 273, 276, 293, 295, 285, 286, 281, 314, 283, 316, 309, 291, 277, 296, 279, 312, 287, 288, 317, 284, 310, 292, 294,
   278, 313, 280, 315, 282, 289, 290, 311, 281, 297, 319, 293, 314, 285, 333, 309, 318, 316, 299, 279, 322, 287, 334, 291, 312, 320,
   310, 317, 283, 318, 298, 316, 295, 309, 319, 286, 333, 314, 301, 323, 280, 335, 289, 321, 311, 292, 313, 315, 320, 284, 300, 310,
   322, 317, 296, 334, 288, 312, 321, 302, 282, 323, 311, 335, 290, 315, 294, 313, 285, 305, 340, 297, 333, 293, 338, 316, 328, 318,
   286, 338, 307, 333, 298, 314, 326, 295, 340, 319, 303, 287, 341, 291, 336, 299, 334, 329, 317, 320, 304, 339, 289, 337, 292, 327,
   315, 301, 335, 321, 336, 288, 308, 312, 324, 334, 300, 341, 296, 322, 337, 306, 290, 325, 313, 339, 294, 335, 302, 323, 293, 303,
   348, 305, 338, 297, 342, 318, 330, 328, 305, 291, 349, 299, 344, 303, 336, 330, 320, 329, 295, 348, 304, 340, 307, 319, 331, 298,
   343, 326, 307, 350, 292, 346, 301, 331, 321, 304, 337, 327, 349, 296, 306, 322, 332, 341, 308, 345, 300, 324, 350, 308, 294, 332,
   323, 347, 302, 339, 306, 325, 297, 299, 353, 303, 342, 305, 344, 328, 329, 330, 298, 352, 301, 343, 304, 326, 327, 307, 346, 331,
   351, 300, 302, 324, 325, 345, 306, 347, 308, 332, 327, 325, 311, 339, 315, 337, 313, 321, 323, 335, 329, 310, 324, 317, 341, 320,
   322, 336, 312, 334, 309, 328, 326, 318, 319, 316, 340, 314, 338, 333, 314, 342, 331, 338, 326, 333, 343, 319, 348, 340, 344, 312,
   332, 334, 345, 336, 324, 349, 322, 341, 316, 330, 343, 328, 340, 318, 348, 333, 342, 338, 346, 332, 313, 347, 335, 350, 323, 337,
   325, 339, 330, 317, 345, 320, 349, 329, 341, 344, 334, 336, 331, 347, 315, 350, 321, 346, 335, 327, 339, 337, 326, 351, 321, 352,
   327, 343, 337, 331, 350, 346, 352, 324, 323, 345, 339, 351, 325, 350, 332, 347, 328, 320, 351, 329, 353, 330, 349, 342, 336, 344,
   353, 322, 325, 341, 347, 349, 332, 351, 324, 345, 318, 329, 352, 330, 348, 328, 353, 338, 344, 342, 319, 353, 327, 348, 331, 340,
   346, 326, 352, 343, 333, 344, 346, 342, 343, 338, 352, 340, 353, 348, 342, 334, 347, 336, 351, 344, 345, 353, 341, 349, 343, 345,
   335, 351, 337, 352, 339, 346, 347, 350, 338, 336, 350, 344, 352, 342, 351, 348, 349, 353, 340, 349, 337, 353, 346, 348, 350, 343,
   351, 352, 348, 341, 339, 349, 350, 353, 347, 352, 345, 351
}; // 3.22 kb
static const cart_index_t iCartXY_ab11_a4[1800] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 26, 22, 28, 31, 32, 24, 25,
   33, 34, 35, 30, 20, 16, 21, 24, 18, 30, 32, 23, 29, 26, 34, 27, 33, 31, 35, 22, 23, 17, 30, 31, 25, 19,
   27, 21, 35, 28, 29, 32, 33, 34, 36, 47, 48, 39, 51, 41, 52, 61, 62, 45, 46, 63, 57, 59, 56, 45, 37, 50,
   51, 40, 59, 60, 43, 53, 47, 63, 49, 58, 55, 61, 46, 49, 38, 57, 58, 52, 42, 53, 44, 63, 48, 50, 54, 60,
   62, 39, 40, 54, 45, 47, 56, 62, 55, 60, 51, 57, 58, 63, 61, 59, 41, 55, 42, 56, 61, 46, 48, 58, 54, 59,
   52, 60, 62, 63, 57, 56, 43, 44, 59, 55, 57, 54, 49, 50, 61, 62, 53, 60, 58, 63, 64, 79, 80, 69, 81, 71,
   83, 94, 95, 73, 74, 97, 90, 92, 85, 81, 65, 82, 79, 67, 94, 96, 72, 84, 75, 98, 76, 88, 86, 93, 83, 84,
   66, 95, 96, 80, 68, 82, 70, 99, 77, 78, 87, 89, 91, 73, 67, 89, 81, 75, 92, 99, 86, 96, 79, 97, 88, 98,
   93, 94, 74, 88, 68, 90, 98, 83, 77, 96, 87, 97, 80, 89, 91, 99, 95, 69, 75, 91, 73, 79, 85, 95, 93, 99,
   81, 90, 98, 97, 94, 92, 90, 76, 70, 97, 88, 95, 87, 84, 78, 98, 91, 82, 89, 96, 99, 71, 93, 77, 85, 94,
   74, 80, 98, 91, 92, 83, 99, 95, 97, 90, 92, 72, 78, 94, 86, 97, 89, 76, 82, 93, 99, 84, 96, 88, 98, 85,
   86, 87, 92, 93, 90, 91, 88, 89, 94, 95, 96, 99, 98, 97, 100, 121, 122, 103, 115, 105, 117, 137, 138, 109, 110, 139,
   127, 129, 126, 121, 101, 123, 116, 104, 135, 136, 107, 119, 111, 140, 113, 128, 125, 131, 122, 123, 102, 133, 134, 118, 106, 120,
   108, 141, 112, 114, 124, 130, 132, 103, 116, 133, 109, 121, 126, 138, 135, 143, 115, 127, 142, 139, 137, 129, 115, 104, 134, 121,
   111, 137, 144, 125, 136, 116, 142, 128, 140, 131, 135, 105, 135, 118, 126, 137, 110, 122, 142, 133, 129, 117, 143, 138, 139, 127,
   117, 136, 106, 138, 144, 122, 112, 134, 124, 143, 118, 130, 132, 141, 133, 137, 107, 120, 135, 125, 142, 134, 113, 123, 131, 144,
   119, 136, 128, 140, 138, 119, 108, 143, 136, 133, 124, 123, 114, 144, 132, 120, 130, 134, 141, 109, 111, 141, 115, 116, 129, 143,
   131, 144, 121, 139, 140, 142, 135, 137, 110, 140, 112, 127, 142, 117, 118, 144, 132, 139, 122, 141, 133, 143, 138, 139, 113, 114,
   142, 128, 143, 130, 119, 120, 140, 141, 123, 134, 136, 144, 127, 128, 124, 139, 140, 138, 132, 136, 130, 142, 133, 134, 141, 144,
   143, 129, 125, 130, 137, 131, 139, 141, 128, 134, 135, 143, 136, 144, 140, 142, 126, 131, 132, 129, 135, 127, 133, 140, 141, 137,
   138, 144, 143, 142, 139, 145, 166, 167, 150, 162, 152, 164, 181, 182, 154, 155, 190, 177, 179, 172, 168, 146, 169, 160, 148, 183,
   185, 153, 165, 156, 191, 157, 175, 173, 180, 170, 171, 147, 184, 186, 161, 149, 163, 151, 192, 158, 159, 174, 176, 178, 166, 148,
   187, 168, 156, 189, 198, 173, 185, 160, 193, 175, 191, 180, 183, 167, 187, 149, 188, 196, 170, 158, 186, 174, 194, 161, 176, 178,
   192, 184, 150, 168, 188, 154, 166, 172, 182, 189, 197, 162, 177, 195, 190, 181, 179, 188, 169, 151, 194, 187, 184, 174, 171, 159,
   196, 178, 163, 176, 186, 192, 152, 189, 170, 172, 181, 155, 167, 195, 188, 179, 164, 197, 182, 190, 177, 189, 153, 171, 183, 173,
   193, 187, 157, 169, 180, 198, 165, 185, 175, 191, 154, 160, 194, 162, 168, 179, 197, 183, 199, 166, 190, 193, 195, 189, 181, 155,
   193, 161, 177, 195, 164, 170, 199, 184, 190, 167, 194, 188, 197, 182, 162, 156, 196, 166, 160, 181, 199, 180, 198, 168, 195, 191,
   193, 183, 189, 195, 157, 163, 193, 175, 199, 186, 165, 171, 191, 196, 169, 187, 185, 198, 164, 198, 158, 182, 199, 167, 161, 196,
   178, 197, 170, 192, 184, 194, 188, 197, 165, 159, 199, 185, 194, 176, 169, 163, 198, 192, 171, 186, 187, 196, 172, 183, 184, 179,
   189, 177, 188, 193, 194, 181, 182, 199, 197, 195, 190, 181, 173, 186, 189, 180, 195, 196, 175, 187, 183, 199, 185, 198, 191, 193,
   182, 185, 174, 197, 198, 188, 178, 187, 176, 199, 184, 186, 192, 196, 194, 190, 175, 176, 195, 191, 197, 192, 185, 186, 193, 194,
   187, 196, 198, 199, 177, 191, 178, 190, 193, 182, 184, 198, 192, 195, 188, 196, 194, 199, 197, 179, 180, 192, 181, 183, 190, 194,
   191, 196, 189, 197, 198, 199, 193, 195, 200, 221, 222, 203, 215, 205, 217, 243, 244, 209, 210, 251, 233, 235, 232, 223, 201, 225,
   216, 204, 241, 242, 207, 219, 211, 252, 213, 234, 231, 237, 224, 226, 202, 239, 240, 218, 206, 220, 208, 253, 212, 214, 230, 236,
   238, 203, 227, 245, 209, 221, 232, 244, 247, 256, 215, 233, 254, 251, 243, 235, 227, 204, 246, 223, 211, 249, 258, 231, 242, 216,
   255, 234, 252, 237, 241, 205, 247, 228, 232, 243, 210, 222, 254, 245, 235, 217, 256, 244, 251, 233, 228, 248, 206, 250, 259, 224,
   212, 240, 230, 257, 218, 236, 238, 253, 239, 249, 207, 229, 241, 231, 255, 246, 213, 225, 237, 258, 219, 242, 234, 252, 250, 229,
   208, 257, 248, 239, 230, 226, 214, 259, 238, 220, 236, 240, 253, 209, 223, 261, 215, 227, 235, 256, 249, 265, 221, 251, 260, 254,
   247, 243, 210, 260, 224, 233, 254, 217, 228, 265, 250, 251, 222, 261, 245, 256, 244, 221, 211, 262, 227, 216, 247, 264, 237, 258,
   223, 260, 252, 255, 241, 249, 222, 262, 212, 245, 263, 228, 218, 259, 238, 261, 224, 253, 239, 257, 250, 260, 213, 226, 255, 234,
   264, 248, 219, 229, 252, 262, 225, 246, 242, 258, 261, 225, 214, 263, 246, 257, 236, 229, 220, 262, 253, 226, 240, 248, 259, 215,
   216, 263, 221, 223, 243, 265, 241, 264, 227, 254, 255, 260, 249, 247, 217, 264, 218, 244, 265, 222, 224, 263, 239, 256, 228, 257,
   250, 261, 245, 265, 219, 220, 264, 242, 263, 240, 225, 226, 258, 259, 229, 248, 246, 262, 245, 246, 230, 261, 262, 250, 238, 248,
   236, 263, 239, 240, 253, 259, 257, 247, 231, 248, 249, 237, 260, 262, 234, 246, 241, 264, 242, 258, 252, 255, 232, 249, 250, 235,
   247, 233, 245, 260, 261, 243, 244, 265, 256, 254, 251, 233, 255, 239, 251, 260, 244, 250, 264, 257, 254, 245, 263, 261, 265, 256,
   254, 234, 240, 260, 252, 265, 259, 242, 248, 255, 263, 246, 262, 258, 264, 235, 241, 257, 243, 249, 251, 261, 255, 263, 247, 256,
   264, 265, 260, 254, 256, 242, 236, 265, 258, 261, 253, 246, 240, 264, 257, 248, 259, 262, 263, 243, 237, 259, 247, 241, 254, 263,
   252, 262, 249, 265, 258, 264, 255, 260, 244, 258, 238, 256, 264, 245, 239, 262, 253, 265, 250, 259, 257, 263, 261, 251, 252, 253,
   254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 287, 288, 271, 283, 273, 285, 308, 309, 275, 276, 323, 304, 306,
   299, 289, 267, 290, 281, 269, 310, 312, 274, 286, 277, 324, 278, 302, 300, 307, 291, 292, 268, 311, 313, 282, 270, 284, 272, 325,
   279, 280, 301, 303, 305, 293, 269, 314, 289, 277, 319, 331, 300, 312, 281, 326, 302, 324, 307, 310, 294, 315, 270, 317, 329, 291,
   279, 313, 301, 327, 282, 303, 305, 325, 311, 271, 295, 316, 275, 287, 299, 309, 318, 330, 283, 304, 328, 323, 308, 306, 317, 296,
   272, 327, 315, 311, 301, 292, 280, 329, 305, 284, 303, 313, 325, 273, 318, 297, 299, 308, 276, 288, 328, 316, 306, 285, 330, 309,
   323, 304, 319, 274, 298, 310, 300, 326, 314, 278, 290, 307, 331, 286, 312, 302, 324, 275, 293, 333, 283, 295, 306, 330, 320, 338,
   287, 323, 332, 328, 318, 308, 276, 332, 294, 304, 328, 285, 297, 338, 321, 323, 288, 333, 316, 330, 309, 295, 277, 335, 293, 281,
   320, 339, 307, 331, 289, 334, 324, 326, 310, 319, 334, 278, 296, 326, 302, 339, 322, 286, 298, 324, 335, 290, 314, 312, 331, 297,
   337, 279, 321, 340, 294, 282, 329, 305, 336, 291, 325, 311, 327, 317, 336, 298, 280, 340, 322, 327, 303, 296, 284, 337, 325, 292,
   313, 315, 329, 287, 281, 341, 295, 289, 318, 343, 310, 339, 293, 332, 326, 334, 319, 320, 288, 341, 282, 316, 342, 297, 291, 340,
   311, 333, 294, 327, 317, 336, 321, 283, 289, 342, 287, 293, 308, 338, 319, 343, 295, 328, 334, 332, 320, 318, 342, 290, 284, 341,
   314, 340, 313, 298, 292, 335, 329, 296, 315, 322, 337, 285, 343, 291, 309, 338, 288, 294, 342, 317, 330, 297, 336, 321, 333, 316,
   343, 286, 292, 339, 312, 341, 315, 290, 296, 331, 337, 298, 322, 314, 335, 299, 320, 321, 306, 318, 304, 316, 332, 333, 308, 309,
   338, 330, 328, 323, 320, 300, 322, 319, 307, 334, 335, 302, 314, 310, 339, 312, 331, 324, 326, 321, 322, 301, 336, 337, 317, 305,
   315, 303, 340, 311, 313, 325, 329, 327, 332, 302, 315, 334, 324, 343, 337, 312, 322, 326, 341, 314, 335, 331, 339, 333, 314, 303,
   342, 335, 336, 325, 322, 313, 341, 327, 315, 329, 337, 340, 304, 334, 317, 323, 332, 309, 321, 343, 336, 328, 316, 342, 333, 338,
   330, 316, 335, 305, 333, 341, 321, 311, 337, 325, 342, 317, 329, 327, 340, 336, 306, 319, 336, 308, 320, 323, 333, 334, 342, 318,
   330, 343, 338, 332, 328, 318, 307, 337, 320, 310, 332, 341, 324, 335, 319, 343, 331, 339, 326, 334, 308, 310, 340, 318, 319, 328,
   342, 326, 341, 320, 338, 339, 343, 334, 332, 309, 339, 311, 330, 343, 316, 317, 341, 327, 338, 321, 340, 336, 342, 333, 338, 312,
   313, 343, 331, 342, 329, 314, 315, 339, 340, 322, 337, 335, 341, 323, 326, 327, 328, 334, 330, 336, 339, 340, 332, 333, 341, 342,
   343, 338, 328, 324, 329, 332, 326, 338, 340, 331, 337, 334, 342, 335, 341, 339, 343, 330, 331, 325, 338, 339, 333, 327, 335, 329,
   343, 336, 337, 340, 341, 342
}; // 3.52 kb
static const cart_index_t iCartXY_ab11_a5[1764] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 27, 32, 33,
   24, 39, 26, 40, 30, 31, 36, 43, 37, 45, 41, 46, 47, 48, 42, 44, 24, 22, 29, 25, 39, 30, 35, 41, 28, 36,
   42, 32, 34, 47, 38, 44, 40, 45, 43, 48, 46, 26, 28, 23, 40, 27, 41, 29, 31, 34, 44, 37, 46, 38, 33, 35,
   42, 43, 39, 45, 47, 48, 49, 60, 62, 64, 65, 54, 76, 56, 78, 58, 59, 66, 83, 68, 84, 70, 79, 80, 82, 75,
   77, 58, 50, 63, 52, 74, 66, 67, 77, 57, 64, 82, 60, 61, 84, 69, 79, 71, 81, 73, 83, 78, 59, 61, 51, 73,
   53, 75, 55, 68, 69, 82, 65, 83, 67, 62, 63, 80, 81, 72, 74, 76, 84, 54, 52, 72, 60, 76, 58, 74, 70, 71,
   66, 75, 64, 73, 80, 81, 77, 78, 84, 83, 82, 79, 56, 71, 53, 78, 62, 70, 72, 59, 73, 77, 68, 79, 81, 65,
   74, 75, 83, 76, 84, 80, 82, 70, 57, 55, 71, 72, 77, 63, 75, 61, 79, 80, 78, 69, 76, 67, 82, 73, 74, 81,
   84, 83, 85, 101, 103, 106, 107, 88, 118, 90, 120, 94, 95, 100, 127, 102, 128, 111, 122, 123, 124, 112, 114, 100, 86, 105,
   89, 119, 106, 108, 122, 92, 101, 127, 96, 98, 129, 104, 120, 110, 121, 113, 125, 116, 102, 104, 87, 121, 91, 123, 93, 107,
   108, 128, 103, 129, 105, 97, 99, 118, 119, 109, 115, 117, 126, 94, 89, 115, 96, 126, 100, 119, 114, 110, 106, 124, 101, 113,
   128, 121, 122, 116, 129, 125, 127, 120, 95, 113, 91, 125, 97, 112, 109, 102, 121, 124, 107, 127, 119, 103, 115, 123, 129, 117,
   126, 118, 128, 88, 96, 117, 101, 118, 94, 126, 111, 116, 100, 112, 106, 125, 123, 129, 114, 120, 128, 127, 124, 122, 112, 98,
   93, 113, 109, 124, 99, 123, 104, 127, 118, 125, 108, 117, 105, 128, 121, 115, 119, 126, 129, 90, 116, 97, 120, 103, 111, 117,
   95, 125, 114, 102, 122, 129, 107, 126, 112, 127, 118, 128, 123, 124, 114, 92, 99, 110, 115, 122, 105, 124, 98, 120, 128, 116,
   104, 126, 108, 127, 113, 119, 121, 129, 125, 111, 110, 109, 116, 117, 114, 115, 112, 113, 122, 123, 120, 121, 118, 119, 124, 125,
   126, 129, 128, 127, 130, 153, 155, 151, 152, 135, 173, 137, 174, 139, 140, 147, 180, 149, 182, 157, 166, 167, 175, 162, 164, 151,
   131, 156, 133, 172, 153, 154, 174, 138, 145, 178, 141, 142, 183, 150, 168, 158, 170, 160, 176, 165, 152, 154, 132, 172, 134, 173,
   136, 155, 156, 179, 146, 181, 148, 143, 144, 169, 171, 159, 161, 163, 177, 135, 145, 169, 153, 173, 139, 179, 157, 168, 147, 162,
   151, 178, 167, 184, 164, 174, 182, 180, 175, 166, 147, 133, 171, 141, 181, 151, 172, 166, 158, 153, 180, 145, 160, 184, 170, 174,
   165, 183, 176, 178, 168, 137, 168, 146, 174, 155, 157, 169, 140, 178, 164, 149, 166, 184, 152, 179, 162, 180, 173, 182, 167, 175,
   149, 170, 134, 183, 143, 167, 159, 152, 172, 182, 155, 184, 171, 146, 161, 173, 181, 163, 177, 169, 179, 166, 138, 148, 158, 171,
   174, 156, 180, 142, 168, 184, 165, 150, 181, 154, 178, 160, 172, 170, 183, 176, 167, 150, 136, 170, 159, 182, 144, 173, 154, 184,
   169, 183, 156, 163, 148, 179, 172, 161, 171, 177, 181, 139, 141, 177, 145, 179, 147, 181, 164, 165, 151, 175, 153, 176, 182, 183,
   166, 168, 184, 178, 180, 174, 140, 176, 143, 178, 146, 162, 163, 149, 183, 175, 152, 180, 181, 155, 177, 167, 184, 169, 179, 173,
   182, 175, 142, 144, 160, 161, 180, 148, 182, 150, 178, 179, 176, 154, 177, 156, 184, 170, 171, 172, 181, 183, 162, 160, 159, 176,
   163, 175, 161, 167, 170, 180, 173, 178, 172, 169, 171, 182, 183, 177, 181, 179, 184, 164, 158, 161, 165, 177, 166, 171, 175, 160,
   174, 182, 168, 170, 179, 172, 180, 176, 181, 183, 184, 178, 157, 165, 163, 168, 169, 164, 177, 162, 176, 166, 167, 174, 183, 173,
   181, 175, 178, 179, 184, 182, 180, 185, 212, 213, 206, 207, 188, 230, 190, 232, 194, 195, 200, 239, 202, 241, 217, 228, 229, 236,
   218, 220, 212, 186, 214, 189, 231, 208, 210, 234, 192, 201, 240, 196, 198, 243, 204, 226, 216, 227, 219, 237, 222, 213, 214, 187,
   233, 191, 235, 193, 209, 211, 242, 203, 244, 205, 197, 199, 224, 225, 215, 221, 223, 238, 206, 189, 233, 196, 247, 212, 231, 232,
   216, 208, 245, 201, 219, 249, 227, 234, 222, 243, 237, 240, 226, 207, 231, 191, 247, 197, 230, 215, 213, 233, 246, 209, 248, 225,
   203, 221, 235, 244, 223, 238, 224, 242, 188, 208, 235, 212, 230, 194, 246, 217, 234, 200, 218, 206, 245, 229, 250, 220, 232, 241,
   239, 236, 228, 230, 210, 193, 231, 215, 246, 199, 235, 214, 248, 224, 247, 211, 223, 205, 242, 233, 221, 225, 238, 244, 190, 234,
   209, 232, 213, 217, 235, 195, 245, 220, 202, 228, 250, 207, 246, 218, 239, 230, 241, 229, 236, 232, 192, 211, 216, 233, 234, 214,
   245, 198, 226, 249, 222, 204, 247, 210, 240, 219, 231, 227, 243, 237, 194, 201, 242, 208, 246, 200, 248, 220, 226, 206, 236, 212,
   240, 241, 249, 228, 234, 250, 245, 239, 232, 195, 240, 203, 245, 209, 218, 224, 202, 249, 236, 207, 239, 248, 213, 242, 229, 250,
   235, 246, 230, 241, 200, 196, 244, 201, 248, 206, 247, 228, 222, 212, 239, 208, 237, 250, 243, 232, 226, 249, 240, 245, 234, 239,
   198, 205, 219, 225, 245, 211, 250, 204, 240, 248, 237, 210, 244, 214, 249, 227, 233, 231, 247, 243, 202, 243, 197, 249, 203, 229,
   223, 207, 247, 241, 213, 250, 244, 209, 238, 230, 248, 224, 242, 235, 246, 241, 204, 199, 227, 221, 250, 205, 246, 210, 249, 242,
   243, 214, 238, 211, 248, 231, 225, 233, 244, 247, 217, 226, 224, 234, 235, 220, 242, 218, 240, 228, 229, 232, 249, 230, 248, 236,
   245, 246, 250, 241, 239, 228, 216, 225, 222, 244, 232, 233, 239, 219, 234, 250, 226, 227, 248, 231, 245, 237, 247, 243, 249, 240,
   229, 227, 215, 243, 223, 241, 221, 230, 231, 250, 235, 249, 233, 224, 225, 246, 247, 238, 244, 242, 248, 236, 219, 221, 237, 238,
   239, 225, 241, 227, 245, 246, 240, 231, 242, 233, 250, 243, 244, 247, 248, 249, 218, 237, 223, 240, 224, 236, 238, 229, 243, 239,
   230, 245, 247, 235, 244, 241, 249, 242, 248, 246, 250, 220, 222, 238, 226, 242, 228, 244, 236, 237, 232, 241, 234, 243, 246, 247,
   239, 240, 248, 249, 250, 245, 251, 280, 282, 272, 273, 256, 301, 258, 303, 260, 261, 268, 313, 270, 315, 284, 293, 294, 308, 289,
   291, 278, 252, 283, 254, 299, 274, 275, 304, 259, 266, 311, 262, 263, 316, 271, 295, 285, 297, 287, 309, 292, 279, 281, 253, 300,
   255, 302, 257, 276, 277, 312, 267, 314, 269, 264, 265, 296, 298, 286, 288, 290, 310, 256, 278, 306, 280, 301, 260, 318, 284, 305,
   268, 289, 272, 317, 294, 323, 291, 303, 315, 313, 308, 293, 280, 254, 307, 262, 320, 278, 299, 305, 285, 274, 319, 266, 287, 324,
   297, 304, 292, 316, 309, 311, 295, 258, 305, 279, 303, 282, 284, 306, 261, 317, 291, 270, 293, 323, 273, 318, 289, 313, 301, 315,
   294, 308, 282, 307, 255, 322, 264, 306, 286, 279, 300, 321, 276, 325, 298, 267, 288, 302, 314, 290, 310, 296, 312, 305, 259, 281,
   285, 307, 304, 283, 319, 263, 295, 324, 292, 271, 320, 275, 311, 287, 299, 297, 316, 309, 306, 283, 257, 307, 286, 321, 265, 302,
   281, 325, 296, 322, 277, 290, 269, 312, 300, 288, 298, 310, 314, 260, 274, 321, 278, 318, 268, 327, 291, 304, 272, 308, 280, 319,
   315, 328, 293, 305, 323, 317, 313, 303, 261, 319, 276, 317, 279, 289, 302, 270, 328, 308, 273, 313, 327, 282, 321, 294, 323, 306,
   318, 301, 315, 272, 262, 322, 266, 326, 280, 320, 303, 292, 278, 317, 274, 309, 328, 316, 305, 295, 324, 311, 319, 304, 273, 320,
   264, 326, 267, 301, 290, 282, 322, 318, 279, 327, 314, 276, 310, 306, 325, 296, 312, 302, 321, 317, 263, 277, 287, 300, 319, 281,
   328, 271, 311, 326, 309, 275, 322, 283, 324, 297, 307, 299, 320, 316, 318, 275, 265, 299, 288, 327, 269, 321, 283, 326, 312, 320,
   281, 310, 277, 325, 307, 298, 300, 314, 322, 268, 266, 325, 274, 327, 272, 326, 293, 295, 280, 313, 278, 311, 323, 324, 303, 304,
   328, 319, 317, 305, 270, 324, 267, 328, 276, 294, 296, 273, 326, 315, 282, 323, 325, 279, 312, 301, 327, 302, 321, 306, 318, 323,
   271, 269, 297, 298, 328, 277, 327, 275, 324, 325, 316, 283, 314, 281, 326, 299, 300, 307, 322, 320, 301, 299, 286, 320, 290, 318,
   288, 306, 307, 327, 302, 326, 300, 296, 298, 321, 322, 310, 314, 312, 325, 303, 285, 300, 292, 322, 305, 307, 317, 287, 304, 328,
   295, 297, 326, 299, 319, 309, 320, 316, 324, 311, 284, 304, 302, 305, 306, 291, 321, 289, 319, 293, 294, 303, 328, 301, 327, 308,
   317, 318, 323, 315, 313, 289, 311, 296, 319, 302, 308, 312, 294, 324, 313, 301, 317, 326, 306, 325, 315, 328, 321, 327, 318, 323,
   313, 287, 298, 309, 314, 317, 300, 323, 297, 319, 327, 311, 299, 325, 307, 328, 316, 322, 320, 326, 324, 291, 295, 312, 304, 321,
   293, 325, 308, 311, 303, 315, 305, 324, 318, 326, 313, 319, 327, 328, 323, 317, 315, 297, 288, 316, 310, 323, 298, 318, 299, 328,
   321, 324, 307, 312, 300, 327, 320, 314, 322, 325, 326, 293, 292, 314, 295, 325, 303, 322, 313, 309, 305, 323, 304, 316, 327, 320,
   317, 311, 326, 324, 328, 319, 294, 316, 290, 324, 296, 315, 310, 301, 320, 323, 306, 328, 322, 302, 314, 318, 326, 312, 325, 321,
   327, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328
}; // 3.45 kb
static const cart_index_t iCartXY_ab11_a6[1568] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
   26, 27, 28, 31, 32, 33, 39, 35, 41, 50, 51, 37, 38, 43, 44, 52, 53, 45, 47, 60, 55, 57, 49, 54, 62, 56,
   63, 58, 59, 61, 33, 29, 34, 37, 31, 49, 51, 36, 42, 45, 54, 39, 55, 40, 46, 43, 59, 48, 53, 50, 56, 61,
   52, 58, 60, 57, 63, 62, 35, 36, 30, 49, 50, 38, 32, 40, 34, 56, 47, 57, 41, 48, 42, 58, 44, 46, 51, 52,
   54, 59, 60, 61, 53, 62, 55, 63, 64, 75, 76, 67, 80, 69, 82, 95, 96, 73, 74, 85, 86, 104, 105, 79, 81, 108,
   97, 99, 90, 91, 106, 93, 107, 101, 102, 103, 73, 65, 78, 79, 68, 93, 94, 71, 84, 85, 103, 75, 105, 77, 87, 80,
   107, 83, 98, 89, 101, 106, 92, 99, 100, 95, 108, 104, 74, 77, 66, 91, 92, 81, 70, 83, 72, 103, 86, 104, 76, 87,
   78, 106, 82, 84, 88, 100, 102, 97, 98, 107, 94, 108, 96, 105, 67, 68, 88, 73, 75, 90, 96, 89, 94, 79, 91, 80,
   97, 92, 98, 85, 102, 100, 105, 95, 93, 103, 104, 101, 108, 99, 107, 106, 69, 89, 70, 90, 95, 74, 76, 92, 88, 93,
   81, 99, 82, 100, 94, 101, 86, 98, 96, 104, 91, 102, 108, 103, 105, 106, 97, 107, 90, 71, 72, 93, 89, 91, 88, 77,
   78, 101, 102, 95, 96, 83, 84, 99, 97, 87, 94, 92, 103, 107, 100, 106, 98, 104, 105, 108, 109, 124, 125, 114, 132, 116,
   134, 147, 148, 118, 119, 130, 131, 157, 158, 126, 128, 163, 152, 153, 136, 141, 159, 143, 161, 145, 146, 154, 126, 110, 127, 130,
   112, 145, 150, 117, 135, 132, 159, 120, 160, 121, 133, 124, 163, 129, 151, 137, 153, 157, 139, 147, 149, 144, 162, 155, 128, 129,
   111, 146, 149, 131, 113, 133, 115, 161, 134, 162, 122, 135, 123, 163, 125, 127, 138, 151, 152, 148, 150, 158, 140, 160, 142, 156,
   118, 112, 140, 126, 120, 143, 156, 137, 150, 130, 154, 124, 158, 139, 151, 132, 161, 149, 160, 144, 145, 159, 155, 153, 162, 147,
   163, 157, 119, 139, 113, 141, 155, 128, 122, 149, 138, 154, 131, 157, 125, 151, 140, 159, 134, 150, 142, 162, 146, 152, 160, 161,
   156, 163, 148, 158, 114, 120, 142, 118, 124, 136, 148, 144, 156, 126, 141, 132, 152, 155, 160, 130, 146, 162, 158, 147, 143, 154,
   157, 145, 163, 153, 161, 159, 141, 121, 115, 154, 139, 146, 138, 129, 123, 159, 152, 155, 142, 133, 127, 157, 148, 135, 140, 149,
   161, 158, 151, 163, 150, 162, 156, 160, 116, 144, 122, 136, 147, 119, 125, 155, 142, 143, 128, 153, 134, 162, 156, 145, 131, 160,
   148, 157, 141, 146, 163, 154, 158, 159, 152, 161, 143, 117, 123, 145, 137, 154, 140, 121, 127, 153, 161, 144, 156, 129, 135, 147,
   158, 133, 150, 139, 159, 163, 149, 157, 151, 155, 160, 162, 136, 137, 138, 143, 144, 141, 142, 139, 140, 145, 146, 147, 148, 149,
   150, 153, 152, 151, 156, 155, 154, 161, 162, 159, 160, 157, 158, 163, 164, 187, 188, 167, 191, 169, 192, 213, 214, 173, 174, 185,
   186, 224, 225, 179, 181, 229, 209, 211, 196, 197, 218, 199, 220, 207, 208, 215, 185, 165, 190, 191, 168, 211, 212, 171, 193, 187,
   224, 175, 226, 177, 189, 180, 228, 183, 210, 195, 213, 219, 198, 205, 206, 201, 222, 216, 186, 189, 166, 209, 210, 192, 170, 193,
   172, 225, 188, 226, 176, 190, 178, 227, 182, 184, 194, 212, 214, 203, 204, 221, 200, 223, 202, 217, 167, 180, 203, 173, 187, 196,
   214, 205, 221, 179, 197, 191, 209, 219, 227, 185, 208, 228, 225, 213, 199, 215, 224, 207, 229, 211, 220, 218, 179, 168, 204, 185,
   175, 207, 223, 195, 212, 191, 218, 180, 227, 198, 210, 187, 229, 206, 226, 201, 211, 224, 216, 213, 222, 205, 228, 219, 169, 205,
   182, 196, 213, 174, 188, 219, 203, 199, 181, 211, 192, 228, 221, 207, 186, 227, 214, 224, 197, 208, 229, 215, 225, 218, 209, 220,
   181, 206, 170, 208, 222, 186, 176, 210, 194, 220, 192, 228, 182, 212, 200, 229, 188, 204, 202, 226, 209, 214, 223, 225, 217, 227,
   203, 221, 207, 171, 184, 211, 195, 218, 204, 177, 190, 213, 229, 201, 223, 183, 193, 205, 227, 189, 212, 198, 224, 228, 206, 219,
   210, 216, 226, 222, 208, 183, 172, 220, 206, 209, 194, 189, 178, 229, 214, 222, 202, 193, 184, 228, 203, 190, 200, 210, 225, 221,
   212, 227, 204, 226, 217, 223, 173, 175, 217, 179, 180, 199, 221, 201, 223, 185, 215, 187, 225, 216, 226, 191, 220, 222, 227, 205,
   207, 218, 219, 211, 228, 213, 229, 224, 174, 216, 176, 197, 219, 181, 182, 222, 202, 215, 186, 224, 188, 226, 217, 218, 192, 223,
   203, 228, 208, 209, 227, 220, 221, 229, 214, 225, 215, 177, 178, 218, 198, 220, 200, 183, 184, 224, 225, 216, 217, 189, 190, 219,
   221, 193, 204, 206, 229, 227, 210, 228, 212, 222, 223, 226, 197, 198, 194, 215, 216, 208, 202, 206, 200, 218, 209, 219, 203, 210,
   204, 224, 214, 212, 217, 222, 220, 225, 226, 229, 223, 228, 221, 227, 199, 195, 200, 207, 201, 215, 217, 198, 204, 211, 220, 205,
   221, 206, 212, 213, 225, 210, 223, 216, 218, 229, 222, 224, 226, 219, 227, 228, 196, 201, 202, 199, 205, 197, 203, 216, 217, 207,
   208, 213, 214, 222, 223, 211, 209, 226, 221, 219, 215, 220, 228, 218, 227, 224, 225, 229, 230, 257, 258, 235, 259, 237, 261, 284,
   285, 239, 240, 251, 252, 296, 297, 247, 249, 302, 280, 282, 263, 268, 292, 270, 294, 272, 273, 287, 259, 231, 260, 257, 233, 284,
   286, 238, 262, 253, 298, 241, 299, 242, 254, 245, 303, 250, 278, 264, 283, 290, 266, 274, 276, 271, 295, 288, 261, 262, 232, 285,
   286, 258, 234, 260, 236, 300, 255, 301, 243, 256, 244, 304, 246, 248, 265, 279, 281, 275, 277, 291, 267, 293, 269, 289, 251, 233,
   279, 259, 241, 282, 301, 264, 286, 257, 296, 245, 305, 266, 278, 253, 307, 276, 299, 271, 284, 298, 288, 283, 295, 274, 303, 290,
   252, 278, 234, 280, 299, 261, 243, 286, 265, 297, 258, 305, 246, 279, 267, 306, 255, 277, 269, 301, 285, 281, 293, 300, 289, 304,
   275, 291, 235, 253, 281, 239, 257, 263, 285, 283, 300, 247, 268, 259, 280, 298, 306, 251, 273, 307, 297, 284, 270, 287, 296, 272,
   302, 282, 294, 292, 280, 254, 236, 297, 278, 285, 265, 262, 244, 306, 281, 299, 269, 260, 248, 305, 275, 256, 267, 286, 300, 291,
   279, 304, 277, 301, 289, 293, 237, 283, 255, 263, 284, 240, 258, 298, 281, 270, 249, 282, 261, 307, 300, 272, 252, 306, 285, 296,
   268, 273, 302, 287, 297, 292, 280, 294, 282, 238, 256, 284, 264, 296, 279, 242, 260, 283, 307, 271, 301, 250, 262, 274, 305, 254,
   286, 266, 298, 303, 276, 290, 278, 288, 299, 295, 239, 245, 291, 247, 253, 270, 300, 274, 304, 251, 287, 257, 297, 290, 305, 259,
   294, 303, 306, 283, 272, 292, 298, 282, 307, 284, 302, 296, 240, 290, 246, 268, 298, 249, 255, 303, 275, 287, 252, 296, 258, 305,
   291, 292, 261, 304, 281, 307, 273, 280, 306, 294, 300, 302, 285, 297, 247, 241, 293, 251, 245, 272, 304, 271, 301, 259, 292, 253,
   306, 288, 299, 257, 302, 295, 305, 274, 282, 296, 290, 284, 303, 283, 307, 298, 292, 242, 248, 296, 266, 302, 277, 250, 256, 298,
   306, 288, 293, 254, 260, 290, 304, 262, 279, 276, 307, 305, 278, 303, 286, 295, 301, 299, 249, 295, 243, 273, 303, 252, 246, 299,
   269, 294, 261, 307, 255, 301, 289, 302, 258, 293, 275, 305, 280, 285, 304, 297, 291, 306, 281, 300, 294, 250, 244, 302, 276, 297,
   267, 254, 248, 307, 300, 295, 289, 262, 256, 303, 291, 260, 277, 278, 306, 304, 286, 305, 279, 299, 293, 301, 263, 274, 275, 270,
   283, 268, 281, 290, 291, 272, 273, 284, 285, 303, 304, 282, 280, 305, 300, 298, 287, 294, 307, 292, 306, 296, 297, 302, 272, 264,
   277, 282, 271, 292, 293, 266, 279, 284, 302, 274, 304, 276, 286, 283, 306, 278, 301, 288, 296, 307, 295, 298, 299, 290, 305, 303,
   273, 276, 265, 294, 295, 280, 269, 278, 267, 302, 285, 303, 275, 286, 277, 307, 281, 279, 289, 299, 297, 300, 301, 306, 293, 305,
   291, 304, 287, 266, 267, 292, 288, 294, 289, 276, 277, 296, 297, 290, 291, 278, 279, 298, 300, 286, 293, 295, 302, 306, 299, 307,
   301, 303, 304, 305, 268, 288, 269, 287, 290, 273, 275, 295, 289, 292, 280, 298, 281, 299, 293, 296, 285, 301, 291, 303, 294, 297,
   305, 302, 304, 307, 300, 306, 270, 271, 289, 272, 274, 287, 291, 288, 293, 282, 294, 283, 300, 295, 301, 284, 297, 299, 304, 290,
   292, 302, 303, 296, 305, 298, 306, 307
}; // 3.06 kb
static const cart_index_t iCartXY_ab12_a0[455] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
   52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
   78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
   104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
   130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
   156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
   182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
   208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
   234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259,
   260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
   286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311,
   312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337,
   338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363,
   364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389,
   390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415,
   416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441,
   442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454
}; // 0.89 kb
static const cart_index_t iCartXY_ab12_a1[1092] = {
   0, 1, 2, 3, 6, 7, 6, 4, 8, 7, 8, 5, 9, 14, 16, 12, 10, 17, 13, 15, 11, 14, 12, 18, 16, 18,
   13, 18, 17, 15, 19, 22, 24, 23, 20, 26, 25, 27, 21, 28, 23, 32, 29, 31, 25, 22, 28, 33, 31, 30, 27, 24,
   33, 29, 32, 26, 30, 33, 32, 31, 34, 39, 41, 37, 35, 42, 38, 40, 36, 39, 43, 49, 45, 37, 50, 41, 49, 44,
   47, 51, 38, 50, 42, 46, 51, 48, 40, 43, 45, 54, 44, 53, 47, 52, 46, 48, 53, 52, 51, 54, 50, 52, 49, 54,
   53, 55, 58, 60, 59, 56, 62, 61, 63, 57, 66, 59, 74, 67, 73, 61, 58, 64, 75, 73, 69, 63, 60, 75, 65, 74,
   62, 68, 64, 70, 78, 65, 76, 71, 70, 66, 80, 77, 68, 72, 71, 81, 67, 79, 72, 69, 75, 78, 76, 80, 74, 77,
   81, 79, 73, 82, 77, 79, 76, 82, 81, 78, 80, 82, 83, 88, 90, 86, 84, 91, 87, 89, 85, 88, 92, 104, 94, 86,
   105, 90, 104, 93, 96, 106, 87, 105, 91, 95, 106, 97, 89, 92, 100, 111, 93, 109, 102, 98, 94, 112, 99, 110, 96, 107,
   95, 103, 108, 101, 97, 100, 98, 113, 102, 114, 99, 115, 103, 101, 110, 108, 106, 112, 105, 107, 104, 111, 109, 109, 116, 114,
   117, 107, 115, 111, 113, 116, 118, 115, 108, 113, 112, 117, 114, 118, 110, 116, 117, 118, 119, 122, 124, 123, 120, 126, 125, 127,
   121, 130, 123, 144, 131, 143, 125, 122, 128, 145, 143, 133, 127, 124, 145, 129, 144, 126, 132, 128, 134, 148, 129, 146, 136, 135,
   130, 150, 147, 132, 138, 137, 151, 131, 149, 139, 133, 140, 135, 154, 141, 152, 137, 134, 140, 156, 153, 142, 139, 136, 157, 141,
   155, 138, 142, 145, 148, 146, 150, 144, 147, 151, 149, 143, 159, 147, 155, 160, 153, 149, 146, 158, 157, 152, 160, 151, 148, 156,
   158, 154, 150, 159, 156, 154, 161, 157, 162, 152, 163, 155, 153, 158, 161, 162, 161, 159, 163, 162, 163, 160, 164, 169, 171, 167,
   165, 172, 168, 170, 166, 169, 173, 191, 175, 167, 192, 171, 191, 174, 177, 193, 168, 192, 172, 176, 193, 178, 170, 173, 181, 198,
   174, 196, 183, 179, 175, 199, 180, 197, 177, 194, 176, 184, 195, 182, 178, 181, 185, 200, 187, 179, 202, 183, 201, 186, 189, 203,
   180, 204, 184, 188, 205, 190, 182, 185, 187, 208, 186, 207, 189, 206, 188, 190, 197, 195, 193, 199, 192, 194, 191, 198, 196, 196,
   209, 201, 210, 194, 204, 198, 200, 209, 211, 205, 195, 202, 199, 210, 203, 211, 197, 207, 213, 203, 215, 206, 205, 208, 202, 212,
   217, 204, 206, 200, 208, 214, 201, 216, 207, 209, 214, 216, 212, 210, 217, 213, 215, 211, 214, 212, 218, 216, 218, 213, 218, 217,
   215, 219, 222, 224, 223, 220, 226, 225, 227, 221, 230, 223, 250, 231, 249, 225, 222, 228, 251, 249, 233, 227, 224, 251, 229, 250,
   226, 232, 228, 234, 254, 229, 252, 236, 235, 230, 256, 253, 232, 238, 237, 257, 231, 255, 239, 233, 242, 235, 260, 243, 258, 237,
   234, 240, 262, 259, 245, 239, 236, 263, 241, 261, 238, 244, 240, 246, 266, 241, 264, 247, 246, 242, 268, 265, 244, 248, 247, 269,
   243, 267, 248, 245, 251, 254, 252, 256, 250, 253, 257, 255, 249, 271, 253, 261, 272, 259, 255, 252, 270, 263, 258, 272, 257, 254,
   262, 270, 260, 256, 271, 262, 266, 273, 263, 275, 264, 268, 260, 274, 269, 276, 258, 277, 261, 265, 278, 267, 259, 281, 265, 267,
   264, 280, 269, 266, 268, 279, 270, 273, 275, 274, 271, 277, 276, 278, 272, 279, 274, 283, 280, 282, 276, 273, 279, 284, 282, 281,
   278, 275, 284, 280, 283, 277, 281, 284, 283, 282, 285, 290, 292, 288, 286, 293, 289, 291, 287, 290, 294, 318, 296, 288, 319, 292,
   318, 295, 298, 320, 289, 319, 293, 297, 320, 299, 291, 294, 302, 325, 295, 323, 304, 300, 296, 326, 301, 324, 298, 321, 297, 305,
   322, 303, 299, 302, 306, 327, 308, 300, 329, 304, 328, 307, 310, 330, 301, 331, 305, 309, 332, 311, 303, 306, 314, 337, 307, 335,
   316, 312, 308, 338, 313, 336, 310, 333, 309, 317, 334, 315, 311, 314, 312, 339, 316, 340, 313, 341, 317, 315, 324, 322, 320, 326,
   319, 321, 318, 325, 323, 323, 342, 328, 343, 321, 331, 325, 327, 342, 344, 332, 322, 329, 326, 343, 330, 344, 324, 336, 346, 330,
   348, 334, 332, 338, 329, 345, 350, 331, 333, 327, 337, 347, 328, 349, 335, 335, 352, 340, 354, 333, 341, 337, 339, 351, 356, 341,
   334, 339, 338, 353, 340, 355, 336, 342, 347, 349, 345, 343, 350, 346, 348, 344, 347, 351, 357, 353, 345, 358, 349, 357, 352, 355,
   359, 346, 358, 350, 354, 359, 356, 348, 351, 353, 362, 352, 361, 355, 360, 354, 356, 361, 360, 359, 362, 358, 360, 357, 362, 361,
   363, 366, 368, 367, 364, 370, 369, 371, 365, 374, 367, 400, 375, 399, 369, 366, 372, 401, 399, 377, 371, 368, 401, 373, 400, 370,
   376, 372, 378, 404, 373, 402, 380, 379, 374, 406, 403, 376, 382, 381, 407, 375, 405, 383, 377, 386, 379, 410, 387, 408, 381, 378,
   384, 412, 409, 389, 383, 380, 413, 385, 411, 382, 388, 384, 390, 416, 385, 414, 392, 391, 386, 418, 415, 388, 394, 393, 419, 387,
   417, 395, 389, 396, 391, 422, 397, 420, 393, 390, 396, 424, 421, 398, 395, 392, 425, 397, 423, 394, 398, 401, 404, 402, 406, 400,
   403, 407, 405, 399, 427, 403, 411, 428, 409, 405, 402, 426, 413, 408, 428, 407, 404, 412, 426, 410, 406, 427, 412, 416, 429, 413,
   431, 414, 418, 410, 430, 419, 432, 408, 433, 411, 415, 434, 417, 409, 439, 415, 423, 440, 421, 417, 414, 436, 425, 420, 438, 419,
   416, 424, 435, 422, 418, 437, 424, 422, 441, 425, 442, 420, 443, 423, 421, 426, 429, 431, 430, 427, 433, 432, 434, 428, 437, 430,
   445, 438, 444, 432, 429, 435, 446, 444, 440, 434, 431, 446, 436, 445, 433, 439, 435, 441, 449, 436, 447, 442, 441, 437, 451, 448,
   439, 443, 442, 452, 438, 450, 443, 440, 446, 449, 447, 451, 445, 448, 452, 450, 444, 453, 448, 450, 447, 453, 452, 449, 451, 453
}; // 2.13 kb
static const cart_index_t iCartXY_ab12_a2[1716] = {
   0, 1, 2, 3, 4, 5, 6, 9, 10, 11, 13, 15, 11, 7, 12, 9, 15, 14, 13, 14, 8, 15, 10, 12, 16, 25,
   26, 19, 21, 30, 25, 17, 27, 20, 29, 23, 26, 27, 18, 28, 22, 24, 19, 20, 28, 25, 30, 29, 21, 29, 22, 30,
   26, 28, 30, 23, 24, 29, 28, 27, 31, 40, 41, 36, 38, 46, 42, 32, 43, 34, 47, 39, 44, 45, 33, 48, 35, 37,
   40, 34, 49, 42, 51, 47, 41, 49, 35, 50, 44, 48, 36, 42, 50, 40, 46, 51, 50, 43, 37, 49, 48, 45, 38, 51,
   44, 46, 41, 50, 51, 39, 45, 47, 49, 43, 46, 47, 48, 51, 50, 49, 52, 61, 62, 55, 57, 72, 63, 53, 65, 56,
   71, 59, 64, 66, 54, 70, 58, 60, 55, 67, 73, 61, 72, 75, 67, 56, 74, 63, 77, 71, 57, 75, 68, 72, 62, 73,
   68, 76, 58, 78, 64, 70, 77, 59, 69, 71, 74, 65, 78, 69, 60, 76, 70, 66, 61, 63, 79, 67, 75, 77, 62, 79,
   64, 73, 68, 78, 79, 65, 66, 74, 76, 69, 73, 74, 70, 79, 78, 76, 75, 71, 76, 77, 79, 74, 72, 77, 78, 75,
   73, 79, 80, 89, 90, 85, 87, 101, 91, 81, 92, 83, 102, 88, 93, 94, 82, 103, 84, 86, 95, 83, 104, 91, 109, 102,
   96, 105, 84, 107, 93, 103, 85, 97, 106, 89, 101, 108, 107, 98, 86, 105, 103, 94, 87, 108, 99, 101, 90, 106, 109, 88,
   100, 102, 104, 92, 89, 95, 113, 97, 108, 110, 90, 113, 96, 106, 99, 111, 97, 91, 114, 95, 110, 109, 114, 92, 98, 104,
   112, 100, 99, 115, 93, 111, 96, 107, 115, 100, 94, 112, 105, 98, 101, 110, 111, 108, 106, 113, 110, 102, 112, 109, 114, 104,
   111, 112, 103, 115, 107, 105, 113, 104, 105, 114, 115, 112, 106, 114, 107, 113, 111, 115, 108, 109, 115, 110, 113, 114, 116, 125,
   126, 119, 121, 142, 127, 117, 129, 120, 141, 123, 128, 130, 118, 140, 122, 124, 119, 131, 143, 125, 142, 145, 132, 120, 144, 127,
   147, 141, 121, 145, 133, 142, 126, 143, 134, 146, 122, 148, 128, 140, 147, 123, 135, 141, 144, 129, 148, 136, 124, 146, 140, 130,
   125, 137, 155, 131, 145, 153, 126, 155, 138, 143, 133, 154, 137, 127, 156, 132, 151, 147, 138, 157, 128, 149, 134, 148, 156, 129,
   139, 144, 152, 135, 157, 139, 130, 150, 146, 136, 131, 132, 158, 137, 153, 151, 133, 159, 134, 154, 138, 149, 160, 135, 136, 152,
   150, 139, 149, 150, 140, 157, 148, 146, 151, 141, 152, 147, 156, 144, 142, 153, 154, 145, 143, 155, 143, 158, 149, 155, 154, 159,
   158, 144, 150, 156, 160, 152, 145, 151, 159, 153, 155, 158, 159, 152, 146, 160, 157, 150, 153, 147, 160, 151, 158, 156, 154, 160,
   148, 159, 149, 157, 155, 156, 157, 158, 159, 160, 161, 170, 171, 166, 168, 188, 172, 162, 173, 164, 189, 169, 174, 175, 163, 190,
   165, 167, 176, 164, 191, 172, 196, 189, 177, 192, 165, 194, 174, 190, 166, 178, 193, 170, 188, 195, 194, 179, 167, 192, 190, 175,
   168, 195, 180, 188, 171, 193, 196, 169, 181, 189, 191, 173, 170, 182, 206, 178, 195, 197, 171, 206, 183, 193, 180, 198, 184, 172,
   207, 176, 199, 196, 207, 173, 185, 191, 201, 181, 186, 208, 174, 200, 177, 194, 208, 187, 175, 202, 192, 179, 182, 176, 209, 184,
   205, 199, 183, 210, 177, 204, 186, 200, 178, 184, 211, 182, 197, 205, 212, 185, 179, 203, 202, 187, 180, 213, 186, 198, 183, 204,
   214, 181, 187, 201, 203, 185, 188, 197, 198, 195, 193, 206, 199, 189, 201, 196, 207, 191, 200, 202, 190, 208, 194, 192, 209, 191,
   203, 207, 214, 201, 210, 203, 192, 212, 208, 202, 193, 211, 204, 206, 198, 213, 204, 212, 194, 210, 200, 208, 195, 205, 213, 197,
   206, 211, 205, 196, 214, 199, 209, 207, 197, 199, 215, 205, 211, 209, 198, 215, 200, 213, 204, 210, 215, 201, 202, 214, 212, 203,
   206, 209, 210, 211, 213, 215, 211, 207, 212, 209, 215, 214, 213, 214, 208, 215, 210, 212, 216, 225, 226, 219, 221, 248, 227, 217,
   229, 220, 247, 223, 228, 230, 218, 246, 222, 224, 219, 231, 249, 225, 248, 251, 232, 220, 250, 227, 253, 247, 221, 251, 233, 248,
   226, 249, 234, 252, 222, 254, 228, 246, 253, 223, 235, 247, 250, 229, 254, 236, 224, 252, 246, 230, 225, 237, 267, 231, 251, 259,
   226, 267, 238, 249, 233, 260, 239, 227, 268, 232, 257, 253, 240, 269, 228, 255, 234, 254, 268, 229, 241, 250, 258, 235, 269, 242,
   230, 256, 252, 236, 231, 243, 270, 237, 259, 263, 243, 232, 271, 239, 265, 257, 233, 272, 244, 260, 238, 261, 244, 273, 234, 266,
   240, 255, 274, 235, 245, 258, 262, 241, 275, 245, 236, 264, 256, 242, 237, 239, 276, 243, 263, 265, 238, 277, 240, 261, 244, 266,
   278, 241, 242, 262, 264, 245, 255, 256, 246, 269, 254, 252, 257, 247, 258, 253, 268, 250, 248, 259, 260, 251, 249, 267, 249, 270,
   261, 267, 260, 272, 271, 250, 262, 268, 274, 258, 251, 263, 272, 259, 267, 270, 273, 264, 252, 275, 269, 256, 265, 253, 274, 257,
   271, 268, 266, 275, 254, 273, 255, 269, 261, 279, 255, 277, 266, 273, 279, 262, 256, 278, 275, 264, 263, 257, 280, 265, 276, 271,
   280, 258, 264, 274, 278, 262, 259, 265, 281, 263, 270, 276, 260, 281, 266, 272, 261, 277, 267, 276, 277, 270, 272, 281, 276, 268,
   278, 271, 280, 274, 277, 278, 269, 279, 273, 275, 270, 271, 279, 276, 281, 280, 272, 280, 273, 281, 277, 279, 281, 274, 275, 280,
   279, 278, 282, 291, 292, 287, 289, 315, 293, 283, 294, 285, 316, 290, 295, 296, 284, 317, 286, 288, 297, 285, 318, 293, 323, 316,
   298, 319, 286, 321, 295, 317, 287, 299, 320, 291, 315, 322, 321, 300, 288, 319, 317, 296, 289, 322, 301, 315, 292, 320, 323, 290,
   302, 316, 318, 294, 291, 303, 339, 299, 322, 324, 292, 339, 304, 320, 301, 325, 305, 293, 340, 297, 326, 323, 340, 294, 306, 318,
   328, 302, 307, 341, 295, 327, 298, 321, 341, 308, 296, 329, 319, 300, 309, 297, 342, 305, 335, 326, 310, 343, 298, 333, 307, 327,
   299, 311, 344, 303, 324, 334, 345, 312, 300, 331, 329, 308, 301, 346, 313, 325, 304, 332, 347, 302, 314, 328, 330, 306, 303, 309,
   348, 311, 334, 336, 304, 349, 310, 332, 313, 337, 311, 305, 350, 309, 336, 335, 351, 306, 312, 330, 338, 314, 313, 352, 307, 337,
   310, 333, 353, 314, 308, 338, 331, 312, 315, 324, 325, 322, 320, 339, 326, 316, 328, 323, 340, 318, 327, 329, 317, 341, 321, 319,
   342, 318, 330, 340, 347, 328, 343, 331, 319, 345, 341, 329, 320, 344, 332, 339, 325, 346, 333, 345, 321, 343, 327, 341, 322, 334,
   346, 324, 339, 344, 335, 323, 347, 326, 342, 340, 324, 336, 354, 334, 344, 348, 325, 354, 337, 346, 332, 349, 336, 326, 355, 335,
   350, 342, 337, 356, 327, 352, 333, 343, 355, 328, 338, 347, 351, 330, 356, 338, 329, 353, 345, 331, 357, 330, 331, 351, 353, 338,
   332, 358, 333, 349, 337, 352, 334, 335, 359, 336, 348, 350, 339, 348, 349, 344, 346, 354, 350, 340, 351, 342, 355, 347, 352, 353,
   341, 356, 343, 345, 348, 342, 357, 350, 359, 355, 349, 357, 343, 358, 352, 356, 344, 350, 358, 348, 354, 359, 358, 351, 345, 357,
   356, 353, 346, 359, 352, 354, 349, 358, 359, 347, 353, 355, 357, 351, 354, 355, 356, 359, 358, 357, 360, 369, 370, 363, 365, 398,
   371, 361, 373, 364, 397, 367, 372, 374, 362, 396, 366, 368, 363, 375, 399, 369, 398, 401, 376, 364, 400, 371, 403, 397, 365, 401,
   377, 398, 370, 399, 378, 402, 366, 404, 372, 396, 403, 367, 379, 397, 400, 373, 404, 380, 368, 402, 396, 374, 369, 381, 423, 375,
   401, 409, 370, 423, 382, 399, 377, 410, 383, 371, 424, 376, 407, 403, 384, 425, 372, 405, 378, 404, 424, 373, 385, 400, 408, 379,
   425, 386, 374, 406, 402, 380, 375, 387, 426, 381, 409, 413, 388, 376, 427, 383, 415, 407, 377, 428, 389, 410, 382, 411, 390, 429,
   378, 416, 384, 405, 430, 379, 391, 408, 412, 385, 431, 392, 380, 414, 406, 386, 381, 393, 432, 387, 413, 421, 382, 433, 394, 411,
   389, 422, 393, 383, 434, 388, 419, 415, 394, 435, 384, 417, 390, 416, 436, 385, 395, 412, 420, 391, 437, 395, 386, 418, 414, 392,
   387, 388, 438, 393, 421, 419, 389, 439, 390, 422, 394, 417, 440, 391, 392, 420, 418, 395, 405, 406, 396, 425, 404, 402, 407, 397,
   408, 403, 424, 400, 398, 409, 410, 401, 399, 423, 399, 426, 411, 423, 410, 428, 427, 400, 412, 424, 430, 408, 401, 413, 428, 409,
   423, 426, 429, 414, 402, 431, 425, 406, 415, 403, 430, 407, 427, 424, 416, 431, 404, 429, 405, 425, 417, 441, 405, 435, 416, 429,
   441, 418, 406, 437, 431, 414, 419, 407, 442, 415, 434, 427, 442, 408, 420, 430, 436, 412, 409, 421, 443, 413, 426, 432, 410, 443,
   422, 428, 411, 433, 411, 444, 417, 433, 422, 439, 445, 412, 418, 436, 440, 420, 413, 419, 446, 421, 432, 438, 447, 420, 414, 440,
   437, 418, 421, 415, 448, 419, 438, 434, 422, 449, 416, 439, 417, 435, 423, 432, 433, 426, 428, 443, 434, 424, 436, 427, 442, 430,
   435, 437, 425, 441, 429, 431, 426, 438, 444, 432, 443, 446, 438, 427, 445, 434, 448, 442, 428, 446, 439, 443, 433, 444, 439, 447,
   429, 449, 435, 441, 448, 430, 440, 442, 445, 436, 449, 440, 431, 447, 441, 437, 432, 434, 450, 438, 446, 448, 433, 450, 435, 444,
   439, 449, 450, 436, 437, 445, 447, 440, 444, 445, 441, 450, 449, 447, 446, 442, 447, 448, 450, 445, 443, 448, 449, 446, 444, 450
}; // 3.35 kb
static const cart_index_t iCartXY_ab12_a3[2200] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 16, 19, 20, 13, 22, 15, 23, 24, 13, 11, 18, 14, 22, 19,
   21, 24, 17, 23, 15, 17, 12, 23, 16, 24, 18, 20, 21, 22, 25, 36, 38, 34, 35, 30, 44, 32, 45, 40, 34, 26,
   39, 28, 43, 36, 37, 45, 33, 41, 35, 37, 27, 43, 29, 44, 31, 38, 39, 42, 30, 28, 42, 36, 44, 34, 43, 40,
   41, 45, 32, 41, 29, 45, 38, 40, 42, 35, 43, 44, 40, 33, 31, 41, 42, 45, 39, 44, 37, 43, 46, 61, 62, 55,
   56, 49, 67, 51, 69, 66, 61, 47, 63, 50, 68, 57, 59, 71, 53, 65, 62, 63, 48, 70, 52, 72, 54, 58, 60, 64,
   55, 50, 70, 57, 73, 61, 68, 69, 65, 71, 56, 68, 52, 73, 58, 67, 64, 62, 70, 72, 49, 57, 72, 61, 67, 55,
   73, 66, 71, 69, 67, 59, 54, 68, 64, 73, 60, 72, 63, 70, 51, 71, 58, 69, 62, 66, 72, 56, 73, 67, 69, 53,
   60, 65, 70, 71, 63, 73, 59, 68, 66, 65, 64, 71, 72, 69, 70, 67, 68, 73, 74, 91, 93, 83, 84, 79, 100, 81,
   102, 95, 89, 75, 94, 77, 98, 85, 86, 103, 82, 96, 90, 92, 76, 99, 78, 101, 80, 87, 88, 97, 79, 89, 105, 91,
   100, 83, 107, 95, 104, 102, 91, 77, 106, 85, 108, 89, 98, 104, 96, 103, 81, 104, 90, 102, 93, 95, 105, 84, 107, 100,
   93, 106, 78, 109, 87, 105, 97, 90, 99, 101, 104, 82, 92, 96, 106, 103, 94, 108, 86, 98, 105, 94, 80, 106, 97, 109,
   88, 101, 92, 99, 83, 85, 109, 89, 107, 91, 108, 102, 103, 104, 84, 108, 87, 107, 90, 100, 101, 93, 109, 105, 107, 86,
   88, 98, 99, 108, 92, 109, 94, 106, 100, 98, 97, 108, 101, 107, 99, 105, 106, 109, 102, 96, 99, 103, 109, 104, 106, 107,
   98, 108, 95, 103, 101, 104, 105, 102, 109, 100, 108, 107, 110, 125, 127, 119, 120, 113, 137, 115, 139, 136, 126, 111, 129, 114,
   138, 121, 123, 141, 117, 135, 128, 130, 112, 140, 116, 142, 118, 122, 124, 134, 131, 114, 146, 121, 150, 126, 138, 145, 135, 141,
   132, 144, 116, 151, 122, 143, 134, 128, 140, 142, 113, 131, 148, 125, 137, 119, 149, 136, 147, 139, 143, 133, 118, 144, 134, 151,
   124, 142, 130, 140, 115, 147, 132, 139, 127, 136, 148, 120, 149, 137, 145, 117, 133, 135, 146, 141, 129, 150, 123, 138, 119, 126,
   153, 131, 149, 125, 152, 139, 145, 147, 120, 152, 128, 149, 132, 137, 143, 127, 153, 148, 125, 121, 154, 126, 152, 131, 150, 147,
   141, 145, 152, 123, 130, 138, 144, 150, 133, 154, 129, 146, 127, 154, 122, 153, 128, 148, 142, 132, 151, 143, 153, 129, 124, 146,
   140, 154, 130, 151, 133, 144, 136, 145, 143, 147, 148, 139, 153, 137, 152, 149, 147, 135, 144, 141, 154, 145, 146, 152, 138, 150,
   148, 146, 134, 154, 142, 153, 140, 143, 144, 151, 149, 138, 140, 150, 151, 152, 144, 153, 146, 154, 137, 150, 142, 152, 143, 149,
   151, 148, 154, 153, 139, 141, 151, 145, 153, 147, 154, 149, 150, 152, 155, 172, 174, 164, 165, 160, 187, 162, 189, 182, 170, 156,
   175, 158, 185, 166, 167, 190, 163, 183, 171, 173, 157, 186, 159, 188, 161, 168, 169, 184, 160, 176, 192, 172, 187, 164, 200, 182,
   191, 189, 178, 158, 195, 166, 201, 170, 185, 193, 183, 190, 162, 191, 177, 189, 174, 182, 192, 165, 200, 187, 180, 196, 159, 202,
   168, 194, 184, 171, 186, 188, 193, 163, 179, 183, 195, 190, 175, 201, 167, 185, 194, 181, 161, 196, 184, 202, 169, 188, 173, 186,
   164, 178, 207, 176, 200, 172, 205, 189, 199, 191, 165, 205, 180, 200, 177, 187, 198, 174, 207, 192, 176, 166, 208, 170, 203, 178,
   201, 199, 190, 193, 177, 206, 168, 204, 171, 198, 188, 180, 202, 194, 203, 167, 181, 185, 197, 201, 179, 208, 175, 195, 204, 179,
   169, 197, 186, 206, 173, 202, 181, 196, 172, 170, 209, 178, 205, 176, 203, 191, 193, 199, 174, 209, 171, 207, 180, 192, 194, 177,
   204, 198, 209, 175, 173, 195, 196, 208, 181, 206, 179, 197, 198, 197, 184, 206, 188, 204, 186, 194, 196, 202, 199, 183, 197, 190,
   208, 193, 195, 203, 185, 201, 182, 199, 198, 191, 192, 189, 207, 187, 205, 200, 187, 203, 194, 205, 198, 200, 204, 192, 209, 207,
   205, 185, 196, 201, 206, 203, 197, 209, 195, 208, 189, 193, 204, 199, 207, 191, 209, 200, 203, 205, 207, 195, 186, 208, 202, 209,
   196, 204, 197, 206, 191, 190, 206, 193, 209, 199, 208, 205, 201, 203, 192, 208, 188, 209, 194, 207, 202, 198, 206, 204, 200, 201,
   202, 203, 204, 205, 206, 207, 208, 209, 210, 225, 227, 219, 220, 213, 243, 215, 245, 242, 226, 211, 229, 214, 244, 221, 223, 247,
   217, 241, 228, 230, 212, 246, 216, 248, 218, 222, 224, 240, 233, 214, 252, 221, 262, 226, 244, 251, 241, 247, 234, 250, 216, 263,
   222, 249, 240, 228, 246, 248, 213, 231, 254, 225, 243, 219, 261, 242, 253, 245, 249, 236, 218, 250, 240, 263, 224, 248, 230, 246,
   215, 253, 232, 245, 227, 242, 254, 220, 261, 243, 251, 217, 235, 241, 252, 247, 229, 262, 223, 244, 219, 237, 266, 231, 261, 225,
   264, 245, 257, 253, 220, 264, 238, 261, 232, 243, 255, 227, 266, 254, 237, 221, 268, 226, 265, 233, 262, 259, 247, 251, 265, 223,
   239, 244, 256, 262, 235, 268, 229, 252, 238, 269, 222, 267, 228, 260, 248, 234, 263, 249, 267, 239, 224, 258, 246, 269, 230, 263,
   236, 250, 231, 226, 274, 233, 270, 237, 265, 257, 251, 259, 232, 273, 228, 271, 234, 255, 249, 238, 267, 260, 225, 233, 275, 237,
   264, 231, 270, 253, 259, 257, 273, 235, 230, 256, 250, 272, 236, 269, 239, 258, 227, 275, 234, 266, 238, 254, 260, 232, 271, 255,
   274, 229, 236, 252, 258, 268, 239, 272, 235, 256, 242, 257, 255, 253, 254, 245, 266, 243, 264, 261, 259, 241, 256, 247, 268, 251,
   252, 265, 244, 262, 260, 258, 240, 269, 248, 267, 246, 249, 250, 263, 270, 244, 258, 262, 272, 265, 256, 274, 252, 268, 271, 256,
   246, 272, 263, 273, 250, 267, 258, 269, 243, 270, 260, 264, 255, 261, 271, 254, 275, 266, 255, 272, 248, 273, 249, 271, 263, 260,
   269, 267, 245, 259, 271, 257, 266, 253, 275, 261, 270, 264, 257, 247, 272, 251, 274, 259, 268, 270, 262, 265, 253, 251, 273, 259,
   275, 257, 274, 264, 265, 270, 254, 274, 249, 275, 260, 266, 267, 255, 273, 271, 275, 252, 250, 268, 269, 274, 258, 273, 256, 272,
   261, 265, 267, 270, 271, 264, 273, 266, 274, 275, 264, 262, 269, 265, 273, 270, 272, 275, 268, 274, 266, 268, 263, 274, 267, 275,
   269, 271, 272, 273, 276, 293, 295, 285, 286, 281, 314, 283, 316, 309, 291, 277, 296, 279, 312, 287, 288, 317, 284, 310, 292, 294,
   278, 313, 280, 315, 282, 289, 290, 311, 281, 297, 319, 293, 314, 285, 333, 309, 318, 316, 299, 279, 322, 287, 334, 291, 312, 320,
   310, 317, 283, 318, 298, 316, 295, 309, 319, 286, 333, 314, 301, 323, 280, 335, 289, 321, 311, 292, 313, 315, 320, 284, 300, 310,
   322, 317, 296, 334, 288, 312, 321, 302, 282, 323, 311, 335, 290, 315, 294, 313, 285, 305, 340, 297, 333, 293, 338, 316, 328, 318,
   286, 338, 307, 333, 298, 314, 326, 295, 340, 319, 303, 287, 341, 291, 336, 299, 334, 329, 317, 320, 304, 339, 289, 337, 292, 327,
   315, 301, 335, 321, 336, 288, 308, 312, 324, 334, 300, 341, 296, 322, 337, 306, 290, 325, 313, 339, 294, 335, 302, 323, 293, 303,
   348, 305, 338, 297, 342, 318, 330, 328, 305, 291, 349, 299, 344, 303, 336, 330, 320, 329, 295, 348, 304, 340, 307, 319, 331, 298,
   343, 326, 307, 350, 292, 346, 301, 331, 321, 304, 337, 327, 349, 296, 306, 322, 332, 341, 308, 345, 300, 324, 350, 308, 294, 332,
   323, 347, 302, 339, 306, 325, 297, 299, 353, 303, 342, 305, 344, 328, 329, 330, 298, 352, 301, 343, 304, 326, 327, 307, 346, 331,
   351, 300, 302, 324, 325, 345, 306, 347, 308, 332, 327, 325, 311, 339, 315, 337, 313, 321, 323, 335, 329, 310, 324, 317, 341, 320,
   322, 336, 312, 334, 309, 328, 326, 318, 319, 316, 340, 314, 338, 333, 314, 342, 331, 338, 326, 333, 343, 319, 348, 340, 344, 312,
   332, 334, 345, 336, 324, 349, 322, 341, 316, 330, 343, 328, 340, 318, 348, 333, 342, 338, 346, 332, 313, 347, 335, 350, 323, 337,
   325, 339, 330, 317, 345, 320, 349, 329, 341, 344, 334, 336, 331, 347, 315, 350, 321, 346, 335, 327, 339, 337, 326, 351, 321, 352,
   327, 343, 337, 331, 350, 346, 352, 324, 323, 345, 339, 351, 325, 350, 332, 347, 328, 320, 351, 329, 353, 330, 349, 342, 336, 344,
   353, 322, 325, 341, 347, 349, 332, 351, 324, 345, 318, 329, 352, 330, 348, 328, 353, 338, 344, 342, 319, 353, 327, 348, 331, 340,
   346, 326, 352, 343, 333, 344, 346, 342, 343, 338, 352, 340, 353, 348, 342, 334, 347, 336, 351, 344, 345, 353, 341, 349, 343, 345,
   335, 351, 337, 352, 339, 346, 347, 350, 338, 336, 350, 344, 352, 342, 351, 348, 349, 353, 340, 349, 337, 353, 346, 348, 350, 343,
   351, 352, 348, 341, 339, 349, 350, 353, 347, 352, 345, 351, 354, 369, 371, 363, 364, 357, 393, 359, 395, 392, 370, 355, 373, 358,
   394, 365, 367, 397, 361, 391, 372, 374, 356, 396, 360, 398, 362, 366, 368, 390, 377, 358, 402, 365, 418, 370, 394, 401, 391, 397,
   378, 400, 360, 419, 366, 399, 390, 372, 396, 398, 357, 375, 404, 369, 393, 363, 417, 392, 403, 395, 399, 380, 362, 400, 390, 419,
   368, 398, 374, 396, 359, 403, 376, 395, 371, 392, 404, 364, 417, 393, 401, 361, 379, 391, 402, 397, 373, 418, 367, 394, 363, 381,
   422, 375, 417, 369, 420, 395, 407, 403, 364, 420, 383, 417, 376, 393, 405, 371, 422, 404, 382, 365, 424, 370, 421, 377, 418, 409,
   397, 401, 421, 367, 385, 394, 406, 418, 379, 424, 373, 402, 384, 425, 366, 423, 372, 410, 398, 378, 419, 399, 423, 386, 368, 408,
   396, 425, 374, 419, 380, 400, 387, 370, 436, 377, 428, 382, 421, 413, 401, 409, 388, 435, 372, 429, 378, 411, 399, 384, 423, 410,
   369, 387, 437, 381, 420, 375, 426, 403, 415, 407, 435, 389, 374, 412, 400, 431, 380, 425, 386, 408, 371, 437, 388, 422, 383, 404,
   416, 376, 427, 405, 436, 373, 389, 402, 414, 424, 385, 430, 379, 406, 375, 382, 440, 387, 426, 381, 432, 407, 413, 415, 376, 438,
   384, 427, 388, 405, 411, 383, 433, 416, 381, 377, 442, 382, 432, 387, 428, 415, 409, 413, 439, 379, 386, 406, 412, 430, 389, 434,
   385, 414, 383, 443, 378, 433, 384, 416, 410, 388, 429, 411, 441, 385, 380, 414, 408, 434, 386, 431, 389, 412, 392, 407, 405, 403,
   404, 395, 422, 393, 420, 417, 409, 391, 406, 397, 424, 401, 402, 421, 394, 418, 410, 408, 390, 425, 398, 423, 396, 399, 400, 419,
   428, 394, 414, 418, 430, 421, 406, 436, 402, 424, 429, 412, 396, 431, 419, 435, 400, 423, 408, 425, 393, 426, 416, 420, 405, 417,
   427, 404, 437, 422, 411, 431, 398, 435, 399, 429, 419, 410, 425, 423, 395, 415, 427, 407, 422, 403, 437, 417, 426, 420, 413, 397,
   430, 401, 436, 409, 424, 428, 418, 421, 403, 413, 438, 415, 437, 407, 440, 420, 432, 426, 404, 440, 411, 437, 416, 422, 433, 405,
   438, 427, 415, 401, 439, 409, 442, 413, 436, 432, 421, 428, 416, 441, 399, 443, 410, 433, 423, 411, 435, 429, 442, 402, 412, 424,
   434, 436, 414, 439, 406, 430, 443, 414, 400, 434, 425, 441, 408, 435, 412, 431, 444, 406, 408, 430, 431, 439, 412, 441, 414, 434,
   405, 444, 410, 438, 411, 427, 429, 416, 443, 433, 407, 409, 444, 413, 440, 415, 442, 426, 428, 432, 417, 432, 433, 426, 427, 420,
   438, 422, 440, 437, 432, 418, 434, 421, 439, 428, 430, 442, 424, 436, 433, 434, 419, 441, 423, 443, 425, 429, 431, 435, 426, 421,
   441, 428, 444, 432, 439, 440, 436, 442, 427, 439, 423, 444, 429, 438, 435, 433, 441, 443, 420, 428, 443, 432, 438, 426, 444, 437,
   442, 440, 438, 430, 425, 439, 435, 444, 431, 443, 434, 441, 422, 442, 429, 440, 433, 437, 443, 427, 444, 438, 440, 424, 431, 436,
   441, 442, 434, 444, 430, 439, 437, 436, 435, 442, 443, 440, 441, 438, 439, 444
}; // 4.30 kb
static const cart_index_t iCartXY_ab12_a4[2475] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 26, 22, 28, 31, 32, 24, 25,
   33, 34, 35, 30, 20, 16, 21, 24, 18, 30, 32, 23, 29, 26, 34, 27, 33, 31, 35, 22, 23, 17, 30, 31, 25, 19,
   27, 21, 35, 28, 29, 32, 33, 34, 36, 47, 48, 39, 51, 41, 52, 61, 62, 45, 46, 63, 57, 59, 56, 45, 37, 50,
   51, 40, 59, 60, 43, 53, 47, 63, 49, 58, 55, 61, 46, 49, 38, 57, 58, 52, 42, 53, 44, 63, 48, 50, 54, 60,
   62, 39, 40, 54, 45, 47, 56, 62, 55, 60, 51, 57, 58, 63, 61, 59, 41, 55, 42, 56, 61, 46, 48, 58, 54, 59,
   52, 60, 62, 63, 57, 56, 43, 44, 59, 55, 57, 54, 49, 50, 61, 62, 53, 60, 58, 63, 64, 79, 80, 69, 81, 71,
   83, 94, 95, 73, 74, 97, 90, 92, 85, 81, 65, 82, 79, 67, 94, 96, 72, 84, 75, 98, 76, 88, 86, 93, 83, 84,
   66, 95, 96, 80, 68, 82, 70, 99, 77, 78, 87, 89, 91, 73, 67, 89, 81, 75, 92, 99, 86, 96, 79, 97, 88, 98,
   93, 94, 74, 88, 68, 90, 98, 83, 77, 96, 87, 97, 80, 89, 91, 99, 95, 69, 75, 91, 73, 79, 85, 95, 93, 99,
   81, 90, 98, 97, 94, 92, 90, 76, 70, 97, 88, 95, 87, 84, 78, 98, 91, 82, 89, 96, 99, 71, 93, 77, 85, 94,
   74, 80, 98, 91, 92, 83, 99, 95, 97, 90, 92, 72, 78, 94, 86, 97, 89, 76, 82, 93, 99, 84, 96, 88, 98, 85,
   86, 87, 92, 93, 90, 91, 88, 89, 94, 95, 96, 99, 98, 97, 100, 121, 122, 103, 115, 105, 117, 137, 138, 109, 110, 139,
   127, 129, 126, 121, 101, 123, 116, 104, 135, 136, 107, 119, 111, 140, 113, 128, 125, 131, 122, 123, 102, 133, 134, 118, 106, 120,
   108, 141, 112, 114, 124, 130, 132, 103, 116, 133, 109, 121, 126, 138, 135, 143, 115, 127, 142, 139, 137, 129, 115, 104, 134, 121,
   111, 137, 144, 125, 136, 116, 142, 128, 140, 131, 135, 105, 135, 118, 126, 137, 110, 122, 142, 133, 129, 117, 143, 138, 139, 127,
   117, 136, 106, 138, 144, 122, 112, 134, 124, 143, 118, 130, 132, 141, 133, 137, 107, 120, 135, 125, 142, 134, 113, 123, 131, 144,
   119, 136, 128, 140, 138, 119, 108, 143, 136, 133, 124, 123, 114, 144, 132, 120, 130, 134, 141, 109, 111, 141, 115, 116, 129, 143,
   131, 144, 121, 139, 140, 142, 135, 137, 110, 140, 112, 127, 142, 117, 118, 144, 132, 139, 122, 141, 133, 143, 138, 139, 113, 114,
   142, 128, 143, 130, 119, 120, 140, 141, 123, 134, 136, 144, 127, 128, 124, 139, 140, 138, 132, 136, 130, 142, 133, 134, 141, 144,
   143, 129, 125, 130, 137, 131, 139, 141, 128, 134, 135, 143, 136, 144, 140, 142, 126, 131, 132, 129, 135, 127, 133, 140, 141, 137,
   138, 144, 143, 142, 139, 145, 166, 167, 150, 162, 152, 164, 181, 182, 154, 155, 190, 177, 179, 172, 168, 146, 169, 160, 148, 183,
   185, 153, 165, 156, 191, 157, 175, 173, 180, 170, 171, 147, 184, 186, 161, 149, 163, 151, 192, 158, 159, 174, 176, 178, 166, 148,
   187, 168, 156, 189, 198, 173, 185, 160, 193, 175, 191, 180, 183, 167, 187, 149, 188, 196, 170, 158, 186, 174, 194, 161, 176, 178,
   192, 184, 150, 168, 188, 154, 166, 172, 182, 189, 197, 162, 177, 195, 190, 181, 179, 188, 169, 151, 194, 187, 184, 174, 171, 159,
   196, 178, 163, 176, 186, 192, 152, 189, 170, 172, 181, 155, 167, 195, 188, 179, 164, 197, 182, 190, 177, 189, 153, 171, 183, 173,
   193, 187, 157, 169, 180, 198, 165, 185, 175, 191, 154, 160, 194, 162, 168, 179, 197, 183, 199, 166, 190, 193, 195, 189, 181, 155,
   193, 161, 177, 195, 164, 170, 199, 184, 190, 167, 194, 188, 197, 182, 162, 156, 196, 166, 160, 181, 199, 180, 198, 168, 195, 191,
   193, 183, 189, 195, 157, 163, 193, 175, 199, 186, 165, 171, 191, 196, 169, 187, 185, 198, 164, 198, 158, 182, 199, 167, 161, 196,
   178, 197, 170, 192, 184, 194, 188, 197, 165, 159, 199, 185, 194, 176, 169, 163, 198, 192, 171, 186, 187, 196, 172, 183, 184, 179,
   189, 177, 188, 193, 194, 181, 182, 199, 197, 195, 190, 181, 173, 186, 189, 180, 195, 196, 175, 187, 183, 199, 185, 198, 191, 193,
   182, 185, 174, 197, 198, 188, 178, 187, 176, 199, 184, 186, 192, 196, 194, 190, 175, 176, 195, 191, 197, 192, 185, 186, 193, 194,
   187, 196, 198, 199, 177, 191, 178, 190, 193, 182, 184, 198, 192, 195, 188, 196, 194, 199, 197, 179, 180, 192, 181, 183, 190, 194,
   191, 196, 189, 197, 198, 199, 193, 195, 200, 221, 222, 203, 215, 205, 217, 243, 244, 209, 210, 251, 233, 235, 232, 223, 201, 225,
   216, 204, 241, 242, 207, 219, 211, 252, 213, 234, 231, 237, 224, 226, 202, 239, 240, 218, 206, 220, 208, 253, 212, 214, 230, 236,
   238, 203, 227, 245, 209, 221, 232, 244, 247, 256, 215, 233, 254, 251, 243, 235, 227, 204, 246, 223, 211, 249, 258, 231, 242, 216,
   255, 234, 252, 237, 241, 205, 247, 228, 232, 243, 210, 222, 254, 245, 235, 217, 256, 244, 251, 233, 228, 248, 206, 250, 259, 224,
   212, 240, 230, 257, 218, 236, 238, 253, 239, 249, 207, 229, 241, 231, 255, 246, 213, 225, 237, 258, 219, 242, 234, 252, 250, 229,
   208, 257, 248, 239, 230, 226, 214, 259, 238, 220, 236, 240, 253, 209, 223, 261, 215, 227, 235, 256, 249, 265, 221, 251, 260, 254,
   247, 243, 210, 260, 224, 233, 254, 217, 228, 265, 250, 251, 222, 261, 245, 256, 244, 221, 211, 262, 227, 216, 247, 264, 237, 258,
   223, 260, 252, 255, 241, 249, 222, 262, 212, 245, 263, 228, 218, 259, 238, 261, 224, 253, 239, 257, 250, 260, 213, 226, 255, 234,
   264, 248, 219, 229, 252, 262, 225, 246, 242, 258, 261, 225, 214, 263, 246, 257, 236, 229, 220, 262, 253, 226, 240, 248, 259, 215,
   216, 263, 221, 223, 243, 265, 241, 264, 227, 254, 255, 260, 249, 247, 217, 264, 218, 244, 265, 222, 224, 263, 239, 256, 228, 257,
   250, 261, 245, 265, 219, 220, 264, 242, 263, 240, 225, 226, 258, 259, 229, 248, 246, 262, 245, 246, 230, 261, 262, 250, 238, 248,
   236, 263, 239, 240, 253, 259, 257, 247, 231, 248, 249, 237, 260, 262, 234, 246, 241, 264, 242, 258, 252, 255, 232, 249, 250, 235,
   247, 233, 245, 260, 261, 243, 244, 265, 256, 254, 251, 233, 255, 239, 251, 260, 244, 250, 264, 257, 254, 245, 263, 261, 265, 256,
   254, 234, 240, 260, 252, 265, 259, 242, 248, 255, 263, 246, 262, 258, 264, 235, 241, 257, 243, 249, 251, 261, 255, 263, 247, 256,
   264, 265, 260, 254, 256, 242, 236, 265, 258, 261, 253, 246, 240, 264, 257, 248, 259, 262, 263, 243, 237, 259, 247, 241, 254, 263,
   252, 262, 249, 265, 258, 264, 255, 260, 244, 258, 238, 256, 264, 245, 239, 262, 253, 265, 250, 259, 257, 263, 261, 251, 252, 253,
   254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 287, 288, 271, 283, 273, 285, 308, 309, 275, 276, 323, 304, 306,
   299, 289, 267, 290, 281, 269, 310, 312, 274, 286, 277, 324, 278, 302, 300, 307, 291, 292, 268, 311, 313, 282, 270, 284, 272, 325,
   279, 280, 301, 303, 305, 293, 269, 314, 289, 277, 319, 331, 300, 312, 281, 326, 302, 324, 307, 310, 294, 315, 270, 317, 329, 291,
   279, 313, 301, 327, 282, 303, 305, 325, 311, 271, 295, 316, 275, 287, 299, 309, 318, 330, 283, 304, 328, 323, 308, 306, 317, 296,
   272, 327, 315, 311, 301, 292, 280, 329, 305, 284, 303, 313, 325, 273, 318, 297, 299, 308, 276, 288, 328, 316, 306, 285, 330, 309,
   323, 304, 319, 274, 298, 310, 300, 326, 314, 278, 290, 307, 331, 286, 312, 302, 324, 275, 293, 333, 283, 295, 306, 330, 320, 338,
   287, 323, 332, 328, 318, 308, 276, 332, 294, 304, 328, 285, 297, 338, 321, 323, 288, 333, 316, 330, 309, 295, 277, 335, 293, 281,
   320, 339, 307, 331, 289, 334, 324, 326, 310, 319, 334, 278, 296, 326, 302, 339, 322, 286, 298, 324, 335, 290, 314, 312, 331, 297,
   337, 279, 321, 340, 294, 282, 329, 305, 336, 291, 325, 311, 327, 317, 336, 298, 280, 340, 322, 327, 303, 296, 284, 337, 325, 292,
   313, 315, 329, 287, 281, 341, 295, 289, 318, 343, 310, 339, 293, 332, 326, 334, 319, 320, 288, 341, 282, 316, 342, 297, 291, 340,
   311, 333, 294, 327, 317, 336, 321, 283, 289, 342, 287, 293, 308, 338, 319, 343, 295, 328, 334, 332, 320, 318, 342, 290, 284, 341,
   314, 340, 313, 298, 292, 335, 329, 296, 315, 322, 337, 285, 343, 291, 309, 338, 288, 294, 342, 317, 330, 297, 336, 321, 333, 316,
   343, 286, 292, 339, 312, 341, 315, 290, 296, 331, 337, 298, 322, 314, 335, 299, 320, 321, 306, 318, 304, 316, 332, 333, 308, 309,
   338, 330, 328, 323, 320, 300, 322, 319, 307, 334, 335, 302, 314, 310, 339, 312, 331, 324, 326, 321, 322, 301, 336, 337, 317, 305,
   315, 303, 340, 311, 313, 325, 329, 327, 332, 302, 315, 334, 324, 343, 337, 312, 322, 326, 341, 314, 335, 331, 339, 333, 314, 303,
   342, 335, 336, 325, 322, 313, 341, 327, 315, 329, 337, 340, 304, 334, 317, 323, 332, 309, 321, 343, 336, 328, 316, 342, 333, 338,
   330, 316, 335, 305, 333, 341, 321, 311, 337, 325, 342, 317, 329, 327, 340, 336, 306, 319, 336, 308, 320, 323, 333, 334, 342, 318,
   330, 343, 338, 332, 328, 318, 307, 337, 320, 310, 332, 341, 324, 335, 319, 343, 331, 339, 326, 334, 308, 310, 340, 318, 319, 328,
   342, 326, 341, 320, 338, 339, 343, 334, 332, 309, 339, 311, 330, 343, 316, 317, 341, 327, 338, 321, 340, 336, 342, 333, 338, 312,
   313, 343, 331, 342, 329, 314, 315, 339, 340, 322, 337, 335, 341, 323, 326, 327, 328, 334, 330, 336, 339, 340, 332, 333, 341, 342,
   343, 338, 328, 324, 329, 332, 326, 338, 340, 331, 337, 334, 342, 335, 341, 339, 343, 330, 331, 325, 338, 339, 333, 327, 335, 329,
   343, 336, 337, 340, 341, 342, 344, 365, 366, 347, 359, 349, 361, 393, 394, 353, 354, 407, 383, 385, 382, 367, 345, 369, 360, 348,
   391, 392, 351, 363, 355, 408, 357, 384, 381, 387, 368, 370, 346, 389, 390, 362, 350, 364, 352, 409, 356, 358, 380, 386, 388, 347,
   371, 395, 353, 365, 382, 394, 397, 412, 359, 383, 410, 407, 393, 385, 372, 348, 396, 367, 355, 399, 414, 381, 392, 360, 411, 384,
   408, 387, 391, 349, 397, 373, 382, 393, 354, 366, 410, 395, 385, 361, 412, 394, 407, 383, 374, 398, 350, 400, 415, 368, 356, 390,
   380, 413, 362, 386, 388, 409, 389, 399, 351, 375, 391, 381, 411, 396, 357, 369, 387, 414, 363, 392, 384, 408, 400, 376, 352, 413,
   398, 389, 380, 370, 358, 415, 388, 364, 386, 390, 409, 353, 377, 417, 359, 371, 385, 412, 405, 427, 365, 407, 416, 410, 397, 393,
   354, 416, 378, 383, 410, 361, 373, 427, 406, 407, 366, 417, 395, 412, 394, 377, 355, 420, 372, 360, 403, 426, 387, 414, 367, 418,
   408, 411, 391, 399, 378, 421, 356, 401, 425, 374, 362, 415, 388, 419, 368, 409, 389, 413, 400, 418, 357, 379, 411, 384, 426, 404,
   363, 375, 408, 420, 369, 396, 392, 414, 419, 379, 358, 425, 402, 413, 386, 376, 364, 421, 409, 370, 390, 398, 415, 359, 372, 428,
   365, 377, 393, 427, 403, 430, 371, 410, 422, 416, 405, 397, 371, 360, 429, 377, 367, 405, 432, 391, 426, 372, 422, 411, 418, 399,
   403, 361, 430, 374, 394, 427, 366, 378, 428, 401, 412, 373, 423, 406, 417, 395, 373, 431, 362, 406, 433, 378, 368, 425, 389, 423,
   374, 413, 400, 419, 401, 432, 363, 376, 426, 392, 429, 402, 369, 379, 414, 424, 375, 404, 396, 420, 433, 375, 364, 431, 404, 425,
   390, 379, 370, 424, 415, 376, 398, 402, 421, 365, 367, 434, 371, 372, 397, 430, 399, 432, 377, 416, 418, 422, 403, 405, 366, 434,
   368, 395, 428, 373, 374, 433, 400, 417, 378, 419, 401, 423, 406, 434, 369, 370, 429, 396, 431, 398, 375, 376, 420, 421, 379, 402,
   404, 424, 401, 402, 380, 419, 421, 400, 388, 398, 386, 425, 389, 390, 409, 415, 413, 403, 381, 404, 399, 387, 418, 420, 384, 396,
   391, 426, 392, 414, 408, 411, 382, 405, 406, 385, 397, 383, 395, 416, 417, 393, 394, 427, 412, 410, 407, 383, 422, 401, 407, 416,
   394, 406, 430, 423, 410, 395, 428, 417, 427, 412, 422, 384, 402, 418, 408, 432, 424, 392, 404, 411, 429, 396, 420, 414, 426, 385,
   403, 423, 393, 405, 407, 417, 422, 428, 397, 412, 430, 427, 416, 410, 423, 404, 386, 433, 424, 419, 409, 402, 390, 431, 413, 398,
   415, 421, 425, 405, 387, 424, 403, 391, 422, 429, 408, 420, 399, 432, 414, 426, 411, 418, 406, 424, 388, 423, 431, 401, 389, 421,
   409, 433, 400, 415, 413, 425, 419, 395, 429, 389, 417, 434, 406, 400, 431, 413, 428, 401, 425, 419, 433, 423, 428, 396, 390, 434,
   420, 433, 415, 404, 398, 429, 425, 402, 421, 424, 431, 397, 391, 431, 405, 399, 416, 434, 411, 429, 403, 430, 426, 432, 418, 422,
   430, 392, 398, 432, 414, 434, 421, 396, 402, 426, 431, 404, 424, 420, 429, 393, 399, 433, 397, 403, 410, 428, 418, 434, 405, 427,
   432, 430, 422, 416, 394, 432, 400, 412, 430, 395, 401, 434, 419, 427, 406, 433, 423, 428, 417, 407, 418, 419, 410, 422, 412, 423,
   432, 433, 416, 417, 434, 428, 430, 427, 416, 408, 421, 422, 411, 430, 431, 414, 424, 418, 434, 420, 429, 426, 432, 417, 420, 409,
   428, 429, 423, 413, 424, 415, 434, 419, 421, 425, 431, 433, 410, 411, 425, 416, 418, 427, 433, 426, 431, 422, 428, 429, 434, 432,
   430, 412, 426, 413, 427, 432, 417, 419, 429, 425, 430, 423, 431, 433, 434, 428, 427, 414, 415, 430, 426, 428, 425, 420, 421, 432,
   433, 424, 431, 429, 434
}; // 4.83 kb
static const cart_index_t iCartXY_ab12_a5[2520] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 27, 32, 33,
   24, 39, 26, 40, 30, 31, 36, 43, 37, 45, 41, 46, 47, 48, 42, 44, 24, 22, 29, 25, 39, 30, 35, 41, 28, 36,
   42, 32, 34, 47, 38, 44, 40, 45, 43, 48, 46, 26, 28, 23, 40, 27, 41, 29, 31, 34, 44, 37, 46, 38, 33, 35,
   42, 43, 39, 45, 47, 48, 49, 60, 62, 64, 65, 54, 76, 56, 78, 58, 59, 66, 83, 68, 84, 70, 79, 80, 82, 75,
   77, 58, 50, 63, 52, 74, 66, 67, 77, 57, 64, 82, 60, 61, 84, 69, 79, 71, 81, 73, 83, 78, 59, 61, 51, 73,
   53, 75, 55, 68, 69, 82, 65, 83, 67, 62, 63, 80, 81, 72, 74, 76, 84, 54, 52, 72, 60, 76, 58, 74, 70, 71,
   66, 75, 64, 73, 80, 81, 77, 78, 84, 83, 82, 79, 56, 71, 53, 78, 62, 70, 72, 59, 73, 77, 68, 79, 81, 65,
   74, 75, 83, 76, 84, 80, 82, 70, 57, 55, 71, 72, 77, 63, 75, 61, 79, 80, 78, 69, 76, 67, 82, 73, 74, 81,
   84, 83, 85, 101, 103, 106, 107, 88, 118, 90, 120, 94, 95, 100, 127, 102, 128, 111, 122, 123, 124, 112, 114, 100, 86, 105,
   89, 119, 106, 108, 122, 92, 101, 127, 96, 98, 129, 104, 120, 110, 121, 113, 125, 116, 102, 104, 87, 121, 91, 123, 93, 107,
   108, 128, 103, 129, 105, 97, 99, 118, 119, 109, 115, 117, 126, 94, 89, 115, 96, 126, 100, 119, 114, 110, 106, 124, 101, 113,
   128, 121, 122, 116, 129, 125, 127, 120, 95, 113, 91, 125, 97, 112, 109, 102, 121, 124, 107, 127, 119, 103, 115, 123, 129, 117,
   126, 118, 128, 88, 96, 117, 101, 118, 94, 126, 111, 116, 100, 112, 106, 125, 123, 129, 114, 120, 128, 127, 124, 122, 112, 98,
   93, 113, 109, 124, 99, 123, 104, 127, 118, 125, 108, 117, 105, 128, 121, 115, 119, 126, 129, 90, 116, 97, 120, 103, 111, 117,
   95, 125, 114, 102, 122, 129, 107, 126, 112, 127, 118, 128, 123, 124, 114, 92, 99, 110, 115, 122, 105, 124, 98, 120, 128, 116,
   104, 126, 108, 127, 113, 119, 121, 129, 125, 111, 110, 109, 116, 117, 114, 115, 112, 113, 122, 123, 120, 121, 118, 119, 124, 125,
   126, 129, 128, 127, 130, 153, 155, 151, 152, 135, 173, 137, 174, 139, 140, 147, 180, 149, 182, 157, 166, 167, 175, 162, 164, 151,
   131, 156, 133, 172, 153, 154, 174, 138, 145, 178, 141, 142, 183, 150, 168, 158, 170, 160, 176, 165, 152, 154, 132, 172, 134, 173,
   136, 155, 156, 179, 146, 181, 148, 143, 144, 169, 171, 159, 161, 163, 177, 135, 145, 169, 153, 173, 139, 179, 157, 168, 147, 162,
   151, 178, 167, 184, 164, 174, 182, 180, 175, 166, 147, 133, 171, 141, 181, 151, 172, 166, 158, 153, 180, 145, 160, 184, 170, 174,
   165, 183, 176, 178, 168, 137, 168, 146, 174, 155, 157, 169, 140, 178, 164, 149, 166, 184, 152, 179, 162, 180, 173, 182, 167, 175,
   149, 170, 134, 183, 143, 167, 159, 152, 172, 182, 155, 184, 171, 146, 161, 173, 181, 163, 177, 169, 179, 166, 138, 148, 158, 171,
   174, 156, 180, 142, 168, 184, 165, 150, 181, 154, 178, 160, 172, 170, 183, 176, 167, 150, 136, 170, 159, 182, 144, 173, 154, 184,
   169, 183, 156, 163, 148, 179, 172, 161, 171, 177, 181, 139, 141, 177, 145, 179, 147, 181, 164, 165, 151, 175, 153, 176, 182, 183,
   166, 168, 184, 178, 180, 174, 140, 176, 143, 178, 146, 162, 163, 149, 183, 175, 152, 180, 181, 155, 177, 167, 184, 169, 179, 173,
   182, 175, 142, 144, 160, 161, 180, 148, 182, 150, 178, 179, 176, 154, 177, 156, 184, 170, 171, 172, 181, 183, 162, 160, 159, 176,
   163, 175, 161, 167, 170, 180, 173, 178, 172, 169, 171, 182, 183, 177, 181, 179, 184, 164, 158, 161, 165, 177, 166, 171, 175, 160,
   174, 182, 168, 170, 179, 172, 180, 176, 181, 183, 184, 178, 157, 165, 163, 168, 169, 164, 177, 162, 176, 166, 167, 174, 183, 173,
   181, 175, 178, 179, 184, 182, 180, 185, 212, 213, 206, 207, 188, 230, 190, 232, 194, 195, 200, 239, 202, 241, 217, 228, 229, 236,
   218, 220, 212, 186, 214, 189, 231, 208, 210, 234, 192, 201, 240, 196, 198, 243, 204, 226, 216, 227, 219, 237, 222, 213, 214, 187,
   233, 191, 235, 193, 209, 211, 242, 203, 244, 205, 197, 199, 224, 225, 215, 221, 223, 238, 206, 189, 233, 196, 247, 212, 231, 232,
   216, 208, 245, 201, 219, 249, 227, 234, 222, 243, 237, 240, 226, 207, 231, 191, 247, 197, 230, 215, 213, 233, 246, 209, 248, 225,
   203, 221, 235, 244, 223, 238, 224, 242, 188, 208, 235, 212, 230, 194, 246, 217, 234, 200, 218, 206, 245, 229, 250, 220, 232, 241,
   239, 236, 228, 230, 210, 193, 231, 215, 246, 199, 235, 214, 248, 224, 247, 211, 223, 205, 242, 233, 221, 225, 238, 244, 190, 234,
   209, 232, 213, 217, 235, 195, 245, 220, 202, 228, 250, 207, 246, 218, 239, 230, 241, 229, 236, 232, 192, 211, 216, 233, 234, 214,
   245, 198, 226, 249, 222, 204, 247, 210, 240, 219, 231, 227, 243, 237, 194, 201, 242, 208, 246, 200, 248, 220, 226, 206, 236, 212,
   240, 241, 249, 228, 234, 250, 245, 239, 232, 195, 240, 203, 245, 209, 218, 224, 202, 249, 236, 207, 239, 248, 213, 242, 229, 250,
   235, 246, 230, 241, 200, 196, 244, 201, 248, 206, 247, 228, 222, 212, 239, 208, 237, 250, 243, 232, 226, 249, 240, 245, 234, 239,
   198, 205, 219, 225, 245, 211, 250, 204, 240, 248, 237, 210, 244, 214, 249, 227, 233, 231, 247, 243, 202, 243, 197, 249, 203, 229,
   223, 207, 247, 241, 213, 250, 244, 209, 238, 230, 248, 224, 242, 235, 246, 241, 204, 199, 227, 221, 250, 205, 246, 210, 249, 242,
   243, 214, 238, 211, 248, 231, 225, 233, 244, 247, 217, 226, 224, 234, 235, 220, 242, 218, 240, 228, 229, 232, 249, 230, 248, 236,
   245, 246, 250, 241, 239, 228, 216, 225, 222, 244, 232, 233, 239, 219, 234, 250, 226, 227, 248, 231, 245, 237, 247, 243, 249, 240,
   229, 227, 215, 243, 223, 241, 221, 230, 231, 250, 235, 249, 233, 224, 225, 246, 247, 238, 244, 242, 248, 236, 219, 221, 237, 238,
   239, 225, 241, 227, 245, 246, 240, 231, 242, 233, 250, 243, 244, 247, 248, 249, 218, 237, 223, 240, 224, 236, 238, 229, 243, 239,
   230, 245, 247, 235, 244, 241, 249, 242, 248, 246, 250, 220, 222, 238, 226, 242, 228, 244, 236, 237, 232, 241, 234, 243, 246, 247,
   239, 240, 248, 249, 250, 245, 251, 280, 282, 272, 273, 256, 301, 258, 303, 260, 261, 268, 313, 270, 315, 284, 293, 294, 308, 289,
   291, 278, 252, 283, 254, 299, 274, 275, 304, 259, 266, 311, 262, 263, 316, 271, 295, 285, 297, 287, 309, 292, 279, 281, 253, 300,
   255, 302, 257, 276, 277, 312, 267, 314, 269, 264, 265, 296, 298, 286, 288, 290, 310, 256, 278, 306, 280, 301, 260, 318, 284, 305,
   268, 289, 272, 317, 294, 323, 291, 303, 315, 313, 308, 293, 280, 254, 307, 262, 320, 278, 299, 305, 285, 274, 319, 266, 287, 324,
   297, 304, 292, 316, 309, 311, 295, 258, 305, 279, 303, 282, 284, 306, 261, 317, 291, 270, 293, 323, 273, 318, 289, 313, 301, 315,
   294, 308, 282, 307, 255, 322, 264, 306, 286, 279, 300, 321, 276, 325, 298, 267, 288, 302, 314, 290, 310, 296, 312, 305, 259, 281,
   285, 307, 304, 283, 319, 263, 295, 324, 292, 271, 320, 275, 311, 287, 299, 297, 316, 309, 306, 283, 257, 307, 286, 321, 265, 302,
   281, 325, 296, 322, 277, 290, 269, 312, 300, 288, 298, 310, 314, 260, 274, 321, 278, 318, 268, 327, 291, 304, 272, 308, 280, 319,
   315, 328, 293, 305, 323, 317, 313, 303, 261, 319, 276, 317, 279, 289, 302, 270, 328, 308, 273, 313, 327, 282, 321, 294, 323, 306,
   318, 301, 315, 272, 262, 322, 266, 326, 280, 320, 303, 292, 278, 317, 274, 309, 328, 316, 305, 295, 324, 311, 319, 304, 273, 320,
   264, 326, 267, 301, 290, 282, 322, 318, 279, 327, 314, 276, 310, 306, 325, 296, 312, 302, 321, 317, 263, 277, 287, 300, 319, 281,
   328, 271, 311, 326, 309, 275, 322, 283, 324, 297, 307, 299, 320, 316, 318, 275, 265, 299, 288, 327, 269, 321, 283, 326, 312, 320,
   281, 310, 277, 325, 307, 298, 300, 314, 322, 268, 266, 325, 274, 327, 272, 326, 293, 295, 280, 313, 278, 311, 323, 324, 303, 304,
   328, 319, 317, 305, 270, 324, 267, 328, 276, 294, 296, 273, 326, 315, 282, 323, 325, 279, 312, 301, 327, 302, 321, 306, 318, 323,
   271, 269, 297, 298, 328, 277, 327, 275, 324, 325, 316, 283, 314, 281, 326, 299, 300, 307, 322, 320, 301, 299, 286, 320, 290, 318,
   288, 306, 307, 327, 302, 326, 300, 296, 298, 321, 322, 310, 314, 312, 325, 303, 285, 300, 292, 322, 305, 307, 317, 287, 304, 328,
   295, 297, 326, 299, 319, 309, 320, 316, 324, 311, 284, 304, 302, 305, 306, 291, 321, 289, 319, 293, 294, 303, 328, 301, 327, 308,
   317, 318, 323, 315, 313, 289, 311, 296, 319, 302, 308, 312, 294, 324, 313, 301, 317, 326, 306, 325, 315, 328, 321, 327, 318, 323,
   313, 287, 298, 309, 314, 317, 300, 323, 297, 319, 327, 311, 299, 325, 307, 328, 316, 322, 320, 326, 324, 291, 295, 312, 304, 321,
   293, 325, 308, 311, 303, 315, 305, 324, 318, 326, 313, 319, 327, 328, 323, 317, 315, 297, 288, 316, 310, 323, 298, 318, 299, 328,
   321, 324, 307, 312, 300, 327, 320, 314, 322, 325, 326, 293, 292, 314, 295, 325, 303, 322, 313, 309, 305, 323, 304, 316, 327, 320,
   317, 311, 326, 324, 328, 319, 294, 316, 290, 324, 296, 315, 310, 301, 320, 323, 306, 328, 322, 302, 314, 318, 326, 312, 325, 321,
   327, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 356, 358, 350,
   351, 332, 380, 334, 382, 338, 339, 344, 395, 346, 397, 367, 378, 379, 392, 368, 370, 357, 330, 360, 333, 381, 352, 354, 384, 336,
   345, 396, 340, 342, 399, 348, 376, 366, 377, 369, 393, 372, 359, 361, 331, 383, 335, 385, 337, 353, 355, 398, 347, 400, 349, 341,
   343, 374, 375, 365, 371, 373, 394, 362, 333, 389, 340, 405, 357, 381, 388, 366, 352, 403, 345, 369, 411, 377, 384, 372, 399, 393,
   396, 376, 363, 387, 335, 406, 341, 386, 365, 359, 383, 404, 353, 410, 375, 347, 371, 385, 400, 373, 394, 374, 398, 332, 362, 391,
   356, 380, 338, 402, 367, 390, 344, 368, 350, 401, 379, 412, 370, 382, 397, 395, 392, 378, 386, 364, 337, 387, 365, 404, 343, 385,
   361, 410, 374, 406, 355, 373, 349, 398, 383, 371, 375, 394, 400, 334, 390, 363, 382, 358, 367, 391, 339, 401, 370, 346, 378, 412,
   351, 402, 368, 395, 380, 397, 379, 392, 388, 336, 364, 366, 389, 384, 360, 403, 342, 376, 411, 372, 348, 405, 354, 396, 369, 381,
   377, 399, 393, 338, 357, 408, 362, 402, 344, 413, 370, 388, 350, 392, 356, 407, 397, 415, 378, 390, 412, 401, 395, 382, 339, 407,
   359, 401, 363, 368, 386, 346, 415, 392, 351, 395, 413, 358, 408, 379, 412, 391, 402, 380, 397, 356, 340, 409, 345, 414, 362, 405,
   390, 372, 357, 407, 352, 393, 417, 399, 388, 376, 411, 396, 403, 384, 407, 342, 361, 369, 387, 403, 364, 417, 348, 396, 414, 393,
   354, 409, 360, 411, 377, 389, 381, 405, 399, 358, 409, 341, 416, 347, 391, 373, 363, 406, 408, 359, 418, 400, 353, 394, 386, 410,
   374, 398, 385, 404, 408, 360, 343, 389, 371, 418, 349, 404, 364, 416, 398, 409, 361, 394, 355, 410, 387, 375, 383, 400, 406, 350,
   345, 416, 352, 419, 356, 414, 382, 376, 362, 401, 357, 396, 415, 411, 390, 384, 417, 403, 407, 388, 351, 414, 347, 419, 353, 380,
   374, 358, 416, 402, 363, 413, 410, 359, 398, 391, 418, 385, 404, 386, 408, 344, 352, 418, 357, 413, 350, 419, 378, 384, 356, 395,
   362, 403, 412, 417, 382, 388, 415, 407, 401, 390, 413, 354, 349, 381, 375, 419, 355, 418, 360, 414, 410, 405, 364, 400, 361, 416,
   389, 383, 387, 406, 409, 346, 417, 353, 415, 359, 379, 385, 351, 419, 397, 358, 412, 418, 363, 404, 380, 413, 386, 408, 391, 402,
   415, 348, 355, 377, 383, 417, 361, 419, 354, 411, 416, 399, 360, 406, 364, 414, 381, 387, 389, 409, 405, 367, 388, 386, 390, 391,
   370, 408, 368, 407, 378, 379, 382, 415, 380, 413, 392, 401, 402, 412, 397, 395, 390, 366, 387, 372, 409, 388, 389, 407, 369, 384,
   417, 376, 377, 414, 381, 403, 393, 405, 399, 411, 396, 391, 389, 365, 409, 373, 408, 371, 386, 387, 418, 385, 416, 383, 374, 375,
   404, 406, 394, 400, 398, 410, 401, 369, 383, 393, 406, 407, 387, 415, 377, 403, 419, 396, 381, 416, 389, 417, 399, 409, 405, 414,
   411, 402, 381, 371, 405, 394, 413, 375, 408, 389, 419, 404, 414, 387, 398, 383, 418, 409, 400, 406, 410, 416, 368, 403, 385, 407,
   386, 392, 404, 379, 417, 395, 380, 401, 419, 391, 418, 397, 415, 408, 413, 402, 412, 380, 405, 373, 414, 374, 402, 394, 391, 409,
   413, 386, 419, 406, 385, 400, 408, 416, 398, 410, 404, 418, 370, 384, 404, 388, 408, 378, 418, 392, 403, 382, 397, 390, 417, 402,
   419, 395, 407, 413, 415, 412, 401, 382, 372, 406, 376, 416, 390, 409, 401, 393, 388, 415, 384, 399, 419, 405, 407, 396, 414, 411,
   417, 403, 378, 376, 410, 384, 418, 382, 416, 395, 396, 390, 412, 388, 411, 413, 414, 401, 403, 419, 417, 415, 407, 379, 411, 374,
   417, 385, 397, 398, 380, 414, 412, 391, 415, 416, 386, 410, 402, 419, 404, 418, 408, 413, 412, 377, 375, 399, 400, 415, 383, 413,
   381, 417, 418, 411, 389, 410, 387, 419, 405, 406, 409, 416, 414, 392, 396, 398, 403, 404, 395, 410, 397, 411, 401, 402, 407, 414,
   408, 416, 412, 417, 418, 419, 413, 415, 395, 393, 400, 396, 410, 401, 406, 412, 399, 407, 413, 403, 405, 418, 409, 415, 411, 416,
   414, 419, 417, 397, 399, 394, 411, 398, 412, 400, 402, 405, 415, 408, 417, 409, 404, 406, 413, 414, 410, 416, 418, 419
}; // 4.92 kb
static const cart_index_t iCartXY_ab12_a6[2352] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
   26, 27, 28, 31, 32, 33, 39, 35, 41, 50, 51, 37, 38, 43, 44, 52, 53, 45, 47, 60, 55, 57, 49, 54, 62, 56,
   63, 58, 59, 61, 33, 29, 34, 37, 31, 49, 51, 36, 42, 45, 54, 39, 55, 40, 46, 43, 59, 48, 53, 50, 56, 61,
   52, 58, 60, 57, 63, 62, 35, 36, 30, 49, 50, 38, 32, 40, 34, 56, 47, 57, 41, 48, 42, 58, 44, 46, 51, 52,
   54, 59, 60, 61, 53, 62, 55, 63, 64, 75, 76, 67, 80, 69, 82, 95, 96, 73, 74, 85, 86, 104, 105, 79, 81, 108,
   97, 99, 90, 91, 106, 93, 107, 101, 102, 103, 73, 65, 78, 79, 68, 93, 94, 71, 84, 85, 103, 75, 105, 77, 87, 80,
   107, 83, 98, 89, 101, 106, 92, 99, 100, 95, 108, 104, 74, 77, 66, 91, 92, 81, 70, 83, 72, 103, 86, 104, 76, 87,
   78, 106, 82, 84, 88, 100, 102, 97, 98, 107, 94, 108, 96, 105, 67, 68, 88, 73, 75, 90, 96, 89, 94, 79, 91, 80,
   97, 92, 98, 85, 102, 100, 105, 95, 93, 103, 104, 101, 108, 99, 107, 106, 69, 89, 70, 90, 95, 74, 76, 92, 88, 93,
   81, 99, 82, 100, 94, 101, 86, 98, 96, 104, 91, 102, 108, 103, 105, 106, 97, 107, 90, 71, 72, 93, 89, 91, 88, 77,
   78, 101, 102, 95, 96, 83, 84, 99, 97, 87, 94, 92, 103, 107, 100, 106, 98, 104, 105, 108, 109, 124, 125, 114, 132, 116,
   134, 147, 148, 118, 119, 130, 131, 157, 158, 126, 128, 163, 152, 153, 136, 141, 159, 143, 161, 145, 146, 154, 126, 110, 127, 130,
   112, 145, 150, 117, 135, 132, 159, 120, 160, 121, 133, 124, 163, 129, 151, 137, 153, 157, 139, 147, 149, 144, 162, 155, 128, 129,
   111, 146, 149, 131, 113, 133, 115, 161, 134, 162, 122, 135, 123, 163, 125, 127, 138, 151, 152, 148, 150, 158, 140, 160, 142, 156,
   118, 112, 140, 126, 120, 143, 156, 137, 150, 130, 154, 124, 158, 139, 151, 132, 161, 149, 160, 144, 145, 159, 155, 153, 162, 147,
   163, 157, 119, 139, 113, 141, 155, 128, 122, 149, 138, 154, 131, 157, 125, 151, 140, 159, 134, 150, 142, 162, 146, 152, 160, 161,
   156, 163, 148, 158, 114, 120, 142, 118, 124, 136, 148, 144, 156, 126, 141, 132, 152, 155, 160, 130, 146, 162, 158, 147, 143, 154,
   157, 145, 163, 153, 161, 159, 141, 121, 115, 154, 139, 146, 138, 129, 123, 159, 152, 155, 142, 133, 127, 157, 148, 135, 140, 149,
   161, 158, 151, 163, 150, 162, 156, 160, 116, 144, 122, 136, 147, 119, 125, 155, 142, 143, 128, 153, 134, 162, 156, 145, 131, 160,
   148, 157, 141, 146, 163, 154, 158, 159, 152, 161, 143, 117, 123, 145, 137, 154, 140, 121, 127, 153, 161, 144, 156, 129, 135, 147,
   158, 133, 150, 139, 159, 163, 149, 157, 151, 155, 160, 162, 136, 137, 138, 143, 144, 141, 142, 139, 140, 145, 146, 147, 148, 149,
   150, 153, 152, 151, 156, 155, 154, 161, 162, 159, 160, 157, 158, 163, 164, 187, 188, 167, 191, 169, 192, 213, 214, 173, 174, 185,
   186, 224, 225, 179, 181, 229, 209, 211, 196, 197, 218, 199, 220, 207, 208, 215, 185, 165, 190, 191, 168, 211, 212, 171, 193, 187,
   224, 175, 226, 177, 189, 180, 228, 183, 210, 195, 213, 219, 198, 205, 206, 201, 222, 216, 186, 189, 166, 209, 210, 192, 170, 193,
   172, 225, 188, 226, 176, 190, 178, 227, 182, 184, 194, 212, 214, 203, 204, 221, 200, 223, 202, 217, 167, 180, 203, 173, 187, 196,
   214, 205, 221, 179, 197, 191, 209, 219, 227, 185, 208, 228, 225, 213, 199, 215, 224, 207, 229, 211, 220, 218, 179, 168, 204, 185,
   175, 207, 223, 195, 212, 191, 218, 180, 227, 198, 210, 187, 229, 206, 226, 201, 211, 224, 216, 213, 222, 205, 228, 219, 169, 205,
   182, 196, 213, 174, 188, 219, 203, 199, 181, 211, 192, 228, 221, 207, 186, 227, 214, 224, 197, 208, 229, 215, 225, 218, 209, 220,
   181, 206, 170, 208, 222, 186, 176, 210, 194, 220, 192, 228, 182, 212, 200, 229, 188, 204, 202, 226, 209, 214, 223, 225, 217, 227,
   203, 221, 207, 171, 184, 211, 195, 218, 204, 177, 190, 213, 229, 201, 223, 183, 193, 205, 227, 189, 212, 198, 224, 228, 206, 219,
   210, 216, 226, 222, 208, 183, 172, 220, 206, 209, 194, 189, 178, 229, 214, 222, 202, 193, 184, 228, 203, 190, 200, 210, 225, 221,
   212, 227, 204, 226, 217, 223, 173, 175, 217, 179, 180, 199, 221, 201, 223, 185, 215, 187, 225, 216, 226, 191, 220, 222, 227, 205,
   207, 218, 219, 211, 228, 213, 229, 224, 174, 216, 176, 197, 219, 181, 182, 222, 202, 215, 186, 224, 188, 226, 217, 218, 192, 223,
   203, 228, 208, 209, 227, 220, 221, 229, 214, 225, 215, 177, 178, 218, 198, 220, 200, 183, 184, 224, 225, 216, 217, 189, 190, 219,
   221, 193, 204, 206, 229, 227, 210, 228, 212, 222, 223, 226, 197, 198, 194, 215, 216, 208, 202, 206, 200, 218, 209, 219, 203, 210,
   204, 224, 214, 212, 217, 222, 220, 225, 226, 229, 223, 228, 221, 227, 199, 195, 200, 207, 201, 215, 217, 198, 204, 211, 220, 205,
   221, 206, 212, 213, 225, 210, 223, 216, 218, 229, 222, 224, 226, 219, 227, 228, 196, 201, 202, 199, 205, 197, 203, 216, 217, 207,
   208, 213, 214, 222, 223, 211, 209, 226, 221, 219, 215, 220, 228, 218, 227, 224, 225, 229, 230, 257, 258, 235, 259, 237, 261, 284,
   285, 239, 240, 251, 252, 296, 297, 247, 249, 302, 280, 282, 263, 268, 292, 270, 294, 272, 273, 287, 259, 231, 260, 257, 233, 284,
   286, 238, 262, 253, 298, 241, 299, 242, 254, 245, 303, 250, 278, 264, 283, 290, 266, 274, 276, 271, 295, 288, 261, 262, 232, 285,
   286, 258, 234, 260, 236, 300, 255, 301, 243, 256, 244, 304, 246, 248, 265, 279, 281, 275, 277, 291, 267, 293, 269, 289, 251, 233,
   279, 259, 241, 282, 301, 264, 286, 257, 296, 245, 305, 266, 278, 253, 307, 276, 299, 271, 284, 298, 288, 283, 295, 274, 303, 290,
   252, 278, 234, 280, 299, 261, 243, 286, 265, 297, 258, 305, 246, 279, 267, 306, 255, 277, 269, 301, 285, 281, 293, 300, 289, 304,
   275, 291, 235, 253, 281, 239, 257, 263, 285, 283, 300, 247, 268, 259, 280, 298, 306, 251, 273, 307, 297, 284, 270, 287, 296, 272,
   302, 282, 294, 292, 280, 254, 236, 297, 278, 285, 265, 262, 244, 306, 281, 299, 269, 260, 248, 305, 275, 256, 267, 286, 300, 291,
   279, 304, 277, 301, 289, 293, 237, 283, 255, 263, 284, 240, 258, 298, 281, 270, 249, 282, 261, 307, 300, 272, 252, 306, 285, 296,
   268, 273, 302, 287, 297, 292, 280, 294, 282, 238, 256, 284, 264, 296, 279, 242, 260, 283, 307, 271, 301, 250, 262, 274, 305, 254,
   286, 266, 298, 303, 276, 290, 278, 288, 299, 295, 239, 245, 291, 247, 253, 270, 300, 274, 304, 251, 287, 257, 297, 290, 305, 259,
   294, 303, 306, 283, 272, 292, 298, 282, 307, 284, 302, 296, 240, 290, 246, 268, 298, 249, 255, 303, 275, 287, 252, 296, 258, 305,
   291, 292, 261, 304, 281, 307, 273, 280, 306, 294, 300, 302, 285, 297, 247, 241, 293, 251, 245, 272, 304, 271, 301, 259, 292, 253,
   306, 288, 299, 257, 302, 295, 305, 274, 282, 296, 290, 284, 303, 283, 307, 298, 292, 242, 248, 296, 266, 302, 277, 250, 256, 298,
   306, 288, 293, 254, 260, 290, 304, 262, 279, 276, 307, 305, 278, 303, 286, 295, 301, 299, 249, 295, 243, 273, 303, 252, 246, 299,
   269, 294, 261, 307, 255, 301, 289, 302, 258, 293, 275, 305, 280, 285, 304, 297, 291, 306, 281, 300, 294, 250, 244, 302, 276, 297,
   267, 254, 248, 307, 300, 295, 289, 262, 256, 303, 291, 260, 277, 278, 306, 304, 286, 305, 279, 299, 293, 301, 263, 274, 275, 270,
   283, 268, 281, 290, 291, 272, 273, 284, 285, 303, 304, 282, 280, 305, 300, 298, 287, 294, 307, 292, 306, 296, 297, 302, 272, 264,
   277, 282, 271, 292, 293, 266, 279, 284, 302, 274, 304, 276, 286, 283, 306, 278, 301, 288, 296, 307, 295, 298, 299, 290, 305, 303,
   273, 276, 265, 294, 295, 280, 269, 278, 267, 302, 285, 303, 275, 286, 277, 307, 281, 279, 289, 299, 297, 300, 301, 306, 293, 305,
   291, 304, 287, 266, 267, 292, 288, 294, 289, 276, 277, 296, 297, 290, 291, 278, 279, 298, 300, 286, 293, 295, 302, 306, 299, 307,
   301, 303, 304, 305, 268, 288, 269, 287, 290, 273, 275, 295, 289, 292, 280, 298, 281, 299, 293, 296, 285, 301, 291, 303, 294, 297,
   305, 302, 304, 307, 300, 306, 270, 271, 289, 272, 274, 287, 291, 288, 293, 282, 294, 283, 300, 295, 301, 284, 297, 299, 304, 290,
   292, 302, 303, 296, 305, 298, 306, 307, 308, 341, 342, 311, 335, 313, 337, 369, 370, 317, 318, 329, 330, 380, 381, 323, 325, 391,
   359, 361, 346, 347, 374, 349, 376, 357, 358, 371, 341, 309, 343, 336, 312, 367, 368, 315, 339, 331, 382, 319, 384, 321, 333, 324,
   390, 327, 360, 345, 363, 375, 348, 355, 356, 351, 378, 372, 342, 343, 310, 365, 366, 338, 314, 340, 316, 383, 332, 385, 320, 334,
   322, 389, 326, 328, 344, 362, 364, 353, 354, 377, 350, 379, 352, 373, 311, 336, 365, 317, 341, 346, 370, 367, 387, 323, 347, 335,
   359, 386, 392, 329, 358, 394, 381, 369, 349, 371, 380, 357, 391, 361, 376, 374, 335, 312, 366, 341, 319, 369, 388, 345, 368, 336,
   386, 324, 393, 348, 360, 331, 396, 356, 384, 351, 367, 382, 372, 363, 378, 355, 390, 375, 313, 367, 338, 346, 369, 318, 342, 386,
   365, 349, 325, 361, 337, 394, 387, 357, 330, 392, 370, 380, 347, 358, 391, 371, 381, 374, 359, 376, 337, 368, 314, 370, 388, 342,
   320, 366, 344, 387, 338, 395, 326, 362, 350, 397, 332, 354, 352, 385, 365, 364, 379, 383, 373, 389, 353, 377, 369, 315, 340, 367,
   345, 386, 366, 321, 343, 363, 396, 351, 388, 327, 339, 355, 393, 333, 368, 348, 382, 390, 356, 375, 360, 372, 384, 378, 370, 339,
   316, 387, 368, 365, 344, 343, 322, 397, 364, 388, 352, 340, 328, 395, 353, 334, 350, 366, 383, 377, 362, 389, 354, 385, 373, 379,
   317, 331, 383, 323, 336, 349, 387, 363, 397, 329, 371, 341, 381, 382, 398, 335, 376, 396, 392, 367, 357, 374, 386, 361, 394, 369,
   391, 380, 318, 382, 332, 347, 386, 325, 338, 396, 364, 371, 330, 380, 342, 398, 383, 374, 337, 397, 365, 394, 358, 359, 392, 376,
   387, 391, 370, 381, 329, 319, 385, 335, 324, 361, 395, 351, 388, 341, 380, 331, 398, 372, 384, 336, 394, 378, 393, 355, 369, 386,
   375, 367, 390, 363, 396, 382, 330, 384, 320, 359, 393, 337, 326, 388, 352, 381, 342, 398, 332, 385, 373, 392, 338, 379, 353, 395,
   370, 365, 389, 387, 377, 397, 364, 383, 380, 321, 334, 386, 348, 394, 362, 327, 340, 382, 398, 372, 385, 333, 343, 375, 395, 339,
   366, 356, 396, 393, 360, 390, 368, 378, 388, 384, 381, 333, 322, 392, 360, 387, 350, 339, 328, 398, 383, 384, 373, 343, 334, 393,
   377, 340, 354, 368, 397, 389, 366, 395, 362, 388, 379, 385, 323, 324, 389, 329, 331, 357, 397, 355, 395, 335, 374, 336, 392, 375,
   393, 341, 391, 390, 398, 363, 361, 380, 382, 369, 396, 367, 394, 386, 325, 390, 326, 358, 396, 330, 332, 393, 353, 376, 337, 394,
   338, 395, 377, 391, 342, 389, 364, 398, 359, 370, 397, 381, 383, 392, 365, 387, 391, 327, 328, 394, 356, 392, 354, 333, 334, 396,
   397, 378, 379, 339, 340, 390, 389, 343, 362, 360, 398, 395, 368, 393, 366, 384, 385, 388, 359, 360, 344, 381, 384, 370, 352, 368,
   350, 392, 365, 393, 353, 366, 354, 398, 364, 362, 373, 388, 387, 383, 385, 397, 379, 395, 377, 389, 361, 345, 362, 369, 351, 380,
   385, 348, 366, 367, 394, 355, 395, 356, 368, 363, 398, 360, 388, 372, 386, 396, 378, 382, 384, 375, 393, 390, 346, 363, 364, 349,
   367, 347, 365, 382, 383, 357, 358, 369, 370, 396, 397, 361, 359, 398, 387, 386, 371, 376, 394, 374, 392, 380, 381, 391, 347, 375,
   353, 371, 382, 358, 364, 390, 377, 374, 359, 386, 365, 393, 389, 380, 370, 395, 383, 396, 376, 381, 398, 391, 397, 394, 387, 392,
   374, 348, 354, 380, 372, 391, 379, 356, 362, 386, 392, 375, 389, 360, 366, 382, 397, 368, 385, 378, 394, 398, 384, 396, 388, 390,
   395, 393, 349, 355, 377, 357, 363, 371, 383, 375, 389, 361, 376, 367, 387, 390, 395, 369, 381, 393, 397, 382, 374, 391, 396, 380,
   398, 386, 392, 394, 376, 356, 350, 391, 378, 381, 373, 360, 354, 394, 387, 390, 377, 368, 362, 396, 383, 366, 379, 384, 392, 397,
   388, 398, 385, 393, 389, 395, 357, 351, 379, 361, 355, 374, 389, 372, 385, 369, 391, 363, 397, 378, 388, 367, 392, 384, 395, 375,
   380, 394, 390, 386, 393, 382, 398, 396, 358, 378, 352, 376, 390, 359, 353, 384, 373, 391, 370, 396, 364, 388, 379, 394, 365, 385,
   377, 393, 381, 387, 395, 392, 389, 398, 383, 397, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386,
   387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398
}; // 4.59 kb
static const cart_index_t iCartXY_ab13_a0[560] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
   52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
   78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
   104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
   130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
   156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
   182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
   208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
   234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259,
   260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
   286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311,
   312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337,
   338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363,
   364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389,
   390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415,
   416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441,
   442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467,
   468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493,
   494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519,
   520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545,
   546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559
}; // 1.09 kb
static const cart_index_t iCartXY_ab13_a1[1365] = {
   0, 1, 2, 3, 6, 7, 6, 4, 8, 7, 8, 5, 9, 14, 16, 12, 10, 17, 13, 15, 11, 14, 12, 18, 16, 18,
   13, 18, 17, 15, 19, 22, 24, 23, 20, 26, 25, 27, 21, 28, 23, 32, 29, 31, 25, 22, 28, 33, 31, 30, 27, 24,
   33, 29, 32, 26, 30, 33, 32, 31, 34, 39, 41, 37, 35, 42, 38, 40, 36, 39, 43, 49, 45, 37, 50, 41, 49, 44,
   47, 51, 38, 50, 42, 46, 51, 48, 40, 43, 45, 54, 44, 53, 47, 52, 46, 48, 53, 52, 51, 54, 50, 52, 49, 54,
   53, 55, 58, 60, 59, 56, 62, 61, 63, 57, 66, 59, 74, 67, 73, 61, 58, 64, 75, 73, 69, 63, 60, 75, 65, 74,
   62, 68, 64, 70, 78, 65, 76, 71, 70, 66, 80, 77, 68, 72, 71, 81, 67, 79, 72, 69, 75, 78, 76, 80, 74, 77,
   81, 79, 73, 82, 77, 79, 76, 82, 81, 78, 80, 82, 83, 88, 90, 86, 84, 91, 87, 89, 85, 88, 92, 104, 94, 86,
   105, 90, 104, 93, 96, 106, 87, 105, 91, 95, 106, 97, 89, 92, 100, 111, 93, 109, 102, 98, 94, 112, 99, 110, 96, 107,
   95, 103, 108, 101, 97, 100, 98, 113, 102, 114, 99, 115, 103, 101, 110, 108, 106, 112, 105, 107, 104, 111, 109, 109, 116, 114,
   117, 107, 115, 111, 113, 116, 118, 115, 108, 113, 112, 117, 114, 118, 110, 116, 117, 118, 119, 122, 124, 123, 120, 126, 125, 127,
   121, 130, 123, 144, 131, 143, 125, 122, 128, 145, 143, 133, 127, 124, 145, 129, 144, 126, 132, 128, 134, 148, 129, 146, 136, 135,
   130, 150, 147, 132, 138, 137, 151, 131, 149, 139, 133, 140, 135, 154, 141, 152, 137, 134, 140, 156, 153, 142, 139, 136, 157, 141,
   155, 138, 142, 145, 148, 146, 150, 144, 147, 151, 149, 143, 159, 147, 155, 160, 153, 149, 146, 158, 157, 152, 160, 151, 148, 156,
   158, 154, 150, 159, 156, 154, 161, 157, 162, 152, 163, 155, 153, 158, 161, 162, 161, 159, 163, 162, 163, 160, 164, 169, 171, 167,
   165, 172, 168, 170, 166, 169, 173, 191, 175, 167, 192, 171, 191, 174, 177, 193, 168, 192, 172, 176, 193, 178, 170, 173, 181, 198,
   174, 196, 183, 179, 175, 199, 180, 197, 177, 194, 176, 184, 195, 182, 178, 181, 185, 200, 187, 179, 202, 183, 201, 186, 189, 203,
   180, 204, 184, 188, 205, 190, 182, 185, 187, 208, 186, 207, 189, 206, 188, 190, 197, 195, 193, 199, 192, 194, 191, 198, 196, 196,
   209, 201, 210, 194, 204, 198, 200, 209, 211, 205, 195, 202, 199, 210, 203, 211, 197, 207, 213, 203, 215, 206, 205, 208, 202, 212,
   217, 204, 206, 200, 208, 214, 201, 216, 207, 209, 214, 216, 212, 210, 217, 213, 215, 211, 214, 212, 218, 216, 218, 213, 218, 217,
   215, 219, 222, 224, 223, 220, 226, 225, 227, 221, 230, 223, 250, 231, 249, 225, 222, 228, 251, 249, 233, 227, 224, 251, 229, 250,
   226, 232, 228, 234, 254, 229, 252, 236, 235, 230, 256, 253, 232, 238, 237, 257, 231, 255, 239, 233, 242, 235, 260, 243, 258, 237,
   234, 240, 262, 259, 245, 239, 236, 263, 241, 261, 238, 244, 240, 246, 266, 241, 264, 247, 246, 242, 268, 265, 244, 248, 247, 269,
   243, 267, 248, 245, 251, 254, 252, 256, 250, 253, 257, 255, 249, 271, 253, 261, 272, 259, 255, 252, 270, 263, 258, 272, 257, 254,
   262, 270, 260, 256, 271, 262, 266, 273, 263, 275, 264, 268, 260, 274, 269, 276, 258, 277, 261, 265, 278, 267, 259, 281, 265, 267,
   264, 280, 269, 266, 268, 279, 270, 273, 275, 274, 271, 277, 276, 278, 272, 279, 274, 283, 280, 282, 276, 273, 279, 284, 282, 281,
   278, 275, 284, 280, 283, 277, 281, 284, 283, 282, 285, 290, 292, 288, 286, 293, 289, 291, 287, 290, 294, 318, 296, 288, 319, 292,
   318, 295, 298, 320, 289, 319, 293, 297, 320, 299, 291, 294, 302, 325, 295, 323, 304, 300, 296, 326, 301, 324, 298, 321, 297, 305,
   322, 303, 299, 302, 306, 327, 308, 300, 329, 304, 328, 307, 310, 330, 301, 331, 305, 309, 332, 311, 303, 306, 314, 337, 307, 335,
   316, 312, 308, 338, 313, 336, 310, 333, 309, 317, 334, 315, 311, 314, 312, 339, 316, 340, 313, 341, 317, 315, 324, 322, 320, 326,
   319, 321, 318, 325, 323, 323, 342, 328, 343, 321, 331, 325, 327, 342, 344, 332, 322, 329, 326, 343, 330, 344, 324, 336, 346, 330,
   348, 334, 332, 338, 329, 345, 350, 331, 333, 327, 337, 347, 328, 349, 335, 335, 352, 340, 354, 333, 341, 337, 339, 351, 356, 341,
   334, 339, 338, 353, 340, 355, 336, 342, 347, 349, 345, 343, 350, 346, 348, 344, 347, 351, 357, 353, 345, 358, 349, 357, 352, 355,
   359, 346, 358, 350, 354, 359, 356, 348, 351, 353, 362, 352, 361, 355, 360, 354, 356, 361, 360, 359, 362, 358, 360, 357, 362, 361,
   363, 366, 368, 367, 364, 370, 369, 371, 365, 374, 367, 400, 375, 399, 369, 366, 372, 401, 399, 377, 371, 368, 401, 373, 400, 370,
   376, 372, 378, 404, 373, 402, 380, 379, 374, 406, 403, 376, 382, 381, 407, 375, 405, 383, 377, 386, 379, 410, 387, 408, 381, 378,
   384, 412, 409, 389, 383, 380, 413, 385, 411, 382, 388, 384, 390, 416, 385, 414, 392, 391, 386, 418, 415, 388, 394, 393, 419, 387,
   417, 395, 389, 396, 391, 422, 397, 420, 393, 390, 396, 424, 421, 398, 395, 392, 425, 397, 423, 394, 398, 401, 404, 402, 406, 400,
   403, 407, 405, 399, 427, 403, 411, 428, 409, 405, 402, 426, 413, 408, 428, 407, 404, 412, 426, 410, 406, 427, 412, 416, 429, 413,
   431, 414, 418, 410, 430, 419, 432, 408, 433, 411, 415, 434, 417, 409, 439, 415, 423, 440, 421, 417, 414, 436, 425, 420, 438, 419,
   416, 424, 435, 422, 418, 437, 424, 422, 441, 425, 442, 420, 443, 423, 421, 426, 429, 431, 430, 427, 433, 432, 434, 428, 437, 430,
   445, 438, 444, 432, 429, 435, 446, 444, 440, 434, 431, 446, 436, 445, 433, 439, 435, 441, 449, 436, 447, 442, 441, 437, 451, 448,
   439, 443, 442, 452, 438, 450, 443, 440, 446, 449, 447, 451, 445, 448, 452, 450, 444, 453, 448, 450, 447, 453, 452, 449, 451, 453,
   454, 459, 461, 457, 455, 462, 458, 460, 456, 459, 463, 493, 465, 457, 494, 461, 493, 464, 467, 495, 458, 494, 462, 466, 495, 468,
   460, 463, 471, 500, 464, 498, 473, 469, 465, 501, 470, 499, 467, 496, 466, 474, 497, 472, 468, 471, 475, 502, 477, 469, 504, 473,
   503, 476, 479, 505, 470, 506, 474, 478, 507, 480, 472, 475, 483, 512, 476, 510, 485, 481, 477, 513, 482, 511, 479, 508, 478, 486,
   509, 484, 480, 483, 487, 514, 489, 481, 516, 485, 515, 488, 491, 517, 482, 518, 486, 490, 519, 492, 484, 487, 489, 522, 488, 521,
   491, 520, 490, 492, 499, 497, 495, 501, 494, 496, 493, 500, 498, 498, 523, 503, 524, 496, 506, 500, 502, 523, 525, 507, 497, 504,
   501, 524, 505, 525, 499, 511, 527, 505, 529, 509, 507, 513, 504, 526, 531, 506, 508, 502, 512, 528, 503, 530, 510, 510, 533, 515,
   535, 508, 518, 512, 514, 532, 537, 519, 509, 516, 513, 534, 517, 536, 511, 521, 539, 517, 541, 520, 519, 522, 516, 538, 543, 518,
   520, 514, 522, 540, 515, 542, 521, 523, 528, 530, 526, 524, 531, 527, 529, 525, 528, 532, 544, 534, 526, 545, 530, 544, 533, 536,
   546, 527, 545, 531, 535, 546, 537, 529, 532, 540, 551, 533, 549, 542, 538, 534, 552, 539, 550, 536, 547, 535, 543, 548, 541, 537,
   540, 538, 553, 542, 554, 539, 555, 543, 541, 550, 548, 546, 552, 545, 547, 544, 551, 549, 549, 556, 554, 557, 547, 555, 551, 553,
   556, 558, 555, 548, 553, 552, 557, 554, 558, 550, 556, 557, 558
}; // 2.67 kb
static const cart_index_t iCartXY_ab13_a2[2184] = {
   0, 1, 2, 3, 4, 5, 6, 9, 10, 11, 13, 15, 11, 7, 12, 9, 15, 14, 13, 14, 8, 15, 10, 12, 16, 25,
   26, 19, 21, 30, 25, 17, 27, 20, 29, 23, 26, 27, 18, 28, 22, 24, 19, 20, 28, 25, 30, 29, 21, 29, 22, 30,
   26, 28, 30, 23, 24, 29, 28, 27, 31, 40, 41, 36, 38, 46, 42, 32, 43, 34, 47, 39, 44, 45, 33, 48, 35, 37,
   40, 34, 49, 42, 51, 47, 41, 49, 35, 50, 44, 48, 36, 42, 50, 40, 46, 51, 50, 43, 37, 49, 48, 45, 38, 51,
   44, 46, 41, 50, 51, 39, 45, 47, 49, 43, 46, 47, 48, 51, 50, 49, 52, 61, 62, 55, 57, 72, 63, 53, 65, 56,
   71, 59, 64, 66, 54, 70, 58, 60, 55, 67, 73, 61, 72, 75, 67, 56, 74, 63, 77, 71, 57, 75, 68, 72, 62, 73,
   68, 76, 58, 78, 64, 70, 77, 59, 69, 71, 74, 65, 78, 69, 60, 76, 70, 66, 61, 63, 79, 67, 75, 77, 62, 79,
   64, 73, 68, 78, 79, 65, 66, 74, 76, 69, 73, 74, 70, 79, 78, 76, 75, 71, 76, 77, 79, 74, 72, 77, 78, 75,
   73, 79, 80, 89, 90, 85, 87, 101, 91, 81, 92, 83, 102, 88, 93, 94, 82, 103, 84, 86, 95, 83, 104, 91, 109, 102,
   96, 105, 84, 107, 93, 103, 85, 97, 106, 89, 101, 108, 107, 98, 86, 105, 103, 94, 87, 108, 99, 101, 90, 106, 109, 88,
   100, 102, 104, 92, 89, 95, 113, 97, 108, 110, 90, 113, 96, 106, 99, 111, 97, 91, 114, 95, 110, 109, 114, 92, 98, 104,
   112, 100, 99, 115, 93, 111, 96, 107, 115, 100, 94, 112, 105, 98, 101, 110, 111, 108, 106, 113, 110, 102, 112, 109, 114, 104,
   111, 112, 103, 115, 107, 105, 113, 104, 105, 114, 115, 112, 106, 114, 107, 113, 111, 115, 108, 109, 115, 110, 113, 114, 116, 125,
   126, 119, 121, 142, 127, 117, 129, 120, 141, 123, 128, 130, 118, 140, 122, 124, 119, 131, 143, 125, 142, 145, 132, 120, 144, 127,
   147, 141, 121, 145, 133, 142, 126, 143, 134, 146, 122, 148, 128, 140, 147, 123, 135, 141, 144, 129, 148, 136, 124, 146, 140, 130,
   125, 137, 155, 131, 145, 153, 126, 155, 138, 143, 133, 154, 137, 127, 156, 132, 151, 147, 138, 157, 128, 149, 134, 148, 156, 129,
   139, 144, 152, 135, 157, 139, 130, 150, 146, 136, 131, 132, 158, 137, 153, 151, 133, 159, 134, 154, 138, 149, 160, 135, 136, 152,
   150, 139, 149, 150, 140, 157, 148, 146, 151, 141, 152, 147, 156, 144, 142, 153, 154, 145, 143, 155, 143, 158, 149, 155, 154, 159,
   158, 144, 150, 156, 160, 152, 145, 151, 159, 153, 155, 158, 159, 152, 146, 160, 157, 150, 153, 147, 160, 151, 158, 156, 154, 160,
   148, 159, 149, 157, 155, 156, 157, 158, 159, 160, 161, 170, 171, 166, 168, 188, 172, 162, 173, 164, 189, 169, 174, 175, 163, 190,
   165, 167, 176, 164, 191, 172, 196, 189, 177, 192, 165, 194, 174, 190, 166, 178, 193, 170, 188, 195, 194, 179, 167, 192, 190, 175,
   168, 195, 180, 188, 171, 193, 196, 169, 181, 189, 191, 173, 170, 182, 206, 178, 195, 197, 171, 206, 183, 193, 180, 198, 184, 172,
   207, 176, 199, 196, 207, 173, 185, 191, 201, 181, 186, 208, 174, 200, 177, 194, 208, 187, 175, 202, 192, 179, 182, 176, 209, 184,
   205, 199, 183, 210, 177, 204, 186, 200, 178, 184, 211, 182, 197, 205, 212, 185, 179, 203, 202, 187, 180, 213, 186, 198, 183, 204,
   214, 181, 187, 201, 203, 185, 188, 197, 198, 195, 193, 206, 199, 189, 201, 196, 207, 191, 200, 202, 190, 208, 194, 192, 209, 191,
   203, 207, 214, 201, 210, 203, 192, 212, 208, 202, 193, 211, 204, 206, 198, 213, 204, 212, 194, 210, 200, 208, 195, 205, 213, 197,
   206, 211, 205, 196, 214, 199, 209, 207, 197, 199, 215, 205, 211, 209, 198, 215, 200, 213, 204, 210, 215, 201, 202, 214, 212, 203,
   206, 209, 210, 211, 213, 215, 211, 207, 212, 209, 215, 214, 213, 214, 208, 215, 210, 212, 216, 225, 226, 219, 221, 248, 227, 217,
   229, 220, 247, 223, 228, 230, 218, 246, 222, 224, 219, 231, 249, 225, 248, 251, 232, 220, 250, 227, 253, 247, 221, 251, 233, 248,
   226, 249, 234, 252, 222, 254, 228, 246, 253, 223, 235, 247, 250, 229, 254, 236, 224, 252, 246, 230, 225, 237, 267, 231, 251, 259,
   226, 267, 238, 249, 233, 260, 239, 227, 268, 232, 257, 253, 240, 269, 228, 255, 234, 254, 268, 229, 241, 250, 258, 235, 269, 242,
   230, 256, 252, 236, 231, 243, 270, 237, 259, 263, 243, 232, 271, 239, 265, 257, 233, 272, 244, 260, 238, 261, 244, 273, 234, 266,
   240, 255, 274, 235, 245, 258, 262, 241, 275, 245, 236, 264, 256, 242, 237, 239, 276, 243, 263, 265, 238, 277, 240, 261, 244, 266,
   278, 241, 242, 262, 264, 245, 255, 256, 246, 269, 254, 252, 257, 247, 258, 253, 268, 250, 248, 259, 260, 251, 249, 267, 249, 270,
   261, 267, 260, 272, 271, 250, 262, 268, 274, 258, 251, 263, 272, 259, 267, 270, 273, 264, 252, 275, 269, 256, 265, 253, 274, 257,
   271, 268, 266, 275, 254, 273, 255, 269, 261, 279, 255, 277, 266, 273, 279, 262, 256, 278, 275, 264, 263, 257, 280, 265, 276, 271,
   280, 258, 264, 274, 278, 262, 259, 265, 281, 263, 270, 276, 260, 281, 266, 272, 261, 277, 267, 276, 277, 270, 272, 281, 276, 268,
   278, 271, 280, 274, 277, 278, 269, 279, 273, 275, 270, 271, 279, 276, 281, 280, 272, 280, 273, 281, 277, 279, 281, 274, 275, 280,
   279, 278, 282, 291, 292, 287, 289, 315, 293, 283, 294, 285, 316, 290, 295, 296, 284, 317, 286, 288, 297, 285, 318, 293, 323, 316,
   298, 319, 286, 321, 295, 317, 287, 299, 320, 291, 315, 322, 321, 300, 288, 319, 317, 296, 289, 322, 301, 315, 292, 320, 323, 290,
   302, 316, 318, 294, 291, 303, 339, 299, 322, 324, 292, 339, 304, 320, 301, 325, 305, 293, 340, 297, 326, 323, 340, 294, 306, 318,
   328, 302, 307, 341, 295, 327, 298, 321, 341, 308, 296, 329, 319, 300, 309, 297, 342, 305, 335, 326, 310, 343, 298, 333, 307, 327,
   299, 311, 344, 303, 324, 334, 345, 312, 300, 331, 329, 308, 301, 346, 313, 325, 304, 332, 347, 302, 314, 328, 330, 306, 303, 309,
   348, 311, 334, 336, 304, 349, 310, 332, 313, 337, 311, 305, 350, 309, 336, 335, 351, 306, 312, 330, 338, 314, 313, 352, 307, 337,
   310, 333, 353, 314, 308, 338, 331, 312, 315, 324, 325, 322, 320, 339, 326, 316, 328, 323, 340, 318, 327, 329, 317, 341, 321, 319,
   342, 318, 330, 340, 347, 328, 343, 331, 319, 345, 341, 329, 320, 344, 332, 339, 325, 346, 333, 345, 321, 343, 327, 341, 322, 334,
   346, 324, 339, 344, 335, 323, 347, 326, 342, 340, 324, 336, 354, 334, 344, 348, 325, 354, 337, 346, 332, 349, 336, 326, 355, 335,
   350, 342, 337, 356, 327, 352, 333, 343, 355, 328, 338, 347, 351, 330, 356, 338, 329, 353, 345, 331, 357, 330, 331, 351, 353, 338,
   332, 358, 333, 349, 337, 352, 334, 335, 359, 336, 348, 350, 339, 348, 349, 344, 346, 354, 350, 340, 351, 342, 355, 347, 352, 353,
   341, 356, 343, 345, 348, 342, 357, 350, 359, 355, 349, 357, 343, 358, 352, 356, 344, 350, 358, 348, 354, 359, 358, 351, 345, 357,
   356, 353, 346, 359, 352, 354, 349, 358, 359, 347, 353, 355, 357, 351, 354, 355, 356, 359, 358, 357, 360, 369, 370, 363, 365, 398,
   371, 361, 373, 364, 397, 367, 372, 374, 362, 396, 366, 368, 363, 375, 399, 369, 398, 401, 376, 364, 400, 371, 403, 397, 365, 401,
   377, 398, 370, 399, 378, 402, 366, 404, 372, 396, 403, 367, 379, 397, 400, 373, 404, 380, 368, 402, 396, 374, 369, 381, 423, 375,
   401, 409, 370, 423, 382, 399, 377, 410, 383, 371, 424, 376, 407, 403, 384, 425, 372, 405, 378, 404, 424, 373, 385, 400, 408, 379,
   425, 386, 374, 406, 402, 380, 375, 387, 426, 381, 409, 413, 388, 376, 427, 383, 415, 407, 377, 428, 389, 410, 382, 411, 390, 429,
   378, 416, 384, 405, 430, 379, 391, 408, 412, 385, 431, 392, 380, 414, 406, 386, 381, 393, 432, 387, 413, 421, 382, 433, 394, 411,
   389, 422, 393, 383, 434, 388, 419, 415, 394, 435, 384, 417, 390, 416, 436, 385, 395, 412, 420, 391, 437, 395, 386, 418, 414, 392,
   387, 388, 438, 393, 421, 419, 389, 439, 390, 422, 394, 417, 440, 391, 392, 420, 418, 395, 405, 406, 396, 425, 404, 402, 407, 397,
   408, 403, 424, 400, 398, 409, 410, 401, 399, 423, 399, 426, 411, 423, 410, 428, 427, 400, 412, 424, 430, 408, 401, 413, 428, 409,
   423, 426, 429, 414, 402, 431, 425, 406, 415, 403, 430, 407, 427, 424, 416, 431, 404, 429, 405, 425, 417, 441, 405, 435, 416, 429,
   441, 418, 406, 437, 431, 414, 419, 407, 442, 415, 434, 427, 442, 408, 420, 430, 436, 412, 409, 421, 443, 413, 426, 432, 410, 443,
   422, 428, 411, 433, 411, 444, 417, 433, 422, 439, 445, 412, 418, 436, 440, 420, 413, 419, 446, 421, 432, 438, 447, 420, 414, 440,
   437, 418, 421, 415, 448, 419, 438, 434, 422, 449, 416, 439, 417, 435, 423, 432, 433, 426, 428, 443, 434, 424, 436, 427, 442, 430,
   435, 437, 425, 441, 429, 431, 426, 438, 444, 432, 443, 446, 438, 427, 445, 434, 448, 442, 428, 446, 439, 443, 433, 444, 439, 447,
   429, 449, 435, 441, 448, 430, 440, 442, 445, 436, 449, 440, 431, 447, 441, 437, 432, 434, 450, 438, 446, 448, 433, 450, 435, 444,
   439, 449, 450, 436, 437, 445, 447, 440, 444, 445, 441, 450, 449, 447, 446, 442, 447, 448, 450, 445, 443, 448, 449, 446, 444, 450,
   451, 460, 461, 456, 458, 490, 462, 452, 463, 454, 491, 459, 464, 465, 453, 492, 455, 457, 466, 454, 493, 462, 498, 491, 467, 494,
   455, 496, 464, 492, 456, 468, 495, 460, 490, 497, 496, 469, 457, 494, 492, 465, 458, 497, 470, 490, 461, 495, 498, 459, 471, 491,
   493, 463, 460, 472, 520, 468, 497, 499, 461, 520, 473, 495, 470, 500, 474, 462, 521, 466, 501, 498, 521, 463, 475, 493, 503, 471,
   476, 522, 464, 502, 467, 496, 522, 477, 465, 504, 494, 469, 478, 466, 523, 474, 510, 501, 479, 524, 467, 508, 476, 502, 468, 480,
   525, 472, 499, 509, 526, 481, 469, 506, 504, 477, 470, 527, 482, 500, 473, 507, 528, 471, 483, 503, 505, 475, 472, 484, 529, 480,
   509, 511, 473, 530, 485, 507, 482, 512, 486, 474, 531, 478, 513, 510, 532, 475, 487, 505, 515, 483, 488, 533, 476, 514, 479, 508,
   534, 489, 477, 516, 506, 481, 484, 478, 535, 486, 519, 513, 485, 536, 479, 518, 488, 514, 480, 486, 537, 484, 511, 519, 538, 487,
   481, 517, 516, 489, 482, 539, 488, 512, 485, 518, 540, 483, 489, 515, 517, 487, 490, 499, 500, 497, 495, 520, 501, 491, 503, 498,
   521, 493, 502, 504, 492, 522, 496, 494, 523, 493, 505, 521, 528, 503, 524, 506, 494, 526, 522, 504, 495, 525, 507, 520, 500, 527,
   508, 526, 496, 524, 502, 522, 497, 509, 527, 499, 520, 525, 510, 498, 528, 501, 523, 521, 499, 511, 541, 509, 525, 529, 500, 541,
   512, 527, 507, 530, 513, 501, 542, 510, 531, 523, 514, 543, 502, 533, 508, 524, 542, 503, 515, 528, 532, 505, 543, 516, 504, 534,
   526, 506, 544, 505, 517, 532, 540, 515, 545, 517, 506, 538, 534, 516, 507, 546, 518, 530, 512, 539, 518, 547, 508, 536, 514, 533,
   509, 519, 548, 511, 529, 537, 519, 510, 549, 513, 535, 531, 511, 513, 550, 519, 537, 535, 512, 551, 514, 539, 518, 536, 552, 515,
   516, 540, 538, 517, 520, 529, 530, 525, 527, 541, 531, 521, 532, 523, 542, 528, 533, 534, 522, 543, 524, 526, 535, 523, 544, 531,
   549, 542, 536, 545, 524, 547, 533, 543, 525, 537, 546, 529, 541, 548, 547, 538, 526, 545, 543, 534, 527, 548, 539, 541, 530, 546,
   549, 528, 540, 542, 544, 532, 529, 535, 553, 537, 548, 550, 530, 553, 536, 546, 539, 551, 537, 531, 554, 535, 550, 549, 554, 532,
   538, 544, 552, 540, 539, 555, 533, 551, 536, 547, 555, 540, 534, 552, 545, 538, 541, 550, 551, 548, 546, 553, 550, 542, 552, 549,
   554, 544, 551, 552, 543, 555, 547, 545, 553, 544, 545, 554, 555, 552, 546, 554, 547, 553, 551, 555, 548, 549, 555, 550, 553, 554
}; // 4.27 kb
static const cart_index_t iCartXY_ab13_a3[2860] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 16, 19, 20, 13, 22, 15, 23, 24, 13, 11, 18, 14, 22, 19,
   21, 24, 17, 23, 15, 17, 12, 23, 16, 24, 18, 20, 21, 22, 25, 36, 38, 34, 35, 30, 44, 32, 45, 40, 34, 26,
   39, 28, 43, 36, 37, 45, 33, 41, 35, 37, 27, 43, 29, 44, 31, 38, 39, 42, 30, 28, 42, 36, 44, 34, 43, 40,
   41, 45, 32, 41, 29, 45, 38, 40, 42, 35, 43, 44, 40, 33, 31, 41, 42, 45, 39, 44, 37, 43, 46, 61, 62, 55,
   56, 49, 67, 51, 69, 66, 61, 47, 63, 50, 68, 57, 59, 71, 53, 65, 62, 63, 48, 70, 52, 72, 54, 58, 60, 64,
   55, 50, 70, 57, 73, 61, 68, 69, 65, 71, 56, 68, 52, 73, 58, 67, 64, 62, 70, 72, 49, 57, 72, 61, 67, 55,
   73, 66, 71, 69, 67, 59, 54, 68, 64, 73, 60, 72, 63, 70, 51, 71, 58, 69, 62, 66, 72, 56, 73, 67, 69, 53,
   60, 65, 70, 71, 63, 73, 59, 68, 66, 65, 64, 71, 72, 69, 70, 67, 68, 73, 74, 91, 93, 83, 84, 79, 100, 81,
   102, 95, 89, 75, 94, 77, 98, 85, 86, 103, 82, 96, 90, 92, 76, 99, 78, 101, 80, 87, 88, 97, 79, 89, 105, 91,
   100, 83, 107, 95, 104, 102, 91, 77, 106, 85, 108, 89, 98, 104, 96, 103, 81, 104, 90, 102, 93, 95, 105, 84, 107, 100,
   93, 106, 78, 109, 87, 105, 97, 90, 99, 101, 104, 82, 92, 96, 106, 103, 94, 108, 86, 98, 105, 94, 80, 106, 97, 109,
   88, 101, 92, 99, 83, 85, 109, 89, 107, 91, 108, 102, 103, 104, 84, 108, 87, 107, 90, 100, 101, 93, 109, 105, 107, 86,
   88, 98, 99, 108, 92, 109, 94, 106, 100, 98, 97, 108, 101, 107, 99, 105, 106, 109, 102, 96, 99, 103, 109, 104, 106, 107,
   98, 108, 95, 103, 101, 104, 105, 102, 109, 100, 108, 107, 110, 125, 127, 119, 120, 113, 137, 115, 139, 136, 126, 111, 129, 114,
   138, 121, 123, 141, 117, 135, 128, 130, 112, 140, 116, 142, 118, 122, 124, 134, 131, 114, 146, 121, 150, 126, 138, 145, 135, 141,
   132, 144, 116, 151, 122, 143, 134, 128, 140, 142, 113, 131, 148, 125, 137, 119, 149, 136, 147, 139, 143, 133, 118, 144, 134, 151,
   124, 142, 130, 140, 115, 147, 132, 139, 127, 136, 148, 120, 149, 137, 145, 117, 133, 135, 146, 141, 129, 150, 123, 138, 119, 126,
   153, 131, 149, 125, 152, 139, 145, 147, 120, 152, 128, 149, 132, 137, 143, 127, 153, 148, 125, 121, 154, 126, 152, 131, 150, 147,
   141, 145, 152, 123, 130, 138, 144, 150, 133, 154, 129, 146, 127, 154, 122, 153, 128, 148, 142, 132, 151, 143, 153, 129, 124, 146,
   140, 154, 130, 151, 133, 144, 136, 145, 143, 147, 148, 139, 153, 137, 152, 149, 147, 135, 144, 141, 154, 145, 146, 152, 138, 150,
   148, 146, 134, 154, 142, 153, 140, 143, 144, 151, 149, 138, 140, 150, 151, 152, 144, 153, 146, 154, 137, 150, 142, 152, 143, 149,
   151, 148, 154, 153, 139, 141, 151, 145, 153, 147, 154, 149, 150, 152, 155, 172, 174, 164, 165, 160, 187, 162, 189, 182, 170, 156,
   175, 158, 185, 166, 167, 190, 163, 183, 171, 173, 157, 186, 159, 188, 161, 168, 169, 184, 160, 176, 192, 172, 187, 164, 200, 182,
   191, 189, 178, 158, 195, 166, 201, 170, 185, 193, 183, 190, 162, 191, 177, 189, 174, 182, 192, 165, 200, 187, 180, 196, 159, 202,
   168, 194, 184, 171, 186, 188, 193, 163, 179, 183, 195, 190, 175, 201, 167, 185, 194, 181, 161, 196, 184, 202, 169, 188, 173, 186,
   164, 178, 207, 176, 200, 172, 205, 189, 199, 191, 165, 205, 180, 200, 177, 187, 198, 174, 207, 192, 176, 166, 208, 170, 203, 178,
   201, 199, 190, 193, 177, 206, 168, 204, 171, 198, 188, 180, 202, 194, 203, 167, 181, 185, 197, 201, 179, 208, 175, 195, 204, 179,
   169, 197, 186, 206, 173, 202, 181, 196, 172, 170, 209, 178, 205, 176, 203, 191, 193, 199, 174, 209, 171, 207, 180, 192, 194, 177,
   204, 198, 209, 175, 173, 195, 196, 208, 181, 206, 179, 197, 198, 197, 184, 206, 188, 204, 186, 194, 196, 202, 199, 183, 197, 190,
   208, 193, 195, 203, 185, 201, 182, 199, 198, 191, 192, 189, 207, 187, 205, 200, 187, 203, 194, 205, 198, 200, 204, 192, 209, 207,
   205, 185, 196, 201, 206, 203, 197, 209, 195, 208, 189, 193, 204, 199, 207, 191, 209, 200, 203, 205, 207, 195, 186, 208, 202, 209,
   196, 204, 197, 206, 191, 190, 206, 193, 209, 199, 208, 205, 201, 203, 192, 208, 188, 209, 194, 207, 202, 198, 206, 204, 200, 201,
   202, 203, 204, 205, 206, 207, 208, 209, 210, 225, 227, 219, 220, 213, 243, 215, 245, 242, 226, 211, 229, 214, 244, 221, 223, 247,
   217, 241, 228, 230, 212, 246, 216, 248, 218, 222, 224, 240, 233, 214, 252, 221, 262, 226, 244, 251, 241, 247, 234, 250, 216, 263,
   222, 249, 240, 228, 246, 248, 213, 231, 254, 225, 243, 219, 261, 242, 253, 245, 249, 236, 218, 250, 240, 263, 224, 248, 230, 246,
   215, 253, 232, 245, 227, 242, 254, 220, 261, 243, 251, 217, 235, 241, 252, 247, 229, 262, 223, 244, 219, 237, 266, 231, 261, 225,
   264, 245, 257, 253, 220, 264, 238, 261, 232, 243, 255, 227, 266, 254, 237, 221, 268, 226, 265, 233, 262, 259, 247, 251, 265, 223,
   239, 244, 256, 262, 235, 268, 229, 252, 238, 269, 222, 267, 228, 260, 248, 234, 263, 249, 267, 239, 224, 258, 246, 269, 230, 263,
   236, 250, 231, 226, 274, 233, 270, 237, 265, 257, 251, 259, 232, 273, 228, 271, 234, 255, 249, 238, 267, 260, 225, 233, 275, 237,
   264, 231, 270, 253, 259, 257, 273, 235, 230, 256, 250, 272, 236, 269, 239, 258, 227, 275, 234, 266, 238, 254, 260, 232, 271, 255,
   274, 229, 236, 252, 258, 268, 239, 272, 235, 256, 242, 257, 255, 253, 254, 245, 266, 243, 264, 261, 259, 241, 256, 247, 268, 251,
   252, 265, 244, 262, 260, 258, 240, 269, 248, 267, 246, 249, 250, 263, 270, 244, 258, 262, 272, 265, 256, 274, 252, 268, 271, 256,
   246, 272, 263, 273, 250, 267, 258, 269, 243, 270, 260, 264, 255, 261, 271, 254, 275, 266, 255, 272, 248, 273, 249, 271, 263, 260,
   269, 267, 245, 259, 271, 257, 266, 253, 275, 261, 270, 264, 257, 247, 272, 251, 274, 259, 268, 270, 262, 265, 253, 251, 273, 259,
   275, 257, 274, 264, 265, 270, 254, 274, 249, 275, 260, 266, 267, 255, 273, 271, 275, 252, 250, 268, 269, 274, 258, 273, 256, 272,
   261, 265, 267, 270, 271, 264, 273, 266, 274, 275, 264, 262, 269, 265, 273, 270, 272, 275, 268, 274, 266, 268, 263, 274, 267, 275,
   269, 271, 272, 273, 276, 293, 295, 285, 286, 281, 314, 283, 316, 309, 291, 277, 296, 279, 312, 287, 288, 317, 284, 310, 292, 294,
   278, 313, 280, 315, 282, 289, 290, 311, 281, 297, 319, 293, 314, 285, 333, 309, 318, 316, 299, 279, 322, 287, 334, 291, 312, 320,
   310, 317, 283, 318, 298, 316, 295, 309, 319, 286, 333, 314, 301, 323, 280, 335, 289, 321, 311, 292, 313, 315, 320, 284, 300, 310,
   322, 317, 296, 334, 288, 312, 321, 302, 282, 323, 311, 335, 290, 315, 294, 313, 285, 305, 340, 297, 333, 293, 338, 316, 328, 318,
   286, 338, 307, 333, 298, 314, 326, 295, 340, 319, 303, 287, 341, 291, 336, 299, 334, 329, 317, 320, 304, 339, 289, 337, 292, 327,
   315, 301, 335, 321, 336, 288, 308, 312, 324, 334, 300, 341, 296, 322, 337, 306, 290, 325, 313, 339, 294, 335, 302, 323, 293, 303,
   348, 305, 338, 297, 342, 318, 330, 328, 305, 291, 349, 299, 344, 303, 336, 330, 320, 329, 295, 348, 304, 340, 307, 319, 331, 298,
   343, 326, 307, 350, 292, 346, 301, 331, 321, 304, 337, 327, 349, 296, 306, 322, 332, 341, 308, 345, 300, 324, 350, 308, 294, 332,
   323, 347, 302, 339, 306, 325, 297, 299, 353, 303, 342, 305, 344, 328, 329, 330, 298, 352, 301, 343, 304, 326, 327, 307, 346, 331,
   351, 300, 302, 324, 325, 345, 306, 347, 308, 332, 327, 325, 311, 339, 315, 337, 313, 321, 323, 335, 329, 310, 324, 317, 341, 320,
   322, 336, 312, 334, 309, 328, 326, 318, 319, 316, 340, 314, 338, 333, 314, 342, 331, 338, 326, 333, 343, 319, 348, 340, 344, 312,
   332, 334, 345, 336, 324, 349, 322, 341, 316, 330, 343, 328, 340, 318, 348, 333, 342, 338, 346, 332, 313, 347, 335, 350, 323, 337,
   325, 339, 330, 317, 345, 320, 349, 329, 341, 344, 334, 336, 331, 347, 315, 350, 321, 346, 335, 327, 339, 337, 326, 351, 321, 352,
   327, 343, 337, 331, 350, 346, 352, 324, 323, 345, 339, 351, 325, 350, 332, 347, 328, 320, 351, 329, 353, 330, 349, 342, 336, 344,
   353, 322, 325, 341, 347, 349, 332, 351, 324, 345, 318, 329, 352, 330, 348, 328, 353, 338, 344, 342, 319, 353, 327, 348, 331, 340,
   346, 326, 352, 343, 333, 344, 346, 342, 343, 338, 352, 340, 353, 348, 342, 334, 347, 336, 351, 344, 345, 353, 341, 349, 343, 345,
   335, 351, 337, 352, 339, 346, 347, 350, 338, 336, 350, 344, 352, 342, 351, 348, 349, 353, 340, 349, 337, 353, 346, 348, 350, 343,
   351, 352, 348, 341, 339, 349, 350, 353, 347, 352, 345, 351, 354, 369, 371, 363, 364, 357, 393, 359, 395, 392, 370, 355, 373, 358,
   394, 365, 367, 397, 361, 391, 372, 374, 356, 396, 360, 398, 362, 366, 368, 390, 377, 358, 402, 365, 418, 370, 394, 401, 391, 397,
   378, 400, 360, 419, 366, 399, 390, 372, 396, 398, 357, 375, 404, 369, 393, 363, 417, 392, 403, 395, 399, 380, 362, 400, 390, 419,
   368, 398, 374, 396, 359, 403, 376, 395, 371, 392, 404, 364, 417, 393, 401, 361, 379, 391, 402, 397, 373, 418, 367, 394, 363, 381,
   422, 375, 417, 369, 420, 395, 407, 403, 364, 420, 383, 417, 376, 393, 405, 371, 422, 404, 382, 365, 424, 370, 421, 377, 418, 409,
   397, 401, 421, 367, 385, 394, 406, 418, 379, 424, 373, 402, 384, 425, 366, 423, 372, 410, 398, 378, 419, 399, 423, 386, 368, 408,
   396, 425, 374, 419, 380, 400, 387, 370, 436, 377, 428, 382, 421, 413, 401, 409, 388, 435, 372, 429, 378, 411, 399, 384, 423, 410,
   369, 387, 437, 381, 420, 375, 426, 403, 415, 407, 435, 389, 374, 412, 400, 431, 380, 425, 386, 408, 371, 437, 388, 422, 383, 404,
   416, 376, 427, 405, 436, 373, 389, 402, 414, 424, 385, 430, 379, 406, 375, 382, 440, 387, 426, 381, 432, 407, 413, 415, 376, 438,
   384, 427, 388, 405, 411, 383, 433, 416, 381, 377, 442, 382, 432, 387, 428, 415, 409, 413, 439, 379, 386, 406, 412, 430, 389, 434,
   385, 414, 383, 443, 378, 433, 384, 416, 410, 388, 429, 411, 441, 385, 380, 414, 408, 434, 386, 431, 389, 412, 392, 407, 405, 403,
   404, 395, 422, 393, 420, 417, 409, 391, 406, 397, 424, 401, 402, 421, 394, 418, 410, 408, 390, 425, 398, 423, 396, 399, 400, 419,
   428, 394, 414, 418, 430, 421, 406, 436, 402, 424, 429, 412, 396, 431, 419, 435, 400, 423, 408, 425, 393, 426, 416, 420, 405, 417,
   427, 404, 437, 422, 411, 431, 398, 435, 399, 429, 419, 410, 425, 423, 395, 415, 427, 407, 422, 403, 437, 417, 426, 420, 413, 397,
   430, 401, 436, 409, 424, 428, 418, 421, 403, 413, 438, 415, 437, 407, 440, 420, 432, 426, 404, 440, 411, 437, 416, 422, 433, 405,
   438, 427, 415, 401, 439, 409, 442, 413, 436, 432, 421, 428, 416, 441, 399, 443, 410, 433, 423, 411, 435, 429, 442, 402, 412, 424,
   434, 436, 414, 439, 406, 430, 443, 414, 400, 434, 425, 441, 408, 435, 412, 431, 444, 406, 408, 430, 431, 439, 412, 441, 414, 434,
   405, 444, 410, 438, 411, 427, 429, 416, 443, 433, 407, 409, 444, 413, 440, 415, 442, 426, 428, 432, 417, 432, 433, 426, 427, 420,
   438, 422, 440, 437, 432, 418, 434, 421, 439, 428, 430, 442, 424, 436, 433, 434, 419, 441, 423, 443, 425, 429, 431, 435, 426, 421,
   441, 428, 444, 432, 439, 440, 436, 442, 427, 439, 423, 444, 429, 438, 435, 433, 441, 443, 420, 428, 443, 432, 438, 426, 444, 437,
   442, 440, 438, 430, 425, 439, 435, 444, 431, 443, 434, 441, 422, 442, 429, 440, 433, 437, 443, 427, 444, 438, 440, 424, 431, 436,
   441, 442, 434, 444, 430, 439, 437, 436, 435, 442, 443, 440, 441, 438, 439, 444, 445, 462, 464, 454, 455, 450, 489, 452, 491, 484,
   460, 446, 465, 448, 487, 456, 457, 492, 453, 485, 461, 463, 447, 488, 449, 490, 451, 458, 459, 486, 450, 466, 494, 462, 489, 454,
   514, 484, 493, 491, 468, 448, 497, 456, 515, 460, 487, 495, 485, 492, 452, 493, 467, 491, 464, 484, 494, 455, 514, 489, 470, 498,
   449, 516, 458, 496, 486, 461, 488, 490, 495, 453, 469, 485, 497, 492, 465, 515, 457, 487, 496, 471, 451, 498, 486, 516, 459, 490,
   463, 488, 454, 474, 521, 466, 514, 462, 519, 491, 503, 493, 455, 519, 476, 514, 467, 489, 501, 464, 521, 494, 472, 456, 522, 460,
   517, 468, 515, 504, 492, 495, 473, 520, 458, 518, 461, 502, 490, 470, 516, 496, 517, 457, 477, 487, 499, 515, 469, 522, 465, 497,
   518, 475, 459, 500, 488, 520, 463, 516, 471, 498, 462, 478, 535, 474, 519, 466, 523, 493, 505, 503, 480, 460, 536, 468, 525, 472,
   517, 507, 495, 504, 464, 535, 479, 521, 476, 494, 506, 467, 524, 501, 482, 537, 461, 527, 470, 508, 496, 473, 518, 502, 536, 465,
   481, 497, 509, 522, 477, 526, 469, 499, 537, 483, 463, 510, 498, 528, 471, 520, 475, 500, 466, 480, 542, 478, 523, 474, 531, 503,
   513, 505, 467, 540, 482, 524, 479, 501, 512, 476, 533, 506, 478, 468, 543, 472, 529, 480, 525, 513, 504, 507, 479, 541, 470, 530,
   473, 512, 502, 482, 527, 508, 538, 469, 483, 499, 511, 526, 481, 534, 477, 509, 539, 481, 471, 511, 500, 532, 475, 528, 483, 510,
   474, 472, 544, 480, 531, 478, 529, 505, 507, 513, 476, 545, 473, 533, 482, 506, 508, 479, 530, 512, 546, 477, 475, 509, 510, 534,
   483, 532, 481, 511, 502, 500, 486, 520, 490, 518, 488, 496, 498, 516, 504, 485, 499, 492, 522, 495, 497, 517, 487, 515, 484, 503,
   501, 493, 494, 491, 521, 489, 519, 514, 489, 523, 506, 519, 501, 514, 524, 494, 535, 521, 525, 487, 509, 515, 526, 517, 499, 536,
   497, 522, 491, 505, 524, 503, 521, 493, 535, 514, 523, 519, 527, 510, 488, 528, 516, 537, 498, 518, 500, 520, 507, 492, 526, 495,
   536, 504, 522, 525, 515, 517, 508, 528, 490, 537, 496, 527, 516, 502, 520, 518, 512, 539, 496, 541, 502, 530, 518, 508, 537, 527,
   541, 511, 498, 532, 520, 539, 500, 537, 510, 528, 513, 495, 538, 504, 543, 507, 536, 529, 517, 525, 543, 497, 511, 522, 534, 536,
   509, 538, 499, 526, 493, 513, 540, 505, 535, 503, 542, 519, 531, 523, 494, 542, 512, 535, 506, 521, 533, 501, 540, 524, 501, 547,
   508, 540, 512, 524, 530, 506, 545, 533, 548, 499, 510, 526, 532, 538, 511, 546, 509, 534, 503, 507, 547, 513, 542, 505, 544, 523,
   529, 531, 549, 509, 500, 534, 528, 546, 510, 539, 511, 532, 505, 504, 548, 507, 544, 513, 543, 531, 525, 529, 506, 549, 502, 545,
   508, 533, 527, 512, 541, 530, 514, 531, 533, 523, 524, 519, 540, 521, 542, 535, 529, 515, 534, 517, 538, 525, 526, 543, 522, 536,
   530, 532, 516, 539, 518, 541, 520, 527, 528, 537, 519, 529, 545, 531, 540, 523, 547, 535, 544, 542, 531, 517, 546, 525, 548, 529,
   538, 544, 536, 543, 521, 544, 530, 542, 533, 535, 545, 524, 547, 540, 533, 546, 518, 549, 527, 545, 537, 530, 539, 541, 544, 522,
   532, 536, 546, 543, 534, 548, 526, 538, 545, 534, 520, 546, 537, 549, 528, 541, 532, 539, 523, 525, 549, 529, 547, 531, 548, 542,
   543, 544, 524, 548, 527, 547, 530, 540, 541, 533, 549, 545, 547, 526, 528, 538, 539, 548, 532, 549, 534, 546, 540, 538, 537, 548,
   541, 547, 539, 545, 546, 549, 542, 536, 539, 543, 549, 544, 546, 547, 538, 548, 535, 543, 541, 544, 545, 542, 549, 540, 548, 547
}; // 5.59 kb
static const cart_index_t iCartXY_ab13_a4[3300] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 26, 22, 28, 31, 32, 24, 25,
   33, 34, 35, 30, 20, 16, 21, 24, 18, 30, 32, 23, 29, 26, 34, 27, 33, 31, 35, 22, 23, 17, 30, 31, 25, 19,
   27, 21, 35, 28, 29, 32, 33, 34, 36, 47, 48, 39, 51, 41, 52, 61, 62, 45, 46, 63, 57, 59, 56, 45, 37, 50,
   51, 40, 59, 60, 43, 53, 47, 63, 49, 58, 55, 61, 46, 49, 38, 57, 58, 52, 42, 53, 44, 63, 48, 50, 54, 60,
   62, 39, 40, 54, 45, 47, 56, 62, 55, 60, 51, 57, 58, 63, 61, 59, 41, 55, 42, 56, 61, 46, 48, 58, 54, 59,
   52, 60, 62, 63, 57, 56, 43, 44, 59, 55, 57, 54, 49, 50, 61, 62, 53, 60, 58, 63, 64, 79, 80, 69, 81, 71,
   83, 94, 95, 73, 74, 97, 90, 92, 85, 81, 65, 82, 79, 67, 94, 96, 72, 84, 75, 98, 76, 88, 86, 93, 83, 84,
   66, 95, 96, 80, 68, 82, 70, 99, 77, 78, 87, 89, 91, 73, 67, 89, 81, 75, 92, 99, 86, 96, 79, 97, 88, 98,
   93, 94, 74, 88, 68, 90, 98, 83, 77, 96, 87, 97, 80, 89, 91, 99, 95, 69, 75, 91, 73, 79, 85, 95, 93, 99,
   81, 90, 98, 97, 94, 92, 90, 76, 70, 97, 88, 95, 87, 84, 78, 98, 91, 82, 89, 96, 99, 71, 93, 77, 85, 94,
   74, 80, 98, 91, 92, 83, 99, 95, 97, 90, 92, 72, 78, 94, 86, 97, 89, 76, 82, 93, 99, 84, 96, 88, 98, 85,
   86, 87, 92, 93, 90, 91, 88, 89, 94, 95, 96, 99, 98, 97, 100, 121, 122, 103, 115, 105, 117, 137, 138, 109, 110, 139,
   127, 129, 126, 121, 101, 123, 116, 104, 135, 136, 107, 119, 111, 140, 113, 128, 125, 131, 122, 123, 102, 133, 134, 118, 106, 120,
   108, 141, 112, 114, 124, 130, 132, 103, 116, 133, 109, 121, 126, 138, 135, 143, 115, 127, 142, 139, 137, 129, 115, 104, 134, 121,
   111, 137, 144, 125, 136, 116, 142, 128, 140, 131, 135, 105, 135, 118, 126, 137, 110, 122, 142, 133, 129, 117, 143, 138, 139, 127,
   117, 136, 106, 138, 144, 122, 112, 134, 124, 143, 118, 130, 132, 141, 133, 137, 107, 120, 135, 125, 142, 134, 113, 123, 131, 144,
   119, 136, 128, 140, 138, 119, 108, 143, 136, 133, 124, 123, 114, 144, 132, 120, 130, 134, 141, 109, 111, 141, 115, 116, 129, 143,
   131, 144, 121, 139, 140, 142, 135, 137, 110, 140, 112, 127, 142, 117, 118, 144, 132, 139, 122, 141, 133, 143, 138, 139, 113, 114,
   142, 128, 143, 130, 119, 120, 140, 141, 123, 134, 136, 144, 127, 128, 124, 139, 140, 138, 132, 136, 130, 142, 133, 134, 141, 144,
   143, 129, 125, 130, 137, 131, 139, 141, 128, 134, 135, 143, 136, 144, 140, 142, 126, 131, 132, 129, 135, 127, 133, 140, 141, 137,
   138, 144, 143, 142, 139, 145, 166, 167, 150, 162, 152, 164, 181, 182, 154, 155, 190, 177, 179, 172, 168, 146, 169, 160, 148, 183,
   185, 153, 165, 156, 191, 157, 175, 173, 180, 170, 171, 147, 184, 186, 161, 149, 163, 151, 192, 158, 159, 174, 176, 178, 166, 148,
   187, 168, 156, 189, 198, 173, 185, 160, 193, 175, 191, 180, 183, 167, 187, 149, 188, 196, 170, 158, 186, 174, 194, 161, 176, 178,
   192, 184, 150, 168, 188, 154, 166, 172, 182, 189, 197, 162, 177, 195, 190, 181, 179, 188, 169, 151, 194, 187, 184, 174, 171, 159,
   196, 178, 163, 176, 186, 192, 152, 189, 170, 172, 181, 155, 167, 195, 188, 179, 164, 197, 182, 190, 177, 189, 153, 171, 183, 173,
   193, 187, 157, 169, 180, 198, 165, 185, 175, 191, 154, 160, 194, 162, 168, 179, 197, 183, 199, 166, 190, 193, 195, 189, 181, 155,
   193, 161, 177, 195, 164, 170, 199, 184, 190, 167, 194, 188, 197, 182, 162, 156, 196, 166, 160, 181, 199, 180, 198, 168, 195, 191,
   193, 183, 189, 195, 157, 163, 193, 175, 199, 186, 165, 171, 191, 196, 169, 187, 185, 198, 164, 198, 158, 182, 199, 167, 161, 196,
   178, 197, 170, 192, 184, 194, 188, 197, 165, 159, 199, 185, 194, 176, 169, 163, 198, 192, 171, 186, 187, 196, 172, 183, 184, 179,
   189, 177, 188, 193, 194, 181, 182, 199, 197, 195, 190, 181, 173, 186, 189, 180, 195, 196, 175, 187, 183, 199, 185, 198, 191, 193,
   182, 185, 174, 197, 198, 188, 178, 187, 176, 199, 184, 186, 192, 196, 194, 190, 175, 176, 195, 191, 197, 192, 185, 186, 193, 194,
   187, 196, 198, 199, 177, 191, 178, 190, 193, 182, 184, 198, 192, 195, 188, 196, 194, 199, 197, 179, 180, 192, 181, 183, 190, 194,
   191, 196, 189, 197, 198, 199, 193, 195, 200, 221, 222, 203, 215, 205, 217, 243, 244, 209, 210, 251, 233, 235, 232, 223, 201, 225,
   216, 204, 241, 242, 207, 219, 211, 252, 213, 234, 231, 237, 224, 226, 202, 239, 240, 218, 206, 220, 208, 253, 212, 214, 230, 236,
   238, 203, 227, 245, 209, 221, 232, 244, 247, 256, 215, 233, 254, 251, 243, 235, 227, 204, 246, 223, 211, 249, 258, 231, 242, 216,
   255, 234, 252, 237, 241, 205, 247, 228, 232, 243, 210, 222, 254, 245, 235, 217, 256, 244, 251, 233, 228, 248, 206, 250, 259, 224,
   212, 240, 230, 257, 218, 236, 238, 253, 239, 249, 207, 229, 241, 231, 255, 246, 213, 225, 237, 258, 219, 242, 234, 252, 250, 229,
   208, 257, 248, 239, 230, 226, 214, 259, 238, 220, 236, 240, 253, 209, 223, 261, 215, 227, 235, 256, 249, 265, 221, 251, 260, 254,
   247, 243, 210, 260, 224, 233, 254, 217, 228, 265, 250, 251, 222, 261, 245, 256, 244, 221, 211, 262, 227, 216, 247, 264, 237, 258,
   223, 260, 252, 255, 241, 249, 222, 262, 212, 245, 263, 228, 218, 259, 238, 261, 224, 253, 239, 257, 250, 260, 213, 226, 255, 234,
   264, 248, 219, 229, 252, 262, 225, 246, 242, 258, 261, 225, 214, 263, 246, 257, 236, 229, 220, 262, 253, 226, 240, 248, 259, 215,
   216, 263, 221, 223, 243, 265, 241, 264, 227, 254, 255, 260, 249, 247, 217, 264, 218, 244, 265, 222, 224, 263, 239, 256, 228, 257,
   250, 261, 245, 265, 219, 220, 264, 242, 263, 240, 225, 226, 258, 259, 229, 248, 246, 262, 245, 246, 230, 261, 262, 250, 238, 248,
   236, 263, 239, 240, 253, 259, 257, 247, 231, 248, 249, 237, 260, 262, 234, 246, 241, 264, 242, 258, 252, 255, 232, 249, 250, 235,
   247, 233, 245, 260, 261, 243, 244, 265, 256, 254, 251, 233, 255, 239, 251, 260, 244, 250, 264, 257, 254, 245, 263, 261, 265, 256,
   254, 234, 240, 260, 252, 265, 259, 242, 248, 255, 263, 246, 262, 258, 264, 235, 241, 257, 243, 249, 251, 261, 255, 263, 247, 256,
   264, 265, 260, 254, 256, 242, 236, 265, 258, 261, 253, 246, 240, 264, 257, 248, 259, 262, 263, 243, 237, 259, 247, 241, 254, 263,
   252, 262, 249, 265, 258, 264, 255, 260, 244, 258, 238, 256, 264, 245, 239, 262, 253, 265, 250, 259, 257, 263, 261, 251, 252, 253,
   254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 287, 288, 271, 283, 273, 285, 308, 309, 275, 276, 323, 304, 306,
   299, 289, 267, 290, 281, 269, 310, 312, 274, 286, 277, 324, 278, 302, 300, 307, 291, 292, 268, 311, 313, 282, 270, 284, 272, 325,
   279, 280, 301, 303, 305, 293, 269, 314, 289, 277, 319, 331, 300, 312, 281, 326, 302, 324, 307, 310, 294, 315, 270, 317, 329, 291,
   279, 313, 301, 327, 282, 303, 305, 325, 311, 271, 295, 316, 275, 287, 299, 309, 318, 330, 283, 304, 328, 323, 308, 306, 317, 296,
   272, 327, 315, 311, 301, 292, 280, 329, 305, 284, 303, 313, 325, 273, 318, 297, 299, 308, 276, 288, 328, 316, 306, 285, 330, 309,
   323, 304, 319, 274, 298, 310, 300, 326, 314, 278, 290, 307, 331, 286, 312, 302, 324, 275, 293, 333, 283, 295, 306, 330, 320, 338,
   287, 323, 332, 328, 318, 308, 276, 332, 294, 304, 328, 285, 297, 338, 321, 323, 288, 333, 316, 330, 309, 295, 277, 335, 293, 281,
   320, 339, 307, 331, 289, 334, 324, 326, 310, 319, 334, 278, 296, 326, 302, 339, 322, 286, 298, 324, 335, 290, 314, 312, 331, 297,
   337, 279, 321, 340, 294, 282, 329, 305, 336, 291, 325, 311, 327, 317, 336, 298, 280, 340, 322, 327, 303, 296, 284, 337, 325, 292,
   313, 315, 329, 287, 281, 341, 295, 289, 318, 343, 310, 339, 293, 332, 326, 334, 319, 320, 288, 341, 282, 316, 342, 297, 291, 340,
   311, 333, 294, 327, 317, 336, 321, 283, 289, 342, 287, 293, 308, 338, 319, 343, 295, 328, 334, 332, 320, 318, 342, 290, 284, 341,
   314, 340, 313, 298, 292, 335, 329, 296, 315, 322, 337, 285, 343, 291, 309, 338, 288, 294, 342, 317, 330, 297, 336, 321, 333, 316,
   343, 286, 292, 339, 312, 341, 315, 290, 296, 331, 337, 298, 322, 314, 335, 299, 320, 321, 306, 318, 304, 316, 332, 333, 308, 309,
   338, 330, 328, 323, 320, 300, 322, 319, 307, 334, 335, 302, 314, 310, 339, 312, 331, 324, 326, 321, 322, 301, 336, 337, 317, 305,
   315, 303, 340, 311, 313, 325, 329, 327, 332, 302, 315, 334, 324, 343, 337, 312, 322, 326, 341, 314, 335, 331, 339, 333, 314, 303,
   342, 335, 336, 325, 322, 313, 341, 327, 315, 329, 337, 340, 304, 334, 317, 323, 332, 309, 321, 343, 336, 328, 316, 342, 333, 338,
   330, 316, 335, 305, 333, 341, 321, 311, 337, 325, 342, 317, 329, 327, 340, 336, 306, 319, 336, 308, 320, 323, 333, 334, 342, 318,
   330, 343, 338, 332, 328, 318, 307, 337, 320, 310, 332, 341, 324, 335, 319, 343, 331, 339, 326, 334, 308, 310, 340, 318, 319, 328,
   342, 326, 341, 320, 338, 339, 343, 334, 332, 309, 339, 311, 330, 343, 316, 317, 341, 327, 338, 321, 340, 336, 342, 333, 338, 312,
   313, 343, 331, 342, 329, 314, 315, 339, 340, 322, 337, 335, 341, 323, 326, 327, 328, 334, 330, 336, 339, 340, 332, 333, 341, 342,
   343, 338, 328, 324, 329, 332, 326, 338, 340, 331, 337, 334, 342, 335, 341, 339, 343, 330, 331, 325, 338, 339, 333, 327, 335, 329,
   343, 336, 337, 340, 341, 342, 344, 365, 366, 347, 359, 349, 361, 393, 394, 353, 354, 407, 383, 385, 382, 367, 345, 369, 360, 348,
   391, 392, 351, 363, 355, 408, 357, 384, 381, 387, 368, 370, 346, 389, 390, 362, 350, 364, 352, 409, 356, 358, 380, 386, 388, 347,
   371, 395, 353, 365, 382, 394, 397, 412, 359, 383, 410, 407, 393, 385, 372, 348, 396, 367, 355, 399, 414, 381, 392, 360, 411, 384,
   408, 387, 391, 349, 397, 373, 382, 393, 354, 366, 410, 395, 385, 361, 412, 394, 407, 383, 374, 398, 350, 400, 415, 368, 356, 390,
   380, 413, 362, 386, 388, 409, 389, 399, 351, 375, 391, 381, 411, 396, 357, 369, 387, 414, 363, 392, 384, 408, 400, 376, 352, 413,
   398, 389, 380, 370, 358, 415, 388, 364, 386, 390, 409, 353, 377, 417, 359, 371, 385, 412, 405, 427, 365, 407, 416, 410, 397, 393,
   354, 416, 378, 383, 410, 361, 373, 427, 406, 407, 366, 417, 395, 412, 394, 377, 355, 420, 372, 360, 403, 426, 387, 414, 367, 418,
   408, 411, 391, 399, 378, 421, 356, 401, 425, 374, 362, 415, 388, 419, 368, 409, 389, 413, 400, 418, 357, 379, 411, 384, 426, 404,
   363, 375, 408, 420, 369, 396, 392, 414, 419, 379, 358, 425, 402, 413, 386, 376, 364, 421, 409, 370, 390, 398, 415, 359, 372, 428,
   365, 377, 393, 427, 403, 430, 371, 410, 422, 416, 405, 397, 371, 360, 429, 377, 367, 405, 432, 391, 426, 372, 422, 411, 418, 399,
   403, 361, 430, 374, 394, 427, 366, 378, 428, 401, 412, 373, 423, 406, 417, 395, 373, 431, 362, 406, 433, 378, 368, 425, 389, 423,
   374, 413, 400, 419, 401, 432, 363, 376, 426, 392, 429, 402, 369, 379, 414, 424, 375, 404, 396, 420, 433, 375, 364, 431, 404, 425,
   390, 379, 370, 424, 415, 376, 398, 402, 421, 365, 367, 434, 371, 372, 397, 430, 399, 432, 377, 416, 418, 422, 403, 405, 366, 434,
   368, 395, 428, 373, 374, 433, 400, 417, 378, 419, 401, 423, 406, 434, 369, 370, 429, 396, 431, 398, 375, 376, 420, 421, 379, 402,
   404, 424, 401, 402, 380, 419, 421, 400, 388, 398, 386, 425, 389, 390, 409, 415, 413, 403, 381, 404, 399, 387, 418, 420, 384, 396,
   391, 426, 392, 414, 408, 411, 382, 405, 406, 385, 397, 383, 395, 416, 417, 393, 394, 427, 412, 410, 407, 383, 422, 401, 407, 416,
   394, 406, 430, 423, 410, 395, 428, 417, 427, 412, 422, 384, 402, 418, 408, 432, 424, 392, 404, 411, 429, 396, 420, 414, 426, 385,
   403, 423, 393, 405, 407, 417, 422, 428, 397, 412, 430, 427, 416, 410, 423, 404, 386, 433, 424, 419, 409, 402, 390, 431, 413, 398,
   415, 421, 425, 405, 387, 424, 403, 391, 422, 429, 408, 420, 399, 432, 414, 426, 411, 418, 406, 424, 388, 423, 431, 401, 389, 421,
   409, 433, 400, 415, 413, 425, 419, 395, 429, 389, 417, 434, 406, 400, 431, 413, 428, 401, 425, 419, 433, 423, 428, 396, 390, 434,
   420, 433, 415, 404, 398, 429, 425, 402, 421, 424, 431, 397, 391, 431, 405, 399, 416, 434, 411, 429, 403, 430, 426, 432, 418, 422,
   430, 392, 398, 432, 414, 434, 421, 396, 402, 426, 431, 404, 424, 420, 429, 393, 399, 433, 397, 403, 410, 428, 418, 434, 405, 427,
   432, 430, 422, 416, 394, 432, 400, 412, 430, 395, 401, 434, 419, 427, 406, 433, 423, 428, 417, 407, 418, 419, 410, 422, 412, 423,
   432, 433, 416, 417, 434, 428, 430, 427, 416, 408, 421, 422, 411, 430, 431, 414, 424, 418, 434, 420, 429, 426, 432, 417, 420, 409,
   428, 429, 423, 413, 424, 415, 434, 419, 421, 425, 431, 433, 410, 411, 425, 416, 418, 427, 433, 426, 431, 422, 428, 429, 434, 432,
   430, 412, 426, 413, 427, 432, 417, 419, 429, 425, 430, 423, 431, 433, 434, 428, 427, 414, 415, 430, 426, 428, 425, 420, 421, 432,
   433, 424, 431, 429, 434, 435, 456, 457, 440, 452, 442, 454, 483, 484, 444, 445, 504, 479, 481, 474, 458, 436, 459, 450, 438, 485,
   487, 443, 455, 446, 505, 447, 477, 475, 482, 460, 461, 437, 486, 488, 451, 439, 453, 441, 506, 448, 449, 476, 478, 480, 462, 438,
   489, 458, 446, 494, 512, 475, 487, 450, 507, 477, 505, 482, 485, 463, 490, 439, 492, 510, 460, 448, 488, 476, 508, 451, 478, 480,
   506, 486, 440, 464, 491, 444, 456, 474, 484, 493, 511, 452, 479, 509, 504, 483, 481, 492, 465, 441, 508, 490, 486, 476, 461, 449,
   510, 480, 453, 478, 488, 506, 442, 493, 466, 474, 483, 445, 457, 509, 491, 481, 454, 511, 484, 504, 479, 494, 443, 467, 485, 475,
   507, 489, 447, 459, 482, 512, 455, 487, 477, 505, 444, 468, 514, 452, 464, 481, 511, 495, 525, 456, 504, 513, 509, 493, 483, 445,
   513, 469, 479, 509, 454, 466, 525, 496, 504, 457, 514, 491, 511, 484, 470, 446, 516, 462, 450, 497, 526, 482, 512, 458, 515, 505,
   507, 485, 494, 515, 447, 471, 507, 477, 526, 499, 455, 467, 505, 516, 459, 489, 487, 512, 472, 518, 448, 498, 527, 463, 451, 510,
   480, 517, 460, 506, 486, 508, 492, 517, 473, 449, 527, 500, 508, 478, 465, 453, 518, 506, 461, 488, 490, 510, 468, 450, 528, 470,
   458, 503, 533, 485, 526, 462, 519, 507, 515, 494, 497, 469, 529, 451, 502, 531, 472, 460, 527, 486, 520, 463, 508, 492, 517, 498,
   452, 470, 530, 456, 468, 483, 525, 503, 532, 464, 509, 521, 513, 495, 493, 531, 471, 453, 529, 501, 527, 488, 473, 461, 522, 510,
   465, 490, 500, 518, 454, 532, 472, 484, 525, 457, 469, 530, 502, 511, 466, 523, 496, 514, 491, 533, 455, 473, 526, 487, 528, 501,
   459, 471, 512, 524, 467, 499, 489, 516, 456, 462, 537, 464, 470, 493, 532, 497, 534, 468, 513, 519, 521, 503, 495, 457, 537, 463,
   491, 530, 466, 472, 535, 498, 514, 469, 520, 502, 523, 496, 464, 458, 538, 468, 462, 495, 534, 494, 533, 470, 521, 515, 519, 497,
   503, 538, 459, 465, 528, 489, 536, 500, 467, 473, 516, 522, 471, 501, 499, 524, 466, 539, 460, 496, 535, 469, 463, 531, 492, 523,
   472, 517, 498, 520, 502, 539, 467, 461, 536, 499, 529, 490, 471, 465, 524, 518, 473, 500, 501, 522, 474, 495, 496, 481, 493, 479,
   491, 513, 514, 483, 484, 525, 511, 509, 504, 497, 475, 499, 494, 482, 515, 516, 477, 489, 485, 526, 487, 512, 505, 507, 498, 500,
   476, 517, 518, 492, 480, 490, 478, 527, 486, 488, 506, 510, 508, 519, 477, 501, 515, 505, 533, 524, 487, 499, 507, 528, 489, 516,
   512, 526, 520, 501, 478, 531, 522, 517, 506, 500, 488, 529, 508, 490, 510, 518, 527, 479, 521, 502, 504, 513, 484, 496, 532, 523,
   509, 491, 530, 514, 525, 511, 502, 522, 480, 520, 529, 498, 486, 518, 506, 531, 492, 510, 508, 527, 517, 481, 503, 523, 483, 495,
   504, 514, 521, 530, 493, 511, 532, 525, 513, 509, 503, 482, 524, 497, 485, 519, 528, 505, 516, 494, 533, 512, 526, 507, 515, 483,
   497, 535, 493, 503, 509, 530, 519, 537, 495, 525, 534, 532, 521, 513, 484, 534, 498, 511, 532, 491, 502, 537, 520, 525, 496, 535,
   523, 530, 514, 495, 485, 536, 503, 494, 521, 538, 507, 528, 497, 534, 526, 533, 515, 519, 496, 536, 486, 523, 539, 502, 492, 529,
   508, 535, 498, 527, 517, 531, 520, 534, 487, 500, 533, 512, 538, 522, 489, 501, 526, 536, 499, 524, 516, 528, 535, 499, 488, 539,
   524, 531, 510, 501, 490, 536, 527, 500, 518, 522, 529, 537, 489, 490, 538, 516, 539, 518, 499, 500, 528, 529, 501, 522, 524, 536,
   491, 538, 492, 514, 537, 496, 498, 539, 517, 530, 502, 531, 520, 535, 523, 493, 494, 539, 495, 497, 513, 537, 515, 538, 503, 532,
   533, 534, 519, 521, 504, 519, 520, 509, 521, 511, 523, 534, 535, 513, 514, 537, 530, 532, 525, 521, 505, 522, 519, 507, 534, 536,
   512, 524, 515, 538, 516, 528, 526, 533, 523, 524, 506, 535, 536, 520, 508, 522, 510, 539, 517, 518, 527, 529, 531, 513, 507, 529,
   521, 515, 532, 539, 526, 536, 519, 537, 528, 538, 533, 534, 514, 528, 508, 530, 538, 523, 517, 536, 527, 537, 520, 529, 531, 539,
   535, 509, 515, 531, 513, 519, 525, 535, 533, 539, 521, 530, 538, 537, 534, 532, 530, 516, 510, 537, 528, 535, 527, 524, 518, 538,
   531, 522, 529, 536, 539, 511, 533, 517, 525, 534, 514, 520, 538, 531, 532, 523, 539, 535, 537, 530, 532, 512, 518, 534, 526, 537,
   529, 516, 522, 533, 539, 524, 536, 528, 538, 525, 526, 527, 532, 533, 530, 531, 528, 529, 534, 535, 536, 539, 538, 537
}; // 6.45 kb
static const cart_index_t iCartXY_ab13_a5[3465] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 27, 32, 33,
   24, 39, 26, 40, 30, 31, 36, 43, 37, 45, 41, 46, 47, 48, 42, 44, 24, 22, 29, 25, 39, 30, 35, 41, 28, 36,
   42, 32, 34, 47, 38, 44, 40, 45, 43, 48, 46, 26, 28, 23, 40, 27, 41, 29, 31, 34, 44, 37, 46, 38, 33, 35,
   42, 43, 39, 45, 47, 48, 49, 60, 62, 64, 65, 54, 76, 56, 78, 58, 59, 66, 83, 68, 84, 70, 79, 80, 82, 75,
   77, 58, 50, 63, 52, 74, 66, 67, 77, 57, 64, 82, 60, 61, 84, 69, 79, 71, 81, 73, 83, 78, 59, 61, 51, 73,
   53, 75, 55, 68, 69, 82, 65, 83, 67, 62, 63, 80, 81, 72, 74, 76, 84, 54, 52, 72, 60, 76, 58, 74, 70, 71,
   66, 75, 64, 73, 80, 81, 77, 78, 84, 83, 82, 79, 56, 71, 53, 78, 62, 70, 72, 59, 73, 77, 68, 79, 81, 65,
   74, 75, 83, 76, 84, 80, 82, 70, 57, 55, 71, 72, 77, 63, 75, 61, 79, 80, 78, 69, 76, 67, 82, 73, 74, 81,
   84, 83, 85, 101, 103, 106, 107, 88, 118, 90, 120, 94, 95, 100, 127, 102, 128, 111, 122, 123, 124, 112, 114, 100, 86, 105,
   89, 119, 106, 108, 122, 92, 101, 127, 96, 98, 129, 104, 120, 110, 121, 113, 125, 116, 102, 104, 87, 121, 91, 123, 93, 107,
   108, 128, 103, 129, 105, 97, 99, 118, 119, 109, 115, 117, 126, 94, 89, 115, 96, 126, 100, 119, 114, 110, 106, 124, 101, 113,
   128, 121, 122, 116, 129, 125, 127, 120, 95, 113, 91, 125, 97, 112, 109, 102, 121, 124, 107, 127, 119, 103, 115, 123, 129, 117,
   126, 118, 128, 88, 96, 117, 101, 118, 94, 126, 111, 116, 100, 112, 106, 125, 123, 129, 114, 120, 128, 127, 124, 122, 112, 98,
   93, 113, 109, 124, 99, 123, 104, 127, 118, 125, 108, 117, 105, 128, 121, 115, 119, 126, 129, 90, 116, 97, 120, 103, 111, 117,
   95, 125, 114, 102, 122, 129, 107, 126, 112, 127, 118, 128, 123, 124, 114, 92, 99, 110, 115, 122, 105, 124, 98, 120, 128, 116,
   104, 126, 108, 127, 113, 119, 121, 129, 125, 111, 110, 109, 116, 117, 114, 115, 112, 113, 122, 123, 120, 121, 118, 119, 124, 125,
   126, 129, 128, 127, 130, 153, 155, 151, 152, 135, 173, 137, 174, 139, 140, 147, 180, 149, 182, 157, 166, 167, 175, 162, 164, 151,
   131, 156, 133, 172, 153, 154, 174, 138, 145, 178, 141, 142, 183, 150, 168, 158, 170, 160, 176, 165, 152, 154, 132, 172, 134, 173,
   136, 155, 156, 179, 146, 181, 148, 143, 144, 169, 171, 159, 161, 163, 177, 135, 145, 169, 153, 173, 139, 179, 157, 168, 147, 162,
   151, 178, 167, 184, 164, 174, 182, 180, 175, 166, 147, 133, 171, 141, 181, 151, 172, 166, 158, 153, 180, 145, 160, 184, 170, 174,
   165, 183, 176, 178, 168, 137, 168, 146, 174, 155, 157, 169, 140, 178, 164, 149, 166, 184, 152, 179, 162, 180, 173, 182, 167, 175,
   149, 170, 134, 183, 143, 167, 159, 152, 172, 182, 155, 184, 171, 146, 161, 173, 181, 163, 177, 169, 179, 166, 138, 148, 158, 171,
   174, 156, 180, 142, 168, 184, 165, 150, 181, 154, 178, 160, 172, 170, 183, 176, 167, 150, 136, 170, 159, 182, 144, 173, 154, 184,
   169, 183, 156, 163, 148, 179, 172, 161, 171, 177, 181, 139, 141, 177, 145, 179, 147, 181, 164, 165, 151, 175, 153, 176, 182, 183,
   166, 168, 184, 178, 180, 174, 140, 176, 143, 178, 146, 162, 163, 149, 183, 175, 152, 180, 181, 155, 177, 167, 184, 169, 179, 173,
   182, 175, 142, 144, 160, 161, 180, 148, 182, 150, 178, 179, 176, 154, 177, 156, 184, 170, 171, 172, 181, 183, 162, 160, 159, 176,
   163, 175, 161, 167, 170, 180, 173, 178, 172, 169, 171, 182, 183, 177, 181, 179, 184, 164, 158, 161, 165, 177, 166, 171, 175, 160,
   174, 182, 168, 170, 179, 172, 180, 176, 181, 183, 184, 178, 157, 165, 163, 168, 169, 164, 177, 162, 176, 166, 167, 174, 183, 173,
   181, 175, 178, 179, 184, 182, 180, 185, 212, 213, 206, 207, 188, 230, 190, 232, 194, 195, 200, 239, 202, 241, 217, 228, 229, 236,
   218, 220, 212, 186, 214, 189, 231, 208, 210, 234, 192, 201, 240, 196, 198, 243, 204, 226, 216, 227, 219, 237, 222, 213, 214, 187,
   233, 191, 235, 193, 209, 211, 242, 203, 244, 205, 197, 199, 224, 225, 215, 221, 223, 238, 206, 189, 233, 196, 247, 212, 231, 232,
   216, 208, 245, 201, 219, 249, 227, 234, 222, 243, 237, 240, 226, 207, 231, 191, 247, 197, 230, 215, 213, 233, 246, 209, 248, 225,
   203, 221, 235, 244, 223, 238, 224, 242, 188, 208, 235, 212, 230, 194, 246, 217, 234, 200, 218, 206, 245, 229, 250, 220, 232, 241,
   239, 236, 228, 230, 210, 193, 231, 215, 246, 199, 235, 214, 248, 224, 247, 211, 223, 205, 242, 233, 221, 225, 238, 244, 190, 234,
   209, 232, 213, 217, 235, 195, 245, 220, 202, 228, 250, 207, 246, 218, 239, 230, 241, 229, 236, 232, 192, 211, 216, 233, 234, 214,
   245, 198, 226, 249, 222, 204, 247, 210, 240, 219, 231, 227, 243, 237, 194, 201, 242, 208, 246, 200, 248, 220, 226, 206, 236, 212,
   240, 241, 249, 228, 234, 250, 245, 239, 232, 195, 240, 203, 245, 209, 218, 224, 202, 249, 236, 207, 239, 248, 213, 242, 229, 250,
   235, 246, 230, 241, 200, 196, 244, 201, 248, 206, 247, 228, 222, 212, 239, 208, 237, 250, 243, 232, 226, 249, 240, 245, 234, 239,
   198, 205, 219, 225, 245, 211, 250, 204, 240, 248, 237, 210, 244, 214, 249, 227, 233, 231, 247, 243, 202, 243, 197, 249, 203, 229,
   223, 207, 247, 241, 213, 250, 244, 209, 238, 230, 248, 224, 242, 235, 246, 241, 204, 199, 227, 221, 250, 205, 246, 210, 249, 242,
   243, 214, 238, 211, 248, 231, 225, 233, 244, 247, 217, 226, 224, 234, 235, 220, 242, 218, 240, 228, 229, 232, 249, 230, 248, 236,
   245, 246, 250, 241, 239, 228, 216, 225, 222, 244, 232, 233, 239, 219, 234, 250, 226, 227, 248, 231, 245, 237, 247, 243, 249, 240,
   229, 227, 215, 243, 223, 241, 221, 230, 231, 250, 235, 249, 233, 224, 225, 246, 247, 238, 244, 242, 248, 236, 219, 221, 237, 238,
   239, 225, 241, 227, 245, 246, 240, 231, 242, 233, 250, 243, 244, 247, 248, 249, 218, 237, 223, 240, 224, 236, 238, 229, 243, 239,
   230, 245, 247, 235, 244, 241, 249, 242, 248, 246, 250, 220, 222, 238, 226, 242, 228, 244, 236, 237, 232, 241, 234, 243, 246, 247,
   239, 240, 248, 249, 250, 245, 251, 280, 282, 272, 273, 256, 301, 258, 303, 260, 261, 268, 313, 270, 315, 284, 293, 294, 308, 289,
   291, 278, 252, 283, 254, 299, 274, 275, 304, 259, 266, 311, 262, 263, 316, 271, 295, 285, 297, 287, 309, 292, 279, 281, 253, 300,
   255, 302, 257, 276, 277, 312, 267, 314, 269, 264, 265, 296, 298, 286, 288, 290, 310, 256, 278, 306, 280, 301, 260, 318, 284, 305,
   268, 289, 272, 317, 294, 323, 291, 303, 315, 313, 308, 293, 280, 254, 307, 262, 320, 278, 299, 305, 285, 274, 319, 266, 287, 324,
   297, 304, 292, 316, 309, 311, 295, 258, 305, 279, 303, 282, 284, 306, 261, 317, 291, 270, 293, 323, 273, 318, 289, 313, 301, 315,
   294, 308, 282, 307, 255, 322, 264, 306, 286, 279, 300, 321, 276, 325, 298, 267, 288, 302, 314, 290, 310, 296, 312, 305, 259, 281,
   285, 307, 304, 283, 319, 263, 295, 324, 292, 271, 320, 275, 311, 287, 299, 297, 316, 309, 306, 283, 257, 307, 286, 321, 265, 302,
   281, 325, 296, 322, 277, 290, 269, 312, 300, 288, 298, 310, 314, 260, 274, 321, 278, 318, 268, 327, 291, 304, 272, 308, 280, 319,
   315, 328, 293, 305, 323, 317, 313, 303, 261, 319, 276, 317, 279, 289, 302, 270, 328, 308, 273, 313, 327, 282, 321, 294, 323, 306,
   318, 301, 315, 272, 262, 322, 266, 326, 280, 320, 303, 292, 278, 317, 274, 309, 328, 316, 305, 295, 324, 311, 319, 304, 273, 320,
   264, 326, 267, 301, 290, 282, 322, 318, 279, 327, 314, 276, 310, 306, 325, 296, 312, 302, 321, 317, 263, 277, 287, 300, 319, 281,
   328, 271, 311, 326, 309, 275, 322, 283, 324, 297, 307, 299, 320, 316, 318, 275, 265, 299, 288, 327, 269, 321, 283, 326, 312, 320,
   281, 310, 277, 325, 307, 298, 300, 314, 322, 268, 266, 325, 274, 327, 272, 326, 293, 295, 280, 313, 278, 311, 323, 324, 303, 304,
   328, 319, 317, 305, 270, 324, 267, 328, 276, 294, 296, 273, 326, 315, 282, 323, 325, 279, 312, 301, 327, 302, 321, 306, 318, 323,
   271, 269, 297, 298, 328, 277, 327, 275, 324, 325, 316, 283, 314, 281, 326, 299, 300, 307, 322, 320, 301, 299, 286, 320, 290, 318,
   288, 306, 307, 327, 302, 326, 300, 296, 298, 321, 322, 310, 314, 312, 325, 303, 285, 300, 292, 322, 305, 307, 317, 287, 304, 328,
   295, 297, 326, 299, 319, 309, 320, 316, 324, 311, 284, 304, 302, 305, 306, 291, 321, 289, 319, 293, 294, 303, 328, 301, 327, 308,
   317, 318, 323, 315, 313, 289, 311, 296, 319, 302, 308, 312, 294, 324, 313, 301, 317, 326, 306, 325, 315, 328, 321, 327, 318, 323,
   313, 287, 298, 309, 314, 317, 300, 323, 297, 319, 327, 311, 299, 325, 307, 328, 316, 322, 320, 326, 324, 291, 295, 312, 304, 321,
   293, 325, 308, 311, 303, 315, 305, 324, 318, 326, 313, 319, 327, 328, 323, 317, 315, 297, 288, 316, 310, 323, 298, 318, 299, 328,
   321, 324, 307, 312, 300, 327, 320, 314, 322, 325, 326, 293, 292, 314, 295, 325, 303, 322, 313, 309, 305, 323, 304, 316, 327, 320,
   317, 311, 326, 324, 328, 319, 294, 316, 290, 324, 296, 315, 310, 301, 320, 323, 306, 328, 322, 302, 314, 318, 326, 312, 325, 321,
   327, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 356, 358, 350,
   351, 332, 380, 334, 382, 338, 339, 344, 395, 346, 397, 367, 378, 379, 392, 368, 370, 357, 330, 360, 333, 381, 352, 354, 384, 336,
   345, 396, 340, 342, 399, 348, 376, 366, 377, 369, 393, 372, 359, 361, 331, 383, 335, 385, 337, 353, 355, 398, 347, 400, 349, 341,
   343, 374, 375, 365, 371, 373, 394, 362, 333, 389, 340, 405, 357, 381, 388, 366, 352, 403, 345, 369, 411, 377, 384, 372, 399, 393,
   396, 376, 363, 387, 335, 406, 341, 386, 365, 359, 383, 404, 353, 410, 375, 347, 371, 385, 400, 373, 394, 374, 398, 332, 362, 391,
   356, 380, 338, 402, 367, 390, 344, 368, 350, 401, 379, 412, 370, 382, 397, 395, 392, 378, 386, 364, 337, 387, 365, 404, 343, 385,
   361, 410, 374, 406, 355, 373, 349, 398, 383, 371, 375, 394, 400, 334, 390, 363, 382, 358, 367, 391, 339, 401, 370, 346, 378, 412,
   351, 402, 368, 395, 380, 397, 379, 392, 388, 336, 364, 366, 389, 384, 360, 403, 342, 376, 411, 372, 348, 405, 354, 396, 369, 381,
   377, 399, 393, 338, 357, 408, 362, 402, 344, 413, 370, 388, 350, 392, 356, 407, 397, 415, 378, 390, 412, 401, 395, 382, 339, 407,
   359, 401, 363, 368, 386, 346, 415, 392, 351, 395, 413, 358, 408, 379, 412, 391, 402, 380, 397, 356, 340, 409, 345, 414, 362, 405,
   390, 372, 357, 407, 352, 393, 417, 399, 388, 376, 411, 396, 403, 384, 407, 342, 361, 369, 387, 403, 364, 417, 348, 396, 414, 393,
   354, 409, 360, 411, 377, 389, 381, 405, 399, 358, 409, 341, 416, 347, 391, 373, 363, 406, 408, 359, 418, 400, 353, 394, 386, 410,
   374, 398, 385, 404, 408, 360, 343, 389, 371, 418, 349, 404, 364, 416, 398, 409, 361, 394, 355, 410, 387, 375, 383, 400, 406, 350,
   345, 416, 352, 419, 356, 414, 382, 376, 362, 401, 357, 396, 415, 411, 390, 384, 417, 403, 407, 388, 351, 414, 347, 419, 353, 380,
   374, 358, 416, 402, 363, 413, 410, 359, 398, 391, 418, 385, 404, 386, 408, 344, 352, 418, 357, 413, 350, 419, 378, 384, 356, 395,
   362, 403, 412, 417, 382, 388, 415, 407, 401, 390, 413, 354, 349, 381, 375, 419, 355, 418, 360, 414, 410, 405, 364, 400, 361, 416,
   389, 383, 387, 406, 409, 346, 417, 353, 415, 359, 379, 385, 351, 419, 397, 358, 412, 418, 363, 404, 380, 413, 386, 408, 391, 402,
   415, 348, 355, 377, 383, 417, 361, 419, 354, 411, 416, 399, 360, 406, 364, 414, 381, 387, 389, 409, 405, 367, 388, 386, 390, 391,
   370, 408, 368, 407, 378, 379, 382, 415, 380, 413, 392, 401, 402, 412, 397, 395, 390, 366, 387, 372, 409, 388, 389, 407, 369, 384,
   417, 376, 377, 414, 381, 403, 393, 405, 399, 411, 396, 391, 389, 365, 409, 373, 408, 371, 386, 387, 418, 385, 416, 383, 374, 375,
   404, 406, 394, 400, 398, 410, 401, 369, 383, 393, 406, 407, 387, 415, 377, 403, 419, 396, 381, 416, 389, 417, 399, 409, 405, 414,
   411, 402, 381, 371, 405, 394, 413, 375, 408, 389, 419, 404, 414, 387, 398, 383, 418, 409, 400, 406, 410, 416, 368, 403, 385, 407,
   386, 392, 404, 379, 417, 395, 380, 401, 419, 391, 418, 397, 415, 408, 413, 402, 412, 380, 405, 373, 414, 374, 402, 394, 391, 409,
   413, 386, 419, 406, 385, 400, 408, 416, 398, 410, 404, 418, 370, 384, 404, 388, 408, 378, 418, 392, 403, 382, 397, 390, 417, 402,
   419, 395, 407, 413, 415, 412, 401, 382, 372, 406, 376, 416, 390, 409, 401, 393, 388, 415, 384, 399, 419, 405, 407, 396, 414, 411,
   417, 403, 378, 376, 410, 384, 418, 382, 416, 395, 396, 390, 412, 388, 411, 413, 414, 401, 403, 419, 417, 415, 407, 379, 411, 374,
   417, 385, 397, 398, 380, 414, 412, 391, 415, 416, 386, 410, 402, 419, 404, 418, 408, 413, 412, 377, 375, 399, 400, 415, 383, 413,
   381, 417, 418, 411, 389, 410, 387, 419, 405, 406, 409, 416, 414, 392, 396, 398, 403, 404, 395, 410, 397, 411, 401, 402, 407, 414,
   408, 416, 412, 417, 418, 419, 413, 415, 395, 393, 400, 396, 410, 401, 406, 412, 399, 407, 413, 403, 405, 418, 409, 415, 411, 416,
   414, 419, 417, 397, 399, 394, 411, 398, 412, 400, 402, 405, 415, 408, 417, 409, 404, 406, 413, 414, 410, 416, 418, 419, 420, 449,
   451, 441, 442, 425, 476, 427, 478, 429, 430, 437, 494, 439, 496, 459, 468, 469, 489, 464, 466, 447, 421, 452, 423, 474, 443, 444,
   479, 428, 435, 492, 431, 432, 497, 440, 470, 460, 472, 462, 490, 467, 448, 450, 422, 475, 424, 477, 426, 445, 446, 493, 436, 495,
   438, 433, 434, 471, 473, 461, 463, 465, 491, 425, 453, 481, 449, 476, 429, 499, 459, 480, 437, 464, 441, 498, 469, 510, 466, 478,
   496, 494, 489, 468, 455, 423, 484, 431, 501, 447, 474, 482, 460, 443, 500, 435, 462, 511, 472, 479, 467, 497, 490, 492, 470, 427,
   480, 454, 478, 451, 459, 481, 430, 498, 466, 439, 468, 510, 442, 499, 464, 494, 476, 496, 469, 489, 457, 485, 424, 503, 433, 483,
   461, 448, 475, 502, 445, 512, 473, 436, 463, 477, 495, 465, 491, 471, 493, 482, 428, 456, 460, 484, 479, 452, 500, 432, 470, 511,
   467, 440, 501, 444, 492, 462, 474, 472, 497, 490, 483, 458, 426, 485, 461, 502, 434, 477, 450, 512, 471, 503, 446, 465, 438, 493,
   475, 463, 473, 491, 495, 429, 455, 508, 453, 499, 437, 515, 466, 488, 441, 489, 449, 506, 496, 517, 468, 480, 510, 498, 494, 478,
   430, 506, 457, 498, 454, 464, 487, 439, 517, 489, 442, 494, 515, 451, 508, 469, 510, 481, 499, 476, 496, 453, 431, 509, 435, 513,
   455, 501, 488, 467, 447, 504, 443, 490, 518, 497, 482, 470, 511, 492, 500, 479, 454, 507, 433, 514, 436, 487, 465, 457, 503, 505,
   448, 516, 495, 445, 491, 483, 512, 471, 493, 477, 502, 504, 432, 458, 462, 486, 500, 456, 518, 440, 492, 513, 490, 444, 509, 452,
   511, 472, 484, 474, 501, 497, 505, 456, 434, 486, 463, 516, 438, 502, 458, 514, 493, 507, 450, 491, 446, 512, 485, 473, 475, 495,
   503, 437, 447, 520, 455, 515, 441, 522, 468, 482, 449, 494, 453, 504, 510, 519, 478, 488, 517, 506, 498, 480, 449, 435, 521, 443,
   523, 453, 513, 480, 470, 455, 506, 447, 492, 519, 511, 488, 479, 518, 500, 504, 482, 439, 519, 448, 517, 457, 469, 483, 442, 522,
   496, 451, 510, 520, 454, 505, 476, 515, 487, 508, 481, 499, 451, 521, 436, 524, 445, 481, 471, 454, 514, 508, 457, 520, 512, 448,
   493, 487, 516, 477, 502, 483, 505, 519, 440, 450, 472, 485, 518, 458, 523, 444, 511, 521, 497, 452, 507, 456, 513, 474, 486, 484,
   509, 501, 520, 452, 438, 484, 473, 524, 446, 516, 456, 521, 512, 509, 458, 495, 450, 514, 486, 475, 485, 503, 507, 441, 443, 524,
   447, 522, 449, 523, 478, 479, 453, 498, 455, 500, 517, 518, 480, 482, 519, 504, 506, 488, 442, 523, 445, 522, 448, 476, 477, 451,
   524, 499, 454, 515, 516, 457, 502, 481, 520, 483, 505, 487, 508, 522, 444, 446, 474, 475, 523, 450, 524, 452, 513, 514, 501, 456,
   503, 458, 521, 484, 485, 486, 507, 509, 487, 486, 461, 507, 465, 505, 463, 483, 485, 516, 477, 514, 475, 471, 473, 502, 503, 491,
   495, 493, 512, 488, 460, 486, 467, 509, 482, 484, 504, 462, 479, 518, 470, 472, 513, 474, 500, 490, 501, 497, 511, 492, 459, 488,
   487, 480, 481, 466, 508, 464, 506, 468, 469, 478, 517, 476, 515, 489, 498, 499, 510, 496, 494, 464, 504, 483, 506, 487, 489, 505,
   469, 519, 494, 476, 498, 522, 481, 520, 496, 517, 508, 515, 499, 510, 506, 462, 485, 490, 507, 504, 486, 519, 472, 500, 523, 492,
   474, 521, 484, 518, 497, 509, 501, 513, 511, 466, 482, 505, 488, 508, 468, 520, 489, 504, 478, 496, 480, 519, 499, 522, 494, 506,
   515, 517, 510, 498, 508, 484, 463, 509, 491, 520, 473, 505, 486, 524, 502, 521, 485, 493, 475, 516, 507, 495, 503, 512, 514, 480,
   467, 507, 470, 521, 488, 509, 506, 490, 482, 519, 479, 497, 523, 501, 504, 492, 513, 511, 518, 500, 481, 509, 465, 521, 471, 508,
   491, 487, 507, 520, 483, 524, 503, 477, 495, 505, 514, 493, 512, 502, 516, 476, 513, 471, 523, 477, 499, 493, 481, 521, 515, 487,
   522, 514, 483, 512, 508, 524, 502, 516, 505, 520, 515, 474, 473, 501, 495, 522, 475, 520, 484, 523, 516, 513, 486, 512, 485, 524,
   509, 503, 507, 514, 521, 478, 470, 514, 479, 524, 480, 521, 498, 492, 488, 517, 482, 511, 522, 513, 506, 500, 523, 518, 519, 504,
   517, 472, 475, 497, 503, 519, 485, 522, 474, 518, 524, 511, 484, 514, 486, 523, 501, 507, 509, 521, 513, 468, 479, 516, 482, 520,
   478, 524, 494, 500, 480, 510, 488, 518, 515, 523, 498, 504, 522, 519, 517, 506, 469, 518, 477, 519, 483, 496, 502, 476, 523, 510,
   481, 517, 524, 487, 516, 499, 522, 505, 520, 508, 515, 489, 500, 502, 504, 505, 494, 516, 496, 518, 498, 499, 506, 523, 508, 524,
   510, 519, 520, 522, 515, 517, 498, 490, 503, 492, 514, 506, 507, 517, 497, 504, 522, 500, 501, 524, 509, 519, 511, 521, 513, 523,
   518, 499, 501, 491, 513, 493, 515, 495, 508, 509, 522, 505, 523, 507, 502, 503, 520, 521, 512, 514, 516, 524, 494, 492, 512, 500,
   516, 498, 514, 510, 511, 506, 515, 504, 513, 520, 521, 517, 518, 524, 523, 522, 519, 496, 511, 493, 518, 502, 510, 512, 499, 513,
   517, 508, 519, 521, 505, 514, 515, 523, 516, 524, 520, 522, 510, 497, 495, 511, 512, 517, 503, 515, 501, 519, 520, 518, 509, 516,
   507, 522, 513, 514, 521, 524, 523
}; // 6.77 kb
static const cart_index_t iCartXY_ab13_a6[3360] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
   26, 27, 28, 31, 32, 33, 39, 35, 41, 50, 51, 37, 38, 43, 44, 52, 53, 45, 47, 60, 55, 57, 49, 54, 62, 56,
   63, 58, 59, 61, 33, 29, 34, 37, 31, 49, 51, 36, 42, 45, 54, 39, 55, 40, 46, 43, 59, 48, 53, 50, 56, 61,
   52, 58, 60, 57, 63, 62, 35, 36, 30, 49, 50, 38, 32, 40, 34, 56, 47, 57, 41, 48, 42, 58, 44, 46, 51, 52,
   54, 59, 60, 61, 53, 62, 55, 63, 64, 75, 76, 67, 80, 69, 82, 95, 96, 73, 74, 85, 86, 104, 105, 79, 81, 108,
   97, 99, 90, 91, 106, 93, 107, 101, 102, 103, 73, 65, 78, 79, 68, 93, 94, 71, 84, 85, 103, 75, 105, 77, 87, 80,
   107, 83, 98, 89, 101, 106, 92, 99, 100, 95, 108, 104, 74, 77, 66, 91, 92, 81, 70, 83, 72, 103, 86, 104, 76, 87,
   78, 106, 82, 84, 88, 100, 102, 97, 98, 107, 94, 108, 96, 105, 67, 68, 88, 73, 75, 90, 96, 89, 94, 79, 91, 80,
   97, 92, 98, 85, 102, 100, 105, 95, 93, 103, 104, 101, 108, 99, 107, 106, 69, 89, 70, 90, 95, 74, 76, 92, 88, 93,
   81, 99, 82, 100, 94, 101, 86, 98, 96, 104, 91, 102, 108, 103, 105, 106, 97, 107, 90, 71, 72, 93, 89, 91, 88, 77,
   78, 101, 102, 95, 96, 83, 84, 99, 97, 87, 94, 92, 103, 107, 100, 106, 98, 104, 105, 108, 109, 124, 125, 114, 132, 116,
   134, 147, 148, 118, 119, 130, 131, 157, 158, 126, 128, 163, 152, 153, 136, 141, 159, 143, 161, 145, 146, 154, 126, 110, 127, 130,
   112, 145, 150, 117, 135, 132, 159, 120, 160, 121, 133, 124, 163, 129, 151, 137, 153, 157, 139, 147, 149, 144, 162, 155, 128, 129,
   111, 146, 149, 131, 113, 133, 115, 161, 134, 162, 122, 135, 123, 163, 125, 127, 138, 151, 152, 148, 150, 158, 140, 160, 142, 156,
   118, 112, 140, 126, 120, 143, 156, 137, 150, 130, 154, 124, 158, 139, 151, 132, 161, 149, 160, 144, 145, 159, 155, 153, 162, 147,
   163, 157, 119, 139, 113, 141, 155, 128, 122, 149, 138, 154, 131, 157, 125, 151, 140, 159, 134, 150, 142, 162, 146, 152, 160, 161,
   156, 163, 148, 158, 114, 120, 142, 118, 124, 136, 148, 144, 156, 126, 141, 132, 152, 155, 160, 130, 146, 162, 158, 147, 143, 154,
   157, 145, 163, 153, 161, 159, 141, 121, 115, 154, 139, 146, 138, 129, 123, 159, 152, 155, 142, 133, 127, 157, 148, 135, 140, 149,
   161, 158, 151, 163, 150, 162, 156, 160, 116, 144, 122, 136, 147, 119, 125, 155, 142, 143, 128, 153, 134, 162, 156, 145, 131, 160,
   148, 157, 141, 146, 163, 154, 158, 159, 152, 161, 143, 117, 123, 145, 137, 154, 140, 121, 127, 153, 161, 144, 156, 129, 135, 147,
   158, 133, 150, 139, 159, 163, 149, 157, 151, 155, 160, 162, 136, 137, 138, 143, 144, 141, 142, 139, 140, 145, 146, 147, 148, 149,
   150, 153, 152, 151, 156, 155, 154, 161, 162, 159, 160, 157, 158, 163, 164, 187, 188, 167, 191, 169, 192, 213, 214, 173, 174, 185,
   186, 224, 225, 179, 181, 229, 209, 211, 196, 197, 218, 199, 220, 207, 208, 215, 185, 165, 190, 191, 168, 211, 212, 171, 193, 187,
   224, 175, 226, 177, 189, 180, 228, 183, 210, 195, 213, 219, 198, 205, 206, 201, 222, 216, 186, 189, 166, 209, 210, 192, 170, 193,
   172, 225, 188, 226, 176, 190, 178, 227, 182, 184, 194, 212, 214, 203, 204, 221, 200, 223, 202, 217, 167, 180, 203, 173, 187, 196,
   214, 205, 221, 179, 197, 191, 209, 219, 227, 185, 208, 228, 225, 213, 199, 215, 224, 207, 229, 211, 220, 218, 179, 168, 204, 185,
   175, 207, 223, 195, 212, 191, 218, 180, 227, 198, 210, 187, 229, 206, 226, 201, 211, 224, 216, 213, 222, 205, 228, 219, 169, 205,
   182, 196, 213, 174, 188, 219, 203, 199, 181, 211, 192, 228, 221, 207, 186, 227, 214, 224, 197, 208, 229, 215, 225, 218, 209, 220,
   181, 206, 170, 208, 222, 186, 176, 210, 194, 220, 192, 228, 182, 212, 200, 229, 188, 204, 202, 226, 209, 214, 223, 225, 217, 227,
   203, 221, 207, 171, 184, 211, 195, 218, 204, 177, 190, 213, 229, 201, 223, 183, 193, 205, 227, 189, 212, 198, 224, 228, 206, 219,
   210, 216, 226, 222, 208, 183, 172, 220, 206, 209, 194, 189, 178, 229, 214, 222, 202, 193, 184, 228, 203, 190, 200, 210, 225, 221,
   212, 227, 204, 226, 217, 223, 173, 175, 217, 179, 180, 199, 221, 201, 223, 185, 215, 187, 225, 216, 226, 191, 220, 222, 227, 205,
   207, 218, 219, 211, 228, 213, 229, 224, 174, 216, 176, 197, 219, 181, 182, 222, 202, 215, 186, 224, 188, 226, 217, 218, 192, 223,
   203, 228, 208, 209, 227, 220, 221, 229, 214, 225, 215, 177, 178, 218, 198, 220, 200, 183, 184, 224, 225, 216, 217, 189, 190, 219,
   221, 193, 204, 206, 229, 227, 210, 228, 212, 222, 223, 226, 197, 198, 194, 215, 216, 208, 202, 206, 200, 218, 209, 219, 203, 210,
   204, 224, 214, 212, 217, 222, 220, 225, 226, 229, 223, 228, 221, 227, 199, 195, 200, 207, 201, 215, 217, 198, 204, 211, 220, 205,
   221, 206, 212, 213, 225, 210, 223, 216, 218, 229, 222, 224, 226, 219, 227, 228, 196, 201, 202, 199, 205, 197, 203, 216, 217, 207,
   208, 213, 214, 222, 223, 211, 209, 226, 221, 219, 215, 220, 228, 218, 227, 224, 225, 229, 230, 257, 258, 235, 259, 237, 261, 284,
   285, 239, 240, 251, 252, 296, 297, 247, 249, 302, 280, 282, 263, 268, 292, 270, 294, 272, 273, 287, 259, 231, 260, 257, 233, 284,
   286, 238, 262, 253, 298, 241, 299, 242, 254, 245, 303, 250, 278, 264, 283, 290, 266, 274, 276, 271, 295, 288, 261, 262, 232, 285,
   286, 258, 234, 260, 236, 300, 255, 301, 243, 256, 244, 304, 246, 248, 265, 279, 281, 275, 277, 291, 267, 293, 269, 289, 251, 233,
   279, 259, 241, 282, 301, 264, 286, 257, 296, 245, 305, 266, 278, 253, 307, 276, 299, 271, 284, 298, 288, 283, 295, 274, 303, 290,
   252, 278, 234, 280, 299, 261, 243, 286, 265, 297, 258, 305, 246, 279, 267, 306, 255, 277, 269, 301, 285, 281, 293, 300, 289, 304,
   275, 291, 235, 253, 281, 239, 257, 263, 285, 283, 300, 247, 268, 259, 280, 298, 306, 251, 273, 307, 297, 284, 270, 287, 296, 272,
   302, 282, 294, 292, 280, 254, 236, 297, 278, 285, 265, 262, 244, 306, 281, 299, 269, 260, 248, 305, 275, 256, 267, 286, 300, 291,
   279, 304, 277, 301, 289, 293, 237, 283, 255, 263, 284, 240, 258, 298, 281, 270, 249, 282, 261, 307, 300, 272, 252, 306, 285, 296,
   268, 273, 302, 287, 297, 292, 280, 294, 282, 238, 256, 284, 264, 296, 279, 242, 260, 283, 307, 271, 301, 250, 262, 274, 305, 254,
   286, 266, 298, 303, 276, 290, 278, 288, 299, 295, 239, 245, 291, 247, 253, 270, 300, 274, 304, 251, 287, 257, 297, 290, 305, 259,
   294, 303, 306, 283, 272, 292, 298, 282, 307, 284, 302, 296, 240, 290, 246, 268, 298, 249, 255, 303, 275, 287, 252, 296, 258, 305,
   291, 292, 261, 304, 281, 307, 273, 280, 306, 294, 300, 302, 285, 297, 247, 241, 293, 251, 245, 272, 304, 271, 301, 259, 292, 253,
   306, 288, 299, 257, 302, 295, 305, 274, 282, 296, 290, 284, 303, 283, 307, 298, 292, 242, 248, 296, 266, 302, 277, 250, 256, 298,
   306, 288, 293, 254, 260, 290, 304, 262, 279, 276, 307, 305, 278, 303, 286, 295, 301, 299, 249, 295, 243, 273, 303, 252, 246, 299,
   269, 294, 261, 307, 255, 301, 289, 302, 258, 293, 275, 305, 280, 285, 304, 297, 291, 306, 281, 300, 294, 250, 244, 302, 276, 297,
   267, 254, 248, 307, 300, 295, 289, 262, 256, 303, 291, 260, 277, 278, 306, 304, 286, 305, 279, 299, 293, 301, 263, 274, 275, 270,
   283, 268, 281, 290, 291, 272, 273, 284, 285, 303, 304, 282, 280, 305, 300, 298, 287, 294, 307, 292, 306, 296, 297, 302, 272, 264,
   277, 282, 271, 292, 293, 266, 279, 284, 302, 274, 304, 276, 286, 283, 306, 278, 301, 288, 296, 307, 295, 298, 299, 290, 305, 303,
   273, 276, 265, 294, 295, 280, 269, 278, 267, 302, 285, 303, 275, 286, 277, 307, 281, 279, 289, 299, 297, 300, 301, 306, 293, 305,
   291, 304, 287, 266, 267, 292, 288, 294, 289, 276, 277, 296, 297, 290, 291, 278, 279, 298, 300, 286, 293, 295, 302, 306, 299, 307,
   301, 303, 304, 305, 268, 288, 269, 287, 290, 273, 275, 295, 289, 292, 280, 298, 281, 299, 293, 296, 285, 301, 291, 303, 294, 297,
   305, 302, 304, 307, 300, 306, 270, 271, 289, 272, 274, 287, 291, 288, 293, 282, 294, 283, 300, 295, 301, 284, 297, 299, 304, 290,
   292, 302, 303, 296, 305, 298, 306, 307, 308, 341, 342, 311, 335, 313, 337, 369, 370, 317, 318, 329, 330, 380, 381, 323, 325, 391,
   359, 361, 346, 347, 374, 349, 376, 357, 358, 371, 341, 309, 343, 336, 312, 367, 368, 315, 339, 331, 382, 319, 384, 321, 333, 324,
   390, 327, 360, 345, 363, 375, 348, 355, 356, 351, 378, 372, 342, 343, 310, 365, 366, 338, 314, 340, 316, 383, 332, 385, 320, 334,
   322, 389, 326, 328, 344, 362, 364, 353, 354, 377, 350, 379, 352, 373, 311, 336, 365, 317, 341, 346, 370, 367, 387, 323, 347, 335,
   359, 386, 392, 329, 358, 394, 381, 369, 349, 371, 380, 357, 391, 361, 376, 374, 335, 312, 366, 341, 319, 369, 388, 345, 368, 336,
   386, 324, 393, 348, 360, 331, 396, 356, 384, 351, 367, 382, 372, 363, 378, 355, 390, 375, 313, 367, 338, 346, 369, 318, 342, 386,
   365, 349, 325, 361, 337, 394, 387, 357, 330, 392, 370, 380, 347, 358, 391, 371, 381, 374, 359, 376, 337, 368, 314, 370, 388, 342,
   320, 366, 344, 387, 338, 395, 326, 362, 350, 397, 332, 354, 352, 385, 365, 364, 379, 383, 373, 389, 353, 377, 369, 315, 340, 367,
   345, 386, 366, 321, 343, 363, 396, 351, 388, 327, 339, 355, 393, 333, 368, 348, 382, 390, 356, 375, 360, 372, 384, 378, 370, 339,
   316, 387, 368, 365, 344, 343, 322, 397, 364, 388, 352, 340, 328, 395, 353, 334, 350, 366, 383, 377, 362, 389, 354, 385, 373, 379,
   317, 331, 383, 323, 336, 349, 387, 363, 397, 329, 371, 341, 381, 382, 398, 335, 376, 396, 392, 367, 357, 374, 386, 361, 394, 369,
   391, 380, 318, 382, 332, 347, 386, 325, 338, 396, 364, 371, 330, 380, 342, 398, 383, 374, 337, 397, 365, 394, 358, 359, 392, 376,
   387, 391, 370, 381, 329, 319, 385, 335, 324, 361, 395, 351, 388, 341, 380, 331, 398, 372, 384, 336, 394, 378, 393, 355, 369, 386,
   375, 367, 390, 363, 396, 382, 330, 384, 320, 359, 393, 337, 326, 388, 352, 381, 342, 398, 332, 385, 373, 392, 338, 379, 353, 395,
   370, 365, 389, 387, 377, 397, 364, 383, 380, 321, 334, 386, 348, 394, 362, 327, 340, 382, 398, 372, 385, 333, 343, 375, 395, 339,
   366, 356, 396, 393, 360, 390, 368, 378, 388, 384, 381, 333, 322, 392, 360, 387, 350, 339, 328, 398, 383, 384, 373, 343, 334, 393,
   377, 340, 354, 368, 397, 389, 366, 395, 362, 388, 379, 385, 323, 324, 389, 329, 331, 357, 397, 355, 395, 335, 374, 336, 392, 375,
   393, 341, 391, 390, 398, 363, 361, 380, 382, 369, 396, 367, 394, 386, 325, 390, 326, 358, 396, 330, 332, 393, 353, 376, 337, 394,
   338, 395, 377, 391, 342, 389, 364, 398, 359, 370, 397, 381, 383, 392, 365, 387, 391, 327, 328, 394, 356, 392, 354, 333, 334, 396,
   397, 378, 379, 339, 340, 390, 389, 343, 362, 360, 398, 395, 368, 393, 366, 384, 385, 388, 359, 360, 344, 381, 384, 370, 352, 368,
   350, 392, 365, 393, 353, 366, 354, 398, 364, 362, 373, 388, 387, 383, 385, 397, 379, 395, 377, 389, 361, 345, 362, 369, 351, 380,
   385, 348, 366, 367, 394, 355, 395, 356, 368, 363, 398, 360, 388, 372, 386, 396, 378, 382, 384, 375, 393, 390, 346, 363, 364, 349,
   367, 347, 365, 382, 383, 357, 358, 369, 370, 396, 397, 361, 359, 398, 387, 386, 371, 376, 394, 374, 392, 380, 381, 391, 347, 375,
   353, 371, 382, 358, 364, 390, 377, 374, 359, 386, 365, 393, 389, 380, 370, 395, 383, 396, 376, 381, 398, 391, 397, 394, 387, 392,
   374, 348, 354, 380, 372, 391, 379, 356, 362, 386, 392, 375, 389, 360, 366, 382, 397, 368, 385, 378, 394, 398, 384, 396, 388, 390,
   395, 393, 349, 355, 377, 357, 363, 371, 383, 375, 389, 361, 376, 367, 387, 390, 395, 369, 381, 393, 397, 382, 374, 391, 396, 380,
   398, 386, 392, 394, 376, 356, 350, 391, 378, 381, 373, 360, 354, 394, 387, 390, 377, 368, 362, 396, 383, 366, 379, 384, 392, 397,
   388, 398, 385, 393, 389, 395, 357, 351, 379, 361, 355, 374, 389, 372, 385, 369, 391, 363, 397, 378, 388, 367, 392, 384, 395, 375,
   380, 394, 390, 386, 393, 382, 398, 396, 358, 378, 352, 376, 390, 359, 353, 384, 373, 391, 370, 396, 364, 388, 379, 394, 365, 385,
   377, 393, 381, 387, 395, 392, 389, 398, 383, 397, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386,
   387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 432, 433, 404, 428, 406, 430, 459, 460, 408, 409, 420, 421, 477,
   478, 416, 418, 489, 455, 457, 438, 443, 473, 445, 475, 447, 448, 468, 434, 400, 435, 426, 402, 461, 463, 407, 431, 422, 479, 410,
   480, 411, 423, 414, 490, 419, 453, 439, 458, 471, 441, 449, 451, 446, 476, 469, 436, 437, 401, 462, 464, 427, 403, 429, 405, 481,
   424, 482, 412, 425, 413, 491, 415, 417, 440, 454, 456, 450, 452, 472, 442, 474, 444, 470, 432, 402, 465, 434, 410, 467, 488, 439,
   463, 426, 483, 414, 492, 441, 453, 422, 497, 451, 480, 446, 461, 479, 469, 458, 476, 449, 490, 471, 433, 465, 403, 466, 486, 436,
   412, 464, 440, 484, 427, 493, 415, 454, 442, 495, 424, 452, 444, 482, 462, 456, 474, 481, 470, 491, 450, 472, 404, 434, 466, 408,
   432, 438, 460, 467, 487, 416, 443, 428, 455, 485, 494, 420, 448, 496, 478, 459, 445, 468, 477, 447, 489, 457, 475, 473, 466, 435,
   405, 484, 465, 462, 440, 437, 413, 495, 456, 486, 444, 429, 417, 493, 450, 425, 442, 464, 481, 472, 454, 491, 452, 482, 470, 474,
   406, 467, 436, 438, 459, 409, 433, 485, 466, 445, 418, 457, 430, 496, 487, 447, 421, 494, 460, 477, 443, 448, 489, 468, 478, 473,
   455, 475, 467, 407, 437, 461, 439, 483, 465, 411, 435, 458, 497, 446, 488, 419, 431, 449, 492, 423, 463, 441, 479, 490, 451, 471,
   453, 469, 480, 476, 408, 426, 484, 416, 434, 445, 487, 461, 499, 420, 468, 432, 478, 483, 501, 428, 475, 498, 494, 467, 447, 473,
   485, 457, 496, 459, 489, 477, 409, 483, 427, 443, 485, 418, 436, 498, 462, 468, 421, 477, 433, 501, 484, 473, 430, 499, 466, 496,
   448, 455, 494, 475, 487, 489, 460, 478, 428, 410, 486, 432, 414, 459, 500, 446, 488, 434, 485, 422, 502, 469, 480, 426, 498, 476,
   492, 449, 467, 483, 471, 461, 490, 458, 497, 479, 485, 411, 429, 483, 441, 498, 464, 419, 437, 479, 502, 469, 486, 423, 435, 471,
   500, 431, 465, 451, 497, 492, 453, 490, 463, 476, 488, 480, 430, 488, 412, 460, 500, 433, 415, 486, 444, 487, 436, 503, 424, 482,
   470, 499, 427, 474, 450, 493, 466, 462, 491, 484, 472, 495, 456, 481, 487, 431, 413, 499, 463, 484, 442, 435, 417, 503, 481, 488,
   470, 437, 425, 500, 472, 429, 452, 465, 495, 491, 464, 493, 454, 486, 474, 482, 420, 414, 493, 428, 422, 457, 503, 449, 500, 432,
   477, 426, 501, 471, 492, 434, 496, 490, 502, 458, 459, 485, 479, 467, 497, 461, 498, 483, 421, 492, 415, 455, 502, 430, 424, 500,
   450, 478, 433, 501, 427, 493, 472, 494, 436, 491, 456, 503, 460, 466, 495, 487, 481, 499, 462, 484, 416, 422, 495, 420, 426, 447,
   499, 458, 503, 428, 473, 434, 494, 479, 502, 432, 489, 497, 501, 461, 457, 477, 483, 459, 498, 467, 496, 485, 494, 423, 417, 501,
   453, 499, 452, 431, 425, 502, 495, 480, 474, 435, 429, 492, 491, 437, 454, 463, 503, 493, 465, 500, 464, 488, 482, 486, 418, 497,
   424, 448, 498, 421, 427, 502, 456, 475, 430, 496, 436, 503, 481, 489, 433, 495, 462, 501, 455, 460, 499, 478, 484, 494, 466, 487,
   496, 419, 425, 498, 451, 501, 454, 423, 429, 497, 503, 476, 482, 431, 437, 490, 493, 435, 464, 453, 502, 500, 463, 492, 465, 480,
   486, 488, 438, 461, 462, 445, 467, 443, 466, 483, 484, 447, 448, 459, 460, 498, 499, 457, 455, 501, 487, 485, 468, 475, 496, 473,
   494, 477, 478, 489, 459, 439, 464, 467, 446, 485, 486, 441, 465, 461, 498, 449, 500, 451, 463, 458, 502, 453, 488, 469, 483, 497,
   476, 479, 480, 471, 492, 490, 460, 463, 440, 487, 488, 466, 444, 465, 442, 499, 462, 500, 450, 464, 452, 503, 456, 454, 470, 486,
   484, 481, 482, 495, 474, 493, 472, 491, 477, 441, 454, 485, 469, 496, 482, 451, 464, 483, 501, 471, 493, 453, 465, 479, 503, 463,
   486, 476, 498, 502, 480, 497, 488, 490, 500, 492, 478, 453, 442, 494, 480, 487, 470, 463, 452, 501, 484, 492, 472, 465, 454, 502,
   481, 464, 474, 488, 499, 495, 486, 503, 482, 500, 491, 493, 443, 479, 456, 468, 483, 448, 462, 497, 481, 473, 455, 485, 466, 502,
   495, 477, 460, 503, 484, 498, 475, 478, 501, 489, 499, 496, 487, 494, 455, 480, 444, 478, 492, 460, 450, 488, 470, 494, 466, 502,
   456, 486, 474, 501, 462, 482, 472, 500, 487, 484, 493, 499, 491, 503, 481, 495, 445, 458, 481, 447, 461, 468, 484, 479, 495, 457,
   475, 467, 487, 497, 503, 459, 478, 502, 499, 483, 473, 489, 498, 477, 501, 485, 494, 496, 457, 446, 482, 459, 449, 477, 493, 469,
   486, 467, 496, 458, 503, 476, 488, 461, 501, 480, 500, 471, 485, 498, 490, 483, 492, 479, 502, 497, 447, 449, 491, 457, 458, 473,
   495, 471, 493, 459, 489, 461, 499, 490, 500, 467, 494, 492, 503, 479, 477, 496, 497, 485, 502, 483, 501, 498, 448, 490, 450, 475,
   497, 455, 456, 492, 472, 489, 460, 498, 462, 500, 491, 496, 466, 493, 481, 502, 478, 487, 503, 494, 495, 501, 484, 499, 489, 451,
   452, 496, 476, 494, 474, 453, 454, 498, 499, 490, 491, 463, 464, 497, 495, 465, 482, 480, 501, 503, 488, 502, 486, 492, 493, 500,
   468, 471, 472, 473, 479, 475, 481, 490, 491, 477, 478, 483, 484, 492, 493, 485, 487, 500, 495, 497, 489, 494, 502, 496, 503, 498,
   499, 501, 473, 469, 474, 477, 471, 489, 491, 476, 482, 485, 494, 479, 495, 480, 486, 483, 499, 488, 493, 490, 496, 501, 492, 498,
   500, 497, 503, 502, 475, 476, 470, 489, 490, 478, 472, 480, 474, 496, 487, 497, 481, 488, 482, 498, 484, 486, 491, 492, 494, 499,
   500, 501, 493, 502, 495, 503
}; // 6.56 kb
static const cart_index_t iCartXY_ab14_a0[680] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
   52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
   78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
   104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
   130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
   156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
   182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
   208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
   234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259,
   260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
   286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311,
   312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337,
   338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363,
   364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389,
   390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415,
   416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441,
   442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467,
   468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493,
   494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519,
   520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545,
   546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571,
   572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597,
   598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623,
   624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649,
   650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675,
   676, 677, 678, 679
}; // 1.33 kb
static const cart_index_t iCartXY_ab14_a1[1680] = {
   0, 1, 2, 3, 6, 7, 6, 4, 8, 7, 8, 5, 9, 14, 16, 12, 10, 17, 13, 15, 11, 14, 12, 18, 16, 18,
   13, 18, 17, 15, 19, 22, 24, 23, 20, 26, 25, 27, 21, 28, 23, 32, 29, 31, 25, 22, 28, 33, 31, 30, 27, 24,
   33, 29, 32, 26, 30, 33, 32, 31, 34, 39, 41, 37, 35, 42, 38, 40, 36, 39, 43, 49, 45, 37, 50, 41, 49, 44,
   47, 51, 38, 50, 42, 46, 51, 48, 40, 43, 45, 54, 44, 53, 47, 52, 46, 48, 53, 52, 51, 54, 50, 52, 49, 54,
   53, 55, 58, 60, 59, 56, 62, 61, 63, 57, 66, 59, 74, 67, 73, 61, 58, 64, 75, 73, 69, 63, 60, 75, 65, 74,
   62, 68, 64, 70, 78, 65, 76, 71, 70, 66, 80, 77, 68, 72, 71, 81, 67, 79, 72, 69, 75, 78, 76, 80, 74, 77,
   81, 79, 73, 82, 77, 79, 76, 82, 81, 78, 80, 82, 83, 88, 90, 86, 84, 91, 87, 89, 85, 88, 92, 104, 94, 86,
   105, 90, 104, 93, 96, 106, 87, 105, 91, 95, 106, 97, 89, 92, 100, 111, 93, 109, 102, 98, 94, 112, 99, 110, 96, 107,
   95, 103, 108, 101, 97, 100, 98, 113, 102, 114, 99, 115, 103, 101, 110, 108, 106, 112, 105, 107, 104, 111, 109, 109, 116, 114,
   117, 107, 115, 111, 113, 116, 118, 115, 108, 113, 112, 117, 114, 118, 110, 116, 117, 118, 119, 122, 124, 123, 120, 126, 125, 127,
   121, 130, 123, 144, 131, 143, 125, 122, 128, 145, 143, 133, 127, 124, 145, 129, 144, 126, 132, 128, 134, 148, 129, 146, 136, 135,
   130, 150, 147, 132, 138, 137, 151, 131, 149, 139, 133, 140, 135, 154, 141, 152, 137, 134, 140, 156, 153, 142, 139, 136, 157, 141,
   155, 138, 142, 145, 148, 146, 150, 144, 147, 151, 149, 143, 159, 147, 155, 160, 153, 149, 146, 158, 157, 152, 160, 151, 148, 156,
   158, 154, 150, 159, 156, 154, 161, 157, 162, 152, 163, 155, 153, 158, 161, 162, 161, 159, 163, 162, 163, 160, 164, 169, 171, 167,
   165, 172, 168, 170, 166, 169, 173, 191, 175, 167, 192, 171, 191, 174, 177, 193, 168, 192, 172, 176, 193, 178, 170, 173, 181, 198,
   174, 196, 183, 179, 175, 199, 180, 197, 177, 194, 176, 184, 195, 182, 178, 181, 185, 200, 187, 179, 202, 183, 201, 186, 189, 203,
   180, 204, 184, 188, 205, 190, 182, 185, 187, 208, 186, 207, 189, 206, 188, 190, 197, 195, 193, 199, 192, 194, 191, 198, 196, 196,
   209, 201, 210, 194, 204, 198, 200, 209, 211, 205, 195, 202, 199, 210, 203, 211, 197, 207, 213, 203, 215, 206, 205, 208, 202, 212,
   217, 204, 206, 200, 208, 214, 201, 216, 207, 209, 214, 216, 212, 210, 217, 213, 215, 211, 214, 212, 218, 216, 218, 213, 218, 217,
   215, 219, 222, 224, 223, 220, 226, 225, 227, 221, 230, 223, 250, 231, 249, 225, 222, 228, 251, 249, 233, 227, 224, 251, 229, 250,
   226, 232, 228, 234, 254, 229, 252, 236, 235, 230, 256, 253, 232, 238, 237, 257, 231, 255, 239, 233, 242, 235, 260, 243, 258, 237,
   234, 240, 262, 259, 245, 239, 236, 263, 241, 261, 238, 244, 240, 246, 266, 241, 264, 247, 246, 242, 268, 265, 244, 248, 247, 269,
   243, 267, 248, 245, 251, 254, 252, 256, 250, 253, 257, 255, 249, 271, 253, 261, 272, 259, 255, 252, 270, 263, 258, 272, 257, 254,
   262, 270, 260, 256, 271, 262, 266, 273, 263, 275, 264, 268, 260, 274, 269, 276, 258, 277, 261, 265, 278, 267, 259, 281, 265, 267,
   264, 280, 269, 266, 268, 279, 270, 273, 275, 274, 271, 277, 276, 278, 272, 279, 274, 283, 280, 282, 276, 273, 279, 284, 282, 281,
   278, 275, 284, 280, 283, 277, 281, 284, 283, 282, 285, 290, 292, 288, 286, 293, 289, 291, 287, 290, 294, 318, 296, 288, 319, 292,
   318, 295, 298, 320, 289, 319, 293, 297, 320, 299, 291, 294, 302, 325, 295, 323, 304, 300, 296, 326, 301, 324, 298, 321, 297, 305,
   322, 303, 299, 302, 306, 327, 308, 300, 329, 304, 328, 307, 310, 330, 301, 331, 305, 309, 332, 311, 303, 306, 314, 337, 307, 335,
   316, 312, 308, 338, 313, 336, 310, 333, 309, 317, 334, 315, 311, 314, 312, 339, 316, 340, 313, 341, 317, 315, 324, 322, 320, 326,
   319, 321, 318, 325, 323, 323, 342, 328, 343, 321, 331, 325, 327, 342, 344, 332, 322, 329, 326, 343, 330, 344, 324, 336, 346, 330,
   348, 334, 332, 338, 329, 345, 350, 331, 333, 327, 337, 347, 328, 349, 335, 335, 352, 340, 354, 333, 341, 337, 339, 351, 356, 341,
   334, 339, 338, 353, 340, 355, 336, 342, 347, 349, 345, 343, 350, 346, 348, 344, 347, 351, 357, 353, 345, 358, 349, 357, 352, 355,
   359, 346, 358, 350, 354, 359, 356, 348, 351, 353, 362, 352, 361, 355, 360, 354, 356, 361, 360, 359, 362, 358, 360, 357, 362, 361,
   363, 366, 368, 367, 364, 370, 369, 371, 365, 374, 367, 400, 375, 399, 369, 366, 372, 401, 399, 377, 371, 368, 401, 373, 400, 370,
   376, 372, 378, 404, 373, 402, 380, 379, 374, 406, 403, 376, 382, 381, 407, 375, 405, 383, 377, 386, 379, 410, 387, 408, 381, 378,
   384, 412, 409, 389, 383, 380, 413, 385, 411, 382, 388, 384, 390, 416, 385, 414, 392, 391, 386, 418, 415, 388, 394, 393, 419, 387,
   417, 395, 389, 396, 391, 422, 397, 420, 393, 390, 396, 424, 421, 398, 395, 392, 425, 397, 423, 394, 398, 401, 404, 402, 406, 400,
   403, 407, 405, 399, 427, 403, 411, 428, 409, 405, 402, 426, 413, 408, 428, 407, 404, 412, 426, 410, 406, 427, 412, 416, 429, 413,
   431, 414, 418, 410, 430, 419, 432, 408, 433, 411, 415, 434, 417, 409, 439, 415, 423, 440, 421, 417, 414, 436, 425, 420, 438, 419,
   416, 424, 435, 422, 418, 437, 424, 422, 441, 425, 442, 420, 443, 423, 421, 426, 429, 431, 430, 427, 433, 432, 434, 428, 437, 430,
   445, 438, 444, 432, 429, 435, 446, 444, 440, 434, 431, 446, 436, 445, 433, 439, 435, 441, 449, 436, 447, 442, 441, 437, 451, 448,
   439, 443, 442, 452, 438, 450, 443, 440, 446, 449, 447, 451, 445, 448, 452, 450, 444, 453, 448, 450, 447, 453, 452, 449, 451, 453,
   454, 459, 461, 457, 455, 462, 458, 460, 456, 459, 463, 493, 465, 457, 494, 461, 493, 464, 467, 495, 458, 494, 462, 466, 495, 468,
   460, 463, 471, 500, 464, 498, 473, 469, 465, 501, 470, 499, 467, 496, 466, 474, 497, 472, 468, 471, 475, 502, 477, 469, 504, 473,
   503, 476, 479, 505, 470, 506, 474, 478, 507, 480, 472, 475, 483, 512, 476, 510, 485, 481, 477, 513, 482, 511, 479, 508, 478, 486,
   509, 484, 480, 483, 487, 514, 489, 481, 516, 485, 515, 488, 491, 517, 482, 518, 486, 490, 519, 492, 484, 487, 489, 522, 488, 521,
   491, 520, 490, 492, 499, 497, 495, 501, 494, 496, 493, 500, 498, 498, 523, 503, 524, 496, 506, 500, 502, 523, 525, 507, 497, 504,
   501, 524, 505, 525, 499, 511, 527, 505, 529, 509, 507, 513, 504, 526, 531, 506, 508, 502, 512, 528, 503, 530, 510, 510, 533, 515,
   535, 508, 518, 512, 514, 532, 537, 519, 509, 516, 513, 534, 517, 536, 511, 521, 539, 517, 541, 520, 519, 522, 516, 538, 543, 518,
   520, 514, 522, 540, 515, 542, 521, 523, 528, 530, 526, 524, 531, 527, 529, 525, 528, 532, 544, 534, 526, 545, 530, 544, 533, 536,
   546, 527, 545, 531, 535, 546, 537, 529, 532, 540, 551, 533, 549, 542, 538, 534, 552, 539, 550, 536, 547, 535, 543, 548, 541, 537,
   540, 538, 553, 542, 554, 539, 555, 543, 541, 550, 548, 546, 552, 545, 547, 544, 551, 549, 549, 556, 554, 557, 547, 555, 551, 553,
   556, 558, 555, 548, 553, 552, 557, 554, 558, 550, 556, 557, 558, 559, 562, 564, 563, 560, 566, 565, 567, 561, 570, 563, 602, 571,
   601, 565, 562, 568, 603, 601, 573, 567, 564, 603, 569, 602, 566, 572, 568, 574, 606, 569, 604, 576, 575, 570, 608, 605, 572, 578,
   577, 609, 571, 607, 579, 573, 582, 575, 612, 583, 610, 577, 574, 580, 614, 611, 585, 579, 576, 615, 581, 613, 578, 584, 580, 586,
   618, 581, 616, 588, 587, 582, 620, 617, 584, 590, 589, 621, 583, 619, 591, 585, 594, 587, 624, 595, 622, 589, 586, 592, 626, 623,
   597, 591, 588, 627, 593, 625, 590, 596, 592, 598, 630, 593, 628, 599, 598, 594, 632, 629, 596, 600, 599, 633, 595, 631, 600, 597,
   603, 606, 604, 608, 602, 605, 609, 607, 601, 635, 605, 613, 636, 611, 607, 604, 634, 615, 610, 636, 609, 606, 614, 634, 612, 608,
   635, 614, 618, 637, 615, 639, 616, 620, 612, 638, 621, 640, 610, 641, 613, 617, 642, 619, 611, 647, 617, 625, 648, 623, 619, 616,
   644, 627, 622, 646, 621, 618, 626, 643, 624, 620, 645, 626, 630, 649, 627, 651, 628, 632, 624, 650, 633, 652, 622, 653, 625, 629,
   654, 631, 623, 657, 629, 631, 628, 656, 633, 630, 632, 655, 634, 637, 639, 638, 635, 641, 640, 642, 636, 645, 638, 659, 646, 658,
   640, 637, 643, 660, 658, 648, 642, 639, 660, 644, 659, 641, 647, 643, 649, 663, 644, 661, 651, 650, 645, 665, 662, 647, 653, 652,
   666, 646, 664, 654, 648, 655, 650, 669, 656, 667, 652, 649, 655, 671, 668, 657, 654, 651, 672, 656, 670, 653, 657, 660, 663, 661,
   665, 659, 662, 666, 664, 658, 674, 662, 670, 675, 668, 664, 661, 673, 672, 667, 675, 666, 663, 671, 673, 669, 665, 674, 671, 669,
   676, 672, 677, 667, 678, 670, 668, 673, 676, 677, 676, 674, 678, 677, 678, 675
}; // 3.28 kb
static const cart_index_t iCartXY_ab14_a2[2730] = {
   0, 1, 2, 3, 4, 5, 6, 9, 10, 11, 13, 15, 11, 7, 12, 9, 15, 14, 13, 14, 8, 15, 10, 12, 16, 25,
   26, 19, 21, 30, 25, 17, 27, 20, 29, 23, 26, 27, 18, 28, 22, 24, 19, 20, 28, 25, 30, 29, 21, 29, 22, 30,
   26, 28, 30, 23, 24, 29, 28, 27, 31, 40, 41, 36, 38, 46, 42, 32, 43, 34, 47, 39, 44, 45, 33, 48, 35, 37,
   40, 34, 49, 42, 51, 47, 41, 49, 35, 50, 44, 48, 36, 42, 50, 40, 46, 51, 50, 43, 37, 49, 48, 45, 38, 51,
   44, 46, 41, 50, 51, 39, 45, 47, 49, 43, 46, 47, 48, 51, 50, 49, 52, 61, 62, 55, 57, 72, 63, 53, 65, 56,
   71, 59, 64, 66, 54, 70, 58, 60, 55, 67, 73, 61, 72, 75, 67, 56, 74, 63, 77, 71, 57, 75, 68, 72, 62, 73,
   68, 76, 58, 78, 64, 70, 77, 59, 69, 71, 74, 65, 78, 69, 60, 76, 70, 66, 61, 63, 79, 67, 75, 77, 62, 79,
   64, 73, 68, 78, 79, 65, 66, 74, 76, 69, 73, 74, 70, 79, 78, 76, 75, 71, 76, 77, 79, 74, 72, 77, 78, 75,
   73, 79, 80, 89, 90, 85, 87, 101, 91, 81, 92, 83, 102, 88, 93, 94, 82, 103, 84, 86, 95, 83, 104, 91, 109, 102,
   96, 105, 84, 107, 93, 103, 85, 97, 106, 89, 101, 108, 107, 98, 86, 105, 103, 94, 87, 108, 99, 101, 90, 106, 109, 88,
   100, 102, 104, 92, 89, 95, 113, 97, 108, 110, 90, 113, 96, 106, 99, 111, 97, 91, 114, 95, 110, 109, 114, 92, 98, 104,
   112, 100, 99, 115, 93, 111, 96, 107, 115, 100, 94, 112, 105, 98, 101, 110, 111, 108, 106, 113, 110, 102, 112, 109, 114, 104,
   111, 112, 103, 115, 107, 105, 113, 104, 105, 114, 115, 112, 106, 114, 107, 113, 111, 115, 108, 109, 115, 110, 113, 114, 116, 125,
   126, 119, 121, 142, 127, 117, 129, 120, 141, 123, 128, 130, 118, 140, 122, 124, 119, 131, 143, 125, 142, 145, 132, 120, 144, 127,
   147, 141, 121, 145, 133, 142, 126, 143, 134, 146, 122, 148, 128, 140, 147, 123, 135, 141, 144, 129, 148, 136, 124, 146, 140, 130,
   125, 137, 155, 131, 145, 153, 126, 155, 138, 143, 133, 154, 137, 127, 156, 132, 151, 147, 138, 157, 128, 149, 134, 148, 156, 129,
   139, 144, 152, 135, 157, 139, 130, 150, 146, 136, 131, 132, 158, 137, 153, 151, 133, 159, 134, 154, 138, 149, 160, 135, 136, 152,
   150, 139, 149, 150, 140, 157, 148, 146, 151, 141, 152, 147, 156, 144, 142, 153, 154, 145, 143, 155, 143, 158, 149, 155, 154, 159,
   158, 144, 150, 156, 160, 152, 145, 151, 159, 153, 155, 158, 159, 152, 146, 160, 157, 150, 153, 147, 160, 151, 158, 156, 154, 160,
   148, 159, 149, 157, 155, 156, 157, 158, 159, 160, 161, 170, 171, 166, 168, 188, 172, 162, 173, 164, 189, 169, 174, 175, 163, 190,
   165, 167, 176, 164, 191, 172, 196, 189, 177, 192, 165, 194, 174, 190, 166, 178, 193, 170, 188, 195, 194, 179, 167, 192, 190, 175,
   168, 195, 180, 188, 171, 193, 196, 169, 181, 189, 191, 173, 170, 182, 206, 178, 195, 197, 171, 206, 183, 193, 180, 198, 184, 172,
   207, 176, 199, 196, 207, 173, 185, 191, 201, 181, 186, 208, 174, 200, 177, 194, 208, 187, 175, 202, 192, 179, 182, 176, 209, 184,
   205, 199, 183, 210, 177, 204, 186, 200, 178, 184, 211, 182, 197, 205, 212, 185, 179, 203, 202, 187, 180, 213, 186, 198, 183, 204,
   214, 181, 187, 201, 203, 185, 188, 197, 198, 195, 193, 206, 199, 189, 201, 196, 207, 191, 200, 202, 190, 208, 194, 192, 209, 191,
   203, 207, 214, 201, 210, 203, 192, 212, 208, 202, 193, 211, 204, 206, 198, 213, 204, 212, 194, 210, 200, 208, 195, 205, 213, 197,
   206, 211, 205, 196, 214, 199, 209, 207, 197, 199, 215, 205, 211, 209, 198, 215, 200, 213, 204, 210, 215, 201, 202, 214, 212, 203,
   206, 209, 210, 211, 213, 215, 211, 207, 212, 209, 215, 214, 213, 214, 208, 215, 210, 212, 216, 225, 226, 219, 221, 248, 227, 217,
   229, 220, 247, 223, 228, 230, 218, 246, 222, 224, 219, 231, 249, 225, 248, 251, 232, 220, 250, 227, 253, 247, 221, 251, 233, 248,
   226, 249, 234, 252, 222, 254, 228, 246, 253, 223, 235, 247, 250, 229, 254, 236, 224, 252, 246, 230, 225, 237, 267, 231, 251, 259,
   226, 267, 238, 249, 233, 260, 239, 227, 268, 232, 257, 253, 240, 269, 228, 255, 234, 254, 268, 229, 241, 250, 258, 235, 269, 242,
   230, 256, 252, 236, 231, 243, 270, 237, 259, 263, 243, 232, 271, 239, 265, 257, 233, 272, 244, 260, 238, 261, 244, 273, 234, 266,
   240, 255, 274, 235, 245, 258, 262, 241, 275, 245, 236, 264, 256, 242, 237, 239, 276, 243, 263, 265, 238, 277, 240, 261, 244, 266,
   278, 241, 242, 262, 264, 245, 255, 256, 246, 269, 254, 252, 257, 247, 258, 253, 268, 250, 248, 259, 260, 251, 249, 267, 249, 270,
   261, 267, 260, 272, 271, 250, 262, 268, 274, 258, 251, 263, 272, 259, 267, 270, 273, 264, 252, 275, 269, 256, 265, 253, 274, 257,
   271, 268, 266, 275, 254, 273, 255, 269, 261, 279, 255, 277, 266, 273, 279, 262, 256, 278, 275, 264, 263, 257, 280, 265, 276, 271,
   280, 258, 264, 274, 278, 262, 259, 265, 281, 263, 270, 276, 260, 281, 266, 272, 261, 277, 267, 276, 277, 270, 272, 281, 276, 268,
   278, 271, 280, 274, 277, 278, 269, 279, 273, 275, 270, 271, 279, 276, 281, 280, 272, 280, 273, 281, 277, 279, 281, 274, 275, 280,
   279, 278, 282, 291, 292, 287, 289, 315, 293, 283, 294, 285, 316, 290, 295, 296, 284, 317, 286, 288, 297, 285, 318, 293, 323, 316,
   298, 319, 286, 321, 295, 317, 287, 299, 320, 291, 315, 322, 321, 300, 288, 319, 317, 296, 289, 322, 301, 315, 292, 320, 323, 290,
   302, 316, 318, 294, 291, 303, 339, 299, 322, 324, 292, 339, 304, 320, 301, 325, 305, 293, 340, 297, 326, 323, 340, 294, 306, 318,
   328, 302, 307, 341, 295, 327, 298, 321, 341, 308, 296, 329, 319, 300, 309, 297, 342, 305, 335, 326, 310, 343, 298, 333, 307, 327,
   299, 311, 344, 303, 324, 334, 345, 312, 300, 331, 329, 308, 301, 346, 313, 325, 304, 332, 347, 302, 314, 328, 330, 306, 303, 309,
   348, 311, 334, 336, 304, 349, 310, 332, 313, 337, 311, 305, 350, 309, 336, 335, 351, 306, 312, 330, 338, 314, 313, 352, 307, 337,
   310, 333, 353, 314, 308, 338, 331, 312, 315, 324, 325, 322, 320, 339, 326, 316, 328, 323, 340, 318, 327, 329, 317, 341, 321, 319,
   342, 318, 330, 340, 347, 328, 343, 331, 319, 345, 341, 329, 320, 344, 332, 339, 325, 346, 333, 345, 321, 343, 327, 341, 322, 334,
   346, 324, 339, 344, 335, 323, 347, 326, 342, 340, 324, 336, 354, 334, 344, 348, 325, 354, 337, 346, 332, 349, 336, 326, 355, 335,
   350, 342, 337, 356, 327, 352, 333, 343, 355, 328, 338, 347, 351, 330, 356, 338, 329, 353, 345, 331, 357, 330, 331, 351, 353, 338,
   332, 358, 333, 349, 337, 352, 334, 335, 359, 336, 348, 350, 339, 348, 349, 344, 346, 354, 350, 340, 351, 342, 355, 347, 352, 353,
   341, 356, 343, 345, 348, 342, 357, 350, 359, 355, 349, 357, 343, 358, 352, 356, 344, 350, 358, 348, 354, 359, 358, 351, 345, 357,
   356, 353, 346, 359, 352, 354, 349, 358, 359, 347, 353, 355, 357, 351, 354, 355, 356, 359, 358, 357, 360, 369, 370, 363, 365, 398,
   371, 361, 373, 364, 397, 367, 372, 374, 362, 396, 366, 368, 363, 375, 399, 369, 398, 401, 376, 364, 400, 371, 403, 397, 365, 401,
   377, 398, 370, 399, 378, 402, 366, 404, 372, 396, 403, 367, 379, 397, 400, 373, 404, 380, 368, 402, 396, 374, 369, 381, 423, 375,
   401, 409, 370, 423, 382, 399, 377, 410, 383, 371, 424, 376, 407, 403, 384, 425, 372, 405, 378, 404, 424, 373, 385, 400, 408, 379,
   425, 386, 374, 406, 402, 380, 375, 387, 426, 381, 409, 413, 388, 376, 427, 383, 415, 407, 377, 428, 389, 410, 382, 411, 390, 429,
   378, 416, 384, 405, 430, 379, 391, 408, 412, 385, 431, 392, 380, 414, 406, 386, 381, 393, 432, 387, 413, 421, 382, 433, 394, 411,
   389, 422, 393, 383, 434, 388, 419, 415, 394, 435, 384, 417, 390, 416, 436, 385, 395, 412, 420, 391, 437, 395, 386, 418, 414, 392,
   387, 388, 438, 393, 421, 419, 389, 439, 390, 422, 394, 417, 440, 391, 392, 420, 418, 395, 405, 406, 396, 425, 404, 402, 407, 397,
   408, 403, 424, 400, 398, 409, 410, 401, 399, 423, 399, 426, 411, 423, 410, 428, 427, 400, 412, 424, 430, 408, 401, 413, 428, 409,
   423, 426, 429, 414, 402, 431, 425, 406, 415, 403, 430, 407, 427, 424, 416, 431, 404, 429, 405, 425, 417, 441, 405, 435, 416, 429,
   441, 418, 406, 437, 431, 414, 419, 407, 442, 415, 434, 427, 442, 408, 420, 430, 436, 412, 409, 421, 443, 413, 426, 432, 410, 443,
   422, 428, 411, 433, 411, 444, 417, 433, 422, 439, 445, 412, 418, 436, 440, 420, 413, 419, 446, 421, 432, 438, 447, 420, 414, 440,
   437, 418, 421, 415, 448, 419, 438, 434, 422, 449, 416, 439, 417, 435, 423, 432, 433, 426, 428, 443, 434, 424, 436, 427, 442, 430,
   435, 437, 425, 441, 429, 431, 426, 438, 444, 432, 443, 446, 438, 427, 445, 434, 448, 442, 428, 446, 439, 443, 433, 444, 439, 447,
   429, 449, 435, 441, 448, 430, 440, 442, 445, 436, 449, 440, 431, 447, 441, 437, 432, 434, 450, 438, 446, 448, 433, 450, 435, 444,
   439, 449, 450, 436, 437, 445, 447, 440, 444, 445, 441, 450, 449, 447, 446, 442, 447, 448, 450, 445, 443, 448, 449, 446, 444, 450,
   451, 460, 461, 456, 458, 490, 462, 452, 463, 454, 491, 459, 464, 465, 453, 492, 455, 457, 466, 454, 493, 462, 498, 491, 467, 494,
   455, 496, 464, 492, 456, 468, 495, 460, 490, 497, 496, 469, 457, 494, 492, 465, 458, 497, 470, 490, 461, 495, 498, 459, 471, 491,
   493, 463, 460, 472, 520, 468, 497, 499, 461, 520, 473, 495, 470, 500, 474, 462, 521, 466, 501, 498, 521, 463, 475, 493, 503, 471,
   476, 522, 464, 502, 467, 496, 522, 477, 465, 504, 494, 469, 478, 466, 523, 474, 510, 501, 479, 524, 467, 508, 476, 502, 468, 480,
   525, 472, 499, 509, 526, 481, 469, 506, 504, 477, 470, 527, 482, 500, 473, 507, 528, 471, 483, 503, 505, 475, 472, 484, 529, 480,
   509, 511, 473, 530, 485, 507, 482, 512, 486, 474, 531, 478, 513, 510, 532, 475, 487, 505, 515, 483, 488, 533, 476, 514, 479, 508,
   534, 489, 477, 516, 506, 481, 484, 478, 535, 486, 519, 513, 485, 536, 479, 518, 488, 514, 480, 486, 537, 484, 511, 519, 538, 487,
   481, 517, 516, 489, 482, 539, 488, 512, 485, 518, 540, 483, 489, 515, 517, 487, 490, 499, 500, 497, 495, 520, 501, 491, 503, 498,
   521, 493, 502, 504, 492, 522, 496, 494, 523, 493, 505, 521, 528, 503, 524, 506, 494, 526, 522, 504, 495, 525, 507, 520, 500, 527,
   508, 526, 496, 524, 502, 522, 497, 509, 527, 499, 520, 525, 510, 498, 528, 501, 523, 521, 499, 511, 541, 509, 525, 529, 500, 541,
   512, 527, 507, 530, 513, 501, 542, 510, 531, 523, 514, 543, 502, 533, 508, 524, 542, 503, 515, 528, 532, 505, 543, 516, 504, 534,
   526, 506, 544, 505, 517, 532, 540, 515, 545, 517, 506, 538, 534, 516, 507, 546, 518, 530, 512, 539, 518, 547, 508, 536, 514, 533,
   509, 519, 548, 511, 529, 537, 519, 510, 549, 513, 535, 531, 511, 513, 550, 519, 537, 535, 512, 551, 514, 539, 518, 536, 552, 515,
   516, 540, 538, 517, 520, 529, 530, 525, 527, 541, 531, 521, 532, 523, 542, 528, 533, 534, 522, 543, 524, 526, 535, 523, 544, 531,
   549, 542, 536, 545, 524, 547, 533, 543, 525, 537, 546, 529, 541, 548, 547, 538, 526, 545, 543, 534, 527, 548, 539, 541, 530, 546,
   549, 528, 540, 542, 544, 532, 529, 535, 553, 537, 548, 550, 530, 553, 536, 546, 539, 551, 537, 531, 554, 535, 550, 549, 554, 532,
   538, 544, 552, 540, 539, 555, 533, 551, 536, 547, 555, 540, 534, 552, 545, 538, 541, 550, 551, 548, 546, 553, 550, 542, 552, 549,
   554, 544, 551, 552, 543, 555, 547, 545, 553, 544, 545, 554, 555, 552, 546, 554, 547, 553, 551, 555, 548, 549, 555, 550, 553, 554,
   556, 565, 566, 559, 561, 600, 567, 557, 569, 560, 599, 563, 568, 570, 558, 598, 562, 564, 559, 571, 601, 565, 600, 603, 572, 560,
   602, 567, 605, 599, 561, 603, 573, 600, 566, 601, 574, 604, 562, 606, 568, 598, 605, 563, 575, 599, 602, 569, 606, 576, 564, 604,
   598, 570, 565, 577, 631, 571, 603, 611, 566, 631, 578, 601, 573, 612, 579, 567, 632, 572, 609, 605, 580, 633, 568, 607, 574, 606,
   632, 569, 581, 602, 610, 575, 633, 582, 570, 608, 604, 576, 571, 583, 634, 577, 611, 615, 584, 572, 635, 579, 617, 609, 573, 636,
   585, 612, 578, 613, 586, 637, 574, 618, 580, 607, 638, 575, 587, 610, 614, 581, 639, 588, 576, 616, 608, 582, 577, 589, 640, 583,
   615, 623, 578, 641, 590, 613, 585, 624, 591, 579, 642, 584, 621, 617, 592, 643, 580, 619, 586, 618, 644, 581, 593, 614, 622, 587,
   645, 594, 582, 620, 616, 588, 583, 595, 646, 589, 623, 627, 595, 584, 647, 591, 629, 621, 585, 648, 596, 624, 590, 625, 596, 649,
   586, 630, 592, 619, 650, 587, 597, 622, 626, 593, 651, 597, 588, 628, 620, 594, 589, 591, 652, 595, 627, 629, 590, 653, 592, 625,
   596, 630, 654, 593, 594, 626, 628, 597, 607, 608, 598, 633, 606, 604, 609, 599, 610, 605, 632, 602, 600, 611, 612, 603, 601, 631,
   601, 634, 613, 631, 612, 636, 635, 602, 614, 632, 638, 610, 603, 615, 636, 611, 631, 634, 637, 616, 604, 639, 633, 608, 617, 605,
   638, 609, 635, 632, 618, 639, 606, 637, 607, 633, 619, 655, 607, 643, 618, 637, 655, 620, 608, 645, 639, 616, 621, 609, 656, 617,
   642, 635, 656, 610, 622, 638, 644, 614, 611, 623, 657, 615, 634, 640, 612, 657, 624, 636, 613, 641, 613, 658, 625, 641, 624, 648,
   659, 614, 626, 644, 650, 622, 615, 627, 660, 623, 640, 646, 661, 628, 616, 651, 645, 620, 629, 617, 662, 621, 647, 642, 630, 663,
   618, 649, 619, 643, 625, 664, 619, 653, 630, 649, 665, 626, 620, 654, 651, 628, 627, 621, 666, 629, 652, 647, 667, 622, 628, 650,
   654, 626, 623, 629, 668, 627, 646, 652, 624, 669, 630, 648, 625, 653, 631, 640, 641, 634, 636, 657, 642, 632, 644, 635, 656, 638,
   643, 645, 633, 655, 637, 639, 634, 646, 658, 640, 657, 660, 647, 635, 659, 642, 662, 656, 636, 660, 648, 657, 641, 658, 649, 661,
   637, 663, 643, 655, 662, 638, 650, 656, 659, 644, 663, 651, 639, 661, 655, 645, 640, 652, 670, 646, 660, 668, 641, 670, 653, 658,
   648, 669, 652, 642, 671, 647, 666, 662, 653, 672, 643, 664, 649, 663, 671, 644, 654, 659, 667, 650, 672, 654, 645, 665, 661, 651,
   646, 647, 673, 652, 668, 666, 648, 674, 649, 669, 653, 664, 675, 650, 651, 667, 665, 654, 664, 665, 655, 672, 663, 661, 666, 656,
   667, 662, 671, 659, 657, 668, 669, 660, 658, 670, 658, 673, 664, 670, 669, 674, 673, 659, 665, 671, 675, 667, 660, 666, 674, 668,
   670, 673, 674, 667, 661, 675, 672, 665, 668, 662, 675, 666, 673, 671, 669, 675, 663, 674, 664, 672, 670, 671, 672, 673, 674, 675
}; // 5.33 kb
static const cart_index_t iCartXY_ab14_a3[3640] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 16, 19, 20, 13, 22, 15, 23, 24, 13, 11, 18, 14, 22, 19,
   21, 24, 17, 23, 15, 17, 12, 23, 16, 24, 18, 20, 21, 22, 25, 36, 38, 34, 35, 30, 44, 32, 45, 40, 34, 26,
   39, 28, 43, 36, 37, 45, 33, 41, 35, 37, 27, 43, 29, 44, 31, 38, 39, 42, 30, 28, 42, 36, 44, 34, 43, 40,
   41, 45, 32, 41, 29, 45, 38, 40, 42, 35, 43, 44, 40, 33, 31, 41, 42, 45, 39, 44, 37, 43, 46, 61, 62, 55,
   56, 49, 67, 51, 69, 66, 61, 47, 63, 50, 68, 57, 59, 71, 53, 65, 62, 63, 48, 70, 52, 72, 54, 58, 60, 64,
   55, 50, 70, 57, 73, 61, 68, 69, 65, 71, 56, 68, 52, 73, 58, 67, 64, 62, 70, 72, 49, 57, 72, 61, 67, 55,
   73, 66, 71, 69, 67, 59, 54, 68, 64, 73, 60, 72, 63, 70, 51, 71, 58, 69, 62, 66, 72, 56, 73, 67, 69, 53,
   60, 65, 70, 71, 63, 73, 59, 68, 66, 65, 64, 71, 72, 69, 70, 67, 68, 73, 74, 91, 93, 83, 84, 79, 100, 81,
   102, 95, 89, 75, 94, 77, 98, 85, 86, 103, 82, 96, 90, 92, 76, 99, 78, 101, 80, 87, 88, 97, 79, 89, 105, 91,
   100, 83, 107, 95, 104, 102, 91, 77, 106, 85, 108, 89, 98, 104, 96, 103, 81, 104, 90, 102, 93, 95, 105, 84, 107, 100,
   93, 106, 78, 109, 87, 105, 97, 90, 99, 101, 104, 82, 92, 96, 106, 103, 94, 108, 86, 98, 105, 94, 80, 106, 97, 109,
   88, 101, 92, 99, 83, 85, 109, 89, 107, 91, 108, 102, 103, 104, 84, 108, 87, 107, 90, 100, 101, 93, 109, 105, 107, 86,
   88, 98, 99, 108, 92, 109, 94, 106, 100, 98, 97, 108, 101, 107, 99, 105, 106, 109, 102, 96, 99, 103, 109, 104, 106, 107,
   98, 108, 95, 103, 101, 104, 105, 102, 109, 100, 108, 107, 110, 125, 127, 119, 120, 113, 137, 115, 139, 136, 126, 111, 129, 114,
   138, 121, 123, 141, 117, 135, 128, 130, 112, 140, 116, 142, 118, 122, 124, 134, 131, 114, 146, 121, 150, 126, 138, 145, 135, 141,
   132, 144, 116, 151, 122, 143, 134, 128, 140, 142, 113, 131, 148, 125, 137, 119, 149, 136, 147, 139, 143, 133, 118, 144, 134, 151,
   124, 142, 130, 140, 115, 147, 132, 139, 127, 136, 148, 120, 149, 137, 145, 117, 133, 135, 146, 141, 129, 150, 123, 138, 119, 126,
   153, 131, 149, 125, 152, 139, 145, 147, 120, 152, 128, 149, 132, 137, 143, 127, 153, 148, 125, 121, 154, 126, 152, 131, 150, 147,
   141, 145, 152, 123, 130, 138, 144, 150, 133, 154, 129, 146, 127, 154, 122, 153, 128, 148, 142, 132, 151, 143, 153, 129, 124, 146,
   140, 154, 130, 151, 133, 144, 136, 145, 143, 147, 148, 139, 153, 137, 152, 149, 147, 135, 144, 141, 154, 145, 146, 152, 138, 150,
   148, 146, 134, 154, 142, 153, 140, 143, 144, 151, 149, 138, 140, 150, 151, 152, 144, 153, 146, 154, 137, 150, 142, 152, 143, 149,
   151, 148, 154, 153, 139, 141, 151, 145, 153, 147, 154, 149, 150, 152, 155, 172, 174, 164, 165, 160, 187, 162, 189, 182, 170, 156,
   175, 158, 185, 166, 167, 190, 163, 183, 171, 173, 157, 186, 159, 188, 161, 168, 169, 184, 160, 176, 192, 172, 187, 164, 200, 182,
   191, 189, 178, 158, 195, 166, 201, 170, 185, 193, 183, 190, 162, 191, 177, 189, 174, 182, 192, 165, 200, 187, 180, 196, 159, 202,
   168, 194, 184, 171, 186, 188, 193, 163, 179, 183, 195, 190, 175, 201, 167, 185, 194, 181, 161, 196, 184, 202, 169, 188, 173, 186,
   164, 178, 207, 176, 200, 172, 205, 189, 199, 191, 165, 205, 180, 200, 177, 187, 198, 174, 207, 192, 176, 166, 208, 170, 203, 178,
   201, 199, 190, 193, 177, 206, 168, 204, 171, 198, 188, 180, 202, 194, 203, 167, 181, 185, 197, 201, 179, 208, 175, 195, 204, 179,
   169, 197, 186, 206, 173, 202, 181, 196, 172, 170, 209, 178, 205, 176, 203, 191, 193, 199, 174, 209, 171, 207, 180, 192, 194, 177,
   204, 198, 209, 175, 173, 195, 196, 208, 181, 206, 179, 197, 198, 197, 184, 206, 188, 204, 186, 194, 196, 202, 199, 183, 197, 190,
   208, 193, 195, 203, 185, 201, 182, 199, 198, 191, 192, 189, 207, 187, 205, 200, 187, 203, 194, 205, 198, 200, 204, 192, 209, 207,
   205, 185, 196, 201, 206, 203, 197, 209, 195, 208, 189, 193, 204, 199, 207, 191, 209, 200, 203, 205, 207, 195, 186, 208, 202, 209,
   196, 204, 197, 206, 191, 190, 206, 193, 209, 199, 208, 205, 201, 203, 192, 208, 188, 209, 194, 207, 202, 198, 206, 204, 200, 201,
   202, 203, 204, 205, 206, 207, 208, 209, 210, 225, 227, 219, 220, 213, 243, 215, 245, 242, 226, 211, 229, 214, 244, 221, 223, 247,
   217, 241, 228, 230, 212, 246, 216, 248, 218, 222, 224, 240, 233, 214, 252, 221, 262, 226, 244, 251, 241, 247, 234, 250, 216, 263,
   222, 249, 240, 228, 246, 248, 213, 231, 254, 225, 243, 219, 261, 242, 253, 245, 249, 236, 218, 250, 240, 263, 224, 248, 230, 246,
   215, 253, 232, 245, 227, 242, 254, 220, 261, 243, 251, 217, 235, 241, 252, 247, 229, 262, 223, 244, 219, 237, 266, 231, 261, 225,
   264, 245, 257, 253, 220, 264, 238, 261, 232, 243, 255, 227, 266, 254, 237, 221, 268, 226, 265, 233, 262, 259, 247, 251, 265, 223,
   239, 244, 256, 262, 235, 268, 229, 252, 238, 269, 222, 267, 228, 260, 248, 234, 263, 249, 267, 239, 224, 258, 246, 269, 230, 263,
   236, 250, 231, 226, 274, 233, 270, 237, 265, 257, 251, 259, 232, 273, 228, 271, 234, 255, 249, 238, 267, 260, 225, 233, 275, 237,
   264, 231, 270, 253, 259, 257, 273, 235, 230, 256, 250, 272, 236, 269, 239, 258, 227, 275, 234, 266, 238, 254, 260, 232, 271, 255,
   274, 229, 236, 252, 258, 268, 239, 272, 235, 256, 242, 257, 255, 253, 254, 245, 266, 243, 264, 261, 259, 241, 256, 247, 268, 251,
   252, 265, 244, 262, 260, 258, 240, 269, 248, 267, 246, 249, 250, 263, 270, 244, 258, 262, 272, 265, 256, 274, 252, 268, 271, 256,
   246, 272, 263, 273, 250, 267, 258, 269, 243, 270, 260, 264, 255, 261, 271, 254, 275, 266, 255, 272, 248, 273, 249, 271, 263, 260,
   269, 267, 245, 259, 271, 257, 266, 253, 275, 261, 270, 264, 257, 247, 272, 251, 274, 259, 268, 270, 262, 265, 253, 251, 273, 259,
   275, 257, 274, 264, 265, 270, 254, 274, 249, 275, 260, 266, 267, 255, 273, 271, 275, 252, 250, 268, 269, 274, 258, 273, 256, 272,
   261, 265, 267, 270, 271, 264, 273, 266, 274, 275, 264, 262, 269, 265, 273, 270, 272, 275, 268, 274, 266, 268, 263, 274, 267, 275,
   269, 271, 272, 273, 276, 293, 295, 285, 286, 281, 314, 283, 316, 309, 291, 277, 296, 279, 312, 287, 288, 317, 284, 310, 292, 294,
   278, 313, 280, 315, 282, 289, 290, 311, 281, 297, 319, 293, 314, 285, 333, 309, 318, 316, 299, 279, 322, 287, 334, 291, 312, 320,
   310, 317, 283, 318, 298, 316, 295, 309, 319, 286, 333, 314, 301, 323, 280, 335, 289, 321, 311, 292, 313, 315, 320, 284, 300, 310,
   322, 317, 296, 334, 288, 312, 321, 302, 282, 323, 311, 335, 290, 315, 294, 313, 285, 305, 340, 297, 333, 293, 338, 316, 328, 318,
   286, 338, 307, 333, 298, 314, 326, 295, 340, 319, 303, 287, 341, 291, 336, 299, 334, 329, 317, 320, 304, 339, 289, 337, 292, 327,
   315, 301, 335, 321, 336, 288, 308, 312, 324, 334, 300, 341, 296, 322, 337, 306, 290, 325, 313, 339, 294, 335, 302, 323, 293, 303,
   348, 305, 338, 297, 342, 318, 330, 328, 305, 291, 349, 299, 344, 303, 336, 330, 320, 329, 295, 348, 304, 340, 307, 319, 331, 298,
   343, 326, 307, 350, 292, 346, 301, 331, 321, 304, 337, 327, 349, 296, 306, 322, 332, 341, 308, 345, 300, 324, 350, 308, 294, 332,
   323, 347, 302, 339, 306, 325, 297, 299, 353, 303, 342, 305, 344, 328, 329, 330, 298, 352, 301, 343, 304, 326, 327, 307, 346, 331,
   351, 300, 302, 324, 325, 345, 306, 347, 308, 332, 327, 325, 311, 339, 315, 337, 313, 321, 323, 335, 329, 310, 324, 317, 341, 320,
   322, 336, 312, 334, 309, 328, 326, 318, 319, 316, 340, 314, 338, 333, 314, 342, 331, 338, 326, 333, 343, 319, 348, 340, 344, 312,
   332, 334, 345, 336, 324, 349, 322, 341, 316, 330, 343, 328, 340, 318, 348, 333, 342, 338, 346, 332, 313, 347, 335, 350, 323, 337,
   325, 339, 330, 317, 345, 320, 349, 329, 341, 344, 334, 336, 331, 347, 315, 350, 321, 346, 335, 327, 339, 337, 326, 351, 321, 352,
   327, 343, 337, 331, 350, 346, 352, 324, 323, 345, 339, 351, 325, 350, 332, 347, 328, 320, 351, 329, 353, 330, 349, 342, 336, 344,
   353, 322, 325, 341, 347, 349, 332, 351, 324, 345, 318, 329, 352, 330, 348, 328, 353, 338, 344, 342, 319, 353, 327, 348, 331, 340,
   346, 326, 352, 343, 333, 344, 346, 342, 343, 338, 352, 340, 353, 348, 342, 334, 347, 336, 351, 344, 345, 353, 341, 349, 343, 345,
   335, 351, 337, 352, 339, 346, 347, 350, 338, 336, 350, 344, 352, 342, 351, 348, 349, 353, 340, 349, 337, 353, 346, 348, 350, 343,
   351, 352, 348, 341, 339, 349, 350, 353, 347, 352, 345, 351, 354, 369, 371, 363, 364, 357, 393, 359, 395, 392, 370, 355, 373, 358,
   394, 365, 367, 397, 361, 391, 372, 374, 356, 396, 360, 398, 362, 366, 368, 390, 377, 358, 402, 365, 418, 370, 394, 401, 391, 397,
   378, 400, 360, 419, 366, 399, 390, 372, 396, 398, 357, 375, 404, 369, 393, 363, 417, 392, 403, 395, 399, 380, 362, 400, 390, 419,
   368, 398, 374, 396, 359, 403, 376, 395, 371, 392, 404, 364, 417, 393, 401, 361, 379, 391, 402, 397, 373, 418, 367, 394, 363, 381,
   422, 375, 417, 369, 420, 395, 407, 403, 364, 420, 383, 417, 376, 393, 405, 371, 422, 404, 382, 365, 424, 370, 421, 377, 418, 409,
   397, 401, 421, 367, 385, 394, 406, 418, 379, 424, 373, 402, 384, 425, 366, 423, 372, 410, 398, 378, 419, 399, 423, 386, 368, 408,
   396, 425, 374, 419, 380, 400, 387, 370, 436, 377, 428, 382, 421, 413, 401, 409, 388, 435, 372, 429, 378, 411, 399, 384, 423, 410,
   369, 387, 437, 381, 420, 375, 426, 403, 415, 407, 435, 389, 374, 412, 400, 431, 380, 425, 386, 408, 371, 437, 388, 422, 383, 404,
   416, 376, 427, 405, 436, 373, 389, 402, 414, 424, 385, 430, 379, 406, 375, 382, 440, 387, 426, 381, 432, 407, 413, 415, 376, 438,
   384, 427, 388, 405, 411, 383, 433, 416, 381, 377, 442, 382, 432, 387, 428, 415, 409, 413, 439, 379, 386, 406, 412, 430, 389, 434,
   385, 414, 383, 443, 378, 433, 384, 416, 410, 388, 429, 411, 441, 385, 380, 414, 408, 434, 386, 431, 389, 412, 392, 407, 405, 403,
   404, 395, 422, 393, 420, 417, 409, 391, 406, 397, 424, 401, 402, 421, 394, 418, 410, 408, 390, 425, 398, 423, 396, 399, 400, 419,
   428, 394, 414, 418, 430, 421, 406, 436, 402, 424, 429, 412, 396, 431, 419, 435, 400, 423, 408, 425, 393, 426, 416, 420, 405, 417,
   427, 404, 437, 422, 411, 431, 398, 435, 399, 429, 419, 410, 425, 423, 395, 415, 427, 407, 422, 403, 437, 417, 426, 420, 413, 397,
   430, 401, 436, 409, 424, 428, 418, 421, 403, 413, 438, 415, 437, 407, 440, 420, 432, 426, 404, 440, 411, 437, 416, 422, 433, 405,
   438, 427, 415, 401, 439, 409, 442, 413, 436, 432, 421, 428, 416, 441, 399, 443, 410, 433, 423, 411, 435, 429, 442, 402, 412, 424,
   434, 436, 414, 439, 406, 430, 443, 414, 400, 434, 425, 441, 408, 435, 412, 431, 444, 406, 408, 430, 431, 439, 412, 441, 414, 434,
   405, 444, 410, 438, 411, 427, 429, 416, 443, 433, 407, 409, 444, 413, 440, 415, 442, 426, 428, 432, 417, 432, 433, 426, 427, 420,
   438, 422, 440, 437, 432, 418, 434, 421, 439, 428, 430, 442, 424, 436, 433, 434, 419, 441, 423, 443, 425, 429, 431, 435, 426, 421,
   441, 428, 444, 432, 439, 440, 436, 442, 427, 439, 423, 444, 429, 438, 435, 433, 441, 443, 420, 428, 443, 432, 438, 426, 444, 437,
   442, 440, 438, 430, 425, 439, 435, 444, 431, 443, 434, 441, 422, 442, 429, 440, 433, 437, 443, 427, 444, 438, 440, 424, 431, 436,
   441, 442, 434, 444, 430, 439, 437, 436, 435, 442, 443, 440, 441, 438, 439, 444, 445, 462, 464, 454, 455, 450, 489, 452, 491, 484,
   460, 446, 465, 448, 487, 456, 457, 492, 453, 485, 461, 463, 447, 488, 449, 490, 451, 458, 459, 486, 450, 466, 494, 462, 489, 454,
   514, 484, 493, 491, 468, 448, 497, 456, 515, 460, 487, 495, 485, 492, 452, 493, 467, 491, 464, 484, 494, 455, 514, 489, 470, 498,
   449, 516, 458, 496, 486, 461, 488, 490, 495, 453, 469, 485, 497, 492, 465, 515, 457, 487, 496, 471, 451, 498, 486, 516, 459, 490,
   463, 488, 454, 474, 521, 466, 514, 462, 519, 491, 503, 493, 455, 519, 476, 514, 467, 489, 501, 464, 521, 494, 472, 456, 522, 460,
   517, 468, 515, 504, 492, 495, 473, 520, 458, 518, 461, 502, 490, 470, 516, 496, 517, 457, 477, 487, 499, 515, 469, 522, 465, 497,
   518, 475, 459, 500, 488, 520, 463, 516, 471, 498, 462, 478, 535, 474, 519, 466, 523, 493, 505, 503, 480, 460, 536, 468, 525, 472,
   517, 507, 495, 504, 464, 535, 479, 521, 476, 494, 506, 467, 524, 501, 482, 537, 461, 527, 470, 508, 496, 473, 518, 502, 536, 465,
   481, 497, 509, 522, 477, 526, 469, 499, 537, 483, 463, 510, 498, 528, 471, 520, 475, 500, 466, 480, 542, 478, 523, 474, 531, 503,
   513, 505, 467, 540, 482, 524, 479, 501, 512, 476, 533, 506, 478, 468, 543, 472, 529, 480, 525, 513, 504, 507, 479, 541, 470, 530,
   473, 512, 502, 482, 527, 508, 538, 469, 483, 499, 511, 526, 481, 534, 477, 509, 539, 481, 471, 511, 500, 532, 475, 528, 483, 510,
   474, 472, 544, 480, 531, 478, 529, 505, 507, 513, 476, 545, 473, 533, 482, 506, 508, 479, 530, 512, 546, 477, 475, 509, 510, 534,
   483, 532, 481, 511, 502, 500, 486, 520, 490, 518, 488, 496, 498, 516, 504, 485, 499, 492, 522, 495, 497, 517, 487, 515, 484, 503,
   501, 493, 494, 491, 521, 489, 519, 514, 489, 523, 506, 519, 501, 514, 524, 494, 535, 521, 525, 487, 509, 515, 526, 517, 499, 536,
   497, 522, 491, 505, 524, 503, 521, 493, 535, 514, 523, 519, 527, 510, 488, 528, 516, 537, 498, 518, 500, 520, 507, 492, 526, 495,
   536, 504, 522, 525, 515, 517, 508, 528, 490, 537, 496, 527, 516, 502, 520, 518, 512, 539, 496, 541, 502, 530, 518, 508, 537, 527,
   541, 511, 498, 532, 520, 539, 500, 537, 510, 528, 513, 495, 538, 504, 543, 507, 536, 529, 517, 525, 543, 497, 511, 522, 534, 536,
   509, 538, 499, 526, 493, 513, 540, 505, 535, 503, 542, 519, 531, 523, 494, 542, 512, 535, 506, 521, 533, 501, 540, 524, 501, 547,
   508, 540, 512, 524, 530, 506, 545, 533, 548, 499, 510, 526, 532, 538, 511, 546, 509, 534, 503, 507, 547, 513, 542, 505, 544, 523,
   529, 531, 549, 509, 500, 534, 528, 546, 510, 539, 511, 532, 505, 504, 548, 507, 544, 513, 543, 531, 525, 529, 506, 549, 502, 545,
   508, 533, 527, 512, 541, 530, 514, 531, 533, 523, 524, 519, 540, 521, 542, 535, 529, 515, 534, 517, 538, 525, 526, 543, 522, 536,
   530, 532, 516, 539, 518, 541, 520, 527, 528, 537, 519, 529, 545, 531, 540, 523, 547, 535, 544, 542, 531, 517, 546, 525, 548, 529,
   538, 544, 536, 543, 521, 544, 530, 542, 533, 535, 545, 524, 547, 540, 533, 546, 518, 549, 527, 545, 537, 530, 539, 541, 544, 522,
   532, 536, 546, 543, 534, 548, 526, 538, 545, 534, 520, 546, 537, 549, 528, 541, 532, 539, 523, 525, 549, 529, 547, 531, 548, 542,
   543, 544, 524, 548, 527, 547, 530, 540, 541, 533, 549, 545, 547, 526, 528, 538, 539, 548, 532, 549, 534, 546, 540, 538, 537, 548,
   541, 547, 539, 545, 546, 549, 542, 536, 539, 543, 549, 544, 546, 547, 538, 548, 535, 543, 541, 544, 545, 542, 549, 540, 548, 547,
   550, 565, 567, 559, 560, 553, 595, 555, 597, 594, 566, 551, 569, 554, 596, 561, 563, 599, 557, 593, 568, 570, 552, 598, 556, 600,
   558, 562, 564, 592, 573, 554, 604, 561, 626, 566, 596, 603, 593, 599, 574, 602, 556, 627, 562, 601, 592, 568, 598, 600, 553, 571,
   606, 565, 595, 559, 625, 594, 605, 597, 601, 576, 558, 602, 592, 627, 564, 600, 570, 598, 555, 605, 572, 597, 567, 594, 606, 560,
   625, 595, 603, 557, 575, 593, 604, 599, 569, 626, 563, 596, 559, 577, 630, 571, 625, 565, 628, 597, 609, 605, 560, 628, 579, 625,
   572, 595, 607, 567, 630, 606, 578, 561, 632, 566, 629, 573, 626, 611, 599, 603, 629, 563, 581, 596, 608, 626, 575, 632, 569, 604,
   580, 633, 562, 631, 568, 612, 600, 574, 627, 601, 631, 582, 564, 610, 598, 633, 570, 627, 576, 602, 585, 566, 650, 573, 636, 578,
   629, 615, 603, 611, 586, 649, 568, 637, 574, 613, 601, 580, 631, 612, 565, 583, 651, 577, 628, 571, 634, 605, 617, 609, 649, 588,
   570, 614, 602, 639, 576, 633, 582, 610, 567, 651, 584, 630, 579, 606, 618, 572, 635, 607, 650, 569, 587, 604, 616, 632, 581, 638,
   575, 608, 571, 589, 654, 583, 634, 577, 640, 609, 621, 617, 572, 652, 590, 635, 584, 607, 619, 579, 642, 618, 589, 573, 656, 578,
   641, 585, 636, 623, 611, 615, 653, 575, 591, 608, 620, 638, 587, 644, 581, 616, 590, 657, 574, 643, 580, 624, 612, 586, 637, 613,
   655, 591, 576, 622, 610, 645, 582, 639, 588, 614, 583, 578, 660, 585, 646, 589, 641, 621, 615, 623, 584, 658, 580, 647, 586, 619,
   613, 590, 643, 624, 577, 585, 662, 589, 640, 583, 646, 617, 623, 621, 659, 587, 582, 620, 614, 648, 588, 645, 591, 622, 579, 663,
   586, 642, 590, 618, 624, 584, 647, 619, 661, 581, 588, 616, 622, 644, 591, 648, 587, 620, 594, 609, 607, 605, 606, 597, 630, 595,
   628, 625, 611, 593, 608, 599, 632, 603, 604, 629, 596, 626, 612, 610, 592, 633, 600, 631, 598, 601, 602, 627, 636, 596, 616, 626,
   638, 629, 608, 650, 604, 632, 637, 614, 598, 639, 627, 649, 602, 631, 610, 633, 595, 634, 618, 628, 607, 625, 635, 606, 651, 630,
   613, 639, 600, 649, 601, 637, 627, 612, 633, 631, 597, 617, 635, 609, 630, 605, 651, 625, 634, 628, 615, 599, 638, 603, 650, 611,
   632, 636, 626, 629, 605, 621, 652, 617, 651, 609, 654, 628, 640, 634, 606, 654, 619, 651, 618, 630, 642, 607, 652, 635, 623, 603,
   653, 611, 656, 615, 650, 641, 629, 636, 624, 655, 601, 657, 612, 643, 631, 613, 649, 637, 656, 604, 620, 632, 644, 650, 616, 653,
   608, 638, 657, 622, 602, 645, 633, 655, 610, 649, 614, 639, 665, 608, 622, 638, 648, 653, 620, 661, 616, 644, 666, 620, 610, 648,
   639, 659, 614, 655, 622, 645, 607, 664, 624, 652, 619, 635, 647, 618, 663, 642, 619, 666, 612, 658, 613, 647, 637, 624, 657, 643,
   609, 623, 664, 621, 654, 617, 662, 634, 646, 640, 621, 611, 665, 615, 660, 623, 656, 646, 636, 641, 617, 615, 667, 623, 662, 621,
   660, 640, 641, 646, 618, 668, 613, 663, 624, 642, 643, 619, 658, 647, 669, 616, 614, 644, 645, 661, 622, 659, 620, 648, 625, 640,
   642, 634, 635, 628, 652, 630, 654, 651, 641, 626, 644, 629, 653, 636, 638, 656, 632, 650, 643, 645, 627, 655, 631, 657, 633, 637,
   639, 649, 646, 629, 661, 636, 665, 641, 653, 660, 650, 656, 647, 659, 631, 666, 637, 658, 649, 643, 655, 657, 628, 646, 663, 640,
   652, 634, 664, 651, 662, 654, 658, 648, 633, 659, 649, 666, 639, 657, 645, 655, 630, 662, 647, 654, 642, 651, 663, 635, 664, 652,
   660, 632, 648, 650, 661, 656, 644, 665, 638, 653, 634, 641, 668, 646, 664, 640, 667, 654, 660, 662, 635, 667, 643, 664, 647, 652,
   658, 642, 668, 663, 640, 636, 669, 641, 667, 646, 665, 662, 656, 660, 667, 638, 645, 653, 659, 665, 648, 669, 644, 661, 642, 669,
   637, 668, 643, 663, 657, 647, 666, 658, 668, 644, 639, 661, 655, 669, 645, 666, 648, 659, 651, 660, 658, 662, 663, 654, 668, 652,
   667, 664, 662, 650, 659, 656, 669, 660, 661, 667, 653, 665, 663, 661, 649, 669, 657, 668, 655, 658, 659, 666, 664, 653, 655, 665,
   666, 667, 659, 668, 661, 669, 652, 665, 657, 667, 658, 664, 666, 663, 669, 668, 654, 656, 666, 660, 668, 662, 669, 664, 665, 667
}; // 7.11 kb
static const cart_index_t iCartXY_ab14_a4[4290] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 26, 22, 28, 31, 32, 24, 25,
   33, 34, 35, 30, 20, 16, 21, 24, 18, 30, 32, 23, 29, 26, 34, 27, 33, 31, 35, 22, 23, 17, 30, 31, 25, 19,
   27, 21, 35, 28, 29, 32, 33, 34, 36, 47, 48, 39, 51, 41, 52, 61, 62, 45, 46, 63, 57, 59, 56, 45, 37, 50,
   51, 40, 59, 60, 43, 53, 47, 63, 49, 58, 55, 61, 46, 49, 38, 57, 58, 52, 42, 53, 44, 63, 48, 50, 54, 60,
   62, 39, 40, 54, 45, 47, 56, 62, 55, 60, 51, 57, 58, 63, 61, 59, 41, 55, 42, 56, 61, 46, 48, 58, 54, 59,
   52, 60, 62, 63, 57, 56, 43, 44, 59, 55, 57, 54, 49, 50, 61, 62, 53, 60, 58, 63, 64, 79, 80, 69, 81, 71,
   83, 94, 95, 73, 74, 97, 90, 92, 85, 81, 65, 82, 79, 67, 94, 96, 72, 84, 75, 98, 76, 88, 86, 93, 83, 84,
   66, 95, 96, 80, 68, 82, 70, 99, 77, 78, 87, 89, 91, 73, 67, 89, 81, 75, 92, 99, 86, 96, 79, 97, 88, 98,
   93, 94, 74, 88, 68, 90, 98, 83, 77, 96, 87, 97, 80, 89, 91, 99, 95, 69, 75, 91, 73, 79, 85, 95, 93, 99,
   81, 90, 98, 97, 94, 92, 90, 76, 70, 97, 88, 95, 87, 84, 78, 98, 91, 82, 89, 96, 99, 71, 93, 77, 85, 94,
   74, 80, 98, 91, 92, 83, 99, 95, 97, 90, 92, 72, 78, 94, 86, 97, 89, 76, 82, 93, 99, 84, 96, 88, 98, 85,
   86, 87, 92, 93, 90, 91, 88, 89, 94, 95, 96, 99, 98, 97, 100, 121, 122, 103, 115, 105, 117, 137, 138, 109, 110, 139,
   127, 129, 126, 121, 101, 123, 116, 104, 135, 136, 107, 119, 111, 140, 113, 128, 125, 131, 122, 123, 102, 133, 134, 118, 106, 120,
   108, 141, 112, 114, 124, 130, 132, 103, 116, 133, 109, 121, 126, 138, 135, 143, 115, 127, 142, 139, 137, 129, 115, 104, 134, 121,
   111, 137, 144, 125, 136, 116, 142, 128, 140, 131, 135, 105, 135, 118, 126, 137, 110, 122, 142, 133, 129, 117, 143, 138, 139, 127,
   117, 136, 106, 138, 144, 122, 112, 134, 124, 143, 118, 130, 132, 141, 133, 137, 107, 120, 135, 125, 142, 134, 113, 123, 131, 144,
   119, 136, 128, 140, 138, 119, 108, 143, 136, 133, 124, 123, 114, 144, 132, 120, 130, 134, 141, 109, 111, 141, 115, 116, 129, 143,
   131, 144, 121, 139, 140, 142, 135, 137, 110, 140, 112, 127, 142, 117, 118, 144, 132, 139, 122, 141, 133, 143, 138, 139, 113, 114,
   142, 128, 143, 130, 119, 120, 140, 141, 123, 134, 136, 144, 127, 128, 124, 139, 140, 138, 132, 136, 130, 142, 133, 134, 141, 144,
   143, 129, 125, 130, 137, 131, 139, 141, 128, 134, 135, 143, 136, 144, 140, 142, 126, 131, 132, 129, 135, 127, 133, 140, 141, 137,
   138, 144, 143, 142, 139, 145, 166, 167, 150, 162, 152, 164, 181, 182, 154, 155, 190, 177, 179, 172, 168, 146, 169, 160, 148, 183,
   185, 153, 165, 156, 191, 157, 175, 173, 180, 170, 171, 147, 184, 186, 161, 149, 163, 151, 192, 158, 159, 174, 176, 178, 166, 148,
   187, 168, 156, 189, 198, 173, 185, 160, 193, 175, 191, 180, 183, 167, 187, 149, 188, 196, 170, 158, 186, 174, 194, 161, 176, 178,
   192, 184, 150, 168, 188, 154, 166, 172, 182, 189, 197, 162, 177, 195, 190, 181, 179, 188, 169, 151, 194, 187, 184, 174, 171, 159,
   196, 178, 163, 176, 186, 192, 152, 189, 170, 172, 181, 155, 167, 195, 188, 179, 164, 197, 182, 190, 177, 189, 153, 171, 183, 173,
   193, 187, 157, 169, 180, 198, 165, 185, 175, 191, 154, 160, 194, 162, 168, 179, 197, 183, 199, 166, 190, 193, 195, 189, 181, 155,
   193, 161, 177, 195, 164, 170, 199, 184, 190, 167, 194, 188, 197, 182, 162, 156, 196, 166, 160, 181, 199, 180, 198, 168, 195, 191,
   193, 183, 189, 195, 157, 163, 193, 175, 199, 186, 165, 171, 191, 196, 169, 187, 185, 198, 164, 198, 158, 182, 199, 167, 161, 196,
   178, 197, 170, 192, 184, 194, 188, 197, 165, 159, 199, 185, 194, 176, 169, 163, 198, 192, 171, 186, 187, 196, 172, 183, 184, 179,
   189, 177, 188, 193, 194, 181, 182, 199, 197, 195, 190, 181, 173, 186, 189, 180, 195, 196, 175, 187, 183, 199, 185, 198, 191, 193,
   182, 185, 174, 197, 198, 188, 178, 187, 176, 199, 184, 186, 192, 196, 194, 190, 175, 176, 195, 191, 197, 192, 185, 186, 193, 194,
   187, 196, 198, 199, 177, 191, 178, 190, 193, 182, 184, 198, 192, 195, 188, 196, 194, 199, 197, 179, 180, 192, 181, 183, 190, 194,
   191, 196, 189, 197, 198, 199, 193, 195, 200, 221, 222, 203, 215, 205, 217, 243, 244, 209, 210, 251, 233, 235, 232, 223, 201, 225,
   216, 204, 241, 242, 207, 219, 211, 252, 213, 234, 231, 237, 224, 226, 202, 239, 240, 218, 206, 220, 208, 253, 212, 214, 230, 236,
   238, 203, 227, 245, 209, 221, 232, 244, 247, 256, 215, 233, 254, 251, 243, 235, 227, 204, 246, 223, 211, 249, 258, 231, 242, 216,
   255, 234, 252, 237, 241, 205, 247, 228, 232, 243, 210, 222, 254, 245, 235, 217, 256, 244, 251, 233, 228, 248, 206, 250, 259, 224,
   212, 240, 230, 257, 218, 236, 238, 253, 239, 249, 207, 229, 241, 231, 255, 246, 213, 225, 237, 258, 219, 242, 234, 252, 250, 229,
   208, 257, 248, 239, 230, 226, 214, 259, 238, 220, 236, 240, 253, 209, 223, 261, 215, 227, 235, 256, 249, 265, 221, 251, 260, 254,
   247, 243, 210, 260, 224, 233, 254, 217, 228, 265, 250, 251, 222, 261, 245, 256, 244, 221, 211, 262, 227, 216, 247, 264, 237, 258,
   223, 260, 252, 255, 241, 249, 222, 262, 212, 245, 263, 228, 218, 259, 238, 261, 224, 253, 239, 257, 250, 260, 213, 226, 255, 234,
   264, 248, 219, 229, 252, 262, 225, 246, 242, 258, 261, 225, 214, 263, 246, 257, 236, 229, 220, 262, 253, 226, 240, 248, 259, 215,
   216, 263, 221, 223, 243, 265, 241, 264, 227, 254, 255, 260, 249, 247, 217, 264, 218, 244, 265, 222, 224, 263, 239, 256, 228, 257,
   250, 261, 245, 265, 219, 220, 264, 242, 263, 240, 225, 226, 258, 259, 229, 248, 246, 262, 245, 246, 230, 261, 262, 250, 238, 248,
   236, 263, 239, 240, 253, 259, 257, 247, 231, 248, 249, 237, 260, 262, 234, 246, 241, 264, 242, 258, 252, 255, 232, 249, 250, 235,
   247, 233, 245, 260, 261, 243, 244, 265, 256, 254, 251, 233, 255, 239, 251, 260, 244, 250, 264, 257, 254, 245, 263, 261, 265, 256,
   254, 234, 240, 260, 252, 265, 259, 242, 248, 255, 263, 246, 262, 258, 264, 235, 241, 257, 243, 249, 251, 261, 255, 263, 247, 256,
   264, 265, 260, 254, 256, 242, 236, 265, 258, 261, 253, 246, 240, 264, 257, 248, 259, 262, 263, 243, 237, 259, 247, 241, 254, 263,
   252, 262, 249, 265, 258, 264, 255, 260, 244, 258, 238, 256, 264, 245, 239, 262, 253, 265, 250, 259, 257, 263, 261, 251, 252, 253,
   254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 287, 288, 271, 283, 273, 285, 308, 309, 275, 276, 323, 304, 306,
   299, 289, 267, 290, 281, 269, 310, 312, 274, 286, 277, 324, 278, 302, 300, 307, 291, 292, 268, 311, 313, 282, 270, 284, 272, 325,
   279, 280, 301, 303, 305, 293, 269, 314, 289, 277, 319, 331, 300, 312, 281, 326, 302, 324, 307, 310, 294, 315, 270, 317, 329, 291,
   279, 313, 301, 327, 282, 303, 305, 325, 311, 271, 295, 316, 275, 287, 299, 309, 318, 330, 283, 304, 328, 323, 308, 306, 317, 296,
   272, 327, 315, 311, 301, 292, 280, 329, 305, 284, 303, 313, 325, 273, 318, 297, 299, 308, 276, 288, 328, 316, 306, 285, 330, 309,
   323, 304, 319, 274, 298, 310, 300, 326, 314, 278, 290, 307, 331, 286, 312, 302, 324, 275, 293, 333, 283, 295, 306, 330, 320, 338,
   287, 323, 332, 328, 318, 308, 276, 332, 294, 304, 328, 285, 297, 338, 321, 323, 288, 333, 316, 330, 309, 295, 277, 335, 293, 281,
   320, 339, 307, 331, 289, 334, 324, 326, 310, 319, 334, 278, 296, 326, 302, 339, 322, 286, 298, 324, 335, 290, 314, 312, 331, 297,
   337, 279, 321, 340, 294, 282, 329, 305, 336, 291, 325, 311, 327, 317, 336, 298, 280, 340, 322, 327, 303, 296, 284, 337, 325, 292,
   313, 315, 329, 287, 281, 341, 295, 289, 318, 343, 310, 339, 293, 332, 326, 334, 319, 320, 288, 341, 282, 316, 342, 297, 291, 340,
   311, 333, 294, 327, 317, 336, 321, 283, 289, 342, 287, 293, 308, 338, 319, 343, 295, 328, 334, 332, 320, 318, 342, 290, 284, 341,
   314, 340, 313, 298, 292, 335, 329, 296, 315, 322, 337, 285, 343, 291, 309, 338, 288, 294, 342, 317, 330, 297, 336, 321, 333, 316,
   343, 286, 292, 339, 312, 341, 315, 290, 296, 331, 337, 298, 322, 314, 335, 299, 320, 321, 306, 318, 304, 316, 332, 333, 308, 309,
   338, 330, 328, 323, 320, 300, 322, 319, 307, 334, 335, 302, 314, 310, 339, 312, 331, 324, 326, 321, 322, 301, 336, 337, 317, 305,
   315, 303, 340, 311, 313, 325, 329, 327, 332, 302, 315, 334, 324, 343, 337, 312, 322, 326, 341, 314, 335, 331, 339, 333, 314, 303,
   342, 335, 336, 325, 322, 313, 341, 327, 315, 329, 337, 340, 304, 334, 317, 323, 332, 309, 321, 343, 336, 328, 316, 342, 333, 338,
   330, 316, 335, 305, 333, 341, 321, 311, 337, 325, 342, 317, 329, 327, 340, 336, 306, 319, 336, 308, 320, 323, 333, 334, 342, 318,
   330, 343, 338, 332, 328, 318, 307, 337, 320, 310, 332, 341, 324, 335, 319, 343, 331, 339, 326, 334, 308, 310, 340, 318, 319, 328,
   342, 326, 341, 320, 338, 339, 343, 334, 332, 309, 339, 311, 330, 343, 316, 317, 341, 327, 338, 321, 340, 336, 342, 333, 338, 312,
   313, 343, 331, 342, 329, 314, 315, 339, 340, 322, 337, 335, 341, 323, 326, 327, 328, 334, 330, 336, 339, 340, 332, 333, 341, 342,
   343, 338, 328, 324, 329, 332, 326, 338, 340, 331, 337, 334, 342, 335, 341, 339, 343, 330, 331, 325, 338, 339, 333, 327, 335, 329,
   343, 336, 337, 340, 341, 342, 344, 365, 366, 347, 359, 349, 361, 393, 394, 353, 354, 407, 383, 385, 382, 367, 345, 369, 360, 348,
   391, 392, 351, 363, 355, 408, 357, 384, 381, 387, 368, 370, 346, 389, 390, 362, 350, 364, 352, 409, 356, 358, 380, 386, 388, 347,
   371, 395, 353, 365, 382, 394, 397, 412, 359, 383, 410, 407, 393, 385, 372, 348, 396, 367, 355, 399, 414, 381, 392, 360, 411, 384,
   408, 387, 391, 349, 397, 373, 382, 393, 354, 366, 410, 395, 385, 361, 412, 394, 407, 383, 374, 398, 350, 400, 415, 368, 356, 390,
   380, 413, 362, 386, 388, 409, 389, 399, 351, 375, 391, 381, 411, 396, 357, 369, 387, 414, 363, 392, 384, 408, 400, 376, 352, 413,
   398, 389, 380, 370, 358, 415, 388, 364, 386, 390, 409, 353, 377, 417, 359, 371, 385, 412, 405, 427, 365, 407, 416, 410, 397, 393,
   354, 416, 378, 383, 410, 361, 373, 427, 406, 407, 366, 417, 395, 412, 394, 377, 355, 420, 372, 360, 403, 426, 387, 414, 367, 418,
   408, 411, 391, 399, 378, 421, 356, 401, 425, 374, 362, 415, 388, 419, 368, 409, 389, 413, 400, 418, 357, 379, 411, 384, 426, 404,
   363, 375, 408, 420, 369, 396, 392, 414, 419, 379, 358, 425, 402, 413, 386, 376, 364, 421, 409, 370, 390, 398, 415, 359, 372, 428,
   365, 377, 393, 427, 403, 430, 371, 410, 422, 416, 405, 397, 371, 360, 429, 377, 367, 405, 432, 391, 426, 372, 422, 411, 418, 399,
   403, 361, 430, 374, 394, 427, 366, 378, 428, 401, 412, 373, 423, 406, 417, 395, 373, 431, 362, 406, 433, 378, 368, 425, 389, 423,
   374, 413, 400, 419, 401, 432, 363, 376, 426, 392, 429, 402, 369, 379, 414, 424, 375, 404, 396, 420, 433, 375, 364, 431, 404, 425,
   390, 379, 370, 424, 415, 376, 398, 402, 421, 365, 367, 434, 371, 372, 397, 430, 399, 432, 377, 416, 418, 422, 403, 405, 366, 434,
   368, 395, 428, 373, 374, 433, 400, 417, 378, 419, 401, 423, 406, 434, 369, 370, 429, 396, 431, 398, 375, 376, 420, 421, 379, 402,
   404, 424, 401, 402, 380, 419, 421, 400, 388, 398, 386, 425, 389, 390, 409, 415, 413, 403, 381, 404, 399, 387, 418, 420, 384, 396,
   391, 426, 392, 414, 408, 411, 382, 405, 406, 385, 397, 383, 395, 416, 417, 393, 394, 427, 412, 410, 407, 383, 422, 401, 407, 416,
   394, 406, 430, 423, 410, 395, 428, 417, 427, 412, 422, 384, 402, 418, 408, 432, 424, 392, 404, 411, 429, 396, 420, 414, 426, 385,
   403, 423, 393, 405, 407, 417, 422, 428, 397, 412, 430, 427, 416, 410, 423, 404, 386, 433, 424, 419, 409, 402, 390, 431, 413, 398,
   415, 421, 425, 405, 387, 424, 403, 391, 422, 429, 408, 420, 399, 432, 414, 426, 411, 418, 406, 424, 388, 423, 431, 401, 389, 421,
   409, 433, 400, 415, 413, 425, 419, 395, 429, 389, 417, 434, 406, 400, 431, 413, 428, 401, 425, 419, 433, 423, 428, 396, 390, 434,
   420, 433, 415, 404, 398, 429, 425, 402, 421, 424, 431, 397, 391, 431, 405, 399, 416, 434, 411, 429, 403, 430, 426, 432, 418, 422,
   430, 392, 398, 432, 414, 434, 421, 396, 402, 426, 431, 404, 424, 420, 429, 393, 399, 433, 397, 403, 410, 428, 418, 434, 405, 427,
   432, 430, 422, 416, 394, 432, 400, 412, 430, 395, 401, 434, 419, 427, 406, 433, 423, 428, 417, 407, 418, 419, 410, 422, 412, 423,
   432, 433, 416, 417, 434, 428, 430, 427, 416, 408, 421, 422, 411, 430, 431, 414, 424, 418, 434, 420, 429, 426, 432, 417, 420, 409,
   428, 429, 423, 413, 424, 415, 434, 419, 421, 425, 431, 433, 410, 411, 425, 416, 418, 427, 433, 426, 431, 422, 428, 429, 434, 432,
   430, 412, 426, 413, 427, 432, 417, 419, 429, 425, 430, 423, 431, 433, 434, 428, 427, 414, 415, 430, 426, 428, 425, 420, 421, 432,
   433, 424, 431, 429, 434, 435, 456, 457, 440, 452, 442, 454, 483, 484, 444, 445, 504, 479, 481, 474, 458, 436, 459, 450, 438, 485,
   487, 443, 455, 446, 505, 447, 477, 475, 482, 460, 461, 437, 486, 488, 451, 439, 453, 441, 506, 448, 449, 476, 478, 480, 462, 438,
   489, 458, 446, 494, 512, 475, 487, 450, 507, 477, 505, 482, 485, 463, 490, 439, 492, 510, 460, 448, 488, 476, 508, 451, 478, 480,
   506, 486, 440, 464, 491, 444, 456, 474, 484, 493, 511, 452, 479, 509, 504, 483, 481, 492, 465, 441, 508, 490, 486, 476, 461, 449,
   510, 480, 453, 478, 488, 506, 442, 493, 466, 474, 483, 445, 457, 509, 491, 481, 454, 511, 484, 504, 479, 494, 443, 467, 485, 475,
   507, 489, 447, 459, 482, 512, 455, 487, 477, 505, 444, 468, 514, 452, 464, 481, 511, 495, 525, 456, 504, 513, 509, 493, 483, 445,
   513, 469, 479, 509, 454, 466, 525, 496, 504, 457, 514, 491, 511, 484, 470, 446, 516, 462, 450, 497, 526, 482, 512, 458, 515, 505,
   507, 485, 494, 515, 447, 471, 507, 477, 526, 499, 455, 467, 505, 516, 459, 489, 487, 512, 472, 518, 448, 498, 527, 463, 451, 510,
   480, 517, 460, 506, 486, 508, 492, 517, 473, 449, 527, 500, 508, 478, 465, 453, 518, 506, 461, 488, 490, 510, 468, 450, 528, 470,
   458, 503, 533, 485, 526, 462, 519, 507, 515, 494, 497, 469, 529, 451, 502, 531, 472, 460, 527, 486, 520, 463, 508, 492, 517, 498,
   452, 470, 530, 456, 468, 483, 525, 503, 532, 464, 509, 521, 513, 495, 493, 531, 471, 453, 529, 501, 527, 488, 473, 461, 522, 510,
   465, 490, 500, 518, 454, 532, 472, 484, 525, 457, 469, 530, 502, 511, 466, 523, 496, 514, 491, 533, 455, 473, 526, 487, 528, 501,
   459, 471, 512, 524, 467, 499, 489, 516, 456, 462, 537, 464, 470, 493, 532, 497, 534, 468, 513, 519, 521, 503, 495, 457, 537, 463,
   491, 530, 466, 472, 535, 498, 514, 469, 520, 502, 523, 496, 464, 458, 538, 468, 462, 495, 534, 494, 533, 470, 521, 515, 519, 497,
   503, 538, 459, 465, 528, 489, 536, 500, 467, 473, 516, 522, 471, 501, 499, 524, 466, 539, 460, 496, 535, 469, 463, 531, 492, 523,
   472, 517, 498, 520, 502, 539, 467, 461, 536, 499, 529, 490, 471, 465, 524, 518, 473, 500, 501, 522, 474, 495, 496, 481, 493, 479,
   491, 513, 514, 483, 484, 525, 511, 509, 504, 497, 475, 499, 494, 482, 515, 516, 477, 489, 485, 526, 487, 512, 505, 507, 498, 500,
   476, 517, 518, 492, 480, 490, 478, 527, 486, 488, 506, 510, 508, 519, 477, 501, 515, 505, 533, 524, 487, 499, 507, 528, 489, 516,
   512, 526, 520, 501, 478, 531, 522, 517, 506, 500, 488, 529, 508, 490, 510, 518, 527, 479, 521, 502, 504, 513, 484, 496, 532, 523,
   509, 491, 530, 514, 525, 511, 502, 522, 480, 520, 529, 498, 486, 518, 506, 531, 492, 510, 508, 527, 517, 481, 503, 523, 483, 495,
   504, 514, 521, 530, 493, 511, 532, 525, 513, 509, 503, 482, 524, 497, 485, 519, 528, 505, 516, 494, 533, 512, 526, 507, 515, 483,
   497, 535, 493, 503, 509, 530, 519, 537, 495, 525, 534, 532, 521, 513, 484, 534, 498, 511, 532, 491, 502, 537, 520, 525, 496, 535,
   523, 530, 514, 495, 485, 536, 503, 494, 521, 538, 507, 528, 497, 534, 526, 533, 515, 519, 496, 536, 486, 523, 539, 502, 492, 529,
   508, 535, 498, 527, 517, 531, 520, 534, 487, 500, 533, 512, 538, 522, 489, 501, 526, 536, 499, 524, 516, 528, 535, 499, 488, 539,
   524, 531, 510, 501, 490, 536, 527, 500, 518, 522, 529, 537, 489, 490, 538, 516, 539, 518, 499, 500, 528, 529, 501, 522, 524, 536,
   491, 538, 492, 514, 537, 496, 498, 539, 517, 530, 502, 531, 520, 535, 523, 493, 494, 539, 495, 497, 513, 537, 515, 538, 503, 532,
   533, 534, 519, 521, 504, 519, 520, 509, 521, 511, 523, 534, 535, 513, 514, 537, 530, 532, 525, 521, 505, 522, 519, 507, 534, 536,
   512, 524, 515, 538, 516, 528, 526, 533, 523, 524, 506, 535, 536, 520, 508, 522, 510, 539, 517, 518, 527, 529, 531, 513, 507, 529,
   521, 515, 532, 539, 526, 536, 519, 537, 528, 538, 533, 534, 514, 528, 508, 530, 538, 523, 517, 536, 527, 537, 520, 529, 531, 539,
   535, 509, 515, 531, 513, 519, 525, 535, 533, 539, 521, 530, 538, 537, 534, 532, 530, 516, 510, 537, 528, 535, 527, 524, 518, 538,
   531, 522, 529, 536, 539, 511, 533, 517, 525, 534, 514, 520, 538, 531, 532, 523, 539, 535, 537, 530, 532, 512, 518, 534, 526, 537,
   529, 516, 522, 533, 539, 524, 536, 528, 538, 525, 526, 527, 532, 533, 530, 531, 528, 529, 534, 535, 536, 539, 538, 537, 540, 561,
   562, 543, 555, 545, 557, 595, 596, 549, 550, 615, 585, 587, 584, 563, 541, 565, 556, 544, 593, 594, 547, 559, 551, 616, 553, 586,
   583, 589, 564, 566, 542, 591, 592, 558, 546, 560, 548, 617, 552, 554, 582, 588, 590, 543, 567, 597, 549, 561, 584, 596, 599, 620,
   555, 585, 618, 615, 595, 587, 568, 544, 598, 563, 551, 601, 622, 583, 594, 556, 619, 586, 616, 589, 593, 545, 599, 569, 584, 595,
   550, 562, 618, 597, 587, 557, 620, 596, 615, 585, 570, 600, 546, 602, 623, 564, 552, 592, 582, 621, 558, 588, 590, 617, 591, 601,
   547, 571, 593, 583, 619, 598, 553, 565, 589, 622, 559, 594, 586, 616, 602, 572, 548, 621, 600, 591, 582, 566, 554, 623, 590, 560,
   588, 592, 617, 549, 573, 625, 555, 567, 587, 620, 607, 641, 561, 615, 624, 618, 599, 595, 550, 624, 574, 585, 618, 557, 569, 641,
   608, 615, 562, 625, 597, 620, 596, 575, 551, 628, 568, 556, 605, 640, 589, 622, 563, 626, 616, 619, 593, 601, 576, 629, 552, 603,
   639, 570, 558, 623, 590, 627, 564, 617, 591, 621, 602, 626, 553, 577, 619, 586, 640, 606, 559, 571, 616, 628, 565, 598, 594, 622,
   627, 578, 554, 639, 604, 621, 588, 572, 560, 629, 617, 566, 592, 600, 623, 555, 579, 642, 561, 573, 595, 641, 611, 644, 567, 618,
   630, 624, 607, 599, 579, 556, 643, 575, 563, 613, 646, 593, 640, 568, 631, 619, 626, 601, 605, 557, 644, 580, 596, 641, 562, 574,
   642, 609, 620, 569, 632, 608, 625, 597, 580, 645, 558, 614, 647, 576, 564, 639, 591, 633, 570, 621, 602, 627, 603, 646, 559, 581,
   640, 594, 643, 610, 565, 577, 622, 634, 571, 606, 598, 628, 647, 581, 560, 645, 612, 639, 592, 578, 566, 635, 623, 572, 600, 604,
   629, 561, 575, 654, 567, 579, 599, 644, 613, 652, 573, 624, 636, 630, 611, 607, 562, 654, 576, 597, 642, 569, 580, 653, 614, 625,
   574, 637, 609, 632, 608, 573, 563, 655, 579, 568, 611, 650, 601, 646, 575, 636, 626, 631, 605, 613, 574, 656, 564, 609, 648, 580,
   570, 647, 602, 637, 576, 627, 603, 633, 614, 655, 565, 578, 643, 598, 651, 612, 571, 581, 628, 638, 577, 610, 606, 634, 656, 577,
   566, 649, 610, 645, 600, 581, 572, 638, 629, 578, 604, 612, 635, 567, 568, 657, 573, 575, 607, 652, 605, 650, 579, 630, 631, 636,
   613, 611, 569, 658, 570, 608, 653, 574, 576, 648, 603, 632, 580, 633, 614, 637, 609, 659, 571, 572, 651, 606, 649, 604, 577, 578,
   634, 635, 581, 612, 610, 638, 603, 604, 582, 627, 629, 602, 590, 600, 588, 639, 591, 592, 617, 623, 621, 605, 583, 606, 601, 589,
   626, 628, 586, 598, 593, 640, 594, 622, 616, 619, 584, 607, 608, 587, 599, 585, 597, 624, 625, 595, 596, 641, 620, 618, 615, 585,
   630, 609, 615, 624, 596, 608, 644, 632, 618, 597, 642, 625, 641, 620, 631, 586, 610, 626, 616, 646, 634, 594, 606, 619, 643, 598,
   628, 622, 640, 587, 611, 632, 595, 607, 615, 625, 630, 642, 599, 620, 644, 641, 624, 618, 633, 612, 588, 647, 635, 627, 617, 604,
   592, 645, 621, 600, 623, 629, 639, 613, 589, 634, 605, 593, 631, 643, 616, 628, 601, 646, 622, 640, 619, 626, 614, 635, 590, 633,
   645, 603, 591, 629, 617, 647, 602, 623, 621, 639, 627, 609, 649, 591, 637, 656, 614, 602, 645, 621, 648, 603, 639, 627, 647, 633,
   648, 610, 592, 656, 638, 647, 623, 612, 600, 649, 639, 604, 629, 635, 645, 611, 593, 651, 613, 601, 636, 655, 619, 643, 605, 650,
   640, 646, 626, 631, 650, 594, 612, 646, 622, 655, 638, 598, 610, 640, 651, 606, 634, 628, 643, 595, 613, 653, 599, 611, 618, 642,
   636, 654, 607, 641, 652, 644, 630, 624, 596, 652, 614, 620, 644, 597, 609, 654, 637, 641, 608, 653, 632, 642, 625, 597, 657, 603,
   625, 654, 608, 614, 658, 633, 642, 609, 648, 637, 653, 632, 657, 598, 604, 655, 628, 659, 635, 606, 612, 643, 649, 610, 638, 634,
   651, 599, 605, 658, 607, 613, 624, 654, 631, 657, 611, 644, 650, 652, 636, 630, 658, 606, 600, 659, 634, 656, 629, 610, 604, 651,
   645, 612, 635, 638, 649, 607, 601, 659, 611, 605, 630, 657, 626, 655, 613, 652, 646, 650, 631, 636, 608, 659, 602, 632, 658, 609,
   603, 656, 627, 653, 614, 647, 633, 648, 637, 615, 636, 637, 618, 630, 620, 632, 652, 653, 624, 625, 654, 642, 644, 641, 636, 616,
   638, 631, 619, 650, 651, 622, 634, 626, 655, 628, 643, 640, 646, 637, 638, 617, 648, 649, 633, 621, 635, 623, 656, 627, 629, 639,
   645, 647, 618, 631, 648, 624, 636, 641, 653, 650, 658, 630, 642, 657, 654, 652, 644, 630, 619, 649, 636, 626, 652, 659, 640, 651,
   631, 657, 643, 655, 646, 650, 620, 650, 633, 641, 652, 625, 637, 657, 648, 644, 632, 658, 653, 654, 642, 632, 651, 621, 653, 659,
   637, 627, 649, 639, 658, 633, 645, 647, 656, 648, 652, 622, 635, 650, 640, 657, 649, 628, 638, 646, 659, 634, 651, 643, 655, 653,
   634, 623, 658, 651, 648, 639, 638, 629, 659, 647, 635, 645, 649, 656, 624, 626, 656, 630, 631, 644, 658, 646, 659, 636, 654, 655,
   657, 650, 652, 625, 655, 627, 642, 657, 632, 633, 659, 647, 654, 637, 656, 648, 658, 653, 654, 628, 629, 657, 643, 658, 645, 634,
   635, 655, 656, 638, 649, 651, 659, 642, 643, 639, 654, 655, 653, 647, 651, 645, 657, 648, 649, 656, 659, 658, 644, 640, 645, 652,
   646, 654, 656, 643, 649, 650, 658, 651, 659, 655, 657, 641, 646, 647, 644, 650, 642, 648, 655, 656, 652, 653, 659, 658, 657, 654
}; // 8.38 kb
static const cart_index_t iCartXY_ab14_a5[4620] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 27, 32, 33,
   24, 39, 26, 40, 30, 31, 36, 43, 37, 45, 41, 46, 47, 48, 42, 44, 24, 22, 29, 25, 39, 30, 35, 41, 28, 36,
   42, 32, 34, 47, 38, 44, 40, 45, 43, 48, 46, 26, 28, 23, 40, 27, 41, 29, 31, 34, 44, 37, 46, 38, 33, 35,
   42, 43, 39, 45, 47, 48, 49, 60, 62, 64, 65, 54, 76, 56, 78, 58, 59, 66, 83, 68, 84, 70, 79, 80, 82, 75,
   77, 58, 50, 63, 52, 74, 66, 67, 77, 57, 64, 82, 60, 61, 84, 69, 79, 71, 81, 73, 83, 78, 59, 61, 51, 73,
   53, 75, 55, 68, 69, 82, 65, 83, 67, 62, 63, 80, 81, 72, 74, 76, 84, 54, 52, 72, 60, 76, 58, 74, 70, 71,
   66, 75, 64, 73, 80, 81, 77, 78, 84, 83, 82, 79, 56, 71, 53, 78, 62, 70, 72, 59, 73, 77, 68, 79, 81, 65,
   74, 75, 83, 76, 84, 80, 82, 70, 57, 55, 71, 72, 77, 63, 75, 61, 79, 80, 78, 69, 76, 67, 82, 73, 74, 81,
   84, 83, 85, 101, 103, 106, 107, 88, 118, 90, 120, 94, 95, 100, 127, 102, 128, 111, 122, 123, 124, 112, 114, 100, 86, 105,
   89, 119, 106, 108, 122, 92, 101, 127, 96, 98, 129, 104, 120, 110, 121, 113, 125, 116, 102, 104, 87, 121, 91, 123, 93, 107,
   108, 128, 103, 129, 105, 97, 99, 118, 119, 109, 115, 117, 126, 94, 89, 115, 96, 126, 100, 119, 114, 110, 106, 124, 101, 113,
   128, 121, 122, 116, 129, 125, 127, 120, 95, 113, 91, 125, 97, 112, 109, 102, 121, 124, 107, 127, 119, 103, 115, 123, 129, 117,
   126, 118, 128, 88, 96, 117, 101, 118, 94, 126, 111, 116, 100, 112, 106, 125, 123, 129, 114, 120, 128, 127, 124, 122, 112, 98,
   93, 113, 109, 124, 99, 123, 104, 127, 118, 125, 108, 117, 105, 128, 121, 115, 119, 126, 129, 90, 116, 97, 120, 103, 111, 117,
   95, 125, 114, 102, 122, 129, 107, 126, 112, 127, 118, 128, 123, 124, 114, 92, 99, 110, 115, 122, 105, 124, 98, 120, 128, 116,
   104, 126, 108, 127, 113, 119, 121, 129, 125, 111, 110, 109, 116, 117, 114, 115, 112, 113, 122, 123, 120, 121, 118, 119, 124, 125,
   126, 129, 128, 127, 130, 153, 155, 151, 152, 135, 173, 137, 174, 139, 140, 147, 180, 149, 182, 157, 166, 167, 175, 162, 164, 151,
   131, 156, 133, 172, 153, 154, 174, 138, 145, 178, 141, 142, 183, 150, 168, 158, 170, 160, 176, 165, 152, 154, 132, 172, 134, 173,
   136, 155, 156, 179, 146, 181, 148, 143, 144, 169, 171, 159, 161, 163, 177, 135, 145, 169, 153, 173, 139, 179, 157, 168, 147, 162,
   151, 178, 167, 184, 164, 174, 182, 180, 175, 166, 147, 133, 171, 141, 181, 151, 172, 166, 158, 153, 180, 145, 160, 184, 170, 174,
   165, 183, 176, 178, 168, 137, 168, 146, 174, 155, 157, 169, 140, 178, 164, 149, 166, 184, 152, 179, 162, 180, 173, 182, 167, 175,
   149, 170, 134, 183, 143, 167, 159, 152, 172, 182, 155, 184, 171, 146, 161, 173, 181, 163, 177, 169, 179, 166, 138, 148, 158, 171,
   174, 156, 180, 142, 168, 184, 165, 150, 181, 154, 178, 160, 172, 170, 183, 176, 167, 150, 136, 170, 159, 182, 144, 173, 154, 184,
   169, 183, 156, 163, 148, 179, 172, 161, 171, 177, 181, 139, 141, 177, 145, 179, 147, 181, 164, 165, 151, 175, 153, 176, 182, 183,
   166, 168, 184, 178, 180, 174, 140, 176, 143, 178, 146, 162, 163, 149, 183, 175, 152, 180, 181, 155, 177, 167, 184, 169, 179, 173,
   182, 175, 142, 144, 160, 161, 180, 148, 182, 150, 178, 179, 176, 154, 177, 156, 184, 170, 171, 172, 181, 183, 162, 160, 159, 176,
   163, 175, 161, 167, 170, 180, 173, 178, 172, 169, 171, 182, 183, 177, 181, 179, 184, 164, 158, 161, 165, 177, 166, 171, 175, 160,
   174, 182, 168, 170, 179, 172, 180, 176, 181, 183, 184, 178, 157, 165, 163, 168, 169, 164, 177, 162, 176, 166, 167, 174, 183, 173,
   181, 175, 178, 179, 184, 182, 180, 185, 212, 213, 206, 207, 188, 230, 190, 232, 194, 195, 200, 239, 202, 241, 217, 228, 229, 236,
   218, 220, 212, 186, 214, 189, 231, 208, 210, 234, 192, 201, 240, 196, 198, 243, 204, 226, 216, 227, 219, 237, 222, 213, 214, 187,
   233, 191, 235, 193, 209, 211, 242, 203, 244, 205, 197, 199, 224, 225, 215, 221, 223, 238, 206, 189, 233, 196, 247, 212, 231, 232,
   216, 208, 245, 201, 219, 249, 227, 234, 222, 243, 237, 240, 226, 207, 231, 191, 247, 197, 230, 215, 213, 233, 246, 209, 248, 225,
   203, 221, 235, 244, 223, 238, 224, 242, 188, 208, 235, 212, 230, 194, 246, 217, 234, 200, 218, 206, 245, 229, 250, 220, 232, 241,
   239, 236, 228, 230, 210, 193, 231, 215, 246, 199, 235, 214, 248, 224, 247, 211, 223, 205, 242, 233, 221, 225, 238, 244, 190, 234,
   209, 232, 213, 217, 235, 195, 245, 220, 202, 228, 250, 207, 246, 218, 239, 230, 241, 229, 236, 232, 192, 211, 216, 233, 234, 214,
   245, 198, 226, 249, 222, 204, 247, 210, 240, 219, 231, 227, 243, 237, 194, 201, 242, 208, 246, 200, 248, 220, 226, 206, 236, 212,
   240, 241, 249, 228, 234, 250, 245, 239, 232, 195, 240, 203, 245, 209, 218, 224, 202, 249, 236, 207, 239, 248, 213, 242, 229, 250,
   235, 246, 230, 241, 200, 196, 244, 201, 248, 206, 247, 228, 222, 212, 239, 208, 237, 250, 243, 232, 226, 249, 240, 245, 234, 239,
   198, 205, 219, 225, 245, 211, 250, 204, 240, 248, 237, 210, 244, 214, 249, 227, 233, 231, 247, 243, 202, 243, 197, 249, 203, 229,
   223, 207, 247, 241, 213, 250, 244, 209, 238, 230, 248, 224, 242, 235, 246, 241, 204, 199, 227, 221, 250, 205, 246, 210, 249, 242,
   243, 214, 238, 211, 248, 231, 225, 233, 244, 247, 217, 226, 224, 234, 235, 220, 242, 218, 240, 228, 229, 232, 249, 230, 248, 236,
   245, 246, 250, 241, 239, 228, 216, 225, 222, 244, 232, 233, 239, 219, 234, 250, 226, 227, 248, 231, 245, 237, 247, 243, 249, 240,
   229, 227, 215, 243, 223, 241, 221, 230, 231, 250, 235, 249, 233, 224, 225, 246, 247, 238, 244, 242, 248, 236, 219, 221, 237, 238,
   239, 225, 241, 227, 245, 246, 240, 231, 242, 233, 250, 243, 244, 247, 248, 249, 218, 237, 223, 240, 224, 236, 238, 229, 243, 239,
   230, 245, 247, 235, 244, 241, 249, 242, 248, 246, 250, 220, 222, 238, 226, 242, 228, 244, 236, 237, 232, 241, 234, 243, 246, 247,
   239, 240, 248, 249, 250, 245, 251, 280, 282, 272, 273, 256, 301, 258, 303, 260, 261, 268, 313, 270, 315, 284, 293, 294, 308, 289,
   291, 278, 252, 283, 254, 299, 274, 275, 304, 259, 266, 311, 262, 263, 316, 271, 295, 285, 297, 287, 309, 292, 279, 281, 253, 300,
   255, 302, 257, 276, 277, 312, 267, 314, 269, 264, 265, 296, 298, 286, 288, 290, 310, 256, 278, 306, 280, 301, 260, 318, 284, 305,
   268, 289, 272, 317, 294, 323, 291, 303, 315, 313, 308, 293, 280, 254, 307, 262, 320, 278, 299, 305, 285, 274, 319, 266, 287, 324,
   297, 304, 292, 316, 309, 311, 295, 258, 305, 279, 303, 282, 284, 306, 261, 317, 291, 270, 293, 323, 273, 318, 289, 313, 301, 315,
   294, 308, 282, 307, 255, 322, 264, 306, 286, 279, 300, 321, 276, 325, 298, 267, 288, 302, 314, 290, 310, 296, 312, 305, 259, 281,
   285, 307, 304, 283, 319, 263, 295, 324, 292, 271, 320, 275, 311, 287, 299, 297, 316, 309, 306, 283, 257, 307, 286, 321, 265, 302,
   281, 325, 296, 322, 277, 290, 269, 312, 300, 288, 298, 310, 314, 260, 274, 321, 278, 318, 268, 327, 291, 304, 272, 308, 280, 319,
   315, 328, 293, 305, 323, 317, 313, 303, 261, 319, 276, 317, 279, 289, 302, 270, 328, 308, 273, 313, 327, 282, 321, 294, 323, 306,
   318, 301, 315, 272, 262, 322, 266, 326, 280, 320, 303, 292, 278, 317, 274, 309, 328, 316, 305, 295, 324, 311, 319, 304, 273, 320,
   264, 326, 267, 301, 290, 282, 322, 318, 279, 327, 314, 276, 310, 306, 325, 296, 312, 302, 321, 317, 263, 277, 287, 300, 319, 281,
   328, 271, 311, 326, 309, 275, 322, 283, 324, 297, 307, 299, 320, 316, 318, 275, 265, 299, 288, 327, 269, 321, 283, 326, 312, 320,
   281, 310, 277, 325, 307, 298, 300, 314, 322, 268, 266, 325, 274, 327, 272, 326, 293, 295, 280, 313, 278, 311, 323, 324, 303, 304,
   328, 319, 317, 305, 270, 324, 267, 328, 276, 294, 296, 273, 326, 315, 282, 323, 325, 279, 312, 301, 327, 302, 321, 306, 318, 323,
   271, 269, 297, 298, 328, 277, 327, 275, 324, 325, 316, 283, 314, 281, 326, 299, 300, 307, 322, 320, 301, 299, 286, 320, 290, 318,
   288, 306, 307, 327, 302, 326, 300, 296, 298, 321, 322, 310, 314, 312, 325, 303, 285, 300, 292, 322, 305, 307, 317, 287, 304, 328,
   295, 297, 326, 299, 319, 309, 320, 316, 324, 311, 284, 304, 302, 305, 306, 291, 321, 289, 319, 293, 294, 303, 328, 301, 327, 308,
   317, 318, 323, 315, 313, 289, 311, 296, 319, 302, 308, 312, 294, 324, 313, 301, 317, 326, 306, 325, 315, 328, 321, 327, 318, 323,
   313, 287, 298, 309, 314, 317, 300, 323, 297, 319, 327, 311, 299, 325, 307, 328, 316, 322, 320, 326, 324, 291, 295, 312, 304, 321,
   293, 325, 308, 311, 303, 315, 305, 324, 318, 326, 313, 319, 327, 328, 323, 317, 315, 297, 288, 316, 310, 323, 298, 318, 299, 328,
   321, 324, 307, 312, 300, 327, 320, 314, 322, 325, 326, 293, 292, 314, 295, 325, 303, 322, 313, 309, 305, 323, 304, 316, 327, 320,
   317, 311, 326, 324, 328, 319, 294, 316, 290, 324, 296, 315, 310, 301, 320, 323, 306, 328, 322, 302, 314, 318, 326, 312, 325, 321,
   327, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 356, 358, 350,
   351, 332, 380, 334, 382, 338, 339, 344, 395, 346, 397, 367, 378, 379, 392, 368, 370, 357, 330, 360, 333, 381, 352, 354, 384, 336,
   345, 396, 340, 342, 399, 348, 376, 366, 377, 369, 393, 372, 359, 361, 331, 383, 335, 385, 337, 353, 355, 398, 347, 400, 349, 341,
   343, 374, 375, 365, 371, 373, 394, 362, 333, 389, 340, 405, 357, 381, 388, 366, 352, 403, 345, 369, 411, 377, 384, 372, 399, 393,
   396, 376, 363, 387, 335, 406, 341, 386, 365, 359, 383, 404, 353, 410, 375, 347, 371, 385, 400, 373, 394, 374, 398, 332, 362, 391,
   356, 380, 338, 402, 367, 390, 344, 368, 350, 401, 379, 412, 370, 382, 397, 395, 392, 378, 386, 364, 337, 387, 365, 404, 343, 385,
   361, 410, 374, 406, 355, 373, 349, 398, 383, 371, 375, 394, 400, 334, 390, 363, 382, 358, 367, 391, 339, 401, 370, 346, 378, 412,
   351, 402, 368, 395, 380, 397, 379, 392, 388, 336, 364, 366, 389, 384, 360, 403, 342, 376, 411, 372, 348, 405, 354, 396, 369, 381,
   377, 399, 393, 338, 357, 408, 362, 402, 344, 413, 370, 388, 350, 392, 356, 407, 397, 415, 378, 390, 412, 401, 395, 382, 339, 407,
   359, 401, 363, 368, 386, 346, 415, 392, 351, 395, 413, 358, 408, 379, 412, 391, 402, 380, 397, 356, 340, 409, 345, 414, 362, 405,
   390, 372, 357, 407, 352, 393, 417, 399, 388, 376, 411, 396, 403, 384, 407, 342, 361, 369, 387, 403, 364, 417, 348, 396, 414, 393,
   354, 409, 360, 411, 377, 389, 381, 405, 399, 358, 409, 341, 416, 347, 391, 373, 363, 406, 408, 359, 418, 400, 353, 394, 386, 410,
   374, 398, 385, 404, 408, 360, 343, 389, 371, 418, 349, 404, 364, 416, 398, 409, 361, 394, 355, 410, 387, 375, 383, 400, 406, 350,
   345, 416, 352, 419, 356, 414, 382, 376, 362, 401, 357, 396, 415, 411, 390, 384, 417, 403, 407, 388, 351, 414, 347, 419, 353, 380,
   374, 358, 416, 402, 363, 413, 410, 359, 398, 391, 418, 385, 404, 386, 408, 344, 352, 418, 357, 413, 350, 419, 378, 384, 356, 395,
   362, 403, 412, 417, 382, 388, 415, 407, 401, 390, 413, 354, 349, 381, 375, 419, 355, 418, 360, 414, 410, 405, 364, 400, 361, 416,
   389, 383, 387, 406, 409, 346, 417, 353, 415, 359, 379, 385, 351, 419, 397, 358, 412, 418, 363, 404, 380, 413, 386, 408, 391, 402,
   415, 348, 355, 377, 383, 417, 361, 419, 354, 411, 416, 399, 360, 406, 364, 414, 381, 387, 389, 409, 405, 367, 388, 386, 390, 391,
   370, 408, 368, 407, 378, 379, 382, 415, 380, 413, 392, 401, 402, 412, 397, 395, 390, 366, 387, 372, 409, 388, 389, 407, 369, 384,
   417, 376, 377, 414, 381, 403, 393, 405, 399, 411, 396, 391, 389, 365, 409, 373, 408, 371, 386, 387, 418, 385, 416, 383, 374, 375,
   404, 406, 394, 400, 398, 410, 401, 369, 383, 393, 406, 407, 387, 415, 377, 403, 419, 396, 381, 416, 389, 417, 399, 409, 405, 414,
   411, 402, 381, 371, 405, 394, 413, 375, 408, 389, 419, 404, 414, 387, 398, 383, 418, 409, 400, 406, 410, 416, 368, 403, 385, 407,
   386, 392, 404, 379, 417, 395, 380, 401, 419, 391, 418, 397, 415, 408, 413, 402, 412, 380, 405, 373, 414, 374, 402, 394, 391, 409,
   413, 386, 419, 406, 385, 400, 408, 416, 398, 410, 404, 418, 370, 384, 404, 388, 408, 378, 418, 392, 403, 382, 397, 390, 417, 402,
   419, 395, 407, 413, 415, 412, 401, 382, 372, 406, 376, 416, 390, 409, 401, 393, 388, 415, 384, 399, 419, 405, 407, 396, 414, 411,
   417, 403, 378, 376, 410, 384, 418, 382, 416, 395, 396, 390, 412, 388, 411, 413, 414, 401, 403, 419, 417, 415, 407, 379, 411, 374,
   417, 385, 397, 398, 380, 414, 412, 391, 415, 416, 386, 410, 402, 419, 404, 418, 408, 413, 412, 377, 375, 399, 400, 415, 383, 413,
   381, 417, 418, 411, 389, 410, 387, 419, 405, 406, 409, 416, 414, 392, 396, 398, 403, 404, 395, 410, 397, 411, 401, 402, 407, 414,
   408, 416, 412, 417, 418, 419, 413, 415, 395, 393, 400, 396, 410, 401, 406, 412, 399, 407, 413, 403, 405, 418, 409, 415, 411, 416,
   414, 419, 417, 397, 399, 394, 411, 398, 412, 400, 402, 405, 415, 408, 417, 409, 404, 406, 413, 414, 410, 416, 418, 419, 420, 449,
   451, 441, 442, 425, 476, 427, 478, 429, 430, 437, 494, 439, 496, 459, 468, 469, 489, 464, 466, 447, 421, 452, 423, 474, 443, 444,
   479, 428, 435, 492, 431, 432, 497, 440, 470, 460, 472, 462, 490, 467, 448, 450, 422, 475, 424, 477, 426, 445, 446, 493, 436, 495,
   438, 433, 434, 471, 473, 461, 463, 465, 491, 425, 453, 481, 449, 476, 429, 499, 459, 480, 437, 464, 441, 498, 469, 510, 466, 478,
   496, 494, 489, 468, 455, 423, 484, 431, 501, 447, 474, 482, 460, 443, 500, 435, 462, 511, 472, 479, 467, 497, 490, 492, 470, 427,
   480, 454, 478, 451, 459, 481, 430, 498, 466, 439, 468, 510, 442, 499, 464, 494, 476, 496, 469, 489, 457, 485, 424, 503, 433, 483,
   461, 448, 475, 502, 445, 512, 473, 436, 463, 477, 495, 465, 491, 471, 493, 482, 428, 456, 460, 484, 479, 452, 500, 432, 470, 511,
   467, 440, 501, 444, 492, 462, 474, 472, 497, 490, 483, 458, 426, 485, 461, 502, 434, 477, 450, 512, 471, 503, 446, 465, 438, 493,
   475, 463, 473, 491, 495, 429, 455, 508, 453, 499, 437, 515, 466, 488, 441, 489, 449, 506, 496, 517, 468, 480, 510, 498, 494, 478,
   430, 506, 457, 498, 454, 464, 487, 439, 517, 489, 442, 494, 515, 451, 508, 469, 510, 481, 499, 476, 496, 453, 431, 509, 435, 513,
   455, 501, 488, 467, 447, 504, 443, 490, 518, 497, 482, 470, 511, 492, 500, 479, 454, 507, 433, 514, 436, 487, 465, 457, 503, 505,
   448, 516, 495, 445, 491, 483, 512, 471, 493, 477, 502, 504, 432, 458, 462, 486, 500, 456, 518, 440, 492, 513, 490, 444, 509, 452,
   511, 472, 484, 474, 501, 497, 505, 456, 434, 486, 463, 516, 438, 502, 458, 514, 493, 507, 450, 491, 446, 512, 485, 473, 475, 495,
   503, 437, 447, 520, 455, 515, 441, 522, 468, 482, 449, 494, 453, 504, 510, 519, 478, 488, 517, 506, 498, 480, 449, 435, 521, 443,
   523, 453, 513, 480, 470, 455, 506, 447, 492, 519, 511, 488, 479, 518, 500, 504, 482, 439, 519, 448, 517, 457, 469, 483, 442, 522,
   496, 451, 510, 520, 454, 505, 476, 515, 487, 508, 481, 499, 451, 521, 436, 524, 445, 481, 471, 454, 514, 508, 457, 520, 512, 448,
   493, 487, 516, 477, 502, 483, 505, 519, 440, 450, 472, 485, 518, 458, 523, 444, 511, 521, 497, 452, 507, 456, 513, 474, 486, 484,
   509, 501, 520, 452, 438, 484, 473, 524, 446, 516, 456, 521, 512, 509, 458, 495, 450, 514, 486, 475, 485, 503, 507, 441, 443, 524,
   447, 522, 449, 523, 478, 479, 453, 498, 455, 500, 517, 518, 480, 482, 519, 504, 506, 488, 442, 523, 445, 522, 448, 476, 477, 451,
   524, 499, 454, 515, 516, 457, 502, 481, 520, 483, 505, 487, 508, 522, 444, 446, 474, 475, 523, 450, 524, 452, 513, 514, 501, 456,
   503, 458, 521, 484, 485, 486, 507, 509, 487, 486, 461, 507, 465, 505, 463, 483, 485, 516, 477, 514, 475, 471, 473, 502, 503, 491,
   495, 493, 512, 488, 460, 486, 467, 509, 482, 484, 504, 462, 479, 518, 470, 472, 513, 474, 500, 490, 501, 497, 511, 492, 459, 488,
   487, 480, 481, 466, 508, 464, 506, 468, 469, 478, 517, 476, 515, 489, 498, 499, 510, 496, 494, 464, 504, 483, 506, 487, 489, 505,
   469, 519, 494, 476, 498, 522, 481, 520, 496, 517, 508, 515, 499, 510, 506, 462, 485, 490, 507, 504, 486, 519, 472, 500, 523, 492,
   474, 521, 484, 518, 497, 509, 501, 513, 511, 466, 482, 505, 488, 508, 468, 520, 489, 504, 478, 496, 480, 519, 499, 522, 494, 506,
   515, 517, 510, 498, 508, 484, 463, 509, 491, 520, 473, 505, 486, 524, 502, 521, 485, 493, 475, 516, 507, 495, 503, 512, 514, 480,
   467, 507, 470, 521, 488, 509, 506, 490, 482, 519, 479, 497, 523, 501, 504, 492, 513, 511, 518, 500, 481, 509, 465, 521, 471, 508,
   491, 487, 507, 520, 483, 524, 503, 477, 495, 505, 514, 493, 512, 502, 516, 476, 513, 471, 523, 477, 499, 493, 481, 521, 515, 487,
   522, 514, 483, 512, 508, 524, 502, 516, 505, 520, 515, 474, 473, 501, 495, 522, 475, 520, 484, 523, 516, 513, 486, 512, 485, 524,
   509, 503, 507, 514, 521, 478, 470, 514, 479, 524, 480, 521, 498, 492, 488, 517, 482, 511, 522, 513, 506, 500, 523, 518, 519, 504,
   517, 472, 475, 497, 503, 519, 485, 522, 474, 518, 524, 511, 484, 514, 486, 523, 501, 507, 509, 521, 513, 468, 479, 516, 482, 520,
   478, 524, 494, 500, 480, 510, 488, 518, 515, 523, 498, 504, 522, 519, 517, 506, 469, 518, 477, 519, 483, 496, 502, 476, 523, 510,
   481, 517, 524, 487, 516, 499, 522, 505, 520, 508, 515, 489, 500, 502, 504, 505, 494, 516, 496, 518, 498, 499, 506, 523, 508, 524,
   510, 519, 520, 522, 515, 517, 498, 490, 503, 492, 514, 506, 507, 517, 497, 504, 522, 500, 501, 524, 509, 519, 511, 521, 513, 523,
   518, 499, 501, 491, 513, 493, 515, 495, 508, 509, 522, 505, 523, 507, 502, 503, 520, 521, 512, 514, 516, 524, 494, 492, 512, 500,
   516, 498, 514, 510, 511, 506, 515, 504, 513, 520, 521, 517, 518, 524, 523, 522, 519, 496, 511, 493, 518, 502, 510, 512, 499, 513,
   517, 508, 519, 521, 505, 514, 515, 523, 516, 524, 520, 522, 510, 497, 495, 511, 512, 517, 503, 515, 501, 519, 520, 518, 509, 516,
   507, 522, 513, 514, 521, 524, 523, 525, 552, 554, 546, 547, 528, 582, 530, 584, 534, 535, 540, 603, 542, 605, 569, 580, 581, 600,
   570, 572, 553, 526, 556, 529, 583, 548, 550, 586, 532, 541, 604, 536, 538, 607, 544, 578, 568, 579, 571, 601, 574, 555, 557, 527,
   585, 531, 587, 533, 549, 551, 606, 543, 608, 545, 537, 539, 576, 577, 567, 573, 575, 602, 560, 529, 591, 536, 613, 553, 583, 590,
   568, 548, 611, 541, 571, 625, 579, 586, 574, 607, 601, 604, 578, 561, 589, 531, 614, 537, 588, 567, 555, 585, 612, 549, 624, 577,
   543, 573, 587, 608, 575, 602, 576, 606, 528, 558, 593, 552, 582, 534, 610, 569, 592, 540, 570, 546, 609, 581, 626, 572, 584, 605,
   603, 600, 580, 588, 563, 533, 589, 567, 612, 539, 587, 557, 624, 576, 614, 551, 575, 545, 606, 585, 573, 577, 602, 608, 530, 592,
   559, 584, 554, 569, 593, 535, 609, 572, 542, 580, 626, 547, 610, 570, 603, 582, 605, 581, 600, 590, 532, 562, 568, 591, 586, 556,
   611, 538, 578, 625, 574, 544, 613, 550, 604, 571, 583, 579, 607, 601, 534, 564, 617, 558, 610, 540, 627, 572, 596, 546, 600, 552,
   615, 605, 629, 580, 592, 626, 609, 603, 584, 535, 615, 565, 609, 559, 570, 594, 542, 629, 600, 547, 603, 627, 554, 617, 581, 626,
   593, 610, 582, 605, 564, 536, 619, 541, 628, 560, 613, 598, 574, 553, 616, 548, 601, 631, 607, 590, 578, 625, 604, 611, 586, 616,
   538, 566, 571, 595, 611, 562, 631, 544, 604, 628, 601, 550, 619, 556, 625, 579, 591, 583, 613, 607, 565, 620, 537, 630, 543, 599,
   575, 561, 614, 618, 555, 632, 608, 549, 602, 588, 624, 576, 606, 587, 612, 618, 566, 539, 597, 573, 632, 545, 612, 563, 630, 606,
   620, 557, 602, 551, 624, 589, 577, 585, 608, 614, 558, 541, 636, 548, 640, 564, 628, 596, 578, 560, 621, 553, 604, 635, 625, 598,
   586, 631, 611, 616, 590, 559, 634, 543, 641, 549, 594, 576, 565, 630, 622, 561, 633, 624, 555, 606, 599, 632, 587, 612, 588, 618,
   540, 560, 638, 564, 627, 546, 639, 580, 598, 552, 603, 558, 621, 626, 637, 584, 596, 629, 615, 609, 592, 633, 562, 545, 595, 577,
   641, 551, 632, 566, 634, 624, 623, 563, 608, 557, 630, 597, 585, 589, 614, 620, 542, 637, 561, 629, 565, 581, 599, 547, 639, 605,
   554, 626, 638, 559, 622, 582, 627, 594, 617, 593, 610, 635, 544, 563, 579, 597, 631, 566, 640, 550, 625, 636, 607, 556, 623, 562,
   628, 583, 595, 591, 619, 613, 546, 553, 643, 560, 639, 552, 642, 584, 590, 558, 609, 564, 616, 629, 635, 592, 598, 637, 621, 615,
   596, 547, 642, 555, 639, 561, 582, 588, 554, 643, 610, 559, 627, 633, 565, 618, 593, 638, 599, 622, 594, 617, 552, 548, 644, 553,
   642, 558, 640, 592, 586, 564, 615, 560, 611, 637, 631, 596, 590, 635, 616, 621, 598, 642, 550, 557, 583, 589, 640, 563, 644, 556,
   628, 634, 613, 562, 620, 566, 636, 591, 597, 595, 623, 619, 554, 644, 549, 643, 555, 593, 587, 559, 641, 617, 565, 638, 632, 561,
   612, 594, 633, 588, 618, 599, 622, 643, 556, 551, 591, 585, 644, 557, 641, 562, 636, 630, 619, 566, 614, 563, 634, 595, 589, 597,
   620, 623, 569, 596, 594, 592, 593, 572, 617, 570, 615, 580, 581, 584, 629, 582, 627, 600, 609, 610, 626, 605, 603, 598, 568, 595,
   574, 619, 590, 591, 616, 571, 586, 631, 578, 579, 628, 583, 611, 601, 613, 607, 625, 604, 599, 597, 567, 620, 575, 618, 573, 588,
   589, 632, 587, 630, 585, 576, 577, 612, 614, 602, 608, 606, 624, 621, 571, 597, 601, 623, 616, 595, 635, 579, 611, 640, 604, 583,
   636, 591, 631, 607, 619, 613, 628, 625, 622, 595, 573, 623, 602, 633, 577, 618, 597, 641, 612, 634, 589, 606, 585, 632, 620, 608,
   614, 624, 630, 570, 621, 599, 615, 594, 600, 622, 581, 637, 603, 582, 609, 639, 593, 638, 605, 629, 617, 627, 610, 626, 594, 623,
   575, 634, 576, 622, 602, 599, 620, 633, 588, 641, 614, 587, 608, 618, 630, 606, 624, 612, 632, 572, 598, 622, 596, 617, 580, 638,
   600, 621, 584, 605, 592, 637, 610, 639, 603, 615, 627, 629, 626, 609, 596, 574, 623, 578, 636, 598, 619, 621, 601, 590, 635, 586,
   607, 640, 613, 616, 604, 628, 625, 631, 611, 580, 590, 633, 598, 638, 584, 643, 603, 616, 592, 626, 596, 635, 627, 642, 609, 621,
   639, 637, 629, 615, 581, 635, 588, 637, 599, 605, 618, 582, 642, 626, 593, 629, 643, 594, 633, 610, 639, 622, 638, 617, 627, 592,
   578, 634, 586, 644, 596, 636, 615, 604, 598, 637, 590, 625, 642, 628, 621, 611, 640, 631, 635, 616, 593, 636, 576, 644, 587, 617,
   606, 594, 634, 638, 599, 643, 630, 588, 624, 622, 641, 612, 632, 618, 633, 637, 579, 589, 607, 620, 635, 597, 642, 583, 631, 644,
   625, 591, 634, 595, 640, 613, 623, 619, 636, 628, 638, 591, 577, 619, 608, 643, 585, 633, 595, 644, 632, 636, 597, 624, 589, 641,
   623, 614, 620, 630, 634, 639, 583, 585, 613, 614, 642, 589, 643, 591, 640, 641, 628, 595, 630, 597, 644, 619, 620, 623, 634, 636,
   582, 640, 587, 642, 588, 610, 612, 593, 644, 627, 594, 639, 641, 599, 632, 617, 643, 618, 633, 622, 638, 584, 586, 641, 590, 643,
   592, 644, 609, 611, 596, 629, 598, 631, 639, 640, 615, 616, 642, 635, 637, 621, 600, 616, 618, 621, 622, 603, 633, 605, 635, 609,
   610, 615, 642, 617, 643, 626, 637, 638, 639, 627, 629, 615, 601, 620, 604, 634, 621, 623, 637, 607, 616, 642, 611, 613, 644, 619,
   635, 625, 636, 628, 640, 631, 617, 619, 602, 636, 606, 638, 608, 622, 623, 643, 618, 644, 620, 612, 614, 633, 634, 624, 630, 632,
   641, 609, 604, 630, 611, 641, 615, 634, 629, 625, 621, 639, 616, 628, 643, 636, 637, 631, 644, 640, 642, 635, 610, 628, 606, 640,
   612, 627, 624, 617, 636, 639, 622, 642, 634, 618, 630, 638, 644, 632, 641, 633, 643, 603, 611, 632, 616, 633, 609, 641, 626, 631,
   615, 627, 621, 640, 638, 644, 629, 635, 643, 642, 639, 637, 627, 613, 608, 628, 624, 639, 614, 638, 619, 642, 633, 640, 623, 632,
   620, 643, 636, 630, 634, 641, 644, 605, 631, 612, 635, 618, 626, 632, 610, 640, 629, 617, 637, 644, 622, 641, 627, 642, 633, 643,
   638, 639, 629, 607, 614, 625, 630, 637, 620, 639, 613, 635, 643, 631, 619, 641, 623, 642, 628, 634, 636, 644, 640, 626, 625, 624,
   631, 632, 629, 630, 627, 628, 637, 638, 635, 636, 633, 634, 639, 640, 641, 644, 643, 642
}; // 9.02 kb
static const cart_index_t iCartXY_ab14_a6[4620] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
   26, 27, 28, 31, 32, 33, 39, 35, 41, 50, 51, 37, 38, 43, 44, 52, 53, 45, 47, 60, 55, 57, 49, 54, 62, 56,
   63, 58, 59, 61, 33, 29, 34, 37, 31, 49, 51, 36, 42, 45, 54, 39, 55, 40, 46, 43, 59, 48, 53, 50, 56, 61,
   52, 58, 60, 57, 63, 62, 35, 36, 30, 49, 50, 38, 32, 40, 34, 56, 47, 57, 41, 48, 42, 58, 44, 46, 51, 52,
   54, 59, 60, 61, 53, 62, 55, 63, 64, 75, 76, 67, 80, 69, 82, 95, 96, 73, 74, 85, 86, 104, 105, 79, 81, 108,
   97, 99, 90, 91, 106, 93, 107, 101, 102, 103, 73, 65, 78, 79, 68, 93, 94, 71, 84, 85, 103, 75, 105, 77, 87, 80,
   107, 83, 98, 89, 101, 106, 92, 99, 100, 95, 108, 104, 74, 77, 66, 91, 92, 81, 70, 83, 72, 103, 86, 104, 76, 87,
   78, 106, 82, 84, 88, 100, 102, 97, 98, 107, 94, 108, 96, 105, 67, 68, 88, 73, 75, 90, 96, 89, 94, 79, 91, 80,
   97, 92, 98, 85, 102, 100, 105, 95, 93, 103, 104, 101, 108, 99, 107, 106, 69, 89, 70, 90, 95, 74, 76, 92, 88, 93,
   81, 99, 82, 100, 94, 101, 86, 98, 96, 104, 91, 102, 108, 103, 105, 106, 97, 107, 90, 71, 72, 93, 89, 91, 88, 77,
   78, 101, 102, 95, 96, 83, 84, 99, 97, 87, 94, 92, 103, 107, 100, 106, 98, 104, 105, 108, 109, 124, 125, 114, 132, 116,
   134, 147, 148, 118, 119, 130, 131, 157, 158, 126, 128, 163, 152, 153, 136, 141, 159, 143, 161, 145, 146, 154, 126, 110, 127, 130,
   112, 145, 150, 117, 135, 132, 159, 120, 160, 121, 133, 124, 163, 129, 151, 137, 153, 157, 139, 147, 149, 144, 162, 155, 128, 129,
   111, 146, 149, 131, 113, 133, 115, 161, 134, 162, 122, 135, 123, 163, 125, 127, 138, 151, 152, 148, 150, 158, 140, 160, 142, 156,
   118, 112, 140, 126, 120, 143, 156, 137, 150, 130, 154, 124, 158, 139, 151, 132, 161, 149, 160, 144, 145, 159, 155, 153, 162, 147,
   163, 157, 119, 139, 113, 141, 155, 128, 122, 149, 138, 154, 131, 157, 125, 151, 140, 159, 134, 150, 142, 162, 146, 152, 160, 161,
   156, 163, 148, 158, 114, 120, 142, 118, 124, 136, 148, 144, 156, 126, 141, 132, 152, 155, 160, 130, 146, 162, 158, 147, 143, 154,
   157, 145, 163, 153, 161, 159, 141, 121, 115, 154, 139, 146, 138, 129, 123, 159, 152, 155, 142, 133, 127, 157, 148, 135, 140, 149,
   161, 158, 151, 163, 150, 162, 156, 160, 116, 144, 122, 136, 147, 119, 125, 155, 142, 143, 128, 153, 134, 162, 156, 145, 131, 160,
   148, 157, 141, 146, 163, 154, 158, 159, 152, 161, 143, 117, 123, 145, 137, 154, 140, 121, 127, 153, 161, 144, 156, 129, 135, 147,
   158, 133, 150, 139, 159, 163, 149, 157, 151, 155, 160, 162, 136, 137, 138, 143, 144, 141, 142, 139, 140, 145, 146, 147, 148, 149,
   150, 153, 152, 151, 156, 155, 154, 161, 162, 159, 160, 157, 158, 163, 164, 187, 188, 167, 191, 169, 192, 213, 214, 173, 174, 185,
   186, 224, 225, 179, 181, 229, 209, 211, 196, 197, 218, 199, 220, 207, 208, 215, 185, 165, 190, 191, 168, 211, 212, 171, 193, 187,
   224, 175, 226, 177, 189, 180, 228, 183, 210, 195, 213, 219, 198, 205, 206, 201, 222, 216, 186, 189, 166, 209, 210, 192, 170, 193,
   172, 225, 188, 226, 176, 190, 178, 227, 182, 184, 194, 212, 214, 203, 204, 221, 200, 223, 202, 217, 167, 180, 203, 173, 187, 196,
   214, 205, 221, 179, 197, 191, 209, 219, 227, 185, 208, 228, 225, 213, 199, 215, 224, 207, 229, 211, 220, 218, 179, 168, 204, 185,
   175, 207, 223, 195, 212, 191, 218, 180, 227, 198, 210, 187, 229, 206, 226, 201, 211, 224, 216, 213, 222, 205, 228, 219, 169, 205,
   182, 196, 213, 174, 188, 219, 203, 199, 181, 211, 192, 228, 221, 207, 186, 227, 214, 224, 197, 208, 229, 215, 225, 218, 209, 220,
   181, 206, 170, 208, 222, 186, 176, 210, 194, 220, 192, 228, 182, 212, 200, 229, 188, 204, 202, 226, 209, 214, 223, 225, 217, 227,
   203, 221, 207, 171, 184, 211, 195, 218, 204, 177, 190, 213, 229, 201, 223, 183, 193, 205, 227, 189, 212, 198, 224, 228, 206, 219,
   210, 216, 226, 222, 208, 183, 172, 220, 206, 209, 194, 189, 178, 229, 214, 222, 202, 193, 184, 228, 203, 190, 200, 210, 225, 221,
   212, 227, 204, 226, 217, 223, 173, 175, 217, 179, 180, 199, 221, 201, 223, 185, 215, 187, 225, 216, 226, 191, 220, 222, 227, 205,
   207, 218, 219, 211, 228, 213, 229, 224, 174, 216, 176, 197, 219, 181, 182, 222, 202, 215, 186, 224, 188, 226, 217, 218, 192, 223,
   203, 228, 208, 209, 227, 220, 221, 229, 214, 225, 215, 177, 178, 218, 198, 220, 200, 183, 184, 224, 225, 216, 217, 189, 190, 219,
   221, 193, 204, 206, 229, 227, 210, 228, 212, 222, 223, 226, 197, 198, 194, 215, 216, 208, 202, 206, 200, 218, 209, 219, 203, 210,
   204, 224, 214, 212, 217, 222, 220, 225, 226, 229, 223, 228, 221, 227, 199, 195, 200, 207, 201, 215, 217, 198, 204, 211, 220, 205,
   221, 206, 212, 213, 225, 210, 223, 216, 218, 229, 222, 224, 226, 219, 227, 228, 196, 201, 202, 199, 205, 197, 203, 216, 217, 207,
   208, 213, 214, 222, 223, 211, 209, 226, 221, 219, 215, 220, 228, 218, 227, 224, 225, 229, 230, 257, 258, 235, 259, 237, 261, 284,
   285, 239, 240, 251, 252, 296, 297, 247, 249, 302, 280, 282, 263, 268, 292, 270, 294, 272, 273, 287, 259, 231, 260, 257, 233, 284,
   286, 238, 262, 253, 298, 241, 299, 242, 254, 245, 303, 250, 278, 264, 283, 290, 266, 274, 276, 271, 295, 288, 261, 262, 232, 285,
   286, 258, 234, 260, 236, 300, 255, 301, 243, 256, 244, 304, 246, 248, 265, 279, 281, 275, 277, 291, 267, 293, 269, 289, 251, 233,
   279, 259, 241, 282, 301, 264, 286, 257, 296, 245, 305, 266, 278, 253, 307, 276, 299, 271, 284, 298, 288, 283, 295, 274, 303, 290,
   252, 278, 234, 280, 299, 261, 243, 286, 265, 297, 258, 305, 246, 279, 267, 306, 255, 277, 269, 301, 285, 281, 293, 300, 289, 304,
   275, 291, 235, 253, 281, 239, 257, 263, 285, 283, 300, 247, 268, 259, 280, 298, 306, 251, 273, 307, 297, 284, 270, 287, 296, 272,
   302, 282, 294, 292, 280, 254, 236, 297, 278, 285, 265, 262, 244, 306, 281, 299, 269, 260, 248, 305, 275, 256, 267, 286, 300, 291,
   279, 304, 277, 301, 289, 293, 237, 283, 255, 263, 284, 240, 258, 298, 281, 270, 249, 282, 261, 307, 300, 272, 252, 306, 285, 296,
   268, 273, 302, 287, 297, 292, 280, 294, 282, 238, 256, 284, 264, 296, 279, 242, 260, 283, 307, 271, 301, 250, 262, 274, 305, 254,
   286, 266, 298, 303, 276, 290, 278, 288, 299, 295, 239, 245, 291, 247, 253, 270, 300, 274, 304, 251, 287, 257, 297, 290, 305, 259,
   294, 303, 306, 283, 272, 292, 298, 282, 307, 284, 302, 296, 240, 290, 246, 268, 298, 249, 255, 303, 275, 287, 252, 296, 258, 305,
   291, 292, 261, 304, 281, 307, 273, 280, 306, 294, 300, 302, 285, 297, 247, 241, 293, 251, 245, 272, 304, 271, 301, 259, 292, 253,
   306, 288, 299, 257, 302, 295, 305, 274, 282, 296, 290, 284, 303, 283, 307, 298, 292, 242, 248, 296, 266, 302, 277, 250, 256, 298,
   306, 288, 293, 254, 260, 290, 304, 262, 279, 276, 307, 305, 278, 303, 286, 295, 301, 299, 249, 295, 243, 273, 303, 252, 246, 299,
   269, 294, 261, 307, 255, 301, 289, 302, 258, 293, 275, 305, 280, 285, 304, 297, 291, 306, 281, 300, 294, 250, 244, 302, 276, 297,
   267, 254, 248, 307, 300, 295, 289, 262, 256, 303, 291, 260, 277, 278, 306, 304, 286, 305, 279, 299, 293, 301, 263, 274, 275, 270,
   283, 268, 281, 290, 291, 272, 273, 284, 285, 303, 304, 282, 280, 305, 300, 298, 287, 294, 307, 292, 306, 296, 297, 302, 272, 264,
   277, 282, 271, 292, 293, 266, 279, 284, 302, 274, 304, 276, 286, 283, 306, 278, 301, 288, 296, 307, 295, 298, 299, 290, 305, 303,
   273, 276, 265, 294, 295, 280, 269, 278, 267, 302, 285, 303, 275, 286, 277, 307, 281, 279, 289, 299, 297, 300, 301, 306, 293, 305,
   291, 304, 287, 266, 267, 292, 288, 294, 289, 276, 277, 296, 297, 290, 291, 278, 279, 298, 300, 286, 293, 295, 302, 306, 299, 307,
   301, 303, 304, 305, 268, 288, 269, 287, 290, 273, 275, 295, 289, 292, 280, 298, 281, 299, 293, 296, 285, 301, 291, 303, 294, 297,
   305, 302, 304, 307, 300, 306, 270, 271, 289, 272, 274, 287, 291, 288, 293, 282, 294, 283, 300, 295, 301, 284, 297, 299, 304, 290,
   292, 302, 303, 296, 305, 298, 306, 307, 308, 341, 342, 311, 335, 313, 337, 369, 370, 317, 318, 329, 330, 380, 381, 323, 325, 391,
   359, 361, 346, 347, 374, 349, 376, 357, 358, 371, 341, 309, 343, 336, 312, 367, 368, 315, 339, 331, 382, 319, 384, 321, 333, 324,
   390, 327, 360, 345, 363, 375, 348, 355, 356, 351, 378, 372, 342, 343, 310, 365, 366, 338, 314, 340, 316, 383, 332, 385, 320, 334,
   322, 389, 326, 328, 344, 362, 364, 353, 354, 377, 350, 379, 352, 373, 311, 336, 365, 317, 341, 346, 370, 367, 387, 323, 347, 335,
   359, 386, 392, 329, 358, 394, 381, 369, 349, 371, 380, 357, 391, 361, 376, 374, 335, 312, 366, 341, 319, 369, 388, 345, 368, 336,
   386, 324, 393, 348, 360, 331, 396, 356, 384, 351, 367, 382, 372, 363, 378, 355, 390, 375, 313, 367, 338, 346, 369, 318, 342, 386,
   365, 349, 325, 361, 337, 394, 387, 357, 330, 392, 370, 380, 347, 358, 391, 371, 381, 374, 359, 376, 337, 368, 314, 370, 388, 342,
   320, 366, 344, 387, 338, 395, 326, 362, 350, 397, 332, 354, 352, 385, 365, 364, 379, 383, 373, 389, 353, 377, 369, 315, 340, 367,
   345, 386, 366, 321, 343, 363, 396, 351, 388, 327, 339, 355, 393, 333, 368, 348, 382, 390, 356, 375, 360, 372, 384, 378, 370, 339,
   316, 387, 368, 365, 344, 343, 322, 397, 364, 388, 352, 340, 328, 395, 353, 334, 350, 366, 383, 377, 362, 389, 354, 385, 373, 379,
   317, 331, 383, 323, 336, 349, 387, 363, 397, 329, 371, 341, 381, 382, 398, 335, 376, 396, 392, 367, 357, 374, 386, 361, 394, 369,
   391, 380, 318, 382, 332, 347, 386, 325, 338, 396, 364, 371, 330, 380, 342, 398, 383, 374, 337, 397, 365, 394, 358, 359, 392, 376,
   387, 391, 370, 381, 329, 319, 385, 335, 324, 361, 395, 351, 388, 341, 380, 331, 398, 372, 384, 336, 394, 378, 393, 355, 369, 386,
   375, 367, 390, 363, 396, 382, 330, 384, 320, 359, 393, 337, 326, 388, 352, 381, 342, 398, 332, 385, 373, 392, 338, 379, 353, 395,
   370, 365, 389, 387, 377, 397, 364, 383, 380, 321, 334, 386, 348, 394, 362, 327, 340, 382, 398, 372, 385, 333, 343, 375, 395, 339,
   366, 356, 396, 393, 360, 390, 368, 378, 388, 384, 381, 333, 322, 392, 360, 387, 350, 339, 328, 398, 383, 384, 373, 343, 334, 393,
   377, 340, 354, 368, 397, 389, 366, 395, 362, 388, 379, 385, 323, 324, 389, 329, 331, 357, 397, 355, 395, 335, 374, 336, 392, 375,
   393, 341, 391, 390, 398, 363, 361, 380, 382, 369, 396, 367, 394, 386, 325, 390, 326, 358, 396, 330, 332, 393, 353, 376, 337, 394,
   338, 395, 377, 391, 342, 389, 364, 398, 359, 370, 397, 381, 383, 392, 365, 387, 391, 327, 328, 394, 356, 392, 354, 333, 334, 396,
   397, 378, 379, 339, 340, 390, 389, 343, 362, 360, 398, 395, 368, 393, 366, 384, 385, 388, 359, 360, 344, 381, 384, 370, 352, 368,
   350, 392, 365, 393, 353, 366, 354, 398, 364, 362, 373, 388, 387, 383, 385, 397, 379, 395, 377, 389, 361, 345, 362, 369, 351, 380,
   385, 348, 366, 367, 394, 355, 395, 356, 368, 363, 398, 360, 388, 372, 386, 396, 378, 382, 384, 375, 393, 390, 346, 363, 364, 349,
   367, 347, 365, 382, 383, 357, 358, 369, 370, 396, 397, 361, 359, 398, 387, 386, 371, 376, 394, 374, 392, 380, 381, 391, 347, 375,
   353, 371, 382, 358, 364, 390, 377, 374, 359, 386, 365, 393, 389, 380, 370, 395, 383, 396, 376, 381, 398, 391, 397, 394, 387, 392,
   374, 348, 354, 380, 372, 391, 379, 356, 362, 386, 392, 375, 389, 360, 366, 382, 397, 368, 385, 378, 394, 398, 384, 396, 388, 390,
   395, 393, 349, 355, 377, 357, 363, 371, 383, 375, 389, 361, 376, 367, 387, 390, 395, 369, 381, 393, 397, 382, 374, 391, 396, 380,
   398, 386, 392, 394, 376, 356, 350, 391, 378, 381, 373, 360, 354, 394, 387, 390, 377, 368, 362, 396, 383, 366, 379, 384, 392, 397,
   388, 398, 385, 393, 389, 395, 357, 351, 379, 361, 355, 374, 389, 372, 385, 369, 391, 363, 397, 378, 388, 367, 392, 384, 395, 375,
   380, 394, 390, 386, 393, 382, 398, 396, 358, 378, 352, 376, 390, 359, 353, 384, 373, 391, 370, 396, 364, 388, 379, 394, 365, 385,
   377, 393, 381, 387, 395, 392, 389, 398, 383, 397, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386,
   387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 432, 433, 404, 428, 406, 430, 459, 460, 408, 409, 420, 421, 477,
   478, 416, 418, 489, 455, 457, 438, 443, 473, 445, 475, 447, 448, 468, 434, 400, 435, 426, 402, 461, 463, 407, 431, 422, 479, 410,
   480, 411, 423, 414, 490, 419, 453, 439, 458, 471, 441, 449, 451, 446, 476, 469, 436, 437, 401, 462, 464, 427, 403, 429, 405, 481,
   424, 482, 412, 425, 413, 491, 415, 417, 440, 454, 456, 450, 452, 472, 442, 474, 444, 470, 432, 402, 465, 434, 410, 467, 488, 439,
   463, 426, 483, 414, 492, 441, 453, 422, 497, 451, 480, 446, 461, 479, 469, 458, 476, 449, 490, 471, 433, 465, 403, 466, 486, 436,
   412, 464, 440, 484, 427, 493, 415, 454, 442, 495, 424, 452, 444, 482, 462, 456, 474, 481, 470, 491, 450, 472, 404, 434, 466, 408,
   432, 438, 460, 467, 487, 416, 443, 428, 455, 485, 494, 420, 448, 496, 478, 459, 445, 468, 477, 447, 489, 457, 475, 473, 466, 435,
   405, 484, 465, 462, 440, 437, 413, 495, 456, 486, 444, 429, 417, 493, 450, 425, 442, 464, 481, 472, 454, 491, 452, 482, 470, 474,
   406, 467, 436, 438, 459, 409, 433, 485, 466, 445, 418, 457, 430, 496, 487, 447, 421, 494, 460, 477, 443, 448, 489, 468, 478, 473,
   455, 475, 467, 407, 437, 461, 439, 483, 465, 411, 435, 458, 497, 446, 488, 419, 431, 449, 492, 423, 463, 441, 479, 490, 451, 471,
   453, 469, 480, 476, 408, 426, 484, 416, 434, 445, 487, 461, 499, 420, 468, 432, 478, 483, 501, 428, 475, 498, 494, 467, 447, 473,
   485, 457, 496, 459, 489, 477, 409, 483, 427, 443, 485, 418, 436, 498, 462, 468, 421, 477, 433, 501, 484, 473, 430, 499, 466, 496,
   448, 455, 494, 475, 487, 489, 460, 478, 428, 410, 486, 432, 414, 459, 500, 446, 488, 434, 485, 422, 502, 469, 480, 426, 498, 476,
   492, 449, 467, 483, 471, 461, 490, 458, 497, 479, 485, 411, 429, 483, 441, 498, 464, 419, 437, 479, 502, 469, 486, 423, 435, 471,
   500, 431, 465, 451, 497, 492, 453, 490, 463, 476, 488, 480, 430, 488, 412, 460, 500, 433, 415, 486, 444, 487, 436, 503, 424, 482,
   470, 499, 427, 474, 450, 493, 466, 462, 491, 484, 472, 495, 456, 481, 487, 431, 413, 499, 463, 484, 442, 435, 417, 503, 481, 488,
   470, 437, 425, 500, 472, 429, 452, 465, 495, 491, 464, 493, 454, 486, 474, 482, 420, 414, 493, 428, 422, 457, 503, 449, 500, 432,
   477, 426, 501, 471, 492, 434, 496, 490, 502, 458, 459, 485, 479, 467, 497, 461, 498, 483, 421, 492, 415, 455, 502, 430, 424, 500,
   450, 478, 433, 501, 427, 493, 472, 494, 436, 491, 456, 503, 460, 466, 495, 487, 481, 499, 462, 484, 416, 422, 495, 420, 426, 447,
   499, 458, 503, 428, 473, 434, 494, 479, 502, 432, 489, 497, 501, 461, 457, 477, 483, 459, 498, 467, 496, 485, 494, 423, 417, 501,
   453, 499, 452, 431, 425, 502, 495, 480, 474, 435, 429, 492, 491, 437, 454, 463, 503, 493, 465, 500, 464, 488, 482, 486, 418, 497,
   424, 448, 498, 421, 427, 502, 456, 475, 430, 496, 436, 503, 481, 489, 433, 495, 462, 501, 455, 460, 499, 478, 484, 494, 466, 487,
   496, 419, 425, 498, 451, 501, 454, 423, 429, 497, 503, 476, 482, 431, 437, 490, 493, 435, 464, 453, 502, 500, 463, 492, 465, 480,
   486, 488, 438, 461, 462, 445, 467, 443, 466, 483, 484, 447, 448, 459, 460, 498, 499, 457, 455, 501, 487, 485, 468, 475, 496, 473,
   494, 477, 478, 489, 459, 439, 464, 467, 446, 485, 486, 441, 465, 461, 498, 449, 500, 451, 463, 458, 502, 453, 488, 469, 483, 497,
   476, 479, 480, 471, 492, 490, 460, 463, 440, 487, 488, 466, 444, 465, 442, 499, 462, 500, 450, 464, 452, 503, 456, 454, 470, 486,
   484, 481, 482, 495, 474, 493, 472, 491, 477, 441, 454, 485, 469, 496, 482, 451, 464, 483, 501, 471, 493, 453, 465, 479, 503, 463,
   486, 476, 498, 502, 480, 497, 488, 490, 500, 492, 478, 453, 442, 494, 480, 487, 470, 463, 452, 501, 484, 492, 472, 465, 454, 502,
   481, 464, 474, 488, 499, 495, 486, 503, 482, 500, 491, 493, 443, 479, 456, 468, 483, 448, 462, 497, 481, 473, 455, 485, 466, 502,
   495, 477, 460, 503, 484, 498, 475, 478, 501, 489, 499, 496, 487, 494, 455, 480, 444, 478, 492, 460, 450, 488, 470, 494, 466, 502,
   456, 486, 474, 501, 462, 482, 472, 500, 487, 484, 493, 499, 491, 503, 481, 495, 445, 458, 481, 447, 461, 468, 484, 479, 495, 457,
   475, 467, 487, 497, 503, 459, 478, 502, 499, 483, 473, 489, 498, 477, 501, 485, 494, 496, 457, 446, 482, 459, 449, 477, 493, 469,
   486, 467, 496, 458, 503, 476, 488, 461, 501, 480, 500, 471, 485, 498, 490, 483, 492, 479, 502, 497, 447, 449, 491, 457, 458, 473,
   495, 471, 493, 459, 489, 461, 499, 490, 500, 467, 494, 492, 503, 479, 477, 496, 497, 485, 502, 483, 501, 498, 448, 490, 450, 475,
   497, 455, 456, 492, 472, 489, 460, 498, 462, 500, 491, 496, 466, 493, 481, 502, 478, 487, 503, 494, 495, 501, 484, 499, 489, 451,
   452, 496, 476, 494, 474, 453, 454, 498, 499, 490, 491, 463, 464, 497, 495, 465, 482, 480, 501, 503, 488, 502, 486, 492, 493, 500,
   468, 471, 472, 473, 479, 475, 481, 490, 491, 477, 478, 483, 484, 492, 493, 485, 487, 500, 495, 497, 489, 494, 502, 496, 503, 498,
   499, 501, 473, 469, 474, 477, 471, 489, 491, 476, 482, 485, 494, 479, 495, 480, 486, 483, 499, 488, 493, 490, 496, 501, 492, 498,
   500, 497, 503, 502, 475, 476, 470, 489, 490, 478, 472, 480, 474, 496, 487, 497, 481, 488, 482, 498, 484, 486, 491, 492, 494, 499,
   500, 501, 493, 502, 495, 503, 504, 537, 538, 507, 531, 509, 533, 571, 572, 513, 514, 525, 526, 588, 589, 519, 521, 605, 561, 563,
   548, 549, 582, 551, 584, 559, 560, 579, 539, 505, 541, 532, 508, 569, 570, 511, 535, 527, 590, 515, 592, 517, 529, 520, 604, 523,
   562, 547, 565, 583, 550, 557, 558, 553, 586, 580, 540, 542, 506, 567, 568, 534, 510, 536, 512, 591, 528, 593, 516, 530, 518, 603,
   522, 524, 546, 564, 566, 555, 556, 585, 552, 587, 554, 581, 507, 543, 573, 513, 537, 548, 572, 575, 596, 519, 549, 531, 561, 594,
   606, 525, 560, 608, 589, 571, 551, 579, 588, 559, 605, 563, 584, 582, 543, 508, 574, 539, 515, 577, 598, 547, 570, 532, 595, 520,
   607, 550, 562, 527, 610, 558, 592, 553, 569, 590, 580, 565, 586, 557, 604, 583, 509, 575, 544, 548, 571, 514, 538, 594, 573, 551,
   521, 563, 533, 608, 596, 559, 526, 606, 572, 588, 549, 560, 605, 579, 589, 582, 561, 584, 544, 576, 510, 578, 599, 540, 516, 568,
   546, 597, 534, 609, 522, 564, 552, 611, 528, 556, 554, 593, 567, 566, 587, 591, 581, 603, 555, 585, 577, 511, 545, 569, 547, 595,
   574, 517, 541, 565, 610, 553, 598, 523, 535, 557, 607, 529, 570, 550, 590, 604, 558, 583, 562, 580, 592, 586, 578, 545, 512, 597,
   576, 567, 546, 542, 518, 611, 566, 599, 554, 536, 524, 609, 555, 530, 552, 568, 591, 585, 564, 603, 556, 593, 581, 587, 513, 539,
   601, 519, 543, 551, 596, 577, 617, 525, 579, 537, 589, 600, 618, 531, 584, 616, 606, 575, 559, 582, 594, 563, 608, 571, 605, 588,
   514, 600, 540, 549, 594, 521, 544, 616, 578, 579, 526, 588, 538, 618, 601, 582, 533, 617, 573, 608, 560, 561, 606, 584, 596, 605,
   572, 589, 537, 515, 602, 543, 520, 575, 615, 553, 598, 539, 600, 527, 619, 580, 592, 532, 614, 586, 607, 557, 577, 595, 583, 569,
   604, 565, 610, 590, 538, 602, 516, 573, 613, 544, 522, 599, 554, 601, 540, 620, 528, 593, 581, 612, 534, 587, 555, 609, 578, 567,
   603, 597, 585, 611, 566, 591, 600, 517, 542, 595, 550, 614, 576, 523, 545, 590, 619, 580, 602, 529, 541, 583, 615, 535, 574, 558,
   610, 607, 562, 604, 570, 586, 598, 592, 601, 541, 518, 612, 574, 597, 552, 545, 524, 620, 591, 602, 581, 542, 530, 613, 585, 536,
   556, 576, 611, 603, 568, 609, 564, 599, 587, 593, 519, 532, 612, 525, 539, 559, 617, 569, 622, 531, 582, 543, 606, 595, 621, 537,
   605, 614, 618, 577, 563, 588, 600, 571, 616, 575, 608, 594, 531, 520, 613, 537, 527, 571, 623, 557, 615, 543, 594, 532, 621, 583,
   607, 539, 616, 604, 619, 565, 575, 600, 590, 577, 610, 569, 614, 595, 521, 614, 534, 560, 616, 526, 540, 621, 567, 584, 533, 608,
   544, 622, 597, 605, 538, 612, 578, 618, 561, 572, 617, 589, 601, 606, 573, 596, 533, 615, 522, 572, 623, 538, 528, 613, 555, 596,
   544, 622, 534, 609, 585, 617, 540, 603, 566, 620, 573, 578, 611, 601, 591, 612, 567, 597, 616, 523, 536, 614, 558, 621, 568, 529,
   542, 610, 623, 586, 599, 535, 545, 604, 613, 541, 576, 562, 619, 615, 570, 607, 574, 592, 602, 598, 617, 535, 524, 622, 570, 612,
   556, 541, 530, 623, 611, 598, 587, 545, 536, 615, 603, 542, 564, 574, 620, 609, 576, 613, 568, 602, 593, 599, 525, 527, 620, 531,
   532, 563, 622, 565, 623, 537, 588, 539, 618, 590, 619, 543, 608, 610, 621, 569, 571, 594, 595, 575, 614, 577, 616, 600, 526, 619,
   528, 561, 621, 533, 534, 623, 566, 589, 538, 618, 540, 620, 591, 606, 544, 611, 567, 622, 572, 573, 612, 596, 597, 617, 578, 601,
   618, 529, 530, 621, 562, 622, 564, 535, 536, 619, 620, 592, 593, 541, 542, 607, 609, 545, 568, 570, 623, 613, 574, 615, 576, 598,
   599, 602, 573, 574, 546, 601, 602, 578, 554, 576, 552, 612, 567, 613, 555, 568, 556, 620, 566, 564, 581, 599, 597, 591, 593, 611,
   587, 609, 585, 603, 575, 547, 576, 577, 553, 600, 602, 550, 574, 569, 614, 557, 615, 558, 570, 565, 619, 562, 598, 580, 595, 610,
   586, 590, 592, 583, 607, 604, 548, 577, 578, 551, 575, 549, 573, 600, 601, 559, 560, 571, 572, 616, 617, 563, 561, 618, 596, 594,
   579, 584, 608, 582, 606, 588, 589, 605, 549, 595, 567, 579, 600, 560, 578, 614, 597, 582, 561, 594, 573, 621, 612, 588, 572, 622,
   601, 616, 584, 589, 618, 605, 617, 608, 596, 606, 594, 550, 568, 600, 580, 616, 599, 558, 576, 595, 621, 583, 613, 562, 574, 590,
   623, 570, 602, 586, 614, 619, 592, 610, 598, 604, 615, 607, 551, 569, 597, 559, 577, 579, 601, 595, 612, 563, 584, 575, 596, 614,
   622, 571, 589, 621, 617, 600, 582, 605, 616, 588, 618, 594, 606, 608, 596, 570, 552, 617, 598, 601, 581, 574, 556, 622, 597, 615,
   585, 576, 564, 623, 591, 568, 587, 602, 612, 611, 599, 620, 593, 613, 603, 609, 571, 553, 599, 575, 557, 594, 613, 580, 602, 577,
   616, 565, 623, 586, 598, 569, 621, 592, 615, 583, 600, 614, 604, 595, 607, 590, 619, 610, 572, 598, 554, 596, 615, 573, 555, 602,
   581, 617, 578, 623, 566, 599, 587, 622, 567, 593, 585, 613, 601, 597, 609, 612, 603, 620, 591, 611, 561, 607, 555, 589, 619, 572,
   566, 615, 585, 606, 573, 621, 567, 613, 603, 618, 578, 609, 591, 623, 596, 601, 620, 617, 611, 622, 597, 612, 606, 562, 556, 618,
   592, 617, 587, 570, 564, 621, 612, 607, 603, 574, 568, 619, 611, 576, 593, 598, 622, 620, 602, 623, 599, 615, 609, 613, 563, 557,
   609, 571, 565, 588, 620, 583, 613, 575, 608, 569, 622, 604, 615, 577, 618, 607, 623, 590, 594, 616, 610, 600, 619, 595, 621, 614,
   608, 558, 564, 616, 586, 618, 593, 562, 568, 614, 622, 604, 609, 570, 576, 610, 620, 574, 599, 592, 621, 623, 598, 619, 602, 607,
   613, 615, 559, 565, 611, 563, 569, 582, 612, 590, 620, 571, 605, 577, 617, 610, 623, 575, 606, 619, 622, 595, 588, 608, 614, 594,
   621, 600, 618, 616, 560, 610, 566, 584, 614, 561, 567, 619, 591, 605, 572, 616, 578, 623, 611, 608, 573, 620, 597, 621, 589, 596,
   622, 606, 612, 618, 601, 617, 579, 590, 591, 582, 595, 584, 597, 610, 611, 588, 589, 600, 601, 619, 620, 594, 596, 623, 612, 614,
   605, 606, 621, 608, 622, 616, 617, 618, 588, 580, 593, 594, 583, 608, 609, 586, 599, 600, 618, 590, 620, 592, 602, 595, 622, 598,
   613, 604, 616, 621, 607, 614, 615, 610, 623, 619, 589, 592, 581, 606, 607, 596, 585, 598, 587, 618, 601, 619, 591, 602, 593, 621,
   597, 599, 603, 615, 617, 612, 613, 622, 609, 623, 611, 620, 582, 583, 603, 588, 590, 605, 611, 604, 609, 594, 606, 595, 612, 607,
   613, 600, 617, 615, 620, 610, 608, 618, 619, 616, 623, 614, 622, 621, 584, 604, 585, 605, 610, 589, 591, 607, 603, 608, 596, 614,
   597, 615, 609, 616, 601, 613, 611, 619, 606, 617, 623, 618, 620, 621, 612, 622, 605, 586, 587, 608, 604, 606, 603, 592, 593, 616,
   617, 610, 611, 598, 599, 614, 612, 602, 609, 607, 618, 622, 615, 621, 613, 619, 620, 623
}; // 9.02 kb

// indices for factoring [CartY(la+lb)] into [CartY(lb)] x [CartY(la)]
// format: nCartY(la) x CartY(lb)
static const cart_index_t iCartYY_ab0_a0[1] = {
   0
}; // 0.00 kb
static const cart_index_t iCartYY_ab1_a0[3] = {
   0, 1, 2
}; // 0.01 kb
static const cart_index_t iCartYY_ab1_a1[3] = {
   0, 1, 2
}; // 0.01 kb
static const cart_index_t iCartYY_ab2_a0[6] = {
   0, 1, 2, 3, 4, 5
}; // 0.01 kb
static const cart_index_t iCartYY_ab2_a1[9] = {
   0, 3, 4, 3, 1, 5, 4, 5, 2
}; // 0.02 kb
static const cart_index_t iCartYY_ab2_a2[6] = {
   0, 1, 2, 3, 4, 5
}; // 0.01 kb
static const cart_index_t iCartYY_ab3_a0[10] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9
}; // 0.02 kb
static const cart_index_t iCartYY_ab3_a1[18] = {
   0, 5, 7, 3, 1, 8, 4, 6, 2, 5, 3, 9, 7, 9, 4, 9, 8, 6
}; // 0.04 kb
static const cart_index_t iCartYY_ab3_a2[18] = {
   0, 3, 4, 5, 7, 9, 5, 1, 6, 3, 9, 8, 7, 8, 2, 9, 4, 6
}; // 0.04 kb
static const cart_index_t iCartYY_ab3_a3[10] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9
}; // 0.02 kb
static const cart_index_t iCartYY_ab4_a0[15] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14
}; // 0.03 kb
static const cart_index_t iCartYY_ab4_a1[30] = {
   0, 3, 5, 4, 1, 7, 6, 8, 2, 9, 4, 13, 10, 12, 6, 3, 9, 14, 12, 11, 8, 5, 14, 10, 13, 7,
   11, 14, 13, 12
}; // 0.06 kb
static const cart_index_t iCartYY_ab4_a2[36] = {
   0, 9, 10, 3, 5, 14, 9, 1, 11, 4, 13, 7, 10, 11, 2, 12, 6, 8, 3, 4, 12, 9, 14, 13, 5, 13,
   6, 14, 10, 12, 14, 7, 8, 13, 12, 11
}; // 0.07 kb
static const cart_index_t iCartYY_ab4_a3[30] = {
   0, 4, 6, 9, 10, 3, 12, 5, 13, 14, 3, 1, 8, 4, 12, 9, 11, 14, 7, 13, 5, 7, 2, 13, 6, 14,
   8, 10, 11, 12
}; // 0.06 kb
static const cart_index_t iCartYY_ab4_a4[15] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14
}; // 0.03 kb
static const cart_index_t iCartYY_ab5_a0[21] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20
}; // 0.04 kb
static const cart_index_t iCartYY_ab5_a1[45] = {
   0, 5, 7, 3, 1, 8, 4, 6, 2, 5, 9, 15, 11, 3, 16, 7, 15, 10, 13, 17, 4, 16, 8, 12, 17, 14,
   6, 9, 11, 20, 10, 19, 13, 18, 12, 14, 19, 18, 17, 20, 16, 18, 15, 20, 19
}; // 0.09 kb
static const cart_index_t iCartYY_ab5_a2[60] = {
   0, 9, 10, 5, 7, 15, 11, 1, 12, 3, 16, 8, 13, 14, 2, 17, 4, 6, 9, 3, 18, 11, 20, 16, 10, 18,
   4, 19, 13, 17, 5, 11, 19, 9, 15, 20, 19, 12, 6, 18, 17, 14, 7, 20, 13, 15, 10, 19, 20, 8, 14, 16,
   18, 12, 15, 16, 17, 20, 19, 18
}; // 0.12 kb
static const cart_index_t iCartYY_ab5_a3[60] = {
   0, 11, 13, 9, 10, 5, 19, 7, 20, 15, 9, 1, 14, 3, 18, 11, 12, 20, 8, 16, 10, 12, 2, 18, 4, 19,
   6, 13, 14, 17, 5, 3, 17, 11, 19, 9, 18, 15, 16, 20, 7, 16, 4, 20, 13, 15, 17, 10, 18, 19, 15, 8,
   6, 16, 17, 20, 14, 19, 12, 18
}; // 0.12 kb
static const cart_index_t iCartYY_ab5_a4[45] = {
   0, 3, 4, 5, 11, 7, 13, 16, 17, 9, 10, 18, 19, 20, 15, 5, 1, 6, 9, 3, 15, 17, 8, 14, 11, 19,
   12, 18, 16, 20, 7, 8, 2, 15, 16, 10, 4, 12, 6, 20, 13, 14, 17, 18, 19
}; // 0.09 kb
static const cart_index_t iCartYY_ab5_a5[21] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20
}; // 0.04 kb
static const cart_index_t iCartYY_ab6_a0[28] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
   26, 27
}; // 0.05 kb
static const cart_index_t iCartYY_ab6_a1[63] = {
   0, 3, 5, 4, 1, 7, 6, 8, 2, 11, 4, 19, 12, 18, 6, 3, 9, 20, 18, 14, 8, 5, 20, 10, 19, 7,
   13, 9, 15, 23, 10, 21, 16, 15, 11, 25, 22, 13, 17, 16, 26, 12, 24, 17, 14, 20, 23, 21, 25, 19, 22, 26,
   24, 18, 27, 22, 24, 21, 27, 26, 23, 25, 27
}; // 0.12 kb
static const cart_index_t iCartYY_ab6_a2[90] = {
   0, 9, 10, 3, 5, 20, 11, 1, 13, 4, 19, 7, 12, 14, 2, 18, 6, 8, 3, 15, 21, 9, 20, 23, 15, 4,
   22, 11, 25, 19, 5, 23, 16, 20, 10, 21, 16, 24, 6, 26, 12, 18, 25, 7, 17, 19, 22, 13, 26, 17, 8, 24,
   18, 14, 9, 11, 27, 15, 23, 25, 10, 27, 12, 21, 16, 26, 27, 13, 14, 22, 24, 17, 21, 22, 18, 27, 26, 24,
   23, 19, 24, 25, 27, 22, 20, 25, 26, 23, 21, 27
}; // 0.18 kb
static const cart_index_t iCartYY_ab6_a3[100] = {
   0, 15, 16, 9, 10, 3, 21, 5, 23, 20, 15, 1, 17, 4, 22, 11, 13, 25, 7, 19, 16, 17, 2, 24, 6, 26,
   8, 12, 14, 18, 9, 4, 24, 11, 27, 15, 22, 23, 19, 25, 10, 22, 6, 27, 12, 21, 18, 16, 24, 26, 3, 11,
   26, 15, 21, 9, 27, 20, 25, 23, 21, 13, 8, 22, 18, 27, 14, 26, 17, 24, 5, 25, 12, 23, 16, 20, 26, 10,
   27, 21, 23, 7, 14, 19, 24, 25, 17, 27, 13, 22, 20, 19, 18, 25, 26, 23, 24, 21, 22, 27
}; // 0.20 kb
static const cart_index_t iCartYY_ab6_a4[90] = {
   0, 11, 12, 3, 15, 5, 16, 25, 26, 9, 10, 27, 21, 23, 20, 9, 1, 14, 15, 4, 23, 24, 7, 17, 11, 27,
   13, 22, 19, 25, 10, 13, 2, 21, 22, 16, 6, 17, 8, 27, 12, 14, 18, 24, 26, 3, 4, 18, 9, 11, 20, 26,
   19, 24, 15, 21, 22, 27, 25, 23, 5, 19, 6, 20, 25, 10, 12, 22, 18, 23, 16, 24, 26, 27, 21, 20, 7, 8,
   23, 19, 21, 18, 13, 14, 25, 26, 17, 24, 22, 27
}; // 0.18 kb
static const cart_index_t iCartYY_ab6_a5[63] = {
   0, 4, 6, 11, 12, 3, 18, 5, 19, 9, 10, 15, 22, 16, 24, 20, 25, 26, 27, 21, 23, 3, 1, 8, 4, 18,
   9, 14, 20, 7, 15, 21, 11, 13, 26, 17, 23, 19, 24, 22, 27, 25, 5, 7, 2, 19, 6, 20, 8, 10, 13, 23,
   16, 25, 17, 12, 14, 21, 22, 18, 24, 26, 27
}; // 0.12 kb
static const cart_index_t iCartYY_ab6_a6[28] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
   26, 27
}; // 0.05 kb
static const cart_index_t iCartYY_ab7_a0[36] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
   26, 27, 28, 29, 30, 31, 32, 33, 34, 35
}; // 0.07 kb
static const cart_index_t iCartYY_ab7_a1[84] = {
   0, 5, 7, 3, 1, 8, 4, 6, 2, 5, 9, 21, 11, 3, 22, 7, 21, 10, 13, 23, 4, 22, 8, 12, 23, 14,
   6, 9, 17, 28, 10, 26, 19, 15, 11, 29, 16, 27, 13, 24, 12, 20, 25, 18, 14, 17, 15, 30, 19, 31, 16, 32,
   20, 18, 27, 25, 23, 29, 22, 24, 21, 28, 26, 26, 33, 31, 34, 24, 32, 28, 30, 33, 35, 32, 25, 30, 29, 34,
   31, 35, 27, 33, 34, 35
}; // 0.16 kb
static const cart_index_t iCartYY_ab7_a2[126] = {
   0, 9, 10, 5, 7, 21, 11, 1, 12, 3, 22, 8, 13, 14, 2, 23, 4, 6, 15, 3, 24, 11, 29, 22, 16, 25,
   4, 27, 13, 23, 5, 17, 26, 9, 21, 28, 27, 18, 6, 25, 23, 14, 7, 28, 19, 21, 10, 26, 29, 8, 20, 22,
   24, 12, 9, 15, 33, 17, 28, 30, 10, 33, 16, 26, 19, 31, 17, 11, 34, 15, 30, 29, 34, 12, 18, 24, 32, 20,
   19, 35, 13, 31, 16, 27, 35, 20, 14, 32, 25, 18, 21, 30, 31, 28, 26, 33, 30, 22, 32, 29, 34, 24, 31, 32,
   23, 35, 27, 25, 33, 24, 25, 34, 35, 32, 26, 34, 27, 33, 31, 35, 28, 29, 35, 30, 33, 34
}; // 0.25 kb
static const cart_index_t iCartYY_ab7_a3[150] = {
   0, 17, 19, 9, 10, 5, 26, 7, 28, 21, 15, 1, 20, 3, 24, 11, 12, 29, 8, 22, 16, 18, 2, 25, 4, 27,
   6, 13, 14, 23, 5, 15, 31, 17, 26, 9, 33, 21, 30, 28, 17, 3, 32, 11, 34, 15, 24, 30, 22, 29, 7, 30,
   16, 28, 19, 21, 31, 10, 33, 26, 19, 32, 4, 35, 13, 31, 23, 16, 25, 27, 30, 8, 18, 22, 32, 29, 20, 34,
   12, 24, 31, 20, 6, 32, 23, 35, 14, 27, 18, 25, 9, 11, 35, 15, 33, 17, 34, 28, 29, 30, 10, 34, 13, 33,
   16, 26, 27, 19, 35, 31, 33, 12, 14, 24, 25, 34, 18, 35, 20, 32, 26, 24, 23, 34, 27, 33, 25, 31, 32, 35,
   28, 22, 25, 29, 35, 30, 32, 33, 24, 34, 21, 29, 27, 30, 31, 28, 35, 26, 34, 33
}; // 0.29 kb
static const cart_index_t iCartYY_ab7_a4[150] = {
   0, 15, 16, 5, 17, 7, 19, 30, 31, 9, 10, 33, 26, 28, 21, 17, 1, 18, 15, 3, 30, 32, 8, 20, 11, 34,
   12, 24, 22, 29, 19, 20, 2, 31, 32, 16, 4, 18, 6, 35, 13, 14, 23, 25, 27, 9, 3, 25, 17, 11, 28, 35,
   22, 32, 15, 33, 24, 34, 29, 30, 10, 24, 4, 26, 34, 19, 13, 32, 23, 33, 16, 25, 27, 35, 31, 5, 11, 27,
   9, 15, 21, 31, 29, 35, 17, 26, 34, 33, 30, 28, 26, 12, 6, 33, 24, 31, 23, 20, 14, 34, 27, 18, 25, 32,
   35, 7, 29, 13, 21, 30, 10, 16, 34, 27, 28, 19, 35, 31, 33, 26, 28, 8, 14, 30, 22, 33, 25, 12, 18, 29,
   35, 20, 32, 24, 34, 21, 22, 23, 28, 29, 26, 27, 24, 25, 30, 31, 32, 35, 34, 33
}; // 0.29 kb
static const cart_index_t iCartYY_ab7_a5[126] = {
   0, 11, 13, 15, 16, 5, 27, 7, 29, 9, 10, 17, 34, 19, 35, 21, 30, 31, 33, 26, 28, 9, 1, 14, 3, 25,
   17, 18, 28, 8, 15, 33, 11, 12, 35, 20, 30, 22, 32, 24, 34, 29, 10, 12, 2, 24, 4, 26, 6, 19, 20, 33,
   16, 34, 18, 13, 14, 31, 32, 23, 25, 27, 35, 5, 3, 23, 11, 27, 9, 25, 21, 22, 17, 26, 15, 24, 31, 32,
   28, 29, 35, 34, 33, 30, 7, 22, 4, 29, 13, 21, 23, 10, 24, 28, 19, 30, 32, 16, 25, 26, 34, 27, 35, 31,
   33, 21, 8, 6, 22, 23, 28, 14, 26, 12, 30, 31, 29, 20, 27, 18, 33, 24, 25, 32, 35, 34
}; // 0.25 kb
static const cart_index_t iCartYY_ab7_a6[84] = {
   0, 3, 4, 5, 11, 7, 13, 22, 23, 9, 10, 15, 16, 24, 25, 17, 19, 32, 27, 29, 21, 26, 34, 28, 35, 30,
   31, 33, 5, 1, 6, 9, 3, 21, 23, 8, 14, 17, 26, 11, 27, 12, 18, 15, 31, 20, 25, 22, 28, 33, 24, 30,
   32, 29, 35, 34, 7, 8, 2, 21, 22, 10, 4, 12, 6, 28, 19, 29, 13, 20, 14, 30, 16, 18, 23, 24, 26, 31,
   32, 33, 25, 34, 27, 35
}; // 0.16 kb
static const cart_index_t iCartYY_ab7_a7[36] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
   26, 27, 28, 29, 30, 31, 32, 33, 34, 35
}; // 0.07 kb
static const cart_index_t iCartYY_ab8_a0[45] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
}; // 0.09 kb
static const cart_index_t iCartYY_ab8_a1[108] = {
   0, 3, 5, 4, 1, 7, 6, 8, 2, 11, 4, 25, 12, 24, 6, 3, 9, 26, 24, 14, 8, 5, 26, 10, 25, 7,
   13, 9, 15, 29, 10, 27, 17, 16, 11, 31, 28, 13, 19, 18, 32, 12, 30, 20, 14, 21, 16, 35, 22, 33, 18, 15,
   21, 37, 34, 23, 20, 17, 38, 22, 36, 19, 23, 26, 29, 27, 31, 25, 28, 32, 30, 24, 40, 28, 36, 41, 34, 30,
   27, 39, 38, 33, 41, 32, 29, 37, 39, 35, 31, 40, 37, 35, 42, 38, 43, 33, 44, 36, 34, 39, 42, 43, 42, 40,
   44, 43, 44, 41
}; // 0.21 kb
static const cart_index_t iCartYY_ab8_a2[168] = {
   0, 9, 10, 3, 5, 26, 11, 1, 13, 4, 25, 7, 12, 14, 2, 24, 6, 8, 3, 15, 27, 9, 26, 29, 16, 4,
   28, 11, 31, 25, 5, 29, 17, 26, 10, 27, 18, 30, 6, 32, 12, 24, 31, 7, 19, 25, 28, 13, 32, 20, 8, 30,
   24, 14, 9, 21, 39, 15, 29, 37, 10, 39, 22, 27, 17, 38, 21, 11, 40, 16, 35, 31, 22, 41, 12, 33, 18, 32,
   40, 13, 23, 28, 36, 19, 41, 23, 14, 34, 30, 20, 15, 16, 42, 21, 37, 35, 17, 43, 18, 38, 22, 33, 44, 19,
   20, 36, 34, 23, 33, 34, 24, 41, 32, 30, 35, 25, 36, 31, 40, 28, 26, 37, 38, 29, 27, 39, 27, 42, 33, 39,
   38, 43, 42, 28, 34, 40, 44, 36, 29, 35, 43, 37, 39, 42, 43, 36, 30, 44, 41, 34, 37, 31, 44, 35, 42, 40,
   38, 44, 32, 43, 33, 41, 39, 40, 41, 42, 43, 44
}; // 0.33 kb
static const cart_index_t iCartYY_ab8_a3[210] = {
   0, 15, 17, 9, 10, 3, 27, 5, 29, 26, 16, 1, 19, 4, 28, 11, 13, 31, 7, 25, 18, 20, 2, 30, 6, 32,
   8, 12, 14, 24, 21, 4, 36, 11, 40, 16, 28, 35, 25, 31, 22, 34, 6, 41, 12, 33, 24, 18, 30, 32, 3, 21,
   38, 15, 27, 9, 39, 26, 37, 29, 33, 23, 8, 34, 24, 41, 14, 32, 20, 30, 5, 37, 22, 29, 17, 26, 38, 10,
   39, 27, 35, 7, 23, 25, 36, 31, 19, 40, 13, 28, 9, 16, 43, 21, 39, 15, 42, 29, 35, 37, 10, 42, 18, 39,
   22, 27, 33, 17, 43, 38, 15, 11, 44, 16, 42, 21, 40, 37, 31, 35, 42, 13, 20, 28, 34, 40, 23, 44, 19, 36,
   17, 44, 12, 43, 18, 38, 32, 22, 41, 33, 43, 19, 14, 36, 30, 44, 20, 41, 23, 34, 26, 35, 33, 37, 38, 29,
   43, 27, 42, 39, 37, 25, 34, 31, 44, 35, 36, 42, 28, 40, 38, 36, 24, 44, 32, 43, 30, 33, 34, 41, 39, 28,
   30, 40, 41, 42, 34, 43, 36, 44, 27, 40, 32, 42, 33, 39, 41, 38, 44, 43, 29, 31, 41, 35, 43, 37, 44, 39,
   40, 42
}; // 0.41 kb
static const cart_index_t iCartYY_ab8_a4[225] = {
   0, 21, 22, 3, 15, 5, 17, 37, 38, 9, 10, 39, 27, 29, 26, 21, 1, 23, 16, 4, 35, 36, 7, 19, 11, 40,
   13, 28, 25, 31, 22, 23, 2, 33, 34, 18, 6, 20, 8, 41, 12, 14, 24, 30, 32, 3, 16, 33, 9, 21, 26, 38,
   35, 43, 15, 27, 42, 39, 37, 29, 15, 4, 34, 21, 11, 37, 44, 25, 36, 16, 42, 28, 40, 31, 35, 5, 35, 18,
   26, 37, 10, 22, 42, 33, 29, 17, 43, 38, 39, 27, 17, 36, 6, 38, 44, 22, 12, 34, 24, 43, 18, 30, 32, 41,
   33, 37, 7, 20, 35, 25, 42, 34, 13, 23, 31, 44, 19, 36, 28, 40, 38, 19, 8, 43, 36, 33, 24, 23, 14, 44,
   32, 20, 30, 34, 41, 9, 11, 41, 15, 16, 29, 43, 31, 44, 21, 39, 40, 42, 35, 37, 10, 40, 12, 27, 42, 17,
   18, 44, 32, 39, 22, 41, 33, 43, 38, 39, 13, 14, 42, 28, 43, 30, 19, 20, 40, 41, 23, 34, 36, 44, 27, 28,
   24, 39, 40, 38, 32, 36, 30, 42, 33, 34, 41, 44, 43, 29, 25, 30, 37, 31, 39, 41, 28, 34, 35, 43, 36, 44,
   40, 42, 26, 31, 32, 29, 35, 27, 33, 40, 41, 37, 38, 44, 43, 42, 39
}; // 0.44 kb
static const cart_index_t iCartYY_ab8_a5[210] = {
   0, 16, 18, 21, 22, 3, 33, 5, 35, 9, 10, 15, 42, 17, 43, 26, 37, 38, 39, 27, 29, 15, 1, 20, 4, 34,
   21, 23, 37, 7, 16, 42, 11, 13, 44, 19, 35, 25, 36, 28, 40, 31, 17, 19, 2, 36, 6, 38, 8, 22, 23, 43,
   18, 44, 20, 12, 14, 33, 34, 24, 30, 32, 41, 9, 4, 30, 11, 41, 15, 34, 29, 25, 21, 39, 16, 28, 43, 36,
   37, 31, 44, 40, 42, 35, 10, 28, 6, 40, 12, 27, 24, 17, 36, 39, 22, 42, 34, 18, 30, 38, 44, 32, 41, 33,
   43, 3, 11, 32, 16, 33, 9, 41, 26, 31, 15, 27, 21, 40, 38, 44, 29, 35, 43, 42, 39, 37, 27, 13, 8, 28,
   24, 39, 14, 38, 19, 42, 33, 40, 23, 32, 20, 43, 36, 30, 34, 41, 44, 5, 31, 12, 35, 18, 26, 32, 10, 40,
   29, 17, 37, 44, 22, 41, 27, 42, 33, 43, 38, 39, 29, 7, 14, 25, 30, 37, 20, 39, 13, 35, 43, 31, 19, 41,
   23, 42, 28, 34, 36, 44, 40, 26, 25, 24, 31, 32, 29, 30, 27, 28, 37, 38, 35, 36, 33, 34, 39, 40, 41, 44,
   43, 42
}; // 0.41 kb
static const cart_index_t iCartYY_ab8_a6[168] = {
   0, 11, 12, 3, 16, 5, 18, 31, 32, 9, 10, 21, 22, 40, 41, 15, 17, 44, 33, 35, 26, 27, 42, 29, 43, 37,
   38, 39, 9, 1, 14, 15, 4, 29, 30, 7, 20, 21, 39, 11, 41, 13, 23, 16, 43, 19, 34, 25, 37, 42, 28, 35,
   36, 31, 44, 40, 10, 13, 2, 27, 28, 17, 6, 19, 8, 39, 22, 40, 12, 23, 14, 42, 18, 20, 24, 36, 38, 33,
   34, 43, 30, 44, 32, 41, 3, 4, 24, 9, 11, 26, 32, 25, 30, 15, 27, 16, 33, 28, 34, 21, 38, 36, 41, 31,
   29, 39, 40, 37, 44, 35, 43, 42, 5, 25, 6, 26, 31, 10, 12, 28, 24, 29, 17, 35, 18, 36, 30, 37, 22, 34,
   32, 40, 27, 38, 44, 39, 41, 42, 33, 43, 26, 7, 8, 29, 25, 27, 24, 13, 14, 37, 38, 31, 32, 19, 20, 35,
   33, 23, 30, 28, 39, 43, 36, 42, 34, 40, 41, 44
}; // 0.33 kb
static const cart_index_t iCartYY_ab8_a7[108] = {
   0, 4, 6, 11, 12, 3, 24, 5, 25, 9, 10, 16, 28, 18, 30, 21, 22, 15, 34, 17, 36, 26, 31, 32, 40, 41,
   27, 33, 29, 35, 37, 38, 44, 39, 42, 43, 3, 1, 8, 4, 24, 9, 14, 26, 7, 15, 27, 11, 13, 32, 20, 16,
   33, 21, 23, 38, 19, 29, 25, 30, 28, 34, 39, 41, 37, 31, 35, 43, 36, 42, 40, 44, 5, 7, 2, 25, 6, 26,
   8, 10, 13, 29, 17, 31, 19, 12, 14, 35, 18, 37, 20, 22, 23, 27, 28, 24, 36, 30, 38, 32, 39, 40, 42, 33,
   34, 43, 44, 41
}; // 0.21 kb
static const cart_index_t iCartYY_ab8_a8[45] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
}; // 0.09 kb
static const cart_index_t iCartYY_ab9_a0[55] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
   52, 53, 54
}; // 0.11 kb
static const cart_index_t iCartYY_ab9_a1[135] = {
   0, 5, 7, 3, 1, 8, 4, 6, 2, 5, 9, 27, 11, 3, 28, 7, 27, 10, 13, 29, 4, 28, 8, 12, 29, 14,
   6, 9, 17, 34, 10, 32, 19, 15, 11, 35, 16, 33, 13, 30, 12, 20, 31, 18, 14, 17, 21, 36, 23, 15, 38, 19,
   37, 22, 25, 39, 16, 40, 20, 24, 41, 26, 18, 21, 23, 44, 22, 43, 25, 42, 24, 26, 33, 31, 29, 35, 28, 30,
   27, 34, 32, 32, 45, 37, 46, 30, 40, 34, 36, 45, 47, 41, 31, 38, 35, 46, 39, 47, 33, 43, 49, 39, 51, 42,
   41, 44, 38, 48, 53, 40, 42, 36, 44, 50, 37, 52, 43, 45, 50, 52, 48, 46, 53, 49, 51, 47, 50, 48, 54, 52,
   54, 49, 54, 53, 51
}; // 0.26 kb
static const cart_index_t iCartYY_ab9_a2[216] = {
   0, 9, 10, 5, 7, 27, 11, 1, 12, 3, 28, 8, 13, 14, 2, 29, 4, 6, 15, 3, 30, 11, 35, 28, 16, 31,
   4, 33, 13, 29, 5, 17, 32, 9, 27, 34, 33, 18, 6, 31, 29, 14, 7, 34, 19, 27, 10, 32, 35, 8, 20, 28,
   30, 12, 9, 21, 45, 17, 34, 36, 10, 45, 22, 32, 19, 37, 23, 11, 46, 15, 38, 35, 46, 12, 24, 30, 40, 20,
   25, 47, 13, 39, 16, 33, 47, 26, 14, 41, 31, 18, 21, 15, 48, 23, 44, 38, 22, 49, 16, 43, 25, 39, 17, 23,
   50, 21, 36, 44, 51, 24, 18, 42, 41, 26, 19, 52, 25, 37, 22, 43, 53, 20, 26, 40, 42, 24, 27, 36, 37, 34,
   32, 45, 38, 28, 40, 35, 46, 30, 39, 41, 29, 47, 33, 31, 48, 30, 42, 46, 53, 40, 49, 42, 31, 51, 47, 41,
   32, 50, 43, 45, 37, 52, 43, 51, 33, 49, 39, 47, 34, 44, 52, 36, 45, 50, 44, 35, 53, 38, 48, 46, 36, 38,
   54, 44, 50, 48, 37, 54, 39, 52, 43, 49, 54, 40, 41, 53, 51, 42, 45, 48, 49, 50, 52, 54, 50, 46, 51, 48,
   54, 53, 52, 53, 47, 54, 49, 51
}; // 0.42 kb
static const cart_index_t iCartYY_ab9_a3[280] = {
   0, 17, 19, 9, 10, 5, 32, 7, 34, 27, 15, 1, 20, 3, 30, 11, 12, 35, 8, 28, 16, 18, 2, 31, 4, 33,
   6, 13, 14, 29, 5, 21, 37, 17, 32, 9, 45, 27, 36, 34, 23, 3, 40, 11, 46, 15, 30, 38, 28, 35, 7, 36,
   22, 34, 19, 27, 37, 10, 45, 32, 25, 41, 4, 47, 13, 39, 29, 16, 31, 33, 38, 8, 24, 28, 40, 35, 20, 46,
   12, 30, 39, 26, 6, 41, 29, 47, 14, 33, 18, 31, 9, 23, 52, 21, 45, 17, 50, 34, 44, 36, 10, 50, 25, 45,
   22, 32, 43, 19, 52, 37, 21, 11, 53, 15, 48, 23, 46, 44, 35, 38, 22, 51, 13, 49, 16, 43, 33, 25, 47, 39,
   48, 12, 26, 30, 42, 46, 24, 53, 20, 40, 49, 24, 14, 42, 31, 51, 18, 47, 26, 41, 17, 15, 54, 23, 50, 21,
   48, 36, 38, 44, 19, 54, 16, 52, 25, 37, 39, 22, 49, 43, 54, 20, 18, 40, 41, 53, 26, 51, 24, 42, 43, 42,
   29, 51, 33, 49, 31, 39, 41, 47, 44, 28, 42, 35, 53, 38, 40, 48, 30, 46, 27, 44, 43, 36, 37, 34, 52, 32,
   50, 45, 32, 48, 39, 50, 43, 45, 49, 37, 54, 52, 50, 30, 41, 46, 51, 48, 42, 54, 40, 53, 34, 38, 49, 44,
   52, 36, 54, 45, 48, 50, 52, 40, 31, 53, 47, 54, 41, 49, 42, 51, 36, 35, 51, 38, 54, 44, 53, 50, 46, 48,
   37, 53, 33, 54, 39, 52, 47, 43, 51, 49, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54
}; // 0.55 kb
static const cart_index_t iCartYY_ab9_a4[315] = {
   0, 21, 22, 5, 17, 7, 19, 36, 37, 9, 10, 45, 32, 34, 27, 23, 1, 24, 15, 3, 38, 40, 8, 20, 11, 46,
   12, 30, 28, 35, 25, 26, 2, 39, 41, 16, 4, 18, 6, 47, 13, 14, 29, 31, 33, 21, 3, 42, 23, 11, 44, 53,
   28, 40, 15, 48, 30, 46, 35, 38, 22, 42, 4, 43, 51, 25, 13, 41, 29, 49, 16, 31, 33, 47, 39, 5, 23, 43,
   9, 21, 27, 37, 44, 52, 17, 32, 50, 45, 36, 34, 43, 24, 6, 49, 42, 39, 29, 26, 14, 51, 33, 18, 31, 41,
   47, 7, 44, 25, 27, 36, 10, 22, 50, 43, 34, 19, 52, 37, 45, 32, 44, 8, 26, 38, 28, 48, 42, 12, 24, 35,
   53, 20, 40, 30, 46, 9, 15, 49, 17, 23, 34, 52, 38, 54, 21, 45, 48, 50, 44, 36, 10, 48, 16, 32, 50, 19,
   25, 54, 39, 45, 22, 49, 43, 52, 37, 17, 11, 51, 21, 15, 36, 54, 35, 53, 23, 50, 46, 48, 38, 44, 50, 12,
   18, 48, 30, 54, 41, 20, 26, 46, 51, 24, 42, 40, 53, 19, 53, 13, 37, 54, 22, 16, 51, 33, 52, 25, 47, 39,
   49, 43, 52, 20, 14, 54, 40, 49, 31, 24, 18, 53, 47, 26, 41, 42, 51, 27, 38, 39, 34, 44, 32, 43, 48, 49,
   36, 37, 54, 52, 50, 45, 36, 28, 41, 44, 35, 50, 51, 30, 42, 38, 54, 40, 53, 46, 48, 37, 40, 29, 52, 53,
   43, 33, 42, 31, 54, 39, 41, 47, 51, 49, 45, 30, 31, 50, 46, 52, 47, 40, 41, 48, 49, 42, 51, 53, 54, 32,
   46, 33, 45, 48, 37, 39, 53, 47, 50, 43, 51, 49, 54, 52, 34, 35, 47, 36, 38, 45, 49, 46, 51, 44, 52, 53,
   54, 48, 50
}; // 0.62 kb
static const cart_index_t iCartYY_ab9_a5[315] = {
   0, 23, 25, 21, 22, 5, 43, 7, 44, 9, 10, 17, 50, 19, 52, 27, 36, 37, 45, 32, 34, 21, 1, 26, 3, 42,
   23, 24, 44, 8, 15, 48, 11, 12, 53, 20, 38, 28, 40, 30, 46, 35, 22, 24, 2, 42, 4, 43, 6, 25, 26, 49,
   16, 51, 18, 13, 14, 39, 41, 29, 31, 33, 47, 5, 15, 39, 23, 43, 9, 49, 27, 38, 17, 32, 21, 48, 37, 54,
   34, 44, 52, 50, 45, 36, 17, 3, 41, 11, 51, 21, 42, 36, 28, 23, 50, 15, 30, 54, 40, 44, 35, 53, 46, 48,
   38, 7, 38, 16, 44, 25, 27, 39, 10, 48, 34, 19, 36, 54, 22, 49, 32, 50, 43, 52, 37, 45, 19, 40, 4, 53,
   13, 37, 29, 22, 42, 52, 25, 54, 41, 16, 31, 43, 51, 33, 47, 39, 49, 36, 8, 18, 28, 41, 44, 26, 50, 12,
   38, 54, 35, 20, 51, 24, 48, 30, 42, 40, 53, 46, 37, 20, 6, 40, 29, 52, 14, 43, 24, 54, 39, 53, 26, 33,
   18, 49, 42, 31, 41, 47, 51, 9, 11, 47, 15, 49, 17, 51, 34, 35, 21, 45, 23, 46, 52, 53, 36, 38, 54, 48,
   50, 44, 10, 46, 13, 48, 16, 32, 33, 19, 53, 45, 22, 50, 51, 25, 47, 37, 54, 39, 49, 43, 52, 45, 12, 14,
   30, 31, 50, 18, 52, 20, 48, 49, 46, 24, 47, 26, 54, 40, 41, 42, 51, 53, 32, 30, 29, 46, 33, 45, 31, 37,
   40, 50, 43, 48, 42, 39, 41, 52, 53, 47, 51, 49, 54, 34, 28, 31, 35, 47, 36, 41, 45, 30, 44, 52, 38, 40,
   49, 42, 50, 46, 51, 53, 54, 48, 27, 35, 33, 38, 39, 34, 47, 32, 46, 36, 37, 44, 53, 43, 51, 45, 48, 49,
   54, 52, 50
}; // 0.62 kb
static const cart_index_t iCartYY_ab9_a6[280] = {
   0, 15, 16, 5, 23, 7, 25, 38, 39, 9, 10, 21, 22, 48, 49, 17, 19, 54, 43, 44, 27, 32, 50, 34, 52, 36,
   37, 45, 17, 1, 18, 21, 3, 36, 41, 8, 26, 23, 50, 11, 51, 12, 24, 15, 54, 20, 42, 28, 44, 48, 30, 38,
   40, 35, 53, 46, 19, 20, 2, 37, 40, 22, 4, 24, 6, 52, 25, 53, 13, 26, 14, 54, 16, 18, 29, 42, 43, 39,
   41, 49, 31, 51, 33, 47, 9, 3, 31, 17, 11, 34, 47, 28, 41, 21, 45, 15, 49, 30, 42, 23, 52, 40, 51, 35,
   36, 50, 46, 44, 53, 38, 54, 48, 10, 30, 4, 32, 46, 19, 13, 40, 29, 45, 22, 48, 16, 42, 31, 50, 25, 41,
   33, 53, 37, 43, 51, 52, 47, 54, 39, 49, 5, 11, 33, 9, 15, 27, 39, 35, 47, 17, 32, 23, 43, 46, 51, 21,
   37, 53, 49, 38, 34, 45, 48, 36, 54, 44, 52, 50, 32, 12, 6, 45, 30, 37, 29, 20, 14, 50, 43, 46, 33, 24,
   18, 48, 39, 26, 31, 40, 52, 49, 42, 54, 41, 53, 47, 51, 7, 35, 13, 27, 38, 10, 16, 46, 33, 34, 19, 44,
   25, 53, 47, 36, 22, 51, 39, 48, 32, 37, 54, 45, 49, 50, 43, 52, 34, 8, 14, 36, 28, 45, 31, 12, 18, 44,
   52, 35, 47, 20, 26, 38, 49, 24, 41, 30, 50, 54, 40, 48, 42, 46, 51, 53, 27, 28, 29, 34, 35, 32, 33, 30,
   31, 36, 37, 38, 39, 40, 41, 44, 43, 42, 47, 46, 45, 52, 53, 50, 51, 48, 49, 54
}; // 0.55 kb
static const cart_index_t iCartYY_ab9_a7[216] = {
   0, 11, 13, 15, 16, 5, 33, 7, 35, 9, 10, 23, 46, 25, 47, 21, 22, 17, 51, 19, 53, 27, 38, 39, 48, 49,
   32, 43, 34, 44, 36, 37, 54, 45, 50, 52, 9, 1, 14, 3, 31, 17, 18, 34, 8, 21, 45, 11, 12, 47, 26, 15,
   49, 23, 24, 52, 20, 36, 28, 41, 30, 42, 50, 51, 44, 35, 38, 54, 40, 48, 46, 53, 10, 12, 2, 30, 4, 32,
   6, 19, 20, 45, 22, 46, 24, 13, 14, 48, 16, 50, 18, 25, 26, 37, 40, 29, 42, 31, 43, 33, 52, 53, 54, 39,
   41, 49, 51, 47, 5, 3, 29, 11, 33, 9, 31, 27, 28, 17, 32, 15, 30, 39, 41, 23, 43, 21, 42, 37, 40, 34,
   35, 47, 46, 51, 45, 49, 36, 38, 44, 52, 53, 50, 48, 54, 7, 28, 4, 35, 13, 27, 29, 10, 30, 34, 19, 38,
   40, 16, 31, 44, 25, 36, 41, 22, 42, 32, 46, 33, 53, 47, 37, 39, 45, 48, 50, 43, 51, 52, 54, 49, 27, 8,
   6, 28, 29, 34, 14, 32, 12, 36, 37, 35, 20, 33, 18, 38, 39, 44, 26, 43, 24, 45, 30, 31, 40, 41, 52, 47,
   50, 46, 48, 49, 42, 54, 53, 51
}; // 0.42 kb
static const cart_index_t iCartYY_ab9_a8[135] = {
   0, 3, 4, 5, 11, 7, 13, 28, 29, 9, 10, 15, 16, 30, 31, 17, 23, 19, 25, 40, 41, 21, 22, 42, 33, 35,
   27, 32, 46, 34, 47, 38, 39, 43, 51, 44, 53, 36, 37, 45, 48, 49, 50, 52, 54, 5, 1, 6, 9, 3, 27, 29,
   8, 14, 17, 32, 11, 33, 12, 18, 21, 15, 37, 39, 20, 26, 23, 43, 24, 31, 28, 34, 45, 30, 36, 41, 35, 47,
   49, 42, 38, 40, 44, 52, 50, 46, 51, 48, 54, 53, 7, 8, 2, 27, 28, 10, 4, 12, 6, 34, 19, 35, 13, 20,
   14, 36, 38, 22, 16, 24, 18, 44, 25, 26, 29, 30, 32, 37, 40, 45, 31, 46, 33, 39, 41, 48, 42, 50, 43, 52,
   53, 47, 54, 49, 51
}; // 0.26 kb
static const cart_index_t iCartYY_ab9_a9[55] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
   52, 53, 54
}; // 0.11 kb
static const cart_index_t iCartYY_ab10_a0[66] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
   52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65
}; // 0.13 kb
static const cart_index_t iCartYY_ab10_a1[165] = {
   0, 3, 5, 4, 1, 7, 6, 8, 2, 11, 4, 31, 12, 30, 6, 3, 9, 32, 30, 14, 8, 5, 32, 10, 31, 7,
   13, 9, 15, 35, 10, 33, 17, 16, 11, 37, 34, 13, 19, 18, 38, 12, 36, 20, 14, 23, 16, 41, 24, 39, 18, 15,
   21, 43, 40, 26, 20, 17, 44, 22, 42, 19, 25, 21, 27, 47, 22, 45, 28, 27, 23, 49, 46, 25, 29, 28, 50, 24,
   48, 29, 26, 32, 35, 33, 37, 31, 34, 38, 36, 30, 52, 34, 42, 53, 40, 36, 33, 51, 44, 39, 53, 38, 35, 43,
   51, 41, 37, 52, 43, 47, 54, 44, 56, 45, 49, 41, 55, 50, 57, 39, 58, 42, 46, 59, 48, 40, 62, 46, 48, 45,
   61, 50, 47, 49, 60, 51, 54, 56, 55, 52, 58, 57, 59, 53, 60, 55, 64, 61, 63, 57, 54, 60, 65, 63, 62, 59,
   56, 65, 61, 64, 58, 62, 65, 64, 63
}; // 0.32 kb
static const cart_index_t iCartYY_ab10_a2[270] = {
   0, 9, 10, 3, 5, 32, 11, 1, 13, 4, 31, 7, 12, 14, 2, 30, 6, 8, 3, 15, 33, 9, 32, 35, 16, 4,
   34, 11, 37, 31, 5, 35, 17, 32, 10, 33, 18, 36, 6, 38, 12, 30, 37, 7, 19, 31, 34, 13, 38, 20, 8, 36,
   30, 14, 9, 21, 51, 15, 35, 43, 10, 51, 22, 33, 17, 44, 23, 11, 52, 16, 41, 37, 24, 53, 12, 39, 18, 38,
   52, 13, 25, 34, 42, 19, 53, 26, 14, 40, 36, 20, 15, 27, 54, 21, 43, 47, 27, 16, 55, 23, 49, 41, 17, 56,
   28, 44, 22, 45, 28, 57, 18, 50, 24, 39, 58, 19, 29, 42, 46, 25, 59, 29, 20, 48, 40, 26, 21, 23, 60, 27,
   47, 49, 22, 61, 24, 45, 28, 50, 62, 25, 26, 46, 48, 29, 39, 40, 30, 53, 38, 36, 41, 31, 42, 37, 52, 34,
   32, 43, 44, 35, 33, 51, 33, 54, 45, 51, 44, 56, 55, 34, 46, 52, 58, 42, 35, 47, 56, 43, 51, 54, 57, 48,
   36, 59, 53, 40, 49, 37, 58, 41, 55, 52, 50, 59, 38, 57, 39, 53, 45, 63, 39, 61, 50, 57, 63, 46, 40, 62,
   59, 48, 47, 41, 64, 49, 60, 55, 64, 42, 48, 58, 62, 46, 43, 49, 65, 47, 54, 60, 44, 65, 50, 56, 45, 61,
   51, 60, 61, 54, 56, 65, 60, 52, 62, 55, 64, 58, 61, 62, 53, 63, 57, 59, 54, 55, 63, 60, 65, 64, 56, 64,
   57, 65, 61, 63, 65, 58, 59, 64, 63, 62
}; // 0.53 kb
static const cart_index_t iCartYY_ab10_a3[360] = {
   0, 15, 17, 9, 10, 3, 33, 5, 35, 32, 16, 1, 19, 4, 34, 11, 13, 37, 7, 31, 18, 20, 2, 36, 6, 38,
   8, 12, 14, 30, 23, 4, 42, 11, 52, 16, 34, 41, 31, 37, 24, 40, 6, 53, 12, 39, 30, 18, 36, 38, 3, 21,
   44, 15, 33, 9, 51, 32, 43, 35, 39, 26, 8, 40, 30, 53, 14, 38, 20, 36, 5, 43, 22, 35, 17, 32, 44, 10,
   51, 33, 41, 7, 25, 31, 42, 37, 19, 52, 13, 34, 9, 27, 56, 21, 51, 15, 54, 35, 47, 43, 10, 54, 28, 51,
   22, 33, 45, 17, 56, 44, 27, 11, 58, 16, 55, 23, 52, 49, 37, 41, 55, 13, 29, 34, 46, 52, 25, 58, 19, 42,
   28, 59, 12, 57, 18, 50, 38, 24, 53, 39, 57, 29, 14, 48, 36, 59, 20, 53, 26, 40, 21, 16, 64, 23, 60, 27,
   55, 47, 41, 49, 22, 63, 18, 61, 24, 45, 39, 28, 57, 50, 15, 23, 65, 27, 54, 21, 60, 43, 49, 47, 63, 25,
   20, 46, 40, 62, 26, 59, 29, 48, 17, 65, 24, 56, 28, 44, 50, 22, 61, 45, 64, 19, 26, 42, 48, 58, 29, 62,
   25, 46, 32, 47, 45, 43, 44, 35, 56, 33, 54, 51, 49, 31, 46, 37, 58, 41, 42, 55, 34, 52, 50, 48, 30, 59,
   38, 57, 36, 39, 40, 53, 60, 34, 48, 52, 62, 55, 46, 64, 42, 58, 61, 46, 36, 62, 53, 63, 40, 57, 48, 59,
   33, 60, 50, 54, 45, 51, 61, 44, 65, 56, 45, 62, 38, 63, 39, 61, 53, 50, 59, 57, 35, 49, 61, 47, 56, 43,
   65, 51, 60, 54, 47, 37, 62, 41, 64, 49, 58, 60, 52, 55, 43, 41, 63, 49, 65, 47, 64, 54, 55, 60, 44, 64,
   39, 65, 50, 56, 57, 45, 63, 61, 65, 42, 40, 58, 59, 64, 48, 63, 46, 62, 51, 55, 57, 60, 61, 54, 63, 56,
   64, 65, 54, 52, 59, 55, 63, 60, 62, 65, 58, 64, 56, 58, 53, 64, 57, 65, 59, 61, 62, 63
}; // 0.70 kb
static const cart_index_t iCartYY_ab10_a4[420] = {
   0, 21, 22, 3, 15, 5, 17, 43, 44, 9, 10, 51, 33, 35, 32, 23, 1, 25, 16, 4, 41, 42, 7, 19, 11, 52,
   13, 34, 31, 37, 24, 26, 2, 39, 40, 18, 6, 20, 8, 53, 12, 14, 30, 36, 38, 3, 27, 45, 9, 21, 32, 44,
   47, 56, 15, 33, 54, 51, 43, 35, 27, 4, 46, 23, 11, 49, 58, 31, 42, 16, 55, 34, 52, 37, 41, 5, 47, 28,
   32, 43, 10, 22, 54, 45, 35, 17, 56, 44, 51, 33, 28, 48, 6, 50, 59, 24, 12, 40, 30, 57, 18, 36, 38, 53,
   39, 49, 7, 29, 41, 31, 55, 46, 13, 25, 37, 58, 19, 42, 34, 52, 50, 29, 8, 57, 48, 39, 30, 26, 14, 59,
   38, 20, 36, 40, 53, 9, 23, 61, 15, 27, 35, 56, 49, 65, 21, 51, 60, 54, 47, 43, 10, 60, 24, 33, 54, 17,
   28, 65, 50, 51, 22, 61, 45, 56, 44, 21, 11, 62, 27, 16, 47, 64, 37, 58, 23, 60, 52, 55, 41, 49, 22, 62,
   12, 45, 63, 28, 18, 59, 38, 61, 24, 53, 39, 57, 50, 60, 13, 26, 55, 34, 64, 48, 19, 29, 52, 62, 25, 46,
   42, 58, 61, 25, 14, 63, 46, 57, 36, 29, 20, 62, 53, 26, 40, 48, 59, 15, 16, 63, 21, 23, 43, 65, 41, 64,
   27, 54, 55, 60, 49, 47, 17, 64, 18, 44, 65, 22, 24, 63, 39, 56, 28, 57, 50, 61, 45, 65, 19, 20, 64, 42,
   63, 40, 25, 26, 58, 59, 29, 48, 46, 62, 45, 46, 30, 61, 62, 50, 38, 48, 36, 63, 39, 40, 53, 59, 57, 47,
   31, 48, 49, 37, 60, 62, 34, 46, 41, 64, 42, 58, 52, 55, 32, 49, 50, 35, 47, 33, 45, 60, 61, 43, 44, 65,
   56, 54, 51, 33, 55, 39, 51, 60, 44, 50, 64, 57, 54, 45, 63, 61, 65, 56, 54, 34, 40, 60, 52, 65, 59, 42,
   48, 55, 63, 46, 62, 58, 64, 35, 41, 57, 43, 49, 51, 61, 55, 63, 47, 56, 64, 65, 60, 54, 56, 42, 36, 65,
   58, 61, 53, 46, 40, 64, 57, 48, 59, 62, 63, 43, 37, 59, 47, 41, 54, 63, 52, 62, 49, 65, 58, 64, 55, 60,
   44, 58, 38, 56, 64, 45, 39, 62, 53, 65, 50, 59, 57, 63, 61, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
   62, 63, 64, 65
}; // 0.82 kb
static const cart_index_t iCartYY_ab10_a5[441] = {
   0, 27, 28, 21, 22, 3, 45, 5, 47, 9, 10, 15, 54, 17, 56, 32, 43, 44, 51, 33, 35, 27, 1, 29, 4, 46,
   23, 25, 49, 7, 16, 55, 11, 13, 58, 19, 41, 31, 42, 34, 52, 37, 28, 29, 2, 48, 6, 50, 8, 24, 26, 57,
   18, 59, 20, 12, 14, 39, 40, 30, 36, 38, 53, 21, 4, 48, 11, 62, 27, 46, 47, 31, 23, 60, 16, 34, 64, 42,
   49, 37, 58, 52, 55, 41, 22, 46, 6, 62, 12, 45, 30, 28, 48, 61, 24, 63, 40, 18, 36, 50, 59, 38, 53, 39,
   57, 3, 23, 50, 27, 45, 9, 61, 32, 49, 15, 33, 21, 60, 44, 65, 35, 47, 56, 54, 51, 43, 45, 25, 8, 46,
   30, 61, 14, 50, 29, 63, 39, 62, 26, 38, 20, 57, 48, 36, 40, 53, 59, 5, 49, 24, 47, 28, 32, 50, 10, 60,
   35, 17, 43, 65, 22, 61, 33, 54, 45, 56, 44, 51, 47, 7, 26, 31, 48, 49, 29, 60, 13, 41, 64, 37, 19, 62,
   25, 55, 34, 46, 42, 58, 52, 9, 16, 57, 23, 61, 15, 63, 35, 41, 21, 51, 27, 55, 56, 64, 43, 49, 65, 60,
   54, 47, 10, 55, 18, 60, 24, 33, 39, 17, 64, 51, 22, 54, 63, 28, 57, 44, 65, 50, 61, 45, 56, 15, 11, 59,
   16, 63, 21, 62, 43, 37, 27, 54, 23, 52, 65, 58, 47, 41, 64, 55, 60, 49, 54, 13, 20, 34, 40, 60, 26, 65,
   19, 55, 63, 52, 25, 59, 29, 64, 42, 48, 46, 62, 58, 17, 58, 12, 64, 18, 44, 38, 22, 62, 56, 28, 65, 59,
   24, 53, 45, 63, 39, 57, 50, 61, 56, 19, 14, 42, 36, 65, 20, 61, 25, 64, 57, 58, 29, 53, 26, 63, 46, 40,
   48, 59, 62, 32, 41, 39, 49, 50, 35, 57, 33, 55, 43, 44, 47, 64, 45, 63, 51, 60, 61, 65, 56, 54, 43, 31,
   40, 37, 59, 47, 48, 54, 34, 49, 65, 41, 42, 63, 46, 60, 52, 62, 58, 64, 55, 44, 42, 30, 58, 38, 56, 36,
   45, 46, 65, 50, 64, 48, 39, 40, 61, 62, 53, 59, 57, 63, 51, 34, 36, 52, 53, 54, 40, 56, 42, 60, 61, 55,
   46, 57, 48, 65, 58, 59, 62, 63, 64, 33, 52, 38, 55, 39, 51, 53, 44, 58, 54, 45, 60, 62, 50, 59, 56, 64,
   57, 63, 61, 65, 35, 37, 53, 41, 57, 43, 59, 51, 52, 47, 56, 49, 58, 61, 62, 54, 55, 63, 64, 65, 60
}; // 0.86 kb
static const cart_index_t iCartYY_ab10_a6[420] = {
   0, 23, 24, 3, 27, 5, 28, 49, 50, 9, 10, 21, 22, 60, 61, 15, 17, 65, 45, 47, 32, 33, 54, 35, 56, 43,
   44, 51, 21, 1, 26, 27, 4, 47, 48, 7, 29, 23, 60, 11, 62, 13, 25, 16, 64, 19, 46, 31, 49, 55, 34, 41,
   42, 37, 58, 52, 22, 25, 2, 45, 46, 28, 6, 29, 8, 61, 24, 62, 12, 26, 14, 63, 18, 20, 30, 48, 50, 39,
   40, 57, 36, 59, 38, 53, 3, 16, 39, 9, 23, 32, 50, 41, 57, 15, 33, 27, 45, 55, 63, 21, 44, 64, 61, 49,
   35, 51, 60, 43, 65, 47, 56, 54, 15, 4, 40, 21, 11, 43, 59, 31, 48, 27, 54, 16, 63, 34, 46, 23, 65, 42,
   62, 37, 47, 60, 52, 49, 58, 41, 64, 55, 5, 41, 18, 32, 49, 10, 24, 55, 39, 35, 17, 47, 28, 64, 57, 43,
   22, 63, 50, 60, 33, 44, 65, 51, 61, 54, 45, 56, 17, 42, 6, 44, 58, 22, 12, 46, 30, 56, 28, 64, 18, 48,
   36, 65, 24, 40, 38, 62, 45, 50, 59, 61, 53, 63, 39, 57, 43, 7, 20, 47, 31, 54, 40, 13, 26, 49, 65, 37,
   59, 19, 29, 41, 63, 25, 48, 34, 60, 64, 42, 55, 46, 52, 62, 58, 44, 19, 8, 56, 42, 45, 30, 25, 14, 65,
   50, 58, 38, 29, 20, 64, 39, 26, 36, 46, 61, 57, 48, 63, 40, 62, 53, 59, 9, 11, 53, 15, 16, 35, 57, 37,
   59, 21, 51, 23, 61, 52, 62, 27, 56, 58, 63, 41, 43, 54, 55, 47, 64, 49, 65, 60, 10, 52, 12, 33, 55, 17,
   18, 58, 38, 51, 22, 60, 24, 62, 53, 54, 28, 59, 39, 64, 44, 45, 63, 56, 57, 65, 50, 61, 51, 13, 14, 54,
   34, 56, 36, 19, 20, 60, 61, 52, 53, 25, 26, 55, 57, 29, 40, 42, 65, 63, 46, 64, 48, 58, 59, 62, 33, 34,
   30, 51, 52, 44, 38, 42, 36, 54, 45, 55, 39, 46, 40, 60, 50, 48, 53, 58, 56, 61, 62, 65, 59, 64, 57, 63,
   35, 31, 36, 43, 37, 51, 53, 34, 40, 47, 56, 41, 57, 42, 48, 49, 61, 46, 59, 52, 54, 65, 58, 60, 62, 55,
   63, 64, 32, 37, 38, 35, 41, 33, 39, 52, 53, 43, 44, 49, 50, 58, 59, 47, 45, 62, 57, 55, 51, 56, 64, 54,
   63, 60, 61, 65
}; // 0.82 kb
static const cart_index_t iCartYY_ab10_a7[360] = {
   0, 16, 18, 23, 24, 3, 39, 5, 41, 9, 10, 27, 55, 28, 57, 21, 22, 15, 63, 17, 64, 32, 49, 50, 60, 61,
   33, 45, 35, 47, 43, 44, 65, 51, 54, 56, 15, 1, 20, 4, 40, 21, 26, 43, 7, 27, 54, 11, 13, 59, 29, 16,
   63, 23, 25, 65, 19, 47, 31, 48, 34, 46, 60, 62, 49, 37, 41, 64, 42, 55, 52, 58, 17, 19, 2, 42, 6, 44,
   8, 22, 25, 56, 28, 58, 29, 12, 14, 64, 18, 65, 20, 24, 26, 45, 46, 30, 48, 36, 50, 38, 61, 62, 63, 39,
   40, 57, 59, 53, 9, 4, 36, 11, 53, 15, 40, 35, 31, 21, 51, 16, 34, 57, 48, 23, 61, 27, 46, 56, 42, 43,
   37, 59, 52, 62, 54, 63, 47, 41, 49, 65, 58, 60, 55, 64, 10, 34, 6, 52, 12, 33, 30, 17, 42, 51, 22, 55,
   46, 18, 36, 60, 24, 54, 40, 28, 48, 44, 58, 38, 62, 53, 45, 39, 56, 64, 65, 50, 59, 61, 63, 57, 3, 11,
   38, 16, 39, 9, 53, 32, 37, 15, 33, 23, 52, 50, 59, 27, 45, 21, 62, 44, 58, 35, 41, 57, 55, 63, 51, 61,
   43, 49, 47, 56, 64, 54, 60, 65, 33, 13, 8, 34, 30, 51, 14, 44, 19, 54, 45, 52, 25, 38, 20, 55, 39, 60,
   26, 50, 29, 56, 42, 36, 46, 40, 61, 53, 65, 58, 64, 57, 48, 63, 62, 59, 5, 37, 12, 41, 18, 32, 38, 10,
   52, 35, 17, 49, 58, 24, 53, 47, 28, 43, 59, 22, 62, 33, 55, 39, 64, 57, 44, 50, 51, 60, 54, 45, 63, 56,
   65, 61, 35, 7, 14, 31, 36, 43, 20, 51, 13, 47, 56, 37, 19, 53, 26, 41, 57, 49, 29, 61, 25, 54, 34, 40,
   42, 48, 65, 59, 60, 52, 55, 63, 46, 64, 58, 62, 32, 31, 30, 37, 38, 35, 36, 33, 34, 43, 44, 41, 42, 39,
   40, 49, 50, 47, 48, 45, 46, 51, 52, 53, 58, 59, 56, 57, 54, 55, 60, 61, 62, 65, 64, 63
}; // 0.70 kb
static const cart_index_t iCartYY_ab10_a8[270] = {
   0, 11, 12, 3, 16, 5, 18, 37, 38, 9, 10, 23, 24, 52, 53, 15, 27, 17, 28, 58, 59, 21, 22, 62, 39, 41,
   32, 33, 55, 35, 57, 49, 50, 45, 63, 47, 64, 43, 44, 51, 60, 61, 54, 56, 65, 9, 1, 14, 15, 4, 35, 36,
   7, 20, 21, 51, 11, 53, 13, 26, 27, 16, 56, 57, 19, 29, 23, 61, 25, 40, 31, 43, 54, 34, 47, 48, 37, 59,
   63, 46, 41, 42, 49, 65, 60, 52, 62, 55, 64, 58, 10, 13, 2, 33, 34, 17, 6, 19, 8, 51, 22, 52, 12, 25,
   14, 54, 55, 28, 18, 29, 20, 60, 24, 26, 30, 42, 44, 45, 46, 56, 36, 58, 38, 39, 40, 64, 48, 65, 50, 61,
   62, 53, 63, 57, 59, 3, 4, 30, 9, 11, 32, 38, 31, 36, 15, 33, 16, 39, 34, 40, 21, 23, 44, 50, 42, 48,
   27, 45, 46, 53, 37, 35, 51, 52, 43, 59, 41, 57, 61, 62, 49, 58, 47, 56, 54, 55, 63, 60, 65, 64, 5, 31,
   6, 32, 37, 10, 12, 34, 30, 35, 17, 41, 18, 42, 36, 43, 49, 22, 24, 46, 40, 47, 28, 48, 38, 52, 33, 44,
   58, 51, 53, 55, 39, 50, 59, 60, 62, 54, 45, 56, 64, 57, 65, 61, 63, 32, 7, 8, 35, 31, 33, 30, 13, 14,
   43, 44, 37, 38, 19, 20, 47, 41, 45, 39, 25, 26, 49, 50, 29, 36, 34, 51, 56, 42, 54, 40, 52, 53, 57, 48,
   55, 46, 60, 61, 65, 58, 59, 64, 63, 62
}; // 0.53 kb
static const cart_index_t iCartYY_ab10_a9[165] = {
   0, 4, 6, 11, 12, 3, 30, 5, 31, 9, 10, 16, 34, 18, 36, 23, 24, 15, 40, 17, 42, 21, 22, 27, 46, 28,
   48, 32, 37, 38, 52, 53, 33, 39, 35, 41, 43, 44, 49, 50, 58, 59, 62, 45, 47, 51, 55, 57, 60, 61, 54, 63,
   56, 64, 65, 3, 1, 8, 4, 30, 9, 14, 32, 7, 15, 33, 11, 13, 38, 20, 16, 39, 21, 26, 44, 19, 27, 45,
   23, 25, 50, 29, 35, 31, 36, 34, 40, 51, 53, 43, 37, 47, 56, 41, 57, 42, 48, 46, 61, 49, 54, 52, 59, 55,
   63, 60, 62, 65, 58, 64, 5, 7, 2, 31, 6, 32, 8, 10, 13, 35, 17, 37, 19, 12, 14, 41, 18, 43, 20, 22,
   25, 47, 28, 49, 29, 24, 26, 33, 34, 30, 42, 36, 44, 38, 51, 52, 54, 45, 55, 39, 46, 40, 48, 50, 60, 56,
   58, 53, 64, 57, 65, 59, 61, 62, 63
}; // 0.32 kb
static const cart_index_t iCartYY_ab10_a10[66] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
   52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65
}; // 0.13 kb
static const cart_index_t iCartYY_ab11_a0[78] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
   52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77
}; // 0.15 kb
static const cart_index_t iCartYY_ab11_a1[198] = {
   0, 5, 7, 3, 1, 8, 4, 6, 2, 5, 9, 33, 11, 3, 34, 7, 33, 10, 13, 35, 4, 34, 8, 12, 35, 14,
   6, 9, 17, 40, 10, 38, 19, 15, 11, 41, 16, 39, 13, 36, 12, 20, 37, 18, 14, 17, 21, 42, 23, 15, 44, 19,
   43, 22, 25, 45, 16, 46, 20, 24, 47, 26, 18, 21, 29, 52, 22, 50, 31, 27, 23, 53, 28, 51, 25, 48, 24, 32,
   49, 30, 26, 29, 27, 54, 31, 55, 28, 56, 32, 30, 39, 37, 35, 41, 34, 36, 33, 40, 38, 38, 57, 43, 58, 36,
   46, 40, 42, 57, 59, 47, 37, 44, 41, 58, 45, 59, 39, 51, 61, 45, 63, 49, 47, 53, 44, 60, 65, 46, 48, 42,
   52, 62, 43, 64, 50, 50, 67, 55, 69, 48, 56, 52, 54, 66, 71, 56, 49, 54, 53, 68, 55, 70, 51, 57, 62, 64,
   60, 58, 65, 61, 63, 59, 62, 66, 72, 68, 60, 73, 64, 72, 67, 70, 74, 61, 73, 65, 69, 74, 71, 63, 66, 68,
   77, 67, 76, 70, 75, 69, 71, 76, 75, 74, 77, 73, 75, 72, 77, 76
}; // 0.39 kb
static const cart_index_t iCartYY_ab11_a2[330] = {
   0, 9, 10, 5, 7, 33, 11, 1, 12, 3, 34, 8, 13, 14, 2, 35, 4, 6, 15, 3, 36, 11, 41, 34, 16, 37,
   4, 39, 13, 35, 5, 17, 38, 9, 33, 40, 39, 18, 6, 37, 35, 14, 7, 40, 19, 33, 10, 38, 41, 8, 20, 34,
   36, 12, 9, 21, 57, 17, 40, 42, 10, 57, 22, 38, 19, 43, 23, 11, 58, 15, 44, 41, 58, 12, 24, 36, 46, 20,
   25, 59, 13, 45, 16, 39, 59, 26, 14, 47, 37, 18, 27, 15, 60, 23, 53, 44, 28, 61, 16, 51, 25, 45, 17, 29,
   62, 21, 42, 52, 63, 30, 18, 49, 47, 26, 19, 64, 31, 43, 22, 50, 65, 20, 32, 46, 48, 24, 21, 27, 66, 29,
   52, 54, 22, 67, 28, 50, 31, 55, 29, 23, 68, 27, 54, 53, 69, 24, 30, 48, 56, 32, 31, 70, 25, 55, 28, 51,
   71, 32, 26, 56, 49, 30, 33, 42, 43, 40, 38, 57, 44, 34, 46, 41, 58, 36, 45, 47, 35, 59, 39, 37, 60, 36,
   48, 58, 65, 46, 61, 49, 37, 63, 59, 47, 38, 62, 50, 57, 43, 64, 51, 63, 39, 61, 45, 59, 40, 52, 64, 42,
   57, 62, 53, 41, 65, 44, 60, 58, 42, 54, 72, 52, 62, 66, 43, 72, 55, 64, 50, 67, 54, 44, 73, 53, 68, 60,
   55, 74, 45, 70, 51, 61, 73, 46, 56, 65, 69, 48, 74, 56, 47, 71, 63, 49, 75, 48, 49, 69, 71, 56, 50, 76,
   51, 67, 55, 70, 52, 53, 77, 54, 66, 68, 57, 66, 67, 62, 64, 72, 68, 58, 69, 60, 73, 65, 70, 71, 59, 74,
   61, 63, 66, 60, 75, 68, 77, 73, 67, 75, 61, 76, 70, 74, 62, 68, 76, 66, 72, 77, 76, 69, 63, 75, 74, 71,
   64, 77, 70, 72, 67, 76, 77, 65, 71, 73, 75, 69, 72, 73, 74, 77, 76, 75
}; // 0.64 kb
static const cart_index_t iCartYY_ab11_a3[450] = {
   0, 17, 19, 9, 10, 5, 38, 7, 40, 33, 15, 1, 20, 3, 36, 11, 12, 41, 8, 34, 16, 18, 2, 37, 4, 39,
   6, 13, 14, 35, 5, 21, 43, 17, 38, 9, 57, 33, 42, 40, 23, 3, 46, 11, 58, 15, 36, 44, 34, 41, 7, 42,
   22, 40, 19, 33, 43, 10, 57, 38, 25, 47, 4, 59, 13, 45, 35, 16, 37, 39, 44, 8, 24, 34, 46, 41, 20, 58,
   12, 36, 45, 26, 6, 47, 35, 59, 14, 39, 18, 37, 9, 29, 64, 21, 57, 17, 62, 40, 52, 42, 10, 62, 31, 57,
   22, 38, 50, 19, 64, 43, 27, 11, 65, 15, 60, 23, 58, 53, 41, 44, 28, 63, 13, 61, 16, 51, 39, 25, 59, 45,
   60, 12, 32, 36, 48, 58, 24, 65, 20, 46, 61, 30, 14, 49, 37, 63, 18, 59, 26, 47, 17, 27, 72, 29, 62, 21,
   66, 42, 54, 52, 29, 15, 73, 23, 68, 27, 60, 54, 44, 53, 19, 72, 28, 64, 31, 43, 55, 22, 67, 50, 31, 74,
   16, 70, 25, 55, 45, 28, 61, 51, 73, 20, 30, 46, 56, 65, 32, 69, 24, 48, 74, 32, 18, 56, 47, 71, 26, 63,
   30, 49, 21, 23, 77, 27, 66, 29, 68, 52, 53, 54, 22, 76, 25, 67, 28, 50, 51, 31, 70, 55, 75, 24, 26, 48,
   49, 69, 30, 71, 32, 56, 51, 49, 35, 63, 39, 61, 37, 45, 47, 59, 53, 34, 48, 41, 65, 44, 46, 60, 36, 58,
   33, 52, 50, 42, 43, 40, 64, 38, 62, 57, 38, 66, 55, 62, 50, 57, 67, 43, 72, 64, 68, 36, 56, 58, 69, 60,
   48, 73, 46, 65, 40, 54, 67, 52, 64, 42, 72, 57, 66, 62, 70, 56, 37, 71, 59, 74, 47, 61, 49, 63, 54, 41,
   69, 44, 73, 53, 65, 68, 58, 60, 55, 71, 39, 74, 45, 70, 59, 51, 63, 61, 50, 75, 45, 76, 51, 67, 61, 55,
   74, 70, 76, 48, 47, 69, 63, 75, 49, 74, 56, 71, 52, 44, 75, 53, 77, 54, 73, 66, 60, 68, 77, 46, 49, 65,
   71, 73, 56, 75, 48, 69, 42, 53, 76, 54, 72, 52, 77, 62, 68, 66, 43, 77, 51, 72, 55, 64, 70, 50, 76, 67,
   57, 68, 70, 66, 67, 62, 76, 64, 77, 72, 66, 58, 71, 60, 75, 68, 69, 77, 65, 73, 67, 69, 59, 75, 61, 76,
   63, 70, 71, 74, 62, 60, 74, 68, 76, 66, 75, 72, 73, 77, 64, 73, 61, 77, 70, 72, 74, 67, 75, 76, 72, 65,
   63, 73, 74, 77, 71, 76, 69, 75
}; // 0.88 kb
static const cart_index_t iCartYY_ab11_a4[540] = {
   0, 21, 22, 5, 17, 7, 19, 42, 43, 9, 10, 57, 38, 40, 33, 23, 1, 24, 15, 3, 44, 46, 8, 20, 11, 58,
   12, 36, 34, 41, 25, 26, 2, 45, 47, 16, 4, 18, 6, 59, 13, 14, 35, 37, 39, 27, 3, 48, 23, 11, 53, 65,
   34, 46, 15, 60, 36, 58, 41, 44, 28, 49, 4, 51, 63, 25, 13, 47, 35, 61, 16, 37, 39, 59, 45, 5, 29, 50,
   9, 21, 33, 43, 52, 64, 17, 38, 62, 57, 42, 40, 51, 30, 6, 61, 49, 45, 35, 26, 14, 63, 39, 18, 37, 47,
   59, 7, 52, 31, 33, 42, 10, 22, 62, 50, 40, 19, 64, 43, 57, 38, 53, 8, 32, 44, 34, 60, 48, 12, 24, 41,
   65, 20, 46, 36, 58, 9, 27, 67, 17, 29, 40, 64, 54, 72, 21, 57, 66, 62, 52, 42, 10, 66, 28, 38, 62, 19,
   31, 72, 55, 57, 22, 67, 50, 64, 43, 29, 11, 69, 27, 15, 54, 73, 41, 65, 23, 68, 58, 60, 44, 53, 68, 12,
   30, 60, 36, 73, 56, 20, 32, 58, 69, 24, 48, 46, 65, 31, 71, 13, 55, 74, 28, 16, 63, 39, 70, 25, 59, 45,
   61, 51, 70, 32, 14, 74, 56, 61, 37, 30, 18, 71, 59, 26, 47, 49, 63, 21, 15, 75, 29, 23, 52, 77, 44, 73,
   27, 66, 60, 68, 53, 54, 22, 75, 16, 50, 76, 31, 25, 74, 45, 67, 28, 61, 51, 70, 55, 17, 23, 76, 21, 27,
   42, 72, 53, 77, 29, 62, 68, 66, 54, 52, 76, 24, 18, 75, 48, 74, 47, 32, 26, 69, 63, 30, 49, 56, 71, 19,
   77, 25, 43, 72, 22, 28, 76, 51, 64, 31, 70, 55, 67, 50, 77, 20, 26, 73, 46, 75, 49, 24, 30, 65, 71, 32,
   56, 48, 69, 33, 54, 55, 40, 52, 38, 50, 66, 67, 42, 43, 72, 64, 62, 57, 54, 34, 56, 53, 41, 68, 69, 36,
   48, 44, 73, 46, 65, 58, 60, 55, 56, 35, 70, 71, 51, 39, 49, 37, 74, 45, 47, 59, 63, 61, 66, 36, 49, 68,
   58, 77, 71, 46, 56, 60, 75, 48, 69, 65, 73, 67, 48, 37, 76, 69, 70, 59, 56, 47, 75, 61, 49, 63, 71, 74,
   38, 68, 51, 57, 66, 43, 55, 77, 70, 62, 50, 76, 67, 72, 64, 50, 69, 39, 67, 75, 55, 45, 71, 59, 76, 51,
   63, 61, 74, 70, 40, 53, 70, 42, 54, 57, 67, 68, 76, 52, 64, 77, 72, 66, 62, 52, 41, 71, 54, 44, 66, 75,
   58, 69, 53, 77, 65, 73, 60, 68, 42, 44, 74, 52, 53, 62, 76, 60, 75, 54, 72, 73, 77, 68, 66, 43, 73, 45,
   64, 77, 50, 51, 75, 61, 72, 55, 74, 70, 76, 67, 72, 46, 47, 77, 65, 76, 63, 48, 49, 73, 74, 56, 71, 69,
   75, 57, 60, 61, 62, 68, 64, 70, 73, 74, 66, 67, 75, 76, 77, 72, 62, 58, 63, 66, 60, 72, 74, 65, 71, 68,
   76, 69, 75, 73, 77, 64, 65, 59, 72, 73, 67, 61, 69, 63, 77, 70, 71, 74, 75, 76
}; // 1.05 kb
static const cart_index_t iCartYY_ab11_a5[588] = {
   0, 29, 31, 21, 22, 5, 50, 7, 52, 9, 10, 17, 62, 19, 64, 33, 42, 43, 57, 38, 40, 27, 1, 32, 3, 48,
   23, 24, 53, 8, 15, 60, 11, 12, 65, 20, 44, 34, 46, 36, 58, 41, 28, 30, 2, 49, 4, 51, 6, 25, 26, 61,
   16, 63, 18, 13, 14, 45, 47, 35, 37, 39, 59, 5, 27, 55, 29, 50, 9, 67, 33, 54, 17, 38, 21, 66, 43, 72,
   40, 52, 64, 62, 57, 42, 29, 3, 56, 11, 69, 27, 48, 54, 34, 23, 68, 15, 36, 73, 46, 53, 41, 65, 58, 60,
   44, 7, 54, 28, 52, 31, 33, 55, 10, 66, 40, 19, 42, 72, 22, 67, 38, 62, 50, 64, 43, 57, 31, 56, 4, 71,
   13, 55, 35, 28, 49, 70, 25, 74, 47, 16, 37, 51, 63, 39, 59, 45, 61, 54, 8, 30, 34, 56, 53, 32, 68, 12,
   44, 73, 41, 20, 69, 24, 60, 36, 48, 46, 65, 58, 55, 32, 6, 56, 35, 70, 14, 51, 30, 74, 45, 71, 26, 39,
   18, 61, 49, 37, 47, 59, 63, 9, 23, 70, 27, 67, 17, 76, 40, 53, 21, 57, 29, 68, 64, 77, 42, 54, 72, 66,
   62, 52, 10, 68, 25, 66, 28, 38, 51, 19, 77, 57, 22, 62, 76, 31, 70, 43, 72, 55, 67, 50, 64, 21, 11, 71,
   15, 75, 29, 69, 52, 41, 27, 66, 23, 58, 77, 65, 54, 44, 73, 60, 68, 53, 22, 69, 13, 75, 16, 50, 39, 31,
   71, 67, 28, 76, 63, 25, 59, 55, 74, 45, 61, 51, 70, 66, 12, 26, 36, 49, 68, 30, 77, 20, 60, 75, 58, 24,
   71, 32, 73, 46, 56, 48, 69, 65, 67, 24, 14, 48, 37, 76, 18, 70, 32, 75, 61, 69, 30, 59, 26, 74, 56, 47,
   49, 63, 71, 17, 15, 74, 23, 76, 21, 75, 42, 44, 29, 62, 27, 60, 72, 73, 52, 53, 77, 68, 66, 54, 19, 73,
   16, 77, 25, 43, 45, 22, 75, 64, 31, 72, 74, 28, 61, 50, 76, 51, 70, 55, 67, 72, 20, 18, 46, 47, 77, 26,
   76, 24, 73, 74, 65, 32, 63, 30, 75, 48, 49, 56, 71, 69, 50, 48, 35, 69, 39, 67, 37, 55, 56, 76, 51, 75,
   49, 45, 47, 70, 71, 59, 63, 61, 74, 52, 34, 49, 41, 71, 54, 56, 66, 36, 53, 77, 44, 46, 75, 48, 68, 58,
   69, 65, 73, 60, 33, 53, 51, 54, 55, 40, 70, 38, 68, 42, 43, 52, 77, 50, 76, 57, 66, 67, 72, 64, 62, 38,
   60, 45, 68, 51, 57, 61, 43, 73, 62, 50, 66, 75, 55, 74, 64, 77, 70, 76, 67, 72, 62, 36, 47, 58, 63, 66,
   49, 72, 46, 68, 76, 60, 48, 74, 56, 77, 65, 71, 69, 75, 73, 40, 44, 61, 53, 70, 42, 74, 57, 60, 52, 64,
   54, 73, 67, 75, 62, 68, 76, 77, 72, 66, 64, 46, 37, 65, 59, 72, 47, 67, 48, 77, 70, 73, 56, 61, 49, 76,
   69, 63, 71, 74, 75, 42, 41, 63, 44, 74, 52, 71, 62, 58, 54, 72, 53, 65, 76, 69, 66, 60, 75, 73, 77, 68,
   43, 65, 39, 73, 45, 64, 59, 50, 69, 72, 55, 77, 71, 51, 63, 67, 75, 61, 74, 70, 76, 57, 58, 59, 60, 61,
   62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77
}; // 1.15 kb
static const cart_index_t iCartYY_ab11_a6[588] = {
   0, 27, 28, 5, 29, 7, 31, 54, 55, 9, 10, 21, 22, 66, 67, 17, 19, 72, 50, 52, 33, 38, 62, 40, 64, 42,
   43, 57, 29, 1, 30, 27, 3, 54, 56, 8, 32, 23, 68, 11, 69, 12, 24, 15, 73, 20, 48, 34, 53, 60, 36, 44,
   46, 41, 65, 58, 31, 32, 2, 55, 56, 28, 4, 30, 6, 70, 25, 71, 13, 26, 14, 74, 16, 18, 35, 49, 51, 45,
   47, 61, 37, 63, 39, 59, 21, 3, 49, 29, 11, 52, 71, 34, 56, 27, 66, 15, 75, 36, 48, 23, 77, 46, 69, 41,
   54, 68, 58, 53, 65, 44, 73, 60, 22, 48, 4, 50, 69, 31, 13, 56, 35, 67, 28, 75, 16, 49, 37, 76, 25, 47,
   39, 71, 55, 51, 63, 70, 59, 74, 45, 61, 5, 23, 51, 9, 27, 33, 55, 53, 70, 17, 38, 29, 50, 68, 76, 21,
   43, 77, 67, 54, 40, 57, 66, 42, 72, 52, 64, 62, 50, 24, 6, 67, 48, 55, 35, 32, 14, 76, 51, 69, 39, 30,
   18, 75, 45, 26, 37, 56, 70, 61, 49, 74, 47, 71, 59, 63, 7, 53, 25, 33, 54, 10, 28, 68, 51, 40, 19, 52,
   31, 77, 70, 42, 22, 76, 55, 66, 38, 43, 72, 57, 67, 62, 50, 64, 52, 8, 26, 54, 34, 66, 49, 12, 30, 53,
   77, 41, 71, 20, 32, 44, 75, 24, 56, 36, 68, 73, 46, 60, 48, 58, 69, 65, 9, 15, 61, 17, 23, 40, 70, 44,
   74, 21, 57, 27, 67, 60, 75, 29, 64, 73, 76, 53, 42, 62, 68, 52, 77, 54, 72, 66, 10, 60, 16, 38, 68, 19,
   25, 73, 45, 57, 22, 66, 28, 75, 61, 62, 31, 74, 51, 77, 43, 50, 76, 64, 70, 72, 55, 67, 17, 11, 63, 21,
   15, 42, 74, 41, 71, 29, 62, 23, 76, 58, 69, 27, 72, 65, 75, 44, 52, 66, 60, 54, 73, 53, 77, 68, 62, 12,
   18, 66, 36, 72, 47, 20, 26, 68, 76, 58, 63, 24, 30, 60, 74, 32, 49, 46, 77, 75, 48, 73, 56, 65, 71, 69,
   19, 65, 13, 43, 73, 22, 16, 69, 39, 64, 31, 77, 25, 71, 59, 72, 28, 63, 45, 75, 50, 55, 74, 67, 61, 76,
   51, 70, 64, 20, 14, 72, 46, 67, 37, 24, 18, 77, 70, 65, 59, 32, 26, 73, 61, 30, 47, 48, 76, 74, 56, 75,
   49, 69, 63, 71, 33, 44, 45, 40, 53, 38, 51, 60, 61, 42, 43, 54, 55, 73, 74, 52, 50, 75, 70, 68, 57, 64,
   77, 62, 76, 66, 67, 72, 42, 34, 47, 52, 41, 62, 63, 36, 49, 54, 72, 44, 74, 46, 56, 53, 76, 48, 71, 58,
   66, 77, 65, 68, 69, 60, 75, 73, 43, 46, 35, 64, 65, 50, 39, 48, 37, 72, 55, 73, 45, 56, 47, 77, 51, 49,
   59, 69, 67, 70, 71, 76, 63, 75, 61, 74, 57, 36, 37, 62, 58, 64, 59, 46, 47, 66, 67, 60, 61, 48, 49, 68,
   70, 56, 63, 65, 72, 76, 69, 77, 71, 73, 74, 75, 38, 58, 39, 57, 60, 43, 45, 65, 59, 62, 50, 68, 51, 69,
   63, 66, 55, 71, 61, 73, 64, 67, 75, 72, 74, 77, 70, 76, 40, 41, 59, 42, 44, 57, 61, 58, 63, 52, 64, 53,
   70, 65, 71, 54, 67, 69, 74, 60, 62, 72, 73, 66, 75, 68, 76, 77
}; // 1.15 kb
static const cart_index_t iCartYY_ab11_a7[540] = {
   0, 23, 25, 27, 28, 5, 51, 7, 53, 9, 10, 29, 68, 31, 70, 21, 22, 17, 76, 19, 77, 33, 54, 55, 66, 67,
   38, 50, 40, 52, 42, 43, 72, 57, 62, 64, 21, 1, 26, 3, 49, 29, 30, 52, 8, 27, 66, 11, 12, 71, 32, 15,
   75, 23, 24, 77, 20, 54, 34, 56, 36, 48, 68, 69, 53, 41, 44, 73, 46, 60, 58, 65, 22, 24, 2, 48, 4, 50,
   6, 31, 32, 67, 28, 69, 30, 13, 14, 75, 16, 76, 18, 25, 26, 55, 56, 35, 49, 37, 51, 39, 70, 71, 74, 45,
   47, 61, 63, 59, 5, 15, 45, 23, 51, 9, 61, 33, 44, 17, 38, 27, 60, 55, 74, 29, 50, 21, 75, 43, 73, 40,
   53, 70, 68, 76, 57, 67, 42, 54, 52, 64, 77, 62, 66, 72, 17, 3, 47, 11, 63, 21, 49, 42, 34, 29, 62, 15,
   36, 74, 56, 23, 76, 27, 48, 72, 46, 52, 41, 71, 58, 69, 66, 75, 54, 44, 53, 77, 65, 68, 60, 73, 7, 44,
   16, 53, 25, 33, 45, 10, 60, 40, 19, 54, 73, 28, 61, 52, 31, 42, 74, 22, 75, 38, 68, 51, 77, 70, 43, 55,
   57, 66, 62, 50, 76, 64, 72, 67, 19, 46, 4, 65, 13, 43, 35, 22, 48, 64, 31, 73, 56, 16, 37, 77, 25, 72,
   47, 28, 49, 50, 69, 39, 71, 59, 55, 45, 67, 75, 76, 51, 63, 70, 74, 61, 42, 8, 18, 34, 47, 52, 26, 62,
   12, 54, 72, 41, 20, 63, 30, 44, 74, 53, 32, 76, 24, 66, 36, 49, 46, 56, 77, 71, 68, 58, 60, 75, 48, 73,
   65, 69, 43, 20, 6, 46, 35, 64, 14, 50, 24, 72, 55, 65, 32, 39, 18, 73, 45, 77, 26, 51, 30, 67, 48, 37,
   56, 47, 70, 59, 76, 69, 75, 61, 49, 74, 71, 63, 9, 11, 59, 15, 61, 17, 63, 40, 41, 21, 57, 23, 58, 70,
   71, 27, 67, 29, 69, 64, 65, 42, 44, 74, 60, 75, 62, 76, 52, 53, 54, 72, 73, 66, 68, 77, 10, 58, 13, 60,
   16, 38, 39, 19, 65, 57, 22, 68, 69, 25, 59, 66, 28, 62, 63, 31, 71, 43, 73, 45, 75, 61, 50, 51, 64, 77,
   72, 55, 74, 67, 76, 70, 57, 12, 14, 36, 37, 62, 18, 64, 20, 66, 67, 58, 24, 59, 26, 60, 61, 68, 30, 70,
   32, 72, 46, 47, 48, 49, 76, 63, 77, 65, 73, 74, 56, 75, 69, 71, 38, 36, 35, 58, 39, 57, 37, 43, 46, 62,
   50, 60, 48, 45, 47, 68, 51, 66, 49, 55, 56, 64, 65, 59, 69, 63, 67, 61, 72, 73, 77, 70, 71, 76, 75, 74,
   40, 34, 37, 41, 59, 42, 47, 57, 36, 52, 64, 44, 46, 61, 49, 53, 70, 54, 56, 67, 48, 62, 58, 63, 65, 71,
   72, 74, 66, 60, 68, 76, 69, 77, 73, 75, 33, 41, 39, 44, 45, 40, 59, 38, 58, 42, 43, 53, 65, 51, 63, 54,
   55, 52, 71, 50, 69, 57, 60, 61, 73, 74, 64, 70, 62, 68, 66, 67, 75, 72, 77, 76
}; // 1.05 kb
static const cart_index_t iCartYY_ab11_a8[450] = {
   0, 15, 16, 5, 23, 7, 25, 44, 45, 9, 10, 27, 28, 60, 61, 17, 29, 19, 31, 73, 74, 21, 22, 75, 51, 53,
   33, 38, 68, 40, 70, 54, 55, 50, 76, 52, 77, 42, 43, 57, 66, 67, 62, 64, 72, 17, 1, 18, 21, 3, 42, 47,
   8, 26, 29, 62, 11, 63, 12, 30, 27, 15, 72, 74, 20, 32, 23, 76, 24, 49, 34, 52, 66, 36, 54, 56, 41, 71,
   75, 48, 44, 46, 53, 77, 68, 58, 69, 60, 73, 65, 19, 20, 2, 43, 46, 22, 4, 24, 6, 64, 31, 65, 13, 32,
   14, 72, 73, 28, 16, 30, 18, 77, 25, 26, 35, 48, 50, 55, 56, 67, 37, 69, 39, 45, 47, 75, 49, 76, 51, 70,
   71, 59, 74, 61, 63, 9, 3, 37, 17, 11, 40, 59, 34, 47, 21, 57, 15, 61, 36, 49, 29, 23, 64, 70, 46, 56,
   27, 67, 48, 63, 41, 42, 62, 58, 52, 71, 44, 74, 76, 69, 53, 65, 54, 72, 66, 60, 75, 68, 77, 73, 10, 36,
   4, 38, 58, 19, 13, 46, 35, 57, 22, 60, 16, 48, 37, 62, 68, 31, 25, 56, 47, 66, 28, 49, 39, 65, 43, 50,
   69, 64, 59, 73, 45, 51, 63, 77, 71, 72, 55, 67, 75, 61, 76, 70, 74, 5, 11, 39, 9, 15, 33, 45, 41, 59,
   17, 38, 23, 51, 58, 63, 21, 27, 43, 55, 65, 71, 29, 50, 69, 61, 44, 40, 57, 60, 42, 74, 53, 70, 67, 75,
   54, 73, 52, 64, 62, 68, 76, 66, 72, 77, 38, 12, 6, 57, 36, 43, 35, 20, 14, 62, 50, 58, 39, 24, 18, 66,
   60, 55, 45, 32, 26, 68, 51, 30, 37, 46, 64, 67, 48, 72, 47, 65, 59, 61, 49, 73, 56, 77, 70, 76, 69, 63,
   75, 74, 71, 7, 41, 13, 33, 44, 10, 16, 58, 39, 40, 19, 53, 25, 65, 59, 42, 54, 22, 28, 69, 63, 52, 31,
   71, 45, 60, 38, 43, 73, 57, 61, 68, 51, 55, 74, 66, 75, 62, 50, 64, 77, 70, 72, 67, 76, 40, 8, 14, 42,
   34, 57, 37, 12, 18, 52, 64, 41, 59, 20, 26, 54, 44, 67, 61, 24, 30, 53, 70, 32, 47, 36, 62, 72, 46, 66,
   49, 58, 63, 74, 56, 60, 48, 68, 76, 77, 65, 71, 73, 75, 69, 33, 34, 35, 40, 41, 38, 39, 36, 37, 42, 43,
   44, 45, 46, 47, 52, 53, 50, 51, 48, 49, 54, 55, 56, 59, 58, 57, 64, 65, 62, 63, 60, 61, 70, 71, 68, 69,
   66, 67, 72, 73, 74, 77, 76, 75
}; // 0.88 kb
static const cart_index_t iCartYY_ab11_a9[330] = {
   0, 11, 13, 15, 16, 5, 39, 7, 41, 9, 10, 23, 58, 25, 59, 27, 28, 17, 63, 19, 65, 21, 22, 29, 69, 31,
   71, 33, 44, 45, 60, 61, 38, 51, 40, 53, 42, 43, 54, 55, 73, 74, 75, 50, 52, 57, 68, 70, 66, 67, 62, 76,
   64, 77, 72, 9, 1, 14, 3, 37, 17, 18, 40, 8, 21, 57, 11, 12, 59, 26, 15, 61, 29, 30, 64, 20, 27, 67,
   23, 24, 70, 32, 42, 34, 47, 36, 49, 62, 63, 52, 41, 54, 72, 44, 74, 46, 56, 48, 76, 53, 66, 58, 71, 60,
   75, 68, 69, 77, 65, 73, 10, 12, 2, 36, 4, 38, 6, 19, 20, 57, 22, 58, 24, 13, 14, 60, 16, 62, 18, 31,
   32, 66, 28, 68, 30, 25, 26, 43, 46, 35, 48, 37, 50, 39, 64, 65, 72, 55, 73, 45, 56, 47, 49, 51, 77, 67,
   69, 59, 75, 61, 76, 63, 70, 71, 74, 5, 3, 35, 11, 39, 9, 37, 33, 34, 17, 38, 15, 36, 45, 47, 23, 51,
   21, 49, 43, 46, 29, 50, 27, 48, 55, 56, 40, 41, 59, 58, 63, 57, 61, 42, 44, 52, 64, 53, 70, 65, 71, 69,
   67, 54, 62, 60, 74, 68, 76, 66, 75, 72, 73, 77, 7, 34, 4, 41, 13, 33, 35, 10, 36, 40, 19, 44, 46, 16,
   37, 53, 25, 42, 47, 22, 48, 52, 31, 54, 56, 28, 49, 38, 58, 39, 65, 59, 43, 45, 57, 60, 62, 50, 68, 51,
   69, 63, 71, 55, 66, 64, 73, 61, 77, 70, 72, 74, 67, 75, 76, 33, 8, 6, 34, 35, 40, 14, 38, 12, 42, 43,
   41, 20, 39, 18, 44, 45, 52, 26, 50, 24, 54, 55, 53, 32, 51, 30, 57, 36, 37, 46, 47, 64, 59, 62, 58, 66,
   67, 60, 61, 48, 49, 56, 70, 68, 72, 65, 63, 73, 74, 77, 71, 76, 69, 75
}; // 0.64 kb
static const cart_index_t iCartYY_ab11_a10[198] = {
   0, 3, 4, 5, 11, 7, 13, 34, 35, 9, 10, 15, 16, 36, 37, 17, 23, 19, 25, 46, 47, 21, 22, 27, 28, 48,
   49, 29, 31, 56, 39, 41, 33, 38, 58, 40, 59, 44, 45, 51, 63, 53, 65, 42, 43, 50, 69, 52, 71, 54, 55, 57,
   60, 61, 62, 68, 64, 70, 73, 74, 66, 67, 75, 76, 77, 72, 5, 1, 6, 9, 3, 33, 35, 8, 14, 17, 38, 11,
   39, 12, 18, 21, 15, 43, 45, 20, 26, 29, 50, 23, 51, 24, 30, 27, 55, 32, 37, 34, 40, 57, 36, 42, 47, 41,
   59, 61, 49, 44, 46, 52, 64, 67, 48, 54, 56, 53, 70, 62, 58, 63, 66, 60, 72, 74, 65, 71, 68, 76, 69, 75,
   73, 77, 7, 8, 2, 33, 34, 10, 4, 12, 6, 40, 19, 41, 13, 20, 14, 42, 44, 22, 16, 24, 18, 52, 31, 53,
   25, 32, 26, 54, 28, 30, 35, 36, 38, 43, 46, 57, 37, 58, 39, 45, 47, 60, 48, 62, 50, 55, 56, 66, 49, 68,
   51, 64, 65, 59, 72, 73, 67, 61, 69, 63, 77, 70, 71, 74, 75, 76
}; // 0.39 kb
static const cart_index_t iCartYY_ab11_a11[78] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
   52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77
}; // 0.15 kb
static const cart_index_t iCartYY_ab12_a0[91] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
   52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
   78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90
}; // 0.18 kb
static const cart_index_t iCartYY_ab12_a1[234] = {
   0, 3, 5, 4, 1, 7, 6, 8, 2, 11, 4, 37, 12, 36, 6, 3, 9, 38, 36, 14, 8, 5, 38, 10, 37, 7,
   13, 9, 15, 41, 10, 39, 17, 16, 11, 43, 40, 13, 19, 18, 44, 12, 42, 20, 14, 23, 16, 47, 24, 45, 18, 15,
   21, 49, 46, 26, 20, 17, 50, 22, 48, 19, 25, 21, 27, 53, 22, 51, 29, 28, 23, 55, 52, 25, 31, 30, 56, 24,
   54, 32, 26, 33, 28, 59, 34, 57, 30, 27, 33, 61, 58, 35, 32, 29, 62, 34, 60, 31, 35, 38, 41, 39, 43, 37,
   40, 44, 42, 36, 64, 40, 48, 65, 46, 42, 39, 63, 50, 45, 65, 44, 41, 49, 63, 47, 43, 64, 49, 53, 66, 50,
   68, 51, 55, 47, 67, 56, 69, 45, 70, 48, 52, 71, 54, 46, 76, 52, 60, 77, 58, 54, 51, 73, 62, 57, 75, 56,
   53, 61, 72, 59, 55, 74, 61, 59, 78, 62, 79, 57, 80, 60, 58, 63, 66, 68, 67, 64, 70, 69, 71, 65, 74, 67,
   82, 75, 81, 69, 66, 72, 83, 81, 77, 71, 68, 83, 73, 82, 70, 76, 72, 78, 86, 73, 84, 79, 78, 74, 88, 85,
   76, 80, 79, 89, 75, 87, 80, 77, 83, 86, 84, 88, 82, 85, 89, 87, 81, 90, 85, 87, 84, 90, 89, 86, 88, 90
}; // 0.46 kb
static const cart_index_t iCartYY_ab12_a2[396] = {
   0, 9, 10, 3, 5, 38, 11, 1, 13, 4, 37, 7, 12, 14, 2, 36, 6, 8, 3, 15, 39, 9, 38, 41, 16, 4,
   40, 11, 43, 37, 5, 41, 17, 38, 10, 39, 18, 42, 6, 44, 12, 36, 43, 7, 19, 37, 40, 13, 44, 20, 8, 42,
   36, 14, 9, 21, 63, 15, 41, 49, 10, 63, 22, 39, 17, 50, 23, 11, 64, 16, 47, 43, 24, 65, 12, 45, 18, 44,
   64, 13, 25, 40, 48, 19, 65, 26, 14, 46, 42, 20, 15, 27, 66, 21, 49, 53, 28, 16, 67, 23, 55, 47, 17, 68,
   29, 50, 22, 51, 30, 69, 18, 56, 24, 45, 70, 19, 31, 48, 52, 25, 71, 32, 20, 54, 46, 26, 21, 33, 72, 27,
   53, 61, 22, 73, 34, 51, 29, 62, 33, 23, 74, 28, 59, 55, 34, 75, 24, 57, 30, 56, 76, 25, 35, 52, 60, 31,
   77, 35, 26, 58, 54, 32, 27, 28, 78, 33, 61, 59, 29, 79, 30, 62, 34, 57, 80, 31, 32, 60, 58, 35, 45, 46,
   36, 65, 44, 42, 47, 37, 48, 43, 64, 40, 38, 49, 50, 41, 39, 63, 39, 66, 51, 63, 50, 68, 67, 40, 52, 64,
   70, 48, 41, 53, 68, 49, 63, 66, 69, 54, 42, 71, 65, 46, 55, 43, 70, 47, 67, 64, 56, 71, 44, 69, 45, 65,
   57, 81, 45, 75, 56, 69, 81, 58, 46, 77, 71, 54, 59, 47, 82, 55, 74, 67, 82, 48, 60, 70, 76, 52, 49, 61,
   83, 53, 66, 72, 50, 83, 62, 68, 51, 73, 51, 84, 57, 73, 62, 79, 85, 52, 58, 76, 80, 60, 53, 59, 86, 61,
   72, 78, 87, 60, 54, 80, 77, 58, 61, 55, 88, 59, 78, 74, 62, 89, 56, 79, 57, 75, 63, 72, 73, 66, 68, 83,
   74, 64, 76, 67, 82, 70, 75, 77, 65, 81, 69, 71, 66, 78, 84, 72, 83, 86, 78, 67, 85, 74, 88, 82, 68, 86,
   79, 83, 73, 84, 79, 87, 69, 89, 75, 81, 88, 70, 80, 82, 85, 76, 89, 80, 71, 87, 81, 77, 72, 74, 90, 78,
   86, 88, 73, 90, 75, 84, 79, 89, 90, 76, 77, 85, 87, 80, 84, 85, 81, 90, 89, 87, 86, 82, 87, 88, 90, 85,
   83, 88, 89, 86, 84, 90
}; // 0.77 kb
static const cart_index_t iCartYY_ab12_a3[550] = {
   0, 15, 17, 9, 10, 3, 39, 5, 41, 38, 16, 1, 19, 4, 40, 11, 13, 43, 7, 37, 18, 20, 2, 42, 6, 44,
   8, 12, 14, 36, 23, 4, 48, 11, 64, 16, 40, 47, 37, 43, 24, 46, 6, 65, 12, 45, 36, 18, 42, 44, 3, 21,
   50, 15, 39, 9, 63, 38, 49, 41, 45, 26, 8, 46, 36, 65, 14, 44, 20, 42, 5, 49, 22, 41, 17, 38, 50, 10,
   63, 39, 47, 7, 25, 37, 48, 43, 19, 64, 13, 40, 9, 27, 68, 21, 63, 15, 66, 41, 53, 49, 10, 66, 29, 63,
   22, 39, 51, 17, 68, 50, 28, 11, 70, 16, 67, 23, 64, 55, 43, 47, 67, 13, 31, 40, 52, 64, 25, 70, 19, 48,
   30, 71, 12, 69, 18, 56, 44, 24, 65, 45, 69, 32, 14, 54, 42, 71, 20, 65, 26, 46, 33, 16, 82, 23, 74, 28,
   67, 59, 47, 55, 34, 81, 18, 75, 24, 57, 45, 30, 69, 56, 15, 33, 83, 27, 66, 21, 72, 49, 61, 53, 81, 35,
   20, 58, 46, 77, 26, 71, 32, 54, 17, 83, 34, 68, 29, 50, 62, 22, 73, 51, 82, 19, 35, 48, 60, 70, 31, 76,
   25, 52, 21, 28, 86, 33, 72, 27, 78, 53, 59, 61, 22, 84, 30, 73, 34, 51, 57, 29, 79, 62, 27, 23, 88, 28,
   78, 33, 74, 61, 55, 59, 85, 25, 32, 52, 58, 76, 35, 80, 31, 60, 29, 89, 24, 79, 30, 62, 56, 34, 75, 57,
   87, 31, 26, 60, 54, 80, 32, 77, 35, 58, 38, 53, 51, 49, 50, 41, 68, 39, 66, 63, 55, 37, 52, 43, 70, 47,
   48, 67, 40, 64, 56, 54, 36, 71, 44, 69, 42, 45, 46, 65, 74, 40, 60, 64, 76, 67, 52, 82, 48, 70, 75, 58,
   42, 77, 65, 81, 46, 69, 54, 71, 39, 72, 62, 66, 51, 63, 73, 50, 83, 68, 57, 77, 44, 81, 45, 75, 65, 56,
   71, 69, 41, 61, 73, 53, 68, 49, 83, 63, 72, 66, 59, 43, 76, 47, 82, 55, 70, 74, 64, 67, 49, 59, 84, 61,
   83, 53, 86, 66, 78, 72, 50, 86, 57, 83, 62, 68, 79, 51, 84, 73, 61, 47, 85, 55, 88, 59, 82, 78, 67, 74,
   62, 87, 45, 89, 56, 79, 69, 57, 81, 75, 88, 48, 58, 70, 80, 82, 60, 85, 52, 76, 89, 60, 46, 80, 71, 87,
   54, 81, 58, 77, 90, 52, 54, 76, 77, 85, 58, 87, 60, 80, 51, 90, 56, 84, 57, 73, 75, 62, 89, 79, 53, 55,
   90, 59, 86, 61, 88, 72, 74, 78, 63, 78, 79, 72, 73, 66, 84, 68, 86, 83, 78, 64, 80, 67, 85, 74, 76, 88,
   70, 82, 79, 80, 65, 87, 69, 89, 71, 75, 77, 81, 72, 67, 87, 74, 90, 78, 85, 86, 82, 88, 73, 85, 69, 90,
   75, 84, 81, 79, 87, 89, 66, 74, 89, 78, 84, 72, 90, 83, 88, 86, 84, 76, 71, 85, 81, 90, 77, 89, 80, 87,
   68, 88, 75, 86, 79, 83, 89, 73, 90, 84, 86, 70, 77, 82, 87, 88, 80, 90, 76, 85, 83, 82, 81, 88, 89, 86,
   87, 84, 85, 90
}; // 1.07 kb
static const cart_index_t iCartYY_ab12_a4[675] = {
   0, 21, 22, 3, 15, 5, 17, 49, 50, 9, 10, 63, 39, 41, 38, 23, 1, 25, 16, 4, 47, 48, 7, 19, 11, 64,
   13, 40, 37, 43, 24, 26, 2, 45, 46, 18, 6, 20, 8, 65, 12, 14, 36, 42, 44, 3, 27, 51, 9, 21, 38, 50,
   53, 68, 15, 39, 66, 63, 49, 41, 28, 4, 52, 23, 11, 55, 70, 37, 48, 16, 67, 40, 64, 43, 47, 5, 53, 29,
   38, 49, 10, 22, 66, 51, 41, 17, 68, 50, 63, 39, 30, 54, 6, 56, 71, 24, 12, 46, 36, 69, 18, 42, 44, 65,
   45, 55, 7, 31, 47, 37, 67, 52, 13, 25, 43, 70, 19, 48, 40, 64, 56, 32, 8, 69, 54, 45, 36, 26, 14, 71,
   44, 20, 42, 46, 65, 9, 33, 73, 15, 27, 41, 68, 61, 83, 21, 63, 72, 66, 53, 49, 10, 72, 34, 39, 66, 17,
   29, 83, 62, 63, 22, 73, 51, 68, 50, 33, 11, 76, 28, 16, 59, 82, 43, 70, 23, 74, 64, 67, 47, 55, 34, 77,
   12, 57, 81, 30, 18, 71, 44, 75, 24, 65, 45, 69, 56, 74, 13, 35, 67, 40, 82, 60, 19, 31, 64, 76, 25, 52,
   48, 70, 75, 35, 14, 81, 58, 69, 42, 32, 20, 77, 65, 26, 46, 54, 71, 15, 28, 84, 21, 33, 49, 83, 59, 86,
   27, 66, 78, 72, 61, 53, 27, 16, 85, 33, 23, 61, 88, 47, 82, 28, 78, 67, 74, 55, 59, 17, 86, 30, 50, 83,
   22, 34, 84, 57, 68, 29, 79, 62, 73, 51, 29, 87, 18, 62, 89, 34, 24, 81, 45, 79, 30, 69, 56, 75, 57, 88,
   19, 32, 82, 48, 85, 58, 25, 35, 70, 80, 31, 60, 52, 76, 89, 31, 20, 87, 60, 81, 46, 35, 26, 80, 71, 32,
   54, 58, 77, 21, 23, 90, 27, 28, 53, 86, 55, 88, 33, 72, 74, 78, 59, 61, 22, 90, 24, 51, 84, 29, 30, 89,
   56, 73, 34, 75, 57, 79, 62, 90, 25, 26, 85, 52, 87, 54, 31, 32, 76, 77, 35, 58, 60, 80, 57, 58, 36, 75,
   77, 56, 44, 54, 42, 81, 45, 46, 65, 71, 69, 59, 37, 60, 55, 43, 74, 76, 40, 52, 47, 82, 48, 70, 64, 67,
   38, 61, 62, 41, 53, 39, 51, 72, 73, 49, 50, 83, 68, 66, 63, 39, 78, 57, 63, 72, 50, 62, 86, 79, 66, 51,
   84, 73, 83, 68, 78, 40, 58, 74, 64, 88, 80, 48, 60, 67, 85, 52, 76, 70, 82, 41, 59, 79, 49, 61, 63, 73,
   78, 84, 53, 68, 86, 83, 72, 66, 79, 60, 42, 89, 80, 75, 65, 58, 46, 87, 69, 54, 71, 77, 81, 61, 43, 80,
   59, 47, 78, 85, 64, 76, 55, 88, 70, 82, 67, 74, 62, 80, 44, 79, 87, 57, 45, 77, 65, 89, 56, 71, 69, 81,
   75, 51, 85, 45, 73, 90, 62, 56, 87, 69, 84, 57, 81, 75, 89, 79, 84, 52, 46, 90, 76, 89, 71, 60, 54, 85,
   81, 58, 77, 80, 87, 53, 47, 87, 61, 55, 72, 90, 67, 85, 59, 86, 82, 88, 74, 78, 86, 48, 54, 88, 70, 90,
   77, 52, 58, 82, 87, 60, 80, 76, 85, 49, 55, 89, 53, 59, 66, 84, 74, 90, 61, 83, 88, 86, 78, 72, 50, 88,
   56, 68, 86, 51, 57, 90, 75, 83, 62, 89, 79, 84, 73, 63, 74, 75, 66, 78, 68, 79, 88, 89, 72, 73, 90, 84,
   86, 83, 72, 64, 77, 78, 67, 86, 87, 70, 80, 74, 90, 76, 85, 82, 88, 73, 76, 65, 84, 85, 79, 69, 80, 71,
   90, 75, 77, 81, 87, 89, 66, 67, 81, 72, 74, 83, 89, 82, 87, 78, 84, 85, 90, 88, 86, 68, 82, 69, 83, 88,
   73, 75, 85, 81, 86, 79, 87, 89, 90, 84, 83, 70, 71, 86, 82, 84, 81, 76, 77, 88, 89, 80, 87, 85, 90
}; // 1.32 kb
static const cart_index_t iCartYY_ab12_a5[756] = {
   0, 27, 29, 21, 22, 3, 51, 5, 53, 9, 10, 15, 66, 17, 68, 38, 49, 50, 63, 39, 41, 28, 1, 31, 4, 52,
   23, 25, 55, 7, 16, 67, 11, 13, 70, 19, 47, 37, 48, 40, 64, 43, 30, 32, 2, 54, 6, 56, 8, 24, 26, 69,
   18, 71, 20, 12, 14, 45, 46, 36, 42, 44, 65, 33, 4, 60, 11, 76, 28, 52, 59, 37, 23, 74, 16, 40, 82, 48,
   55, 43, 70, 64, 67, 47, 34, 58, 6, 77, 12, 57, 36, 30, 54, 75, 24, 81, 46, 18, 42, 56, 71, 44, 65, 45,
   69, 3, 33, 62, 27, 51, 9, 73, 38, 61, 15, 39, 21, 72, 50, 83, 41, 53, 68, 66, 63, 49, 57, 35, 8, 58,
   36, 75, 14, 56, 32, 81, 45, 77, 26, 44, 20, 69, 54, 42, 46, 65, 71, 5, 61, 34, 53, 29, 38, 62, 10, 72,
   41, 17, 49, 83, 22, 73, 39, 66, 51, 68, 50, 63, 59, 7, 35, 37, 60, 55, 31, 74, 13, 47, 82, 43, 19, 76,
   25, 67, 40, 52, 48, 70, 64, 9, 28, 79, 33, 73, 15, 84, 41, 59, 21, 63, 27, 78, 68, 86, 49, 61, 83, 72,
   66, 53, 10, 78, 30, 72, 34, 39, 57, 17, 86, 63, 22, 66, 84, 29, 79, 50, 83, 62, 73, 51, 68, 27, 11, 80,
   16, 85, 33, 76, 61, 43, 28, 78, 23, 64, 88, 70, 59, 47, 82, 67, 74, 55, 78, 13, 32, 40, 58, 74, 35, 88,
   19, 67, 85, 64, 25, 80, 31, 82, 48, 60, 52, 76, 70, 29, 80, 12, 87, 18, 62, 44, 34, 77, 79, 30, 89, 71,
   24, 65, 57, 81, 45, 69, 56, 75, 79, 31, 14, 60, 42, 89, 20, 75, 35, 87, 69, 80, 32, 65, 26, 81, 58, 46,
   54, 71, 77, 21, 16, 87, 23, 90, 27, 85, 53, 47, 33, 72, 28, 67, 86, 82, 61, 55, 88, 74, 78, 59, 22, 85,
   18, 90, 24, 51, 45, 29, 87, 73, 34, 84, 81, 30, 69, 62, 89, 56, 75, 57, 79, 15, 23, 89, 28, 84, 21, 90,
   49, 55, 27, 66, 33, 74, 83, 88, 53, 59, 86, 78, 72, 61, 84, 25, 20, 52, 46, 90, 26, 89, 31, 85, 81, 76,
   35, 71, 32, 87, 60, 54, 58, 77, 80, 17, 88, 24, 86, 30, 50, 56, 22, 90, 68, 29, 83, 89, 34, 75, 51, 84,
   57, 79, 62, 73, 86, 19, 26, 48, 54, 88, 32, 90, 25, 82, 87, 70, 31, 77, 35, 85, 52, 58, 60, 80, 76, 38,
   59, 57, 61, 62, 41, 79, 39, 78, 49, 50, 53, 86, 51, 84, 63, 72, 73, 83, 68, 66, 61, 37, 58, 43, 80, 59,
   60, 78, 40, 55, 88, 47, 48, 85, 52, 74, 64, 76, 70, 82, 67, 62, 60, 36, 80, 44, 79, 42, 57, 58, 89, 56,
   87, 54, 45, 46, 75, 77, 65, 71, 69, 81, 72, 40, 54, 64, 77, 78, 58, 86, 48, 74, 90, 67, 52, 87, 60, 88,
   70, 80, 76, 85, 82, 73, 52, 42, 76, 65, 84, 46, 79, 60, 90, 75, 85, 58, 69, 54, 89, 80, 71, 77, 81, 87,
   39, 74, 56, 78, 57, 63, 75, 50, 88, 66, 51, 72, 90, 62, 89, 68, 86, 79, 84, 73, 83, 51, 76, 44, 85, 45,
   73, 65, 62, 80, 84, 57, 90, 77, 56, 71, 79, 87, 69, 81, 75, 89, 41, 55, 75, 59, 79, 49, 89, 63, 74, 53,
   68, 61, 88, 73, 90, 66, 78, 84, 86, 83, 72, 53, 43, 77, 47, 87, 61, 80, 72, 64, 59, 86, 55, 70, 90, 76,
   78, 67, 85, 82, 88, 74, 49, 47, 81, 55, 89, 53, 87, 66, 67, 61, 83, 59, 82, 84, 85, 72, 74, 90, 88, 86,
   78, 50, 82, 45, 88, 56, 68, 69, 51, 85, 83, 62, 86, 87, 57, 81, 73, 90, 75, 89, 79, 84, 83, 48, 46, 70,
   71, 86, 54, 84, 52, 88, 89, 82, 60, 81, 58, 90, 76, 77, 80, 87, 85, 63, 67, 69, 74, 75, 66, 81, 68, 82,
   72, 73, 78, 85, 79, 87, 83, 88, 89, 90, 84, 86, 66, 64, 71, 67, 81, 72, 77, 83, 70, 78, 84, 74, 76, 89,
   80, 86, 82, 87, 85, 90, 88, 68, 70, 65, 82, 69, 83, 71, 73, 76, 86, 79, 88, 80, 75, 77, 84, 85, 81, 87,
   89, 90
}; // 1.48 kb
static const cart_index_t iCartYY_ab12_a6[784] = {
   0, 33, 34, 3, 27, 5, 29, 61, 62, 9, 10, 21, 22, 72, 73, 15, 17, 83, 51, 53, 38, 39, 66, 41, 68, 49,
   50, 63, 33, 1, 35, 28, 4, 59, 60, 7, 31, 23, 74, 11, 76, 13, 25, 16, 82, 19, 52, 37, 55, 67, 40, 47,
   48, 43, 70, 64, 34, 35, 2, 57, 58, 30, 6, 32, 8, 75, 24, 77, 12, 26, 14, 81, 18, 20, 36, 54, 56, 45,
   46, 69, 42, 71, 44, 65, 3, 28, 57, 9, 33, 38, 62, 59, 79, 15, 39, 27, 51, 78, 84, 21, 50, 86, 73, 61,
   41, 63, 72, 49, 83, 53, 68, 66, 27, 4, 58, 33, 11, 61, 80, 37, 60, 28, 78, 16, 85, 40, 52, 23, 88, 48,
   76, 43, 59, 74, 64, 55, 70, 47, 82, 67, 5, 59, 30, 38, 61, 10, 34, 78, 57, 41, 17, 53, 29, 86, 79, 49,
   22, 84, 62, 72, 39, 50, 83, 63, 73, 66, 51, 68, 29, 60, 6, 62, 80, 34, 12, 58, 36, 79, 30, 87, 18, 54,
   42, 89, 24, 46, 44, 77, 57, 56, 71, 75, 65, 81, 45, 69, 61, 7, 32, 59, 37, 78, 58, 13, 35, 55, 88, 43,
   80, 19, 31, 47, 85, 25, 60, 40, 74, 82, 48, 67, 52, 64, 76, 70, 62, 31, 8, 79, 60, 57, 36, 35, 14, 89,
   56, 80, 44, 32, 20, 87, 45, 26, 42, 58, 75, 69, 54, 81, 46, 77, 65, 71, 9, 23, 75, 15, 28, 41, 79, 55,
   89, 21, 63, 33, 73, 74, 90, 27, 68, 88, 84, 59, 49, 66, 78, 53, 86, 61, 83, 72, 10, 74, 24, 39, 78, 17,
   30, 88, 56, 63, 22, 72, 34, 90, 75, 66, 29, 89, 57, 86, 50, 51, 84, 68, 79, 83, 62, 73, 21, 11, 77, 27,
   16, 53, 87, 43, 80, 33, 72, 23, 90, 64, 76, 28, 86, 70, 85, 47, 61, 78, 67, 59, 82, 55, 88, 74, 22, 76,
   12, 51, 85, 29, 18, 80, 44, 73, 34, 90, 24, 77, 65, 84, 30, 71, 45, 87, 62, 57, 81, 79, 69, 89, 56, 75,
   72, 13, 26, 78, 40, 86, 54, 19, 32, 74, 90, 64, 77, 25, 35, 67, 87, 31, 58, 48, 88, 85, 52, 82, 60, 70,
   80, 76, 73, 25, 14, 84, 52, 79, 42, 31, 20, 90, 75, 76, 65, 35, 26, 85, 69, 32, 46, 60, 89, 81, 58, 87,
   54, 80, 71, 77, 15, 16, 81, 21, 23, 49, 89, 47, 87, 27, 66, 28, 84, 67, 85, 33, 83, 82, 90, 55, 53, 72,
   74, 61, 88, 59, 86, 78, 17, 82, 18, 50, 88, 22, 24, 85, 45, 68, 29, 86, 30, 87, 69, 83, 34, 81, 56, 90,
   51, 62, 89, 73, 75, 84, 57, 79, 83, 19, 20, 86, 48, 84, 46, 25, 26, 88, 89, 70, 71, 31, 32, 82, 81, 35,
   54, 52, 90, 87, 60, 85, 58, 76, 77, 80, 51, 52, 36, 73, 76, 62, 44, 60, 42, 84, 57, 85, 45, 58, 46, 90,
   56, 54, 65, 80, 79, 75, 77, 89, 71, 87, 69, 81, 53, 37, 54, 61, 43, 72, 77, 40, 58, 59, 86, 47, 87, 48,
   60, 55, 90, 52, 80, 64, 78, 88, 70, 74, 76, 67, 85, 82, 38, 55, 56, 41, 59, 39, 57, 74, 75, 49, 50, 61,
   62, 88, 89, 53, 51, 90, 79, 78, 63, 68, 86, 66, 84, 72, 73, 83, 39, 67, 45, 63, 74, 50, 56, 82, 69, 66,
   51, 78, 57, 85, 81, 72, 62, 87, 75, 88, 68, 73, 90, 83, 89, 86, 79, 84, 66, 40, 46, 72, 64, 83, 71, 48,
   54, 78, 84, 67, 81, 52, 58, 74, 89, 60, 77, 70, 86, 90, 76, 88, 80, 82, 87, 85, 41, 47, 69, 49, 55, 63,
   75, 67, 81, 53, 68, 59, 79, 82, 87, 61, 73, 85, 89, 74, 66, 83, 88, 72, 90, 78, 84, 86, 68, 48, 42, 83,
   70, 73, 65, 52, 46, 86, 79, 82, 69, 60, 54, 88, 75, 58, 71, 76, 84, 89, 80, 90, 77, 85, 81, 87, 49, 43,
   71, 53, 47, 66, 81, 64, 77, 61, 83, 55, 89, 70, 80, 59, 84, 76, 87, 67, 72, 86, 82, 78, 85, 74, 90, 88,
   50, 70, 44, 68, 82, 51, 45, 76, 65, 83, 62, 88, 56, 80, 71, 86, 57, 77, 69, 85, 73, 79, 87, 84, 81, 90,
   75, 89, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86,
   87, 88, 89, 90
}; // 1.53 kb
static const cart_index_t iCartYY_ab12_a7[756] = {
   0, 28, 30, 33, 34, 3, 57, 5, 59, 9, 10, 27, 78, 29, 79, 21, 22, 15, 84, 17, 86, 38, 61, 62, 72, 73,
   39, 51, 41, 53, 49, 50, 83, 63, 66, 68, 27, 1, 32, 4, 58, 33, 35, 61, 7, 28, 78, 11, 13, 80, 31, 16,
   85, 23, 25, 88, 19, 59, 37, 60, 40, 52, 74, 76, 55, 43, 47, 82, 48, 67, 64, 70, 29, 31, 2, 60, 6, 62,
   8, 34, 35, 79, 30, 80, 32, 12, 14, 87, 18, 89, 20, 24, 26, 57, 58, 36, 54, 42, 56, 44, 75, 77, 81, 45,
   46, 69, 71, 65, 21, 4, 54, 11, 77, 27, 58, 53, 37, 33, 72, 16, 40, 87, 60, 23, 90, 28, 52, 86, 48, 61,
   43, 80, 64, 76, 78, 85, 59, 47, 55, 88, 70, 74, 67, 82, 22, 52, 6, 76, 12, 51, 36, 29, 60, 73, 34, 85,
   58, 18, 42, 90, 24, 84, 46, 30, 54, 62, 80, 44, 77, 65, 57, 45, 79, 87, 89, 56, 71, 75, 81, 69, 3, 23,
   56, 28, 57, 9, 75, 38, 55, 15, 39, 33, 74, 62, 89, 27, 51, 21, 90, 50, 88, 41, 59, 79, 78, 84, 63, 73,
   49, 61, 53, 68, 86, 66, 72, 83, 51, 25, 8, 52, 36, 73, 14, 62, 31, 84, 57, 76, 35, 44, 20, 85, 45, 90,
   26, 56, 32, 79, 60, 42, 58, 46, 75, 65, 89, 80, 87, 69, 54, 81, 77, 71, 5, 55, 24, 59, 30, 38, 56, 10,
   74, 41, 17, 61, 88, 34, 75, 53, 29, 49, 89, 22, 90, 39, 78, 57, 86, 79, 50, 62, 63, 72, 66, 51, 84, 68,
   83, 73, 53, 7, 26, 37, 54, 61, 32, 72, 13, 59, 86, 43, 19, 77, 35, 47, 87, 55, 31, 90, 25, 78, 40, 58,
   48, 60, 88, 80, 74, 64, 67, 85, 52, 82, 70, 76, 9, 16, 69, 23, 75, 15, 81, 41, 47, 21, 63, 28, 67, 79,
   87, 33, 73, 27, 85, 68, 82, 49, 55, 89, 74, 90, 66, 84, 53, 59, 61, 83, 88, 72, 78, 86, 10, 67, 18, 74,
   24, 39, 45, 17, 82, 63, 22, 78, 85, 30, 69, 72, 34, 66, 81, 29, 87, 50, 88, 56, 90, 75, 51, 57, 68, 86,
   83, 62, 89, 73, 84, 79, 15, 11, 71, 16, 81, 21, 77, 49, 43, 27, 66, 23, 64, 89, 80, 28, 84, 33, 76, 83,
   70, 53, 47, 87, 67, 85, 72, 90, 61, 55, 59, 86, 82, 78, 74, 88, 66, 13, 20, 40, 46, 72, 26, 83, 19, 78,
   84, 64, 25, 71, 32, 67, 81, 74, 35, 89, 31, 86, 48, 54, 52, 58, 90, 77, 88, 70, 82, 87, 60, 85, 76, 80,
   17, 70, 12, 82, 18, 50, 44, 22, 76, 68, 29, 88, 80, 24, 65, 86, 30, 83, 71, 34, 77, 51, 85, 45, 87, 69,
   62, 56, 73, 90, 84, 57, 81, 79, 89, 75, 68, 19, 14, 48, 42, 83, 20, 73, 25, 86, 79, 70, 31, 65, 26, 82,
   69, 88, 32, 75, 35, 84, 52, 46, 60, 54, 89, 71, 90, 76, 85, 81, 58, 87, 80, 77, 38, 47, 45, 55, 56, 41,
   69, 39, 67, 49, 50, 59, 82, 57, 81, 61, 62, 53, 87, 51, 85, 63, 74, 75, 88, 89, 68, 79, 66, 78, 72, 73,
   90, 83, 86, 84, 49, 37, 46, 43, 71, 53, 54, 66, 40, 61, 83, 47, 48, 81, 58, 55, 89, 59, 60, 84, 52, 72,
   64, 77, 70, 80, 86, 87, 78, 67, 74, 90, 76, 88, 82, 85, 50, 48, 36, 70, 44, 68, 42, 51, 52, 83, 62, 82,
   60, 45, 46, 88, 56, 86, 54, 57, 58, 73, 76, 65, 80, 71, 79, 69, 84, 85, 90, 75, 77, 89, 87, 81, 63, 40,
   42, 64, 65, 66, 46, 68, 48, 72, 73, 67, 52, 69, 54, 74, 75, 78, 58, 79, 60, 83, 70, 71, 76, 77, 84, 81,
   86, 82, 88, 89, 80, 90, 85, 87, 39, 64, 44, 67, 45, 63, 65, 50, 70, 66, 51, 74, 76, 56, 71, 78, 57, 72,
   77, 62, 80, 68, 82, 69, 85, 81, 73, 75, 83, 88, 86, 79, 87, 84, 90, 89, 41, 43, 65, 47, 69, 49, 71, 63,
   64, 53, 68, 55, 70, 75, 77, 59, 79, 61, 80, 73, 76, 66, 67, 81, 82, 87, 83, 89, 72, 74, 78, 84, 85, 86,
   88, 90
}; // 1.48 kb
static const cart_index_t iCartYY_ab12_a8[675] = {
   0, 23, 24, 3, 28, 5, 30, 55, 56, 9, 10, 33, 34, 74, 75, 15, 27, 17, 29, 88, 89, 21, 22, 90, 57, 59,
   38, 39, 78, 41, 79, 61, 62, 51, 84, 53, 86, 49, 50, 63, 72, 73, 66, 68, 83, 21, 1, 26, 27, 4, 53, 54,
   7, 32, 33, 72, 11, 77, 13, 35, 28, 16, 86, 87, 19, 31, 23, 90, 25, 58, 37, 61, 78, 40, 59, 60, 43, 80,
   85, 52, 47, 48, 55, 88, 74, 64, 76, 67, 82, 70, 22, 25, 2, 51, 52, 29, 6, 31, 8, 73, 34, 76, 12, 35,
   14, 84, 85, 30, 18, 32, 20, 90, 24, 26, 36, 60, 62, 57, 58, 79, 42, 80, 44, 45, 46, 87, 54, 89, 56, 75,
   77, 65, 81, 69, 71, 3, 16, 45, 9, 23, 38, 56, 47, 69, 15, 39, 28, 57, 67, 81, 21, 33, 50, 62, 82, 87,
   27, 51, 85, 75, 55, 41, 63, 74, 49, 89, 59, 79, 73, 90, 61, 88, 53, 68, 66, 78, 84, 72, 83, 86, 15, 4,
   46, 21, 11, 49, 71, 37, 54, 27, 66, 16, 81, 40, 58, 33, 23, 83, 89, 48, 60, 28, 84, 52, 77, 43, 53, 72,
   64, 61, 80, 47, 87, 90, 76, 55, 70, 59, 86, 78, 67, 85, 74, 88, 82, 5, 47, 18, 38, 55, 10, 24, 67, 45,
   41, 17, 59, 30, 82, 69, 49, 61, 22, 34, 85, 81, 53, 29, 87, 56, 74, 39, 50, 88, 63, 75, 78, 57, 62, 89,
   72, 90, 66, 51, 68, 86, 79, 83, 73, 84, 17, 48, 6, 50, 70, 22, 12, 52, 36, 68, 29, 82, 18, 60, 42, 83,
   88, 34, 24, 58, 46, 86, 30, 54, 44, 76, 51, 62, 80, 73, 65, 85, 45, 56, 71, 90, 77, 84, 57, 79, 87, 69,
   89, 75, 81, 49, 7, 20, 53, 37, 66, 46, 13, 26, 61, 83, 43, 71, 19, 32, 59, 47, 84, 81, 25, 35, 55, 89,
   31, 54, 40, 72, 86, 48, 78, 58, 64, 77, 87, 60, 67, 52, 74, 90, 88, 70, 80, 82, 85, 76, 50, 19, 8, 68,
   48, 51, 36, 25, 14, 83, 62, 70, 44, 31, 20, 86, 82, 57, 45, 35, 26, 88, 56, 32, 42, 52, 73, 79, 60, 84,
   46, 76, 65, 69, 54, 85, 58, 90, 75, 89, 80, 71, 87, 81, 77, 9, 11, 65, 15, 16, 41, 69, 43, 71, 21, 63,
   23, 75, 64, 77, 27, 28, 68, 79, 70, 80, 33, 73, 76, 81, 47, 49, 66, 67, 53, 87, 55, 89, 84, 85, 59, 82,
   61, 83, 72, 74, 90, 78, 86, 88, 10, 64, 12, 39, 67, 17, 18, 70, 44, 63, 22, 74, 24, 76, 65, 66, 78, 29,
   30, 80, 71, 72, 34, 77, 45, 82, 50, 51, 85, 68, 69, 88, 56, 57, 81, 86, 87, 83, 62, 73, 90, 75, 84, 79,
   89, 63, 13, 14, 66, 40, 68, 42, 19, 20, 72, 73, 64, 65, 25, 26, 78, 67, 79, 69, 31, 32, 74, 75, 35, 46,
   48, 83, 84, 52, 86, 54, 70, 71, 81, 58, 82, 60, 88, 89, 90, 76, 77, 85, 87, 80, 39, 40, 36, 63, 64, 50,
   44, 48, 42, 66, 51, 67, 45, 52, 46, 72, 74, 62, 56, 60, 54, 78, 57, 58, 65, 70, 68, 73, 76, 83, 71, 82,
   69, 75, 77, 88, 80, 86, 79, 84, 85, 81, 90, 89, 87, 41, 37, 42, 49, 43, 63, 65, 40, 46, 53, 68, 47, 69,
   48, 54, 61, 55, 73, 75, 52, 58, 59, 79, 60, 71, 64, 66, 83, 70, 72, 77, 67, 81, 89, 80, 74, 76, 78, 84,
   86, 82, 87, 88, 90, 85, 38, 43, 44, 41, 47, 39, 45, 64, 65, 49, 50, 55, 56, 70, 71, 53, 59, 51, 57, 76,
   77, 61, 62, 80, 69, 67, 63, 68, 82, 66, 81, 74, 75, 79, 87, 78, 85, 72, 73, 83, 88, 89, 86, 84, 90
}; // 1.32 kb
static const cart_index_t iCartYY_ab12_a9[550] = {
   0, 16, 18, 23, 24, 3, 45, 5, 47, 9, 10, 28, 67, 30, 69, 33, 34, 15, 81, 17, 82, 21, 22, 27, 85, 29,
   87, 38, 55, 56, 74, 75, 39, 57, 41, 59, 49, 50, 61, 62, 88, 89, 90, 51, 53, 63, 78, 79, 72, 73, 66, 84,
   68, 86, 83, 15, 1, 20, 4, 46, 21, 26, 49, 7, 27, 66, 11, 13, 71, 32, 16, 81, 33, 35, 83, 19, 28, 84,
   23, 25, 89, 31, 53, 37, 54, 40, 58, 72, 77, 61, 43, 59, 86, 47, 87, 48, 60, 52, 90, 55, 78, 64, 80, 67,
   85, 74, 76, 88, 70, 82, 17, 19, 2, 48, 6, 50, 8, 22, 25, 68, 29, 70, 31, 12, 14, 82, 18, 83, 20, 34,
   35, 86, 30, 88, 32, 24, 26, 51, 52, 36, 60, 42, 62, 44, 73, 76, 84, 57, 85, 45, 58, 46, 54, 56, 90, 79,
   80, 65, 87, 69, 89, 71, 75, 77, 81, 9, 4, 42, 11, 65, 15, 46, 41, 37, 21, 63, 16, 40, 69, 54, 23, 75,
   27, 58, 68, 48, 33, 73, 28, 52, 79, 60, 49, 43, 71, 64, 77, 66, 81, 53, 47, 61, 83, 55, 89, 70, 80, 76,
   84, 59, 72, 67, 87, 74, 90, 78, 85, 86, 82, 88, 10, 40, 6, 64, 12, 39, 36, 17, 48, 63, 22, 67, 52, 18,
   42, 74, 24, 66, 46, 29, 60, 72, 34, 78, 58, 30, 54, 50, 70, 44, 76, 65, 51, 45, 68, 82, 83, 62, 88, 56,
   80, 71, 77, 57, 86, 73, 85, 69, 90, 75, 84, 81, 79, 87, 89, 3, 11, 44, 16, 45, 9, 65, 38, 43, 15, 39,
   23, 64, 56, 71, 28, 57, 21, 77, 50, 70, 27, 51, 33, 76, 62, 80, 41, 47, 69, 67, 81, 63, 75, 49, 55, 53,
   68, 59, 79, 82, 87, 85, 73, 61, 66, 74, 89, 78, 84, 72, 90, 83, 88, 86, 39, 13, 8, 40, 36, 63, 14, 50,
   19, 66, 51, 64, 25, 44, 20, 67, 45, 72, 26, 62, 31, 78, 57, 74, 35, 56, 32, 68, 48, 42, 52, 46, 73, 65,
   83, 70, 86, 79, 82, 69, 60, 54, 58, 75, 88, 84, 76, 71, 85, 81, 90, 77, 89, 80, 87, 5, 43, 12, 47, 18,
   38, 44, 10, 64, 41, 17, 55, 70, 24, 65, 59, 30, 49, 71, 22, 76, 53, 29, 61, 80, 34, 77, 39, 67, 45, 82,
   69, 50, 56, 63, 74, 66, 51, 78, 57, 85, 81, 87, 62, 72, 68, 88, 75, 86, 79, 83, 89, 73, 90, 84, 41, 7,
   14, 37, 42, 49, 20, 63, 13, 53, 68, 43, 19, 65, 26, 47, 69, 61, 32, 73, 25, 59, 79, 55, 31, 75, 35, 66,
   40, 46, 48, 54, 83, 71, 72, 64, 78, 84, 67, 81, 52, 58, 60, 89, 74, 86, 70, 77, 82, 87, 88, 80, 90, 76,
   85, 38, 37, 36, 43, 44, 41, 42, 39, 40, 49, 50, 47, 48, 45, 46, 55, 56, 53, 54, 51, 52, 61, 62, 59, 60,
   57, 58, 63, 64, 65, 70, 71, 68, 69, 66, 67, 72, 73, 74, 75, 76, 77, 80, 79, 78, 83, 82, 81, 88, 89, 86,
   87, 84, 85, 90
}; // 1.07 kb
static const cart_index_t iCartYY_ab12_a10[396] = {
   0, 11, 12, 3, 16, 5, 18, 43, 44, 9, 10, 23, 24, 64, 65, 15, 28, 17, 30, 70, 71, 21, 22, 33, 34, 76,
   77, 27, 29, 80, 45, 47, 38, 39, 67, 41, 69, 55, 56, 57, 81, 59, 82, 49, 50, 51, 85, 53, 87, 61, 62, 63,
   74, 75, 66, 78, 68, 79, 88, 89, 72, 73, 90, 84, 86, 83, 9, 1, 14, 15, 4, 41, 42, 7, 20, 21, 63, 11,
   65, 13, 26, 27, 16, 68, 69, 19, 32, 33, 73, 23, 75, 25, 35, 28, 79, 31, 46, 37, 49, 66, 40, 53, 54, 43,
   71, 81, 58, 47, 48, 61, 83, 84, 52, 59, 60, 55, 89, 72, 64, 77, 78, 67, 86, 87, 70, 80, 74, 90, 76, 85,
   82, 88, 10, 13, 2, 39, 40, 17, 6, 19, 8, 63, 22, 64, 12, 25, 14, 66, 67, 29, 18, 31, 20, 72, 34, 74,
   24, 35, 26, 78, 30, 32, 36, 48, 50, 51, 52, 68, 42, 70, 44, 45, 46, 82, 60, 83, 62, 57, 58, 86, 54, 88,
   56, 73, 76, 65, 84, 85, 79, 69, 80, 71, 90, 75, 77, 81, 87, 89, 3, 4, 36, 9, 11, 38, 44, 37, 42, 15,
   39, 16, 45, 40, 46, 21, 23, 50, 56, 48, 54, 27, 51, 28, 57, 52, 58, 33, 62, 60, 65, 43, 41, 63, 64, 49,
   71, 47, 69, 75, 77, 55, 70, 53, 68, 73, 76, 61, 80, 59, 79, 66, 67, 81, 72, 74, 83, 89, 82, 87, 78, 84,
   85, 90, 88, 86, 5, 37, 6, 38, 43, 10, 12, 40, 36, 41, 17, 47, 18, 48, 42, 49, 55, 22, 24, 52, 46, 53,
   29, 59, 30, 60, 54, 61, 34, 58, 44, 64, 39, 50, 70, 63, 65, 67, 45, 56, 71, 74, 76, 66, 51, 62, 80, 72,
   77, 78, 57, 68, 82, 69, 83, 88, 73, 75, 85, 81, 86, 79, 87, 89, 90, 84, 38, 7, 8, 41, 37, 39, 36, 13,
   14, 49, 50, 43, 44, 19, 20, 53, 47, 51, 45, 25, 26, 61, 62, 55, 56, 31, 32, 59, 57, 35, 42, 40, 63, 68,
   48, 66, 46, 64, 65, 69, 54, 67, 52, 72, 73, 79, 60, 78, 58, 74, 75, 83, 70, 71, 86, 82, 84, 81, 76, 77,
   88, 89, 80, 87, 85, 90
}; // 0.77 kb
static const cart_index_t iCartYY_ab12_a11[234] = {
   0, 4, 6, 11, 12, 3, 36, 5, 37, 9, 10, 16, 40, 18, 42, 23, 24, 15, 46, 17, 48, 21, 22, 28, 52, 30,
   54, 33, 34, 27, 58, 29, 60, 38, 43, 44, 64, 65, 39, 45, 41, 47, 49, 50, 55, 56, 70, 71, 76, 77, 51, 57,
   53, 59, 61, 62, 80, 63, 67, 69, 74, 75, 66, 81, 68, 82, 72, 73, 78, 85, 79, 87, 83, 88, 89, 90, 84, 86,
   3, 1, 8, 4, 36, 9, 14, 38, 7, 15, 39, 11, 13, 44, 20, 16, 45, 21, 26, 50, 19, 27, 51, 23, 25, 56,
   32, 28, 57, 33, 35, 62, 31, 41, 37, 42, 40, 46, 63, 65, 49, 43, 53, 68, 47, 69, 48, 54, 52, 58, 73, 75,
   61, 55, 59, 79, 60, 66, 64, 71, 67, 81, 72, 77, 83, 70, 78, 84, 74, 76, 89, 80, 86, 82, 87, 85, 90, 88,
   5, 7, 2, 37, 6, 38, 8, 10, 13, 41, 17, 43, 19, 12, 14, 47, 18, 49, 20, 22, 25, 53, 29, 55, 31, 24,
   26, 59, 30, 61, 32, 34, 35, 39, 40, 36, 48, 42, 50, 44, 63, 64, 66, 51, 67, 45, 52, 46, 60, 54, 62, 56,
   72, 74, 78, 57, 58, 68, 70, 65, 82, 69, 83, 71, 73, 76, 86, 79, 88, 80, 75, 77, 84, 85, 81, 87, 89, 90
}; // 0.46 kb
static const cart_index_t iCartYY_ab12_a12[91] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
   52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
   78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90
}; // 0.18 kb
static const cart_index_t iCartYY_ab13_a0[105] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
   52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
   78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
   104
}; // 0.21 kb
static const cart_index_t iCartYY_ab13_a1[273] = {
   0, 5, 7, 3, 1, 8, 4, 6, 2, 5, 9, 39, 11, 3, 40, 7, 39, 10, 13, 41, 4, 40, 8, 12, 41, 14,
   6, 9, 17, 46, 10, 44, 19, 15, 11, 47, 16, 45, 13, 42, 12, 20, 43, 18, 14, 17, 21, 48, 23, 15, 50, 19,
   49, 22, 25, 51, 16, 52, 20, 24, 53, 26, 18, 21, 29, 58, 22, 56, 31, 27, 23, 59, 28, 57, 25, 54, 24, 32,
   55, 30, 26, 29, 33, 60, 35, 27, 62, 31, 61, 34, 37, 63, 28, 64, 32, 36, 65, 38, 30, 33, 35, 68, 34, 67,
   37, 66, 36, 38, 45, 43, 41, 47, 40, 42, 39, 46, 44, 44, 69, 49, 70, 42, 52, 46, 48, 69, 71, 53, 43, 50,
   47, 70, 51, 71, 45, 57, 73, 51, 75, 55, 53, 59, 50, 72, 77, 52, 54, 48, 58, 74, 49, 76, 56, 56, 79, 61,
   81, 54, 64, 58, 60, 78, 83, 65, 55, 62, 59, 80, 63, 82, 57, 67, 85, 63, 87, 66, 65, 68, 62, 84, 89, 64,
   66, 60, 68, 86, 61, 88, 67, 69, 74, 76, 72, 70, 77, 73, 75, 71, 74, 78, 90, 80, 72, 91, 76, 90, 79, 82,
   92, 73, 91, 77, 81, 92, 83, 75, 78, 86, 97, 79, 95, 88, 84, 80, 98, 85, 96, 82, 93, 81, 89, 94, 87, 83,
   86, 84, 99, 88, 100, 85, 101, 89, 87, 96, 94, 92, 98, 91, 93, 90, 97, 95, 95, 102, 100, 103, 93, 101, 97, 99,
   102, 104, 101, 94, 99, 98, 103, 100, 104, 96, 102, 103, 104
}; // 0.53 kb
static const cart_index_t iCartYY_ab13_a2[468] = {
   0, 9, 10, 5, 7, 39, 11, 1, 12, 3, 40, 8, 13, 14, 2, 41, 4, 6, 15, 3, 42, 11, 47, 40, 16, 43,
   4, 45, 13, 41, 5, 17, 44, 9, 39, 46, 45, 18, 6, 43, 41, 14, 7, 46, 19, 39, 10, 44, 47, 8, 20, 40,
   42, 12, 9, 21, 69, 17, 46, 48, 10, 69, 22, 44, 19, 49, 23, 11, 70, 15, 50, 47, 70, 12, 24, 42, 52, 20,
   25, 71, 13, 51, 16, 45, 71, 26, 14, 53, 43, 18, 27, 15, 72, 23, 59, 50, 28, 73, 16, 57, 25, 51, 17, 29,
   74, 21, 48, 58, 75, 30, 18, 55, 53, 26, 19, 76, 31, 49, 22, 56, 77, 20, 32, 52, 54, 24, 21, 33, 78, 29,
   58, 60, 22, 79, 34, 56, 31, 61, 35, 23, 80, 27, 62, 59, 81, 24, 36, 54, 64, 32, 37, 82, 25, 63, 28, 57,
   83, 38, 26, 65, 55, 30, 33, 27, 84, 35, 68, 62, 34, 85, 28, 67, 37, 63, 29, 35, 86, 33, 60, 68, 87, 36,
   30, 66, 65, 38, 31, 88, 37, 61, 34, 67, 89, 32, 38, 64, 66, 36, 39, 48, 49, 46, 44, 69, 50, 40, 52, 47,
   70, 42, 51, 53, 41, 71, 45, 43, 72, 42, 54, 70, 77, 52, 73, 55, 43, 75, 71, 53, 44, 74, 56, 69, 49, 76,
   57, 75, 45, 73, 51, 71, 46, 58, 76, 48, 69, 74, 59, 47, 77, 50, 72, 70, 48, 60, 90, 58, 74, 78, 49, 90,
   61, 76, 56, 79, 62, 50, 91, 59, 80, 72, 63, 92, 51, 82, 57, 73, 91, 52, 64, 77, 81, 54, 92, 65, 53, 83,
   75, 55, 93, 54, 66, 81, 89, 64, 94, 66, 55, 87, 83, 65, 56, 95, 67, 79, 61, 88, 67, 96, 57, 85, 63, 82,
   58, 68, 97, 60, 78, 86, 68, 59, 98, 62, 84, 80, 60, 62, 99, 68, 86, 84, 61, 100, 63, 88, 67, 85, 101, 64,
   65, 89, 87, 66, 69, 78, 79, 74, 76, 90, 80, 70, 81, 72, 91, 77, 82, 83, 71, 92, 73, 75, 84, 72, 93, 80,
   98, 91, 85, 94, 73, 96, 82, 92, 74, 86, 95, 78, 90, 97, 96, 87, 75, 94, 92, 83, 76, 97, 88, 90, 79, 95,
   98, 77, 89, 91, 93, 81, 78, 84, 102, 86, 97, 99, 79, 102, 85, 95, 88, 100, 86, 80, 103, 84, 99, 98, 103, 81,
   87, 93, 101, 89, 88, 104, 82, 100, 85, 96, 104, 89, 83, 101, 94, 87, 90, 99, 100, 97, 95, 102, 99, 91, 101, 98,
   103, 93, 100, 101, 92, 104, 96, 94, 102, 93, 94, 103, 104, 101, 95, 103, 96, 102, 100, 104, 97, 98, 104, 99, 102, 103
}; // 0.91 kb
static const cart_index_t iCartYY_ab13_a3[660] = {
   0, 17, 19, 9, 10, 5, 44, 7, 46, 39, 15, 1, 20, 3, 42, 11, 12, 47, 8, 40, 16, 18, 2, 43, 4, 45,
   6, 13, 14, 41, 5, 21, 49, 17, 44, 9, 69, 39, 48, 46, 23, 3, 52, 11, 70, 15, 42, 50, 40, 47, 7, 48,
   22, 46, 19, 39, 49, 10, 69, 44, 25, 53, 4, 71, 13, 51, 41, 16, 43, 45, 50, 8, 24, 40, 52, 47, 20, 70,
   12, 42, 51, 26, 6, 53, 41, 71, 14, 45, 18, 43, 9, 29, 76, 21, 69, 17, 74, 46, 58, 48, 10, 74, 31, 69,
   22, 44, 56, 19, 76, 49, 27, 11, 77, 15, 72, 23, 70, 59, 47, 50, 28, 75, 13, 73, 16, 57, 45, 25, 71, 51,
   72, 12, 32, 42, 54, 70, 24, 77, 20, 52, 73, 30, 14, 55, 43, 75, 18, 71, 26, 53, 17, 33, 90, 29, 74, 21,
   78, 48, 60, 58, 35, 15, 91, 23, 80, 27, 72, 62, 50, 59, 19, 90, 34, 76, 31, 49, 61, 22, 79, 56, 37, 92,
   16, 82, 25, 63, 51, 28, 73, 57, 91, 20, 36, 52, 64, 77, 32, 81, 24, 54, 92, 38, 18, 65, 53, 83, 26, 75,
   30, 55, 21, 35, 97, 33, 78, 29, 86, 58, 68, 60, 22, 95, 37, 79, 34, 56, 67, 31, 88, 61, 33, 23, 98, 27,
   84, 35, 80, 68, 59, 62, 34, 96, 25, 85, 28, 67, 57, 37, 82, 63, 93, 24, 38, 54, 66, 81, 36, 89, 32, 64,
   94, 36, 26, 66, 55, 87, 30, 83, 38, 65, 29, 27, 99, 35, 86, 33, 84, 60, 62, 68, 31, 100, 28, 88, 37, 61,
   63, 34, 85, 67, 101, 32, 30, 64, 65, 89, 38, 87, 36, 66, 57, 55, 41, 75, 45, 73, 43, 51, 53, 71, 59, 40,
   54, 47, 77, 50, 52, 72, 42, 70, 39, 58, 56, 48, 49, 46, 76, 44, 74, 69, 44, 78, 61, 74, 56, 69, 79, 49,
   90, 76, 80, 42, 64, 70, 81, 72, 54, 91, 52, 77, 46, 60, 79, 58, 76, 48, 90, 69, 78, 74, 82, 65, 43, 83,
   71, 92, 53, 73, 55, 75, 62, 47, 81, 50, 91, 59, 77, 80, 70, 72, 63, 83, 45, 92, 51, 82, 71, 57, 75, 73,
   67, 94, 51, 96, 57, 85, 73, 63, 92, 82, 96, 66, 53, 87, 75, 94, 55, 92, 65, 83, 68, 50, 93, 59, 98, 62,
   91, 84, 72, 80, 98, 52, 66, 77, 89, 91, 64, 93, 54, 81, 48, 68, 95, 60, 90, 58, 97, 74, 86, 78, 49, 97,
   67, 90, 61, 76, 88, 56, 95, 79, 56, 102, 63, 95, 67, 79, 85, 61, 100, 88, 103, 54, 65, 81, 87, 93, 66, 101,
   64, 89, 58, 62, 102, 68, 97, 60, 99, 78, 84, 86, 104, 64, 55, 89, 83, 101, 65, 94, 66, 87, 60, 59, 103, 62,
   99, 68, 98, 86, 80, 84, 61, 104, 57, 100, 63, 88, 82, 67, 96, 85, 69, 86, 88, 78, 79, 74, 95, 76, 97, 90,
   84, 70, 89, 72, 93, 80, 81, 98, 77, 91, 85, 87, 71, 94, 73, 96, 75, 82, 83, 92, 74, 84, 100, 86, 95, 78,
   102, 90, 99, 97, 86, 72, 101, 80, 103, 84, 93, 99, 91, 98, 76, 99, 85, 97, 88, 90, 100, 79, 102, 95, 88, 101,
   73, 104, 82, 100, 92, 85, 94, 96, 99, 77, 87, 91, 101, 98, 89, 103, 81, 93, 100, 89, 75, 101, 92, 104, 83, 96,
   87, 94, 78, 80, 104, 84, 102, 86, 103, 97, 98, 99, 79, 103, 82, 102, 85, 95, 96, 88, 104, 100, 102, 81, 83, 93,
   94, 103, 87, 104, 89, 101, 95, 93, 92, 103, 96, 102, 94, 100, 101, 104, 97, 91, 94, 98, 104, 99, 101, 102, 93, 103,
   90, 98, 96, 99, 100, 97, 104, 95, 103, 102
}; // 1.29 kb
static const cart_index_t iCartYY_ab13_a4[825] = {
   0, 21, 22, 5, 17, 7, 19, 48, 49, 9, 10, 69, 44, 46, 39, 23, 1, 24, 15, 3, 50, 52, 8, 20, 11, 70,
   12, 42, 40, 47, 25, 26, 2, 51, 53, 16, 4, 18, 6, 71, 13, 14, 41, 43, 45, 27, 3, 54, 23, 11, 59, 77,
   40, 52, 15, 72, 42, 70, 47, 50, 28, 55, 4, 57, 75, 25, 13, 53, 41, 73, 16, 43, 45, 71, 51, 5, 29, 56,
   9, 21, 39, 49, 58, 76, 17, 44, 74, 69, 48, 46, 57, 30, 6, 73, 55, 51, 41, 26, 14, 75, 45, 18, 43, 53,
   71, 7, 58, 31, 39, 48, 10, 22, 74, 56, 46, 19, 76, 49, 69, 44, 59, 8, 32, 50, 40, 72, 54, 12, 24, 47,
   77, 20, 52, 42, 70, 9, 33, 79, 17, 29, 46, 76, 60, 90, 21, 69, 78, 74, 58, 48, 10, 78, 34, 44, 74, 19,
   31, 90, 61, 69, 22, 79, 56, 76, 49, 35, 11, 81, 27, 15, 62, 91, 47, 77, 23, 80, 70, 72, 50, 59, 80, 12,
   36, 72, 42, 91, 64, 20, 32, 70, 81, 24, 54, 52, 77, 37, 83, 13, 63, 92, 28, 16, 75, 45, 82, 25, 71, 51,
   73, 57, 82, 38, 14, 92, 65, 73, 43, 30, 18, 83, 71, 26, 53, 55, 75, 33, 15, 93, 35, 23, 68, 98, 50, 91,
   27, 84, 72, 80, 59, 62, 34, 94, 16, 67, 96, 37, 25, 92, 51, 85, 28, 73, 57, 82, 63, 17, 35, 95, 21, 33,
   48, 90, 68, 97, 29, 74, 86, 78, 60, 58, 96, 36, 18, 94, 66, 92, 53, 38, 26, 87, 75, 30, 55, 65, 83, 19,
   97, 37, 49, 90, 22, 34, 95, 67, 76, 31, 88, 61, 79, 56, 98, 20, 38, 91, 52, 93, 66, 24, 36, 77, 89, 32,
   64, 54, 81, 21, 27, 102, 29, 35, 58, 97, 62, 99, 33, 78, 84, 86, 68, 60, 22, 102, 28, 56, 95, 31, 37, 100,
   63, 79, 34, 85, 67, 88, 61, 29, 23, 103, 33, 27, 60, 99, 59, 98, 35, 86, 80, 84, 62, 68, 103, 24, 30, 93,
   54, 101, 65, 32, 38, 81, 87, 36, 66, 64, 89, 31, 104, 25, 61, 100, 34, 28, 96, 57, 88, 37, 82, 63, 85, 67,
   104, 32, 26, 101, 64, 94, 55, 36, 30, 89, 83, 38, 65, 66, 87, 39, 60, 61, 46, 58, 44, 56, 78, 79, 48, 49,
   90, 76, 74, 69, 62, 40, 64, 59, 47, 80, 81, 42, 54, 50, 91, 52, 77, 70, 72, 63, 65, 41, 82, 83, 57, 45,
   55, 43, 92, 51, 53, 71, 75, 73, 84, 42, 66, 80, 70, 98, 89, 52, 64, 72, 93, 54, 81, 77, 91, 85, 66, 43,
   96, 87, 82, 71, 65, 53, 94, 73, 55, 75, 83, 92, 44, 86, 67, 69, 78, 49, 61, 97, 88, 74, 56, 95, 79, 90,
   76, 67, 87, 45, 85, 94, 63, 51, 83, 71, 96, 57, 75, 73, 92, 82, 46, 68, 88, 48, 60, 69, 79, 86, 95, 58,
   76, 97, 90, 78, 74, 68, 47, 89, 62, 50, 84, 93, 70, 81, 59, 98, 77, 91, 72, 80, 48, 62, 100, 58, 68, 74,
   95, 84, 102, 60, 90, 99, 97, 86, 78, 49, 99, 63, 76, 97, 56, 67, 102, 85, 90, 61, 100, 88, 95, 79, 60, 50,
   101, 68, 59, 86, 103, 72, 93, 62, 99, 91, 98, 80, 84, 61, 101, 51, 88, 104, 67, 57, 94, 73, 100, 63, 92, 82,
   96, 85, 99, 52, 65, 98, 77, 103, 87, 54, 66, 91, 101, 64, 89, 81, 93, 100, 64, 53, 104, 89, 96, 75, 66, 55,
   101, 92, 65, 83, 87, 94, 102, 54, 55, 103, 81, 104, 83, 64, 65, 93, 94, 66, 87, 89, 101, 56, 103, 57, 79, 102,
   61, 63, 104, 82, 95, 67, 96, 85, 100, 88, 58, 59, 104, 60, 62, 78, 102, 80, 103, 68, 97, 98, 99, 84, 86, 69,
   84, 85, 74, 86, 76, 88, 99, 100, 78, 79, 102, 95, 97, 90, 86, 70, 87, 84, 72, 99, 101, 77, 89, 80, 103, 81,
   93, 91, 98, 88, 89, 71, 100, 101, 85, 73, 87, 75, 104, 82, 83, 92, 94, 96, 78, 72, 94, 86, 80, 97, 104, 91,
   101, 84, 102, 93, 103, 98, 99, 79, 93, 73, 95, 103, 88, 82, 101, 92, 102, 85, 94, 96, 104, 100, 74, 80, 96, 78,
   84, 90, 100, 98, 104, 86, 95, 103, 102, 99, 97, 95, 81, 75, 102, 93, 100, 92, 89, 83, 103, 96, 87, 94, 101, 104,
   76, 98, 82, 90, 99, 79, 85, 103, 96, 97, 88, 104, 100, 102, 95, 97, 77, 83, 99, 91, 102, 94, 81, 87, 98, 104,
   89, 101, 93, 103, 90, 91, 92, 97, 98, 95, 96, 93, 94, 99, 100, 101, 104, 103, 102
}; // 1.61 kb
static const cart_index_t iCartYY_ab13_a5[945] = {
   0, 29, 31, 21, 22, 5, 56, 7, 58, 9, 10, 17, 74, 19, 76, 39, 48, 49, 69, 44, 46, 27, 1, 32, 3, 54,
   23, 24, 59, 8, 15, 72, 11, 12, 77, 20, 50, 40, 52, 42, 70, 47, 28, 30, 2, 55, 4, 57, 6, 25, 26, 73,
   16, 75, 18, 13, 14, 51, 53, 41, 43, 45, 71, 5, 33, 61, 29, 56, 9, 79, 39, 60, 17, 44, 21, 78, 49, 90,
   46, 58, 76, 74, 69, 48, 35, 3, 64, 11, 81, 27, 54, 62, 40, 23, 80, 15, 42, 91, 52, 59, 47, 77, 70, 72,
   50, 7, 60, 34, 58, 31, 39, 61, 10, 78, 46, 19, 48, 90, 22, 79, 44, 74, 56, 76, 49, 69, 37, 65, 4, 83,
   13, 63, 41, 28, 55, 82, 25, 92, 53, 16, 43, 57, 75, 45, 71, 51, 73, 62, 8, 36, 40, 64, 59, 32, 80, 12,
   50, 91, 47, 20, 81, 24, 72, 42, 54, 52, 77, 70, 63, 38, 6, 65, 41, 82, 14, 57, 30, 92, 51, 83, 26, 45,
   18, 73, 55, 43, 53, 71, 75, 9, 35, 88, 33, 79, 17, 95, 46, 68, 21, 69, 29, 86, 76, 97, 48, 60, 90, 78,
   74, 58, 10, 86, 37, 78, 34, 44, 67, 19, 97, 69, 22, 74, 95, 31, 88, 49, 90, 61, 79, 56, 76, 33, 11, 89,
   15, 93, 35, 81, 68, 47, 27, 84, 23, 70, 98, 77, 62, 50, 91, 72, 80, 59, 34, 87, 13, 94, 16, 67, 45, 37,
   83, 85, 28, 96, 75, 25, 71, 63, 92, 51, 73, 57, 82, 84, 12, 38, 42, 66, 80, 36, 98, 20, 72, 93, 70, 24,
   89, 32, 91, 52, 64, 54, 81, 77, 85, 36, 14, 66, 43, 96, 18, 82, 38, 94, 73, 87, 30, 71, 26, 92, 65, 53,
   55, 75, 83, 17, 27, 100, 35, 95, 21, 102, 48, 62, 29, 74, 33, 84, 90, 99, 58, 68, 97, 86, 78, 60, 29, 15,
   101, 23, 103, 33, 93, 60, 50, 35, 86, 27, 72, 99, 91, 68, 59, 98, 80, 84, 62, 19, 99, 28, 97, 37, 49, 63,
   22, 102, 76, 31, 90, 100, 34, 85, 56, 95, 67, 88, 61, 79, 31, 101, 16, 104, 25, 61, 51, 34, 94, 88, 37, 100,
   92, 28, 73, 67, 96, 57, 82, 63, 85, 99, 20, 30, 52, 65, 98, 38, 103, 24, 91, 101, 77, 32, 87, 36, 93, 54,
   66, 64, 89, 81, 100, 32, 18, 64, 53, 104, 26, 96, 36, 101, 92, 89, 38, 75, 30, 94, 66, 55, 65, 83, 87, 21,
   23, 104, 27, 102, 29, 103, 58, 59, 33, 78, 35, 80, 97, 98, 60, 62, 99, 84, 86, 68, 22, 103, 25, 102, 28, 56,
   57, 31, 104, 79, 34, 95, 96, 37, 82, 61, 100, 63, 85, 67, 88, 102, 24, 26, 54, 55, 103, 30, 104, 32, 93, 94,
   81, 36, 83, 38, 101, 64, 65, 66, 87, 89, 67, 66, 41, 87, 45, 85, 43, 63, 65, 96, 57, 94, 55, 51, 53, 82,
   83, 71, 75, 73, 92, 68, 40, 66, 47, 89, 62, 64, 84, 42, 59, 98, 50, 52, 93, 54, 80, 70, 81, 77, 91, 72,
   39, 68, 67, 60, 61, 46, 88, 44, 86, 48, 49, 58, 97, 56, 95, 69, 78, 79, 90, 76, 74, 44, 84, 63, 86, 67,
   69, 85, 49, 99, 74, 56, 78, 102, 61, 100, 76, 97, 88, 95, 79, 90, 86, 42, 65, 70, 87, 84, 66, 99, 52, 80,
   103, 72, 54, 101, 64, 98, 77, 89, 81, 93, 91, 46, 62, 85, 68, 88, 48, 100, 69, 84, 58, 76, 60, 99, 79, 102,
   74, 86, 95, 97, 90, 78, 88, 64, 43, 89, 71, 100, 53, 85, 66, 104, 82, 101, 65, 73, 55, 96, 87, 75, 83, 92,
   94, 60, 47, 87, 50, 101, 68, 89, 86, 70, 62, 99, 59, 77, 103, 81, 84, 72, 93, 91, 98, 80, 61, 89, 45, 101,
   51, 88, 71, 67, 87, 100, 63, 104, 83, 57, 75, 85, 94, 73, 92, 82, 96, 56, 93, 51, 103, 57, 79, 73, 61, 101,
   95, 67, 102, 94, 63, 92, 88, 104, 82, 96, 85, 100, 95, 54, 53, 81, 75, 102, 55, 100, 64, 103, 96, 93, 66, 92,
   65, 104, 89, 83, 87, 94, 101, 58, 50, 94, 59, 104, 60, 101, 78, 72, 68, 97, 62, 91, 102, 93, 86, 80, 103, 98,
   99, 84, 97, 52, 55, 77, 83, 99, 65, 102, 54, 98, 104, 91, 64, 94, 66, 103, 81, 87, 89, 101, 93, 48, 59, 96,
   62, 100, 58, 104, 74, 80, 60, 90, 68, 98, 95, 103, 78, 84, 102, 99, 97, 86, 49, 98, 57, 99, 63, 76, 82, 56,
   103, 90, 61, 97, 104, 67, 96, 79, 102, 85, 100, 88, 95, 69, 80, 82, 84, 85, 74, 96, 76, 98, 78, 79, 86, 103,
   88, 104, 90, 99, 100, 102, 95, 97, 78, 70, 83, 72, 94, 86, 87, 97, 77, 84, 102, 80, 81, 104, 89, 99, 91, 101,
   93, 103, 98, 79, 81, 71, 93, 73, 95, 75, 88, 89, 102, 85, 103, 87, 82, 83, 100, 101, 92, 94, 96, 104, 74, 72,
   92, 80, 96, 78, 94, 90, 91, 86, 95, 84, 93, 100, 101, 97, 98, 104, 103, 102, 99, 76, 91, 73, 98, 82, 90, 92,
   79, 93, 97, 88, 99, 101, 85, 94, 95, 103, 96, 104, 100, 102, 90, 77, 75, 91, 92, 97, 83, 95, 81, 99, 100, 98,
   89, 96, 87, 102, 93, 94, 101, 104, 103
}; // 1.85 kb
static const cart_index_t iCartYY_ab13_a6[1008] = {
   0, 33, 34, 5, 29, 7, 31, 60, 61, 9, 10, 21, 22, 78, 79, 17, 19, 90, 56, 58, 39, 44, 74, 46, 76, 48,
   49, 69, 35, 1, 36, 27, 3, 62, 64, 8, 32, 23, 80, 11, 81, 12, 24, 15, 91, 20, 54, 40, 59, 72, 42, 50,
   52, 47, 77, 70, 37, 38, 2, 63, 65, 28, 4, 30, 6, 82, 25, 83, 13, 26, 14, 92, 16, 18, 41, 55, 57, 51,
   53, 73, 43, 75, 45, 71, 33, 3, 66, 35, 11, 68, 89, 40, 64, 27, 84, 15, 93, 42, 54, 23, 98, 52, 81, 47,
   62, 80, 70, 59, 77, 50, 91, 72, 34, 66, 4, 67, 87, 37, 13, 65, 41, 85, 28, 94, 16, 55, 43, 96, 25, 53,
   45, 83, 63, 57, 75, 82, 71, 92, 51, 73, 5, 35, 67, 9, 33, 39, 61, 68, 88, 17, 44, 29, 56, 86, 95, 21,
   49, 97, 79, 60, 46, 69, 78, 48, 90, 58, 76, 74, 67, 36, 6, 85, 66, 63, 41, 38, 14, 96, 57, 87, 45, 30,
   18, 94, 51, 26, 43, 65, 82, 73, 55, 92, 53, 83, 71, 75, 7, 68, 37, 39, 60, 10, 34, 86, 67, 46, 19, 58,
   31, 97, 88, 48, 22, 95, 61, 78, 44, 49, 90, 69, 79, 74, 56, 76, 68, 8, 38, 62, 40, 84, 66, 12, 36, 59,
   98, 47, 89, 20, 32, 50, 93, 24, 64, 42, 80, 91, 52, 72, 54, 70, 81, 77, 9, 27, 85, 17, 35, 46, 88, 62,
   100, 21, 69, 33, 79, 84, 102, 29, 76, 99, 95, 68, 48, 74, 86, 58, 97, 60, 90, 78, 10, 84, 28, 44, 86, 19,
   37, 99, 63, 69, 22, 78, 34, 102, 85, 74, 31, 100, 67, 97, 49, 56, 95, 76, 88, 90, 61, 79, 29, 11, 87, 33,
   15, 60, 101, 47, 89, 35, 86, 23, 103, 70, 81, 27, 99, 77, 93, 50, 68, 84, 72, 62, 91, 59, 98, 80, 86, 12,
   30, 84, 42, 99, 65, 20, 38, 80, 103, 70, 87, 24, 36, 72, 101, 32, 66, 52, 98, 93, 54, 91, 64, 77, 89, 81,
   31, 89, 13, 61, 101, 34, 16, 87, 45, 88, 37, 104, 25, 83, 71, 100, 28, 75, 51, 94, 67, 63, 92, 85, 73, 96,
   57, 82, 88, 32, 14, 100, 64, 85, 43, 36, 18, 104, 82, 89, 71, 38, 26, 101, 73, 30, 53, 66, 96, 92, 65, 94,
   55, 87, 75, 83, 21, 15, 94, 29, 23, 58, 104, 50, 101, 33, 78, 27, 102, 72, 93, 35, 97, 91, 103, 59, 60, 86,
   80, 68, 98, 62, 99, 84, 22, 93, 16, 56, 103, 31, 25, 101, 51, 79, 34, 102, 28, 94, 73, 95, 37, 92, 57, 104,
   61, 67, 96, 88, 82, 100, 63, 85, 17, 23, 96, 21, 27, 48, 100, 59, 104, 29, 74, 35, 95, 80, 103, 33, 90, 98,
   102, 62, 58, 78, 84, 60, 99, 68, 97, 86, 95, 24, 18, 102, 54, 100, 53, 32, 26, 103, 96, 81, 75, 36, 30, 93,
   92, 38, 55, 64, 104, 94, 66, 101, 65, 89, 83, 87, 19, 98, 25, 49, 99, 22, 28, 103, 57, 76, 31, 97, 37, 104,
   82, 90, 34, 96, 63, 102, 56, 61, 100, 79, 85, 95, 67, 88, 97, 20, 26, 99, 52, 102, 55, 24, 30, 98, 104, 77,
   83, 32, 38, 91, 94, 36, 65, 54, 103, 101, 64, 93, 66, 81, 87, 89, 39, 62, 63, 46, 68, 44, 67, 84, 85, 48,
   49, 60, 61, 99, 100, 58, 56, 102, 88, 86, 69, 76, 97, 74, 95, 78, 79, 90, 60, 40, 65, 68, 47, 86, 87, 42,
   66, 62, 99, 50, 101, 52, 64, 59, 103, 54, 89, 70, 84, 98, 77, 80, 81, 72, 93, 91, 61, 64, 41, 88, 89, 67,
   45, 66, 43, 100, 63, 101, 51, 65, 53, 104, 57, 55, 71, 87, 85, 82, 83, 96, 75, 94, 73, 92, 78, 42, 55, 86,
   70, 97, 83, 52, 65, 84, 102, 72, 94, 54, 66, 80, 104, 64, 87, 77, 99, 103, 81, 98, 89, 91, 101, 93, 79, 54,
   43, 95, 81, 88, 71, 64, 53, 102, 85, 93, 73, 66, 55, 103, 82, 65, 75, 89, 100, 96, 87, 104, 83, 101, 92, 94,
   44, 80, 57, 69, 84, 49, 63, 98, 82, 74, 56, 86, 67, 103, 96, 78, 61, 104, 85, 99, 76, 79, 102, 90, 100, 97,
   88, 95, 56, 81, 45, 79, 93, 61, 51, 89, 71, 95, 67, 103, 57, 87, 75, 102, 63, 83, 73, 101, 88, 85, 94, 100,
   92, 104, 82, 96, 46, 59, 82, 48, 62, 69, 85, 80, 96, 58, 76, 68, 88, 98, 104, 60, 79, 103, 100, 84, 74, 90,
   99, 78, 102, 86, 95, 97, 58, 47, 83, 60, 50, 78, 94, 70, 87, 68, 97, 59, 104, 77, 89, 62, 102, 81, 101, 72,
   86, 99, 91, 84, 93, 80, 103, 98, 48, 50, 92, 58, 59, 74, 96, 72, 94, 60, 90, 62, 100, 91, 101, 68, 95, 93,
   104, 80, 78, 97, 98, 86, 103, 84, 102, 99, 49, 91, 51, 76, 98, 56, 57, 93, 73, 90, 61, 99, 63, 101, 92, 97,
   67, 94, 82, 103, 79, 88, 104, 95, 96, 102, 85, 100, 90, 52, 53, 97, 77, 95, 75, 54, 55, 99, 100, 91, 92, 64,
   65, 98, 96, 66, 83, 81, 102, 104, 89, 103, 87, 93, 94, 101, 69, 72, 73, 74, 80, 76, 82, 91, 92, 78, 79, 84,
   85, 93, 94, 86, 88, 101, 96, 98, 90, 95, 103, 97, 104, 99, 100, 102, 74, 70, 75, 78, 72, 90, 92, 77, 83, 86,
   95, 80, 96, 81, 87, 84, 100, 89, 94, 91, 97, 102, 93, 99, 101, 98, 104, 103, 76, 77, 71, 90, 91, 79, 73, 81,
   75, 97, 88, 98, 82, 89, 83, 99, 85, 87, 92, 93, 95, 100, 101, 102, 94, 103, 96, 104
}; // 1.97 kb
static const cart_index_t iCartYY_ab13_a7[1008] = {
   0, 35, 37, 33, 34, 5, 67, 7, 68, 9, 10, 29, 86, 31, 88, 21, 22, 17, 95, 19, 97, 39, 60, 61, 78, 79,
   44, 56, 46, 58, 48, 49, 90, 69, 74, 76, 33, 1, 38, 3, 66, 35, 36, 68, 8, 27, 84, 11, 12, 89, 32, 15,
   93, 23, 24, 98, 20, 62, 40, 64, 42, 54, 80, 81, 59, 47, 50, 91, 52, 72, 70, 77, 34, 36, 2, 66, 4, 67,
   6, 37, 38, 85, 28, 87, 30, 13, 14, 94, 16, 96, 18, 25, 26, 63, 65, 41, 55, 43, 57, 45, 82, 83, 92, 51,
   53, 73, 75, 71, 5, 27, 63, 35, 67, 9, 85, 39, 62, 17, 44, 33, 84, 61, 100, 29, 56, 21, 102, 49, 99, 46,
   68, 88, 86, 95, 69, 79, 48, 60, 58, 76, 97, 74, 78, 90, 29, 3, 65, 11, 87, 33, 66, 60, 40, 35, 86, 15,
   42, 101, 64, 23, 103, 27, 54, 99, 52, 68, 47, 89, 70, 81, 84, 93, 62, 50, 59, 98, 77, 80, 72, 91, 7, 62,
   28, 68, 37, 39, 63, 10, 84, 46, 19, 60, 99, 34, 85, 58, 31, 48, 100, 22, 102, 44, 86, 67, 97, 88, 49, 61,
   69, 78, 74, 56, 95, 76, 90, 79, 31, 64, 4, 89, 13, 61, 41, 34, 66, 88, 37, 101, 65, 16, 43, 104, 25, 100,
   53, 28, 55, 67, 87, 45, 83, 71, 63, 51, 85, 94, 96, 57, 75, 82, 92, 73, 60, 8, 30, 40, 65, 68, 38, 86,
   12, 62, 99, 47, 20, 87, 36, 50, 101, 59, 32, 103, 24, 84, 42, 66, 52, 64, 98, 89, 80, 70, 72, 93, 54, 91,
   77, 81, 61, 32, 6, 64, 41, 88, 14, 67, 36, 100, 63, 89, 38, 45, 18, 101, 51, 104, 26, 57, 30, 85, 66, 43,
   65, 53, 82, 71, 96, 87, 94, 73, 55, 92, 83, 75, 9, 23, 82, 27, 85, 17, 96, 46, 59, 21, 69, 35, 80, 88,
   104, 33, 79, 29, 103, 76, 98, 48, 62, 100, 84, 102, 74, 95, 58, 68, 60, 90, 99, 78, 86, 97, 10, 80, 25, 84,
   28, 44, 57, 19, 98, 69, 22, 86, 103, 37, 82, 78, 34, 74, 96, 31, 104, 49, 99, 63, 102, 85, 56, 67, 76, 97,
   90, 61, 100, 79, 95, 88, 21, 11, 83, 15, 94, 29, 87, 58, 47, 33, 78, 23, 70, 104, 89, 27, 102, 35, 81, 97,
   77, 60, 50, 101, 72, 93, 86, 103, 68, 59, 62, 99, 91, 84, 80, 98, 22, 81, 13, 93, 16, 56, 45, 31, 89, 79,
   34, 103, 87, 25, 71, 102, 28, 95, 75, 37, 83, 61, 101, 51, 94, 73, 67, 57, 88, 104, 100, 63, 92, 85, 96, 82,
   78, 12, 26, 42, 55, 86, 30, 97, 20, 84, 102, 70, 24, 83, 38, 72, 94, 80, 36, 104, 32, 99, 52, 65, 54, 66,
   103, 87, 98, 77, 91, 101, 64, 93, 81, 89, 79, 24, 14, 54, 43, 95, 18, 88, 32, 102, 85, 81, 36, 71, 26, 93,
   73, 103, 30, 82, 38, 100, 64, 53, 66, 55, 96, 75, 104, 89, 101, 92, 65, 94, 87, 83, 17, 15, 92, 23, 96, 21,
   94, 48, 50, 29, 74, 27, 72, 100, 101, 35, 95, 33, 93, 90, 91, 58, 59, 104, 80, 103, 78, 102, 60, 62, 68, 97,
   98, 86, 84, 99, 19, 91, 16, 98, 25, 49, 51, 22, 93, 76, 31, 99, 101, 28, 73, 97, 37, 90, 92, 34, 94, 56,
   103, 57, 104, 82, 61, 63, 79, 102, 95, 67, 96, 88, 100, 85, 90, 20, 18, 52, 53, 97, 26, 95, 24, 99, 100, 77,
   32, 75, 30, 91, 92, 98, 38, 96, 36, 102, 54, 55, 64, 65, 104, 83, 103, 81, 93, 94, 66, 101, 89, 87, 56, 54,
   41, 81, 45, 79, 43, 61, 64, 95, 67, 93, 66, 51, 53, 103, 57, 102, 55, 63, 65, 88, 89, 71, 87, 75, 85, 73,
   100, 101, 104, 82, 83, 96, 94, 92, 58, 40, 55, 47, 83, 60, 65, 78, 42, 68, 97, 50, 52, 94, 66, 59, 104, 62,
   64, 102, 54, 86, 70, 87, 77, 89, 99, 101, 84, 72, 80, 103, 81, 98, 91, 93, 39, 59, 57, 62, 63, 46, 82, 44,
   80, 48, 49, 68, 98, 67, 96, 60, 61, 58, 104, 56, 103, 69, 84, 85, 99, 100, 76, 88, 74, 86, 78, 79, 102, 90,
   97, 95, 44, 72, 51, 80, 57, 69, 73, 49, 91, 74, 56, 84, 93, 63, 92, 86, 67, 78, 94, 61, 101, 76, 98, 82,
   103, 96, 79, 85, 90, 99, 97, 88, 104, 95, 102, 100, 74, 42, 53, 70, 75, 78, 55, 90, 52, 86, 95, 72, 54, 92,
   65, 80, 96, 84, 66, 100, 64, 97, 77, 83, 81, 87, 102, 94, 99, 91, 98, 104, 89, 103, 93, 101, 46, 50, 73, 59,
   82, 48, 92, 69, 72, 58, 76, 62, 91, 85, 94, 68, 88, 60, 101, 79, 93, 74, 80, 96, 98, 104, 90, 100, 78, 84,
   86, 95, 103, 97, 99, 102, 76, 52, 43, 77, 71, 90, 53, 79, 54, 97, 88, 91, 64, 73, 55, 98, 82, 99, 65, 85,
   66, 95, 81, 75, 89, 83, 100, 92, 102, 93, 103, 96, 87, 104, 101, 94, 48, 47, 75, 50, 92, 58, 83, 74, 70, 60,
   90, 59, 77, 96, 87, 62, 100, 68, 89, 95, 81, 78, 72, 94, 91, 101, 97, 104, 86, 80, 84, 102, 93, 99, 98, 103,
   49, 77, 45, 91, 51, 76, 71, 56, 81, 90, 61, 98, 89, 57, 75, 99, 63, 97, 83, 67, 87, 79, 93, 73, 101, 92,
   88, 82, 95, 103, 102, 85, 94, 100, 104, 96, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
   85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104
}; // 1.97 kb
static const cart_index_t iCartYY_ab13_a8[945] = {
   0, 27, 28, 5, 35, 7, 37, 62, 63, 9, 10, 33, 34, 84, 85, 17, 29, 19, 31, 99, 100, 21, 22, 102, 67, 68,
   39, 44, 86, 46, 88, 60, 61, 56, 95, 58, 97, 48, 49, 69, 78, 79, 74, 76, 90, 29, 1, 30, 33, 3, 60, 65,
   8, 38, 35, 86, 11, 87, 12, 36, 27, 15, 99, 101, 20, 32, 23, 103, 24, 66, 40, 68, 84, 42, 62, 64, 47, 89,
   93, 54, 50, 52, 59, 98, 80, 70, 81, 72, 91, 77, 31, 32, 2, 61, 64, 34, 4, 36, 6, 88, 37, 89, 13, 38,
   14, 100, 101, 28, 16, 30, 18, 104, 25, 26, 41, 66, 67, 63, 65, 85, 43, 87, 45, 51, 53, 94, 55, 96, 57, 82,
   83, 71, 92, 73, 75, 21, 3, 55, 29, 11, 58, 83, 40, 65, 33, 78, 15, 94, 42, 66, 35, 23, 97, 104, 52, 64,
   27, 102, 54, 87, 47, 60, 86, 70, 68, 89, 50, 101, 103, 81, 59, 77, 62, 99, 84, 72, 93, 80, 98, 91, 22, 54,
   4, 56, 81, 31, 13, 64, 41, 79, 34, 93, 16, 66, 43, 95, 103, 37, 25, 65, 53, 102, 28, 55, 45, 89, 61, 67,
   87, 88, 71, 101, 51, 57, 75, 104, 83, 100, 63, 85, 94, 73, 96, 82, 92, 5, 23, 57, 9, 27, 39, 63, 59, 82,
   17, 44, 35, 67, 80, 96, 21, 33, 49, 61, 98, 104, 29, 56, 103, 85, 62, 46, 69, 84, 48, 100, 68, 88, 79, 102,
   60, 99, 58, 76, 74, 86, 95, 78, 90, 97, 56, 24, 6, 79, 54, 61, 41, 32, 14, 95, 67, 81, 45, 36, 18, 102,
   93, 63, 51, 38, 26, 103, 57, 30, 43, 64, 88, 85, 66, 100, 53, 89, 71, 73, 55, 101, 65, 104, 82, 96, 87, 75,
   94, 92, 83, 7, 59, 25, 39, 62, 10, 28, 80, 57, 46, 19, 68, 37, 98, 82, 48, 60, 22, 34, 103, 96, 58, 31,
   104, 63, 84, 44, 49, 99, 69, 85, 86, 67, 61, 100, 78, 102, 74, 56, 76, 97, 88, 90, 79, 95, 58, 8, 26, 60,
   40, 78, 55, 12, 30, 68, 97, 47, 83, 20, 38, 62, 50, 102, 94, 24, 36, 59, 104, 32, 65, 42, 86, 99, 52, 84,
   66, 70, 87, 101, 64, 72, 54, 80, 103, 98, 77, 89, 91, 93, 81, 9, 15, 73, 17, 23, 46, 82, 50, 92, 21, 69,
   27, 85, 72, 94, 29, 35, 76, 88, 91, 101, 33, 79, 93, 96, 59, 48, 74, 80, 58, 104, 62, 100, 95, 103, 68, 98,
   60, 90, 78, 84, 102, 86, 97, 99, 10, 72, 16, 44, 80, 19, 25, 91, 51, 69, 22, 84, 28, 93, 73, 74, 86, 31,
   37, 101, 92, 78, 34, 94, 57, 98, 49, 56, 103, 76, 82, 99, 63, 67, 96, 97, 104, 90, 61, 79, 102, 85, 95, 88,
   100, 17, 11, 75, 21, 15, 48, 92, 47, 83, 29, 74, 23, 96, 70, 87, 33, 27, 90, 100, 77, 89, 35, 95, 81, 94,
   50, 58, 78, 72, 60, 101, 59, 104, 102, 93, 62, 91, 68, 97, 86, 80, 103, 84, 99, 98, 74, 12, 18, 78, 42, 90,
   53, 20, 26, 86, 95, 70, 75, 24, 30, 84, 72, 100, 92, 32, 38, 80, 96, 36, 55, 52, 97, 102, 54, 99, 65, 77,
   83, 94, 66, 91, 64, 98, 104, 103, 81, 87, 93, 101, 89, 19, 77, 13, 49, 91, 22, 16, 81, 45, 76, 31, 98, 25,
   89, 71, 90, 99, 34, 28, 87, 75, 97, 37, 83, 51, 93, 56, 61, 101, 79, 73, 103, 57, 63, 92, 102, 94, 95, 67,
   88, 104, 82, 100, 85, 96, 76, 20, 14, 90, 52, 79, 43, 24, 18, 97, 88, 77, 71, 32, 26, 99, 91, 85, 73, 36,
   30, 98, 82, 38, 53, 54, 95, 100, 64, 102, 55, 81, 75, 92, 65, 93, 66, 103, 96, 104, 89, 83, 101, 94, 87, 39,
   50, 51, 46, 59, 44, 57, 72, 73, 48, 49, 62, 63, 91, 92, 58, 68, 56, 67, 93, 94, 60, 61, 101, 82, 80, 69,
   76, 98, 74, 96, 84, 85, 88, 104, 86, 103, 78, 79, 90, 99, 100, 97, 95, 102, 48, 40, 53, 58, 47, 74, 75, 42,
   55, 60, 90, 50, 92, 52, 65, 68, 59, 95, 96, 54, 66, 62, 100, 64, 83, 70, 78, 97, 77, 86, 87, 72, 94, 104,
   89, 80, 81, 84, 102, 99, 91, 101, 98, 103, 93, 49, 52, 41, 76, 77, 56, 45, 54, 43, 90, 61, 91, 51, 64, 53,
   97, 98, 67, 57, 66, 55, 99, 63, 65, 71, 81, 79, 88, 89, 95, 75, 93, 73, 82, 83, 103, 87, 102, 85, 100, 101,
   92, 104, 96, 94, 69, 42, 43, 74, 70, 76, 71, 52, 53, 78, 79, 72, 73, 54, 55, 86, 80, 88, 82, 64, 65, 84,
   85, 66, 75, 77, 90, 95, 81, 97, 83, 91, 92, 96, 87, 98, 89, 99, 100, 102, 93, 94, 103, 104, 101, 44, 70, 45,
   69, 72, 49, 51, 77, 71, 74, 56, 80, 57, 81, 75, 78, 84, 61, 63, 89, 83, 86, 67, 87, 73, 91, 76, 79, 93,
   90, 92, 98, 82, 85, 94, 99, 101, 97, 88, 95, 103, 96, 102, 100, 104, 46, 47, 71, 48, 50, 69, 73, 70, 75, 58,
   76, 59, 82, 77, 83, 60, 62, 79, 85, 81, 87, 68, 88, 89, 92, 72, 74, 90, 91, 78, 94, 80, 96, 100, 101, 84,
   93, 86, 95, 97, 98, 104, 99, 102, 103
}; // 1.85 kb
static const cart_index_t iCartYY_ab13_a9[825] = {
   0, 23, 25, 27, 28, 5, 57, 7, 59, 9, 10, 35, 80, 37, 82, 33, 34, 17, 96, 19, 98, 21, 22, 29, 103, 31,
   104, 39, 62, 63, 84, 85, 44, 67, 46, 68, 48, 49, 60, 61, 99, 100, 102, 56, 58, 69, 86, 88, 78, 79, 74, 95,
   76, 97, 90, 21, 1, 26, 3, 55, 29, 30, 58, 8, 33, 78, 11, 12, 83, 38, 15, 94, 35, 36, 97, 20, 27, 102,
   23, 24, 104, 32, 60, 40, 65, 42, 66, 86, 87, 68, 47, 62, 99, 50, 101, 52, 64, 54, 103, 59, 84, 70, 89, 72,
   93, 80, 81, 98, 77, 91, 22, 24, 2, 54, 4, 56, 6, 31, 32, 79, 34, 81, 36, 13, 14, 93, 16, 95, 18, 37,
   38, 102, 28, 103, 30, 25, 26, 61, 64, 41, 66, 43, 67, 45, 88, 89, 100, 63, 101, 51, 65, 53, 55, 57, 104, 85,
   87, 71, 94, 73, 96, 75, 82, 83, 92, 5, 15, 51, 23, 57, 9, 73, 39, 50, 17, 44, 27, 72, 63, 92, 35, 67,
   21, 94, 49, 91, 29, 56, 33, 93, 61, 101, 46, 59, 82, 80, 96, 69, 85, 48, 62, 58, 76, 68, 88, 98, 104, 103,
   79, 60, 74, 84, 100, 86, 95, 78, 102, 90, 99, 97, 17, 3, 53, 11, 75, 21, 55, 48, 40, 29, 74, 15, 42, 92,
   65, 23, 96, 33, 66, 90, 52, 35, 95, 27, 54, 100, 64, 58, 47, 83, 70, 87, 78, 94, 60, 50, 68, 97, 59, 104,
   77, 89, 81, 102, 62, 86, 72, 101, 80, 103, 84, 93, 99, 91, 98, 7, 50, 16, 59, 25, 39, 51, 10, 72, 46, 19,
   62, 91, 28, 73, 68, 37, 48, 92, 22, 93, 58, 31, 60, 101, 34, 94, 44, 80, 57, 98, 82, 49, 63, 69, 84, 74,
   56, 86, 67, 103, 96, 104, 61, 78, 76, 99, 85, 97, 88, 90, 100, 79, 102, 95, 19, 52, 4, 77, 13, 49, 41, 22,
   54, 76, 31, 91, 64, 16, 43, 98, 25, 90, 53, 34, 66, 97, 37, 99, 65, 28, 55, 56, 81, 45, 89, 71, 61, 51,
   79, 93, 95, 67, 103, 57, 87, 75, 83, 63, 102, 88, 101, 73, 104, 82, 100, 92, 85, 94, 96, 48, 8, 18, 40, 53,
   58, 26, 74, 12, 60, 90, 47, 20, 75, 30, 50, 92, 68, 38, 95, 24, 62, 100, 59, 32, 96, 36, 78, 42, 55, 52,
   65, 97, 83, 86, 70, 84, 102, 72, 94, 54, 66, 64, 104, 80, 99, 77, 87, 91, 101, 98, 89, 103, 81, 93, 49, 20,
   6, 52, 41, 76, 14, 56, 24, 90, 61, 77, 32, 45, 18, 91, 51, 97, 26, 67, 36, 99, 63, 98, 38, 57, 30, 79,
   54, 43, 64, 53, 88, 71, 95, 81, 102, 85, 93, 73, 66, 55, 65, 82, 103, 100, 89, 75, 101, 92, 104, 83, 96, 87,
   94, 9, 11, 71, 15, 73, 17, 75, 46, 47, 21, 69, 23, 70, 82, 83, 27, 85, 29, 87, 76, 77, 33, 79, 35, 81,
   88, 89, 48, 50, 92, 72, 94, 74, 96, 58, 59, 60, 90, 62, 100, 91, 101, 93, 95, 68, 78, 80, 104, 84, 102, 86,
   103, 97, 98, 99, 10, 70, 13, 72, 16, 44, 45, 19, 77, 69, 22, 80, 81, 25, 71, 84, 28, 74, 75, 31, 89, 78,
   34, 86, 87, 37, 83, 49, 91, 51, 93, 73, 56, 57, 76, 98, 90, 61, 99, 63, 101, 92, 94, 67, 97, 79, 103, 82,
   102, 85, 95, 96, 88, 104, 100, 69, 12, 14, 42, 43, 74, 18, 76, 20, 78, 79, 70, 24, 71, 26, 72, 73, 86, 30,
   88, 32, 84, 85, 80, 36, 82, 38, 90, 52, 53, 54, 55, 95, 75, 97, 77, 99, 100, 91, 92, 64, 65, 66, 96, 98,
   102, 81, 83, 93, 94, 103, 87, 104, 89, 101, 44, 42, 41, 70, 45, 69, 43, 49, 52, 74, 56, 72, 54, 51, 53, 80,
   57, 78, 55, 61, 64, 86, 67, 84, 66, 63, 65, 76, 77, 71, 81, 75, 79, 73, 90, 91, 97, 88, 98, 82, 89, 83,
   87, 85, 99, 95, 93, 92, 103, 96, 102, 94, 100, 101, 104, 46, 40, 43, 47, 71, 48, 53, 69, 42, 58, 76, 50, 52,
   73, 55, 59, 82, 60, 65, 79, 54, 68, 88, 62, 64, 85, 66, 74, 70, 75, 77, 83, 90, 92, 78, 72, 86, 95, 80,
   96, 81, 87, 89, 100, 84, 97, 91, 94, 98, 104, 99, 101, 102, 93, 103, 39, 47, 45, 50, 51, 46, 71, 44, 70, 48,
   49, 59, 77, 57, 75, 62, 63, 58, 83, 56, 81, 60, 61, 68, 89, 67, 87, 69, 72, 73, 91, 92, 76, 82, 74, 80,
   78, 79, 84, 85, 93, 94, 101, 88, 86, 90, 98, 96, 99, 100, 97, 104, 95, 103, 102
}; // 1.61 kb
static const cart_index_t iCartYY_ab13_a10[660] = {
   0, 15, 16, 5, 23, 7, 25, 50, 51, 9, 10, 27, 28, 72, 73, 17, 35, 19, 37, 91, 92, 21, 22, 33, 34, 93,
   94, 29, 31, 101, 57, 59, 39, 44, 80, 46, 82, 62, 63, 67, 96, 68, 98, 48, 49, 56, 103, 58, 104, 60, 61, 69,
   84, 85, 74, 86, 76, 88, 99, 100, 78, 79, 102, 95, 97, 90, 17, 1, 18, 21, 3, 48, 53, 8, 26, 29, 74, 11,
   75, 12, 30, 33, 15, 90, 92, 20, 38, 35, 95, 23, 96, 24, 36, 27, 100, 32, 55, 40, 58, 78, 42, 60, 65, 47,
   83, 94, 66, 50, 52, 68, 97, 102, 54, 62, 64, 59, 104, 86, 70, 87, 84, 72, 99, 101, 77, 89, 80, 103, 81, 93,
   91, 98, 19, 20, 2, 49, 52, 22, 4, 24, 6, 76, 31, 77, 13, 32, 14, 90, 91, 34, 16, 36, 18, 97, 37, 98,
   25, 38, 26, 99, 28, 30, 41, 54, 56, 61, 64, 79, 43, 81, 45, 51, 53, 93, 66, 95, 67, 63, 65, 102, 55, 103,
   57, 88, 89, 71, 100, 101, 85, 73, 87, 75, 104, 82, 83, 92, 94, 96, 9, 3, 43, 17, 11, 46, 71, 40, 53, 21,
   69, 15, 73, 42, 55, 29, 23, 76, 82, 52, 65, 33, 79, 27, 85, 54, 66, 35, 88, 64, 75, 47, 48, 74, 70, 58,
   83, 50, 92, 96, 87, 59, 77, 60, 90, 95, 81, 68, 89, 62, 100, 78, 72, 94, 86, 80, 97, 104, 91, 101, 84, 102,
   93, 103, 98, 99, 10, 42, 4, 44, 70, 19, 13, 52, 41, 69, 22, 72, 16, 54, 43, 74, 80, 31, 25, 64, 53, 78,
   34, 84, 28, 66, 55, 86, 37, 65, 45, 77, 49, 56, 81, 76, 71, 91, 51, 57, 75, 98, 89, 90, 61, 67, 87, 97,
   83, 99, 63, 79, 93, 73, 95, 103, 88, 82, 101, 92, 102, 85, 94, 96, 104, 100, 5, 11, 45, 9, 15, 39, 51, 47,
   71, 17, 44, 23, 57, 70, 75, 21, 27, 49, 63, 77, 83, 29, 56, 35, 67, 81, 87, 33, 61, 89, 73, 50, 46, 69,
   72, 48, 92, 59, 82, 85, 94, 62, 91, 58, 76, 79, 93, 60, 101, 68, 88, 74, 80, 96, 78, 84, 90, 100, 98, 104,
   86, 95, 103, 102, 99, 97, 44, 12, 6, 69, 42, 49, 41, 20, 14, 74, 56, 70, 45, 24, 18, 78, 72, 61, 51, 32,
   26, 86, 67, 80, 57, 36, 30, 84, 63, 38, 43, 52, 76, 79, 54, 90, 53, 77, 71, 73, 55, 91, 64, 97, 88, 85,
   66, 99, 65, 98, 82, 95, 81, 75, 102, 93, 100, 92, 89, 83, 103, 96, 87, 94, 101, 104, 7, 47, 13, 39, 50, 10,
   16, 70, 45, 46, 19, 59, 25, 77, 71, 48, 62, 22, 28, 81, 75, 58, 31, 68, 37, 89, 83, 60, 34, 87, 51, 72,
   44, 49, 91, 69, 73, 80, 57, 63, 92, 84, 93, 74, 56, 61, 101, 78, 94, 86, 67, 76, 98, 82, 90, 99, 79, 85,
   103, 96, 97, 88, 104, 100, 102, 95, 46, 8, 14, 48, 40, 69, 43, 12, 18, 58, 76, 47, 71, 20, 26, 60, 50, 79,
   73, 24, 30, 68, 88, 59, 82, 32, 38, 62, 85, 36, 53, 42, 74, 90, 52, 78, 55, 70, 75, 92, 65, 72, 54, 86,
   95, 100, 64, 84, 66, 80, 96, 97, 77, 83, 99, 91, 102, 94, 81, 87, 98, 104, 89, 101, 93, 103, 39, 40, 41, 46,
   47, 44, 45, 42, 43, 48, 49, 50, 51, 52, 53, 58, 59, 56, 57, 54, 55, 60, 61, 62, 63, 64, 65, 68, 67, 66,
   71, 70, 69, 76, 77, 74, 75, 72, 73, 82, 83, 80, 81, 78, 79, 88, 89, 86, 87, 84, 85, 90, 91, 92, 97, 98,
   95, 96, 93, 94, 99, 100, 101, 104, 103, 102
}; // 1.29 kb
static const cart_index_t iCartYY_ab13_a11[468] = {
   0, 11, 13, 15, 16, 5, 45, 7, 47, 9, 10, 23, 70, 25, 71, 27, 28, 17, 75, 19, 77, 21, 22, 35, 81, 37,
   83, 33, 34, 29, 87, 31, 89, 39, 50, 51, 72, 73, 44, 57, 46, 59, 48, 49, 62, 63, 91, 92, 93, 94, 56, 67,
   58, 68, 60, 61, 101, 69, 80, 82, 84, 85, 74, 96, 76, 98, 78, 79, 86, 103, 88, 104, 90, 99, 100, 102, 95, 97,
   9, 1, 14, 3, 43, 17, 18, 46, 8, 21, 69, 11, 12, 71, 26, 15, 73, 29, 30, 76, 20, 33, 79, 23, 24, 82,
   38, 27, 85, 35, 36, 88, 32, 48, 40, 53, 42, 55, 74, 75, 58, 47, 60, 90, 50, 92, 52, 65, 54, 66, 95, 96,
   68, 59, 62, 100, 64, 78, 70, 83, 72, 94, 86, 87, 97, 77, 84, 102, 80, 81, 104, 89, 99, 91, 101, 93, 103, 98,
   10, 12, 2, 42, 4, 44, 6, 19, 20, 69, 22, 70, 24, 13, 14, 72, 16, 74, 18, 31, 32, 78, 34, 80, 36, 25,
   26, 84, 28, 86, 30, 37, 38, 49, 52, 41, 54, 43, 56, 45, 76, 77, 90, 61, 91, 51, 64, 53, 66, 55, 67, 57,
   97, 98, 99, 63, 65, 79, 81, 71, 93, 73, 95, 75, 88, 89, 102, 85, 103, 87, 82, 83, 100, 101, 92, 94, 96, 104,
   5, 3, 41, 11, 45, 9, 43, 39, 40, 17, 44, 15, 42, 51, 53, 23, 57, 21, 55, 49, 52, 29, 56, 27, 54, 63,
   65, 35, 67, 33, 66, 61, 64, 46, 47, 71, 70, 75, 69, 73, 48, 50, 58, 76, 59, 82, 77, 83, 81, 87, 79, 85,
   60, 62, 68, 88, 89, 74, 72, 92, 80, 96, 78, 94, 90, 91, 86, 95, 84, 93, 100, 101, 97, 98, 104, 103, 102, 99,
   7, 40, 4, 47, 13, 39, 41, 10, 42, 46, 19, 50, 52, 16, 43, 59, 25, 48, 53, 22, 54, 58, 31, 62, 64, 28,
   55, 68, 37, 60, 65, 34, 66, 44, 70, 45, 77, 71, 49, 51, 69, 72, 74, 56, 80, 57, 81, 75, 89, 83, 61, 63,
   78, 84, 86, 67, 87, 76, 91, 73, 98, 82, 90, 92, 79, 93, 97, 88, 99, 101, 85, 94, 95, 103, 96, 104, 100, 102,
   39, 8, 6, 40, 41, 46, 14, 44, 12, 48, 49, 47, 20, 45, 18, 50, 51, 58, 26, 56, 24, 60, 61, 59, 32, 57,
   30, 62, 63, 68, 38, 67, 36, 69, 42, 43, 52, 53, 76, 71, 74, 70, 78, 79, 72, 73, 54, 55, 64, 65, 88, 82,
   86, 80, 84, 85, 66, 90, 77, 75, 91, 92, 97, 83, 95, 81, 99, 100, 98, 89, 96, 87, 102, 93, 94, 101, 104, 103
}; // 0.91 kb
static const cart_index_t iCartYY_ab13_a12[273] = {
   0, 3, 4, 5, 11, 7, 13, 40, 41, 9, 10, 15, 16, 42, 43, 17, 23, 19, 25, 52, 53, 21, 22, 27, 28, 54,
   55, 29, 35, 31, 37, 64, 65, 33, 34, 66, 45, 47, 39, 44, 70, 46, 71, 50, 51, 57, 75, 59, 77, 48, 49, 56,
   81, 58, 83, 62, 63, 67, 87, 68, 89, 60, 61, 69, 72, 73, 74, 80, 76, 82, 91, 92, 78, 79, 84, 85, 93, 94,
   86, 88, 101, 96, 98, 90, 95, 103, 97, 104, 99, 100, 102, 5, 1, 6, 9, 3, 39, 41, 8, 14, 17, 44, 11, 45,
   12, 18, 21, 15, 49, 51, 20, 26, 29, 56, 23, 57, 24, 30, 33, 27, 61, 63, 32, 38, 35, 67, 36, 43, 40, 46,
   69, 42, 48, 53, 47, 71, 73, 55, 50, 52, 58, 76, 79, 54, 60, 65, 59, 82, 85, 66, 62, 64, 68, 88, 74, 70,
   75, 78, 72, 90, 92, 77, 83, 86, 95, 80, 96, 81, 87, 84, 100, 89, 94, 91, 97, 102, 93, 99, 101, 98, 104, 103,
   7, 8, 2, 39, 40, 10, 4, 12, 6, 46, 19, 47, 13, 20, 14, 48, 50, 22, 16, 24, 18, 58, 31, 59, 25, 32,
   26, 60, 62, 34, 28, 36, 30, 68, 37, 38, 41, 42, 44, 49, 52, 69, 43, 70, 45, 51, 53, 72, 54, 74, 56, 61,
   64, 78, 55, 80, 57, 63, 65, 84, 66, 86, 67, 76, 77, 71, 90, 91, 79, 73, 81, 75, 97, 88, 98, 82, 89, 83,
   99, 85, 87, 92, 93, 95, 100, 101, 102, 94, 103, 96, 104
}; // 0.53 kb
static const cart_index_t iCartYY_ab13_a13[105] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
   52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
   78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
   104
}; // 0.21 kb
static const cart_index_t iCartYY_ab14_a0[120] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
   52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
   78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
   104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119
}; // 0.23 kb
static const cart_index_t iCartYY_ab14_a1[315] = {
   0, 3, 5, 4, 1, 7, 6, 8, 2, 11, 4, 43, 12, 42, 6, 3, 9, 44, 42, 14, 8, 5, 44, 10, 43, 7,
   13, 9, 15, 47, 10, 45, 17, 16, 11, 49, 46, 13, 19, 18, 50, 12, 48, 20, 14, 23, 16, 53, 24, 51, 18, 15,
   21, 55, 52, 26, 20, 17, 56, 22, 54, 19, 25, 21, 27, 59, 22, 57, 29, 28, 23, 61, 58, 25, 31, 30, 62, 24,
   60, 32, 26, 35, 28, 65, 36, 63, 30, 27, 33, 67, 64, 38, 32, 29, 68, 34, 66, 31, 37, 33, 39, 71, 34, 69,
   40, 39, 35, 73, 70, 37, 41, 40, 74, 36, 72, 41, 38, 44, 47, 45, 49, 43, 46, 50, 48, 42, 76, 46, 54, 77,
   52, 48, 45, 75, 56, 51, 77, 50, 47, 55, 75, 53, 49, 76, 55, 59, 78, 56, 80, 57, 61, 53, 79, 62, 81, 51,
   82, 54, 58, 83, 60, 52, 88, 58, 66, 89, 64, 60, 57, 85, 68, 63, 87, 62, 59, 67, 84, 65, 61, 86, 67, 71,
   90, 68, 92, 69, 73, 65, 91, 74, 93, 63, 94, 66, 70, 95, 72, 64, 98, 70, 72, 69, 97, 74, 71, 73, 96, 75,
   78, 80, 79, 76, 82, 81, 83, 77, 86, 79, 100, 87, 99, 81, 78, 84, 101, 99, 89, 83, 80, 101, 85, 100, 82, 88,
   84, 90, 104, 85, 102, 92, 91, 86, 106, 103, 88, 94, 93, 107, 87, 105, 95, 89, 96, 91, 110, 97, 108, 93, 90, 96,
   112, 109, 98, 95, 92, 113, 97, 111, 94, 98, 101, 104, 102, 106, 100, 103, 107, 105, 99, 115, 103, 111, 116, 109, 105, 102,
   114, 113, 108, 116, 107, 104, 112, 114, 110, 106, 115, 112, 110, 117, 113, 118, 108, 119, 111, 109, 114, 117, 118, 117, 115, 119,
   118, 119, 116
}; // 0.62 kb
static const cart_index_t iCartYY_ab14_a2[546] = {
   0, 9, 10, 3, 5, 44, 11, 1, 13, 4, 43, 7, 12, 14, 2, 42, 6, 8, 3, 15, 45, 9, 44, 47, 16, 4,
   46, 11, 49, 43, 5, 47, 17, 44, 10, 45, 18, 48, 6, 50, 12, 42, 49, 7, 19, 43, 46, 13, 50, 20, 8, 48,
   42, 14, 9, 21, 75, 15, 47, 55, 10, 75, 22, 45, 17, 56, 23, 11, 76, 16, 53, 49, 24, 77, 12, 51, 18, 50,
   76, 13, 25, 46, 54, 19, 77, 26, 14, 52, 48, 20, 15, 27, 78, 21, 55, 59, 28, 16, 79, 23, 61, 53, 17, 80,
   29, 56, 22, 57, 30, 81, 18, 62, 24, 51, 82, 19, 31, 54, 58, 25, 83, 32, 20, 60, 52, 26, 21, 33, 84, 27,
   59, 67, 22, 85, 34, 57, 29, 68, 35, 23, 86, 28, 65, 61, 36, 87, 24, 63, 30, 62, 88, 25, 37, 58, 66, 31,
   89, 38, 26, 64, 60, 32, 27, 39, 90, 33, 67, 71, 39, 28, 91, 35, 73, 65, 29, 92, 40, 68, 34, 69, 40, 93,
   30, 74, 36, 63, 94, 31, 41, 66, 70, 37, 95, 41, 32, 72, 64, 38, 33, 35, 96, 39, 71, 73, 34, 97, 36, 69,
   40, 74, 98, 37, 38, 70, 72, 41, 51, 52, 42, 77, 50, 48, 53, 43, 54, 49, 76, 46, 44, 55, 56, 47, 45, 75,
   45, 78, 57, 75, 56, 80, 79, 46, 58, 76, 82, 54, 47, 59, 80, 55, 75, 78, 81, 60, 48, 83, 77, 52, 61, 49,
   82, 53, 79, 76, 62, 83, 50, 81, 51, 77, 63, 99, 51, 87, 62, 81, 99, 64, 52, 89, 83, 60, 65, 53, 100, 61,
   86, 79, 100, 54, 66, 82, 88, 58, 55, 67, 101, 59, 78, 84, 56, 101, 68, 80, 57, 85, 57, 102, 69, 85, 68, 92,
   103, 58, 70, 88, 94, 66, 59, 71, 104, 67, 84, 90, 105, 72, 60, 95, 89, 64, 73, 61, 106, 65, 91, 86, 74, 107,
   62, 93, 63, 87, 69, 108, 63, 97, 74, 93, 109, 70, 64, 98, 95, 72, 71, 65, 110, 73, 96, 91, 111, 66, 72, 94,
   98, 70, 67, 73, 112, 71, 90, 96, 68, 113, 74, 92, 69, 97, 75, 84, 85, 78, 80, 101, 86, 76, 88, 79, 100, 82,
   87, 89, 77, 99, 81, 83, 78, 90, 102, 84, 101, 104, 91, 79, 103, 86, 106, 100, 80, 104, 92, 101, 85, 102, 93, 105,
   81, 107, 87, 99, 106, 82, 94, 100, 103, 88, 107, 95, 83, 105, 99, 89, 84, 96, 114, 90, 104, 112, 85, 114, 97, 102,
   92, 113, 96, 86, 115, 91, 110, 106, 97, 116, 87, 108, 93, 107, 115, 88, 98, 103, 111, 94, 116, 98, 89, 109, 105, 95,
   90, 91, 117, 96, 112, 110, 92, 118, 93, 113, 97, 108, 119, 94, 95, 111, 109, 98, 108, 109, 99, 116, 107, 105, 110, 100,
   111, 106, 115, 103, 101, 112, 113, 104, 102, 114, 102, 117, 108, 114, 113, 118, 117, 103, 109, 115, 119, 111, 104, 110, 118, 112,
   114, 117, 118, 111, 105, 119, 116, 109, 112, 106, 119, 110, 117, 115, 113, 119, 107, 118, 108, 116, 114, 115, 116, 117, 118, 119
}; // 1.07 kb
static const cart_index_t iCartYY_ab14_a3[780] = {
   0, 15, 17, 9, 10, 3, 45, 5, 47, 44, 16, 1, 19, 4, 46, 11, 13, 49, 7, 43, 18, 20, 2, 48, 6, 50,
   8, 12, 14, 42, 23, 4, 54, 11, 76, 16, 46, 53, 43, 49, 24, 52, 6, 77, 12, 51, 42, 18, 48, 50, 3, 21,
   56, 15, 45, 9, 75, 44, 55, 47, 51, 26, 8, 52, 42, 77, 14, 50, 20, 48, 5, 55, 22, 47, 17, 44, 56, 10,
   75, 45, 53, 7, 25, 43, 54, 49, 19, 76, 13, 46, 9, 27, 80, 21, 75, 15, 78, 47, 59, 55, 10, 78, 29, 75,
   22, 45, 57, 17, 80, 56, 28, 11, 82, 16, 79, 23, 76, 61, 49, 53, 79, 13, 31, 46, 58, 76, 25, 82, 19, 54,
   30, 83, 12, 81, 18, 62, 50, 24, 77, 51, 81, 32, 14, 60, 48, 83, 20, 77, 26, 52, 35, 16, 100, 23, 86, 28,
   79, 65, 53, 61, 36, 99, 18, 87, 24, 63, 51, 30, 81, 62, 15, 33, 101, 27, 78, 21, 84, 55, 67, 59, 99, 38,
   20, 64, 52, 89, 26, 83, 32, 60, 17, 101, 34, 80, 29, 56, 68, 22, 85, 57, 100, 19, 37, 54, 66, 82, 31, 88,
   25, 58, 21, 39, 104, 33, 84, 27, 90, 59, 71, 67, 22, 102, 40, 85, 34, 57, 69, 29, 92, 68, 39, 23, 106, 28,
   91, 35, 86, 73, 61, 65, 103, 25, 41, 58, 70, 88, 37, 94, 31, 66, 40, 107, 24, 93, 30, 74, 62, 36, 87, 63,
   105, 41, 26, 72, 60, 95, 32, 89, 38, 64, 33, 28, 110, 35, 96, 39, 91, 71, 65, 73, 34, 108, 30, 97, 36, 69,
   63, 40, 93, 74, 27, 35, 112, 39, 90, 33, 96, 67, 73, 71, 109, 37, 32, 70, 64, 98, 38, 95, 41, 72, 29, 113,
   36, 92, 40, 68, 74, 34, 97, 69, 111, 31, 38, 66, 72, 94, 41, 98, 37, 70, 44, 59, 57, 55, 56, 47, 80, 45,
   78, 75, 61, 43, 58, 49, 82, 53, 54, 79, 46, 76, 62, 60, 42, 83, 50, 81, 48, 51, 52, 77, 86, 46, 66, 76,
   88, 79, 58, 100, 54, 82, 87, 64, 48, 89, 77, 99, 52, 81, 60, 83, 45, 84, 68, 78, 57, 75, 85, 56, 101, 80,
   63, 89, 50, 99, 51, 87, 77, 62, 83, 81, 47, 67, 85, 59, 80, 55, 101, 75, 84, 78, 65, 49, 88, 53, 100, 61,
   82, 86, 76, 79, 55, 71, 102, 67, 101, 59, 104, 78, 90, 84, 56, 104, 69, 101, 68, 80, 92, 57, 102, 85, 73, 53,
   103, 61, 106, 65, 100, 91, 79, 86, 74, 105, 51, 107, 62, 93, 81, 63, 99, 87, 106, 54, 70, 82, 94, 100, 66, 103,
   58, 88, 107, 72, 52, 95, 83, 105, 60, 99, 64, 89, 115, 58, 72, 88, 98, 103, 70, 111, 66, 94, 116, 70, 60, 98,
   89, 109, 64, 105, 72, 95, 57, 114, 74, 102, 69, 85, 97, 68, 113, 92, 69, 116, 62, 108, 63, 97, 87, 74, 107, 93,
   59, 73, 114, 71, 104, 67, 112, 84, 96, 90, 71, 61, 115, 65, 110, 73, 106, 96, 86, 91, 67, 65, 117, 73, 112, 71,
   110, 90, 91, 96, 68, 118, 63, 113, 74, 92, 93, 69, 108, 97, 119, 66, 64, 94, 95, 111, 72, 109, 70, 98, 75, 90,
   92, 84, 85, 78, 102, 80, 104, 101, 91, 76, 94, 79, 103, 86, 88, 106, 82, 100, 93, 95, 77, 105, 81, 107, 83, 87,
   89, 99, 96, 79, 111, 86, 115, 91, 103, 110, 100, 106, 97, 109, 81, 116, 87, 108, 99, 93, 105, 107, 78, 96, 113, 90,
   102, 84, 114, 101, 112, 104, 108, 98, 83, 109, 99, 116, 89, 107, 95, 105, 80, 112, 97, 104, 92, 101, 113, 85, 114, 102,
   110, 82, 98, 100, 111, 106, 94, 115, 88, 103, 84, 91, 118, 96, 114, 90, 117, 104, 110, 112, 85, 117, 93, 114, 97, 102,
   108, 92, 118, 113, 90, 86, 119, 91, 117, 96, 115, 112, 106, 110, 117, 88, 95, 103, 109, 115, 98, 119, 94, 111, 92, 119,
   87, 118, 93, 113, 107, 97, 116, 108, 118, 94, 89, 111, 105, 119, 95, 116, 98, 109, 101, 110, 108, 112, 113, 104, 118, 102,
   117, 114, 112, 100, 109, 106, 119, 110, 111, 117, 103, 115, 113, 111, 99, 119, 107, 118, 105, 108, 109, 116, 114, 103, 105, 115,
   116, 117, 109, 118, 111, 119, 102, 115, 107, 117, 108, 114, 116, 113, 119, 118, 104, 106, 116, 110, 118, 112, 119, 114, 115, 117
}; // 1.52 kb
static const cart_index_t iCartYY_ab14_a4[990] = {
   0, 21, 22, 3, 15, 5, 17, 55, 56, 9, 10, 75, 45, 47, 44, 23, 1, 25, 16, 4, 53, 54, 7, 19, 11, 76,
   13, 46, 43, 49, 24, 26, 2, 51, 52, 18, 6, 20, 8, 77, 12, 14, 42, 48, 50, 3, 27, 57, 9, 21, 44, 56,
   59, 80, 15, 45, 78, 75, 55, 47, 28, 4, 58, 23, 11, 61, 82, 43, 54, 16, 79, 46, 76, 49, 53, 5, 59, 29,
   44, 55, 10, 22, 78, 57, 47, 17, 80, 56, 75, 45, 30, 60, 6, 62, 83, 24, 12, 52, 42, 81, 18, 48, 50, 77,
   51, 61, 7, 31, 53, 43, 79, 58, 13, 25, 49, 82, 19, 54, 46, 76, 62, 32, 8, 81, 60, 51, 42, 26, 14, 83,
   50, 20, 48, 52, 77, 9, 33, 85, 15, 27, 47, 80, 67, 101, 21, 75, 84, 78, 59, 55, 10, 84, 34, 45, 78, 17,
   29, 101, 68, 75, 22, 85, 57, 80, 56, 35, 11, 88, 28, 16, 65, 100, 49, 82, 23, 86, 76, 79, 53, 61, 36, 89,
   12, 63, 99, 30, 18, 83, 50, 87, 24, 77, 51, 81, 62, 86, 13, 37, 79, 46, 100, 66, 19, 31, 76, 88, 25, 58,
   54, 82, 87, 38, 14, 99, 64, 81, 48, 32, 20, 89, 77, 26, 52, 60, 83, 15, 39, 102, 21, 33, 55, 101, 71, 104,
   27, 78, 90, 84, 67, 59, 39, 16, 103, 35, 23, 73, 106, 53, 100, 28, 91, 79, 86, 61, 65, 17, 104, 40, 56, 101,
   22, 34, 102, 69, 80, 29, 92, 68, 85, 57, 40, 105, 18, 74, 107, 36, 24, 99, 51, 93, 30, 81, 62, 87, 63, 106,
   19, 41, 100, 54, 103, 70, 25, 37, 82, 94, 31, 66, 58, 88, 107, 41, 20, 105, 72, 99, 52, 38, 26, 95, 83, 32,
   60, 64, 89, 21, 35, 114, 27, 39, 59, 104, 73, 112, 33, 84, 96, 90, 71, 67, 22, 114, 36, 57, 102, 29, 40, 113,
   74, 85, 34, 97, 69, 92, 68, 33, 23, 115, 39, 28, 71, 110, 61, 106, 35, 96, 86, 91, 65, 73, 34, 116, 24, 69,
   108, 40, 30, 107, 62, 97, 36, 87, 63, 93, 74, 115, 25, 38, 103, 58, 111, 72, 31, 41, 88, 98, 37, 70, 66, 94,
   116, 37, 26, 109, 70, 105, 60, 41, 32, 98, 89, 38, 64, 72, 95, 27, 28, 117, 33, 35, 67, 112, 65, 110, 39, 90,
   91, 96, 73, 71, 29, 118, 30, 68, 113, 34, 36, 108, 63, 92, 40, 93, 74, 97, 69, 119, 31, 32, 111, 66, 109, 64,
   37, 38, 94, 95, 41, 72, 70, 98, 63, 64, 42, 87, 89, 62, 50, 60, 48, 99, 51, 52, 77, 83, 81, 65, 43, 66,
   61, 49, 86, 88, 46, 58, 53, 100, 54, 82, 76, 79, 44, 67, 68, 47, 59, 45, 57, 84, 85, 55, 56, 101, 80, 78,
   75, 45, 90, 69, 75, 84, 56, 68, 104, 92, 78, 57, 102, 85, 101, 80, 91, 46, 70, 86, 76, 106, 94, 54, 66, 79,
   103, 58, 88, 82, 100, 47, 71, 92, 55, 67, 75, 85, 90, 102, 59, 80, 104, 101, 84, 78, 93, 72, 48, 107, 95, 87,
   77, 64, 52, 105, 81, 60, 83, 89, 99, 73, 49, 94, 65, 53, 91, 103, 76, 88, 61, 106, 82, 100, 79, 86, 74, 95,
   50, 93, 105, 63, 51, 89, 77, 107, 62, 83, 81, 99, 87, 69, 109, 51, 97, 116, 74, 62, 105, 81, 108, 63, 99, 87,
   107, 93, 108, 70, 52, 116, 98, 107, 83, 72, 60, 109, 99, 64, 89, 95, 105, 71, 53, 111, 73, 61, 96, 115, 79, 103,
   65, 110, 100, 106, 86, 91, 110, 54, 72, 106, 82, 115, 98, 58, 70, 100, 111, 66, 94, 88, 103, 55, 73, 113, 59, 71,
   78, 102, 96, 114, 67, 101, 112, 104, 90, 84, 56, 112, 74, 80, 104, 57, 69, 114, 97, 101, 68, 113, 92, 102, 85, 57,
   117, 63, 85, 114, 68, 74, 118, 93, 102, 69, 108, 97, 113, 92, 117, 58, 64, 115, 88, 119, 95, 66, 72, 103, 109, 70,
   98, 94, 111, 59, 65, 118, 67, 73, 84, 114, 91, 117, 71, 104, 110, 112, 96, 90, 118, 66, 60, 119, 94, 116, 89, 70,
   64, 111, 105, 72, 95, 98, 109, 67, 61, 119, 71, 65, 90, 117, 86, 115, 73, 112, 106, 110, 91, 96, 68, 119, 62, 92,
   118, 69, 63, 116, 87, 113, 74, 107, 93, 108, 97, 75, 96, 97, 78, 90, 80, 92, 112, 113, 84, 85, 114, 102, 104, 101,
   96, 76, 98, 91, 79, 110, 111, 82, 94, 86, 115, 88, 103, 100, 106, 97, 98, 77, 108, 109, 93, 81, 95, 83, 116, 87,
   89, 99, 105, 107, 78, 91, 108, 84, 96, 101, 113, 110, 118, 90, 102, 117, 114, 112, 104, 90, 79, 109, 96, 86, 112, 119,
   100, 111, 91, 117, 103, 115, 106, 110, 80, 110, 93, 101, 112, 85, 97, 117, 108, 104, 92, 118, 113, 114, 102, 92, 111, 81,
   113, 119, 97, 87, 109, 99, 118, 93, 105, 107, 116, 108, 112, 82, 95, 110, 100, 117, 109, 88, 98, 106, 119, 94, 111, 103,
   115, 113, 94, 83, 118, 111, 108, 99, 98, 89, 119, 107, 95, 105, 109, 116, 84, 86, 116, 90, 91, 104, 118, 106, 119, 96,
   114, 115, 117, 110, 112, 85, 115, 87, 102, 117, 92, 93, 119, 107, 114, 97, 116, 108, 118, 113, 114, 88, 89, 117, 103, 118,
   105, 94, 95, 115, 116, 98, 109, 111, 119, 102, 103, 99, 114, 115, 113, 107, 111, 105, 117, 108, 109, 116, 119, 118, 104, 100,
   105, 112, 106, 114, 116, 103, 109, 110, 118, 111, 119, 115, 117, 101, 106, 107, 104, 110, 102, 108, 115, 116, 112, 113, 119, 118,
   117, 114
}; // 1.93 kb
static const cart_index_t iCartYY_ab14_a5[1155] = {
   0, 27, 29, 21, 22, 3, 57, 5, 59, 9, 10, 15, 78, 17, 80, 44, 55, 56, 75, 45, 47, 28, 1, 31, 4, 58,
   23, 25, 61, 7, 16, 79, 11, 13, 82, 19, 53, 43, 54, 46, 76, 49, 30, 32, 2, 60, 6, 62, 8, 24, 26, 81,
   18, 83, 20, 12, 14, 51, 52, 42, 48, 50, 77, 35, 4, 66, 11, 88, 28, 58, 65, 43, 23, 86, 16, 46, 100, 54,
   61, 49, 82, 76, 79, 53, 36, 64, 6, 89, 12, 63, 42, 30, 60, 87, 24, 99, 52, 18, 48, 62, 83, 50, 77, 51,
   81, 3, 33, 68, 27, 57, 9, 85, 44, 67, 15, 45, 21, 84, 56, 101, 47, 59, 80, 78, 75, 55, 63, 38, 8, 64,
   42, 87, 14, 62, 32, 99, 51, 89, 26, 50, 20, 81, 60, 48, 52, 77, 83, 5, 67, 34, 59, 29, 44, 68, 10, 84,
   47, 17, 55, 101, 22, 85, 45, 78, 57, 80, 56, 75, 65, 7, 37, 43, 66, 61, 31, 86, 13, 53, 100, 49, 19, 88,
   25, 79, 46, 58, 54, 82, 76, 9, 39, 92, 33, 85, 15, 102, 47, 71, 21, 75, 27, 90, 80, 104, 55, 67, 101, 84,
   78, 59, 10, 90, 40, 84, 34, 45, 69, 17, 104, 75, 22, 78, 102, 29, 92, 56, 101, 68, 85, 57, 80, 39, 11, 94,
   16, 103, 35, 88, 73, 49, 28, 91, 23, 76, 106, 82, 65, 53, 100, 79, 86, 61, 91, 13, 41, 46, 70, 86, 37, 106,
   19, 79, 103, 76, 25, 94, 31, 100, 54, 66, 58, 88, 82, 40, 95, 12, 105, 18, 74, 50, 36, 89, 93, 30, 107, 83,
   24, 77, 63, 99, 51, 81, 62, 87, 93, 41, 14, 72, 48, 107, 20, 87, 38, 105, 81, 95, 32, 77, 26, 99, 64, 52,
   60, 83, 89, 33, 16, 111, 23, 115, 39, 103, 71, 53, 35, 96, 28, 79, 110, 100, 73, 61, 106, 86, 91, 65, 34, 109,
   18, 116, 24, 69, 51, 40, 105, 97, 36, 108, 99, 30, 81, 74, 107, 62, 87, 63, 93, 15, 35, 113, 39, 102, 21, 114,
   55, 73, 27, 78, 33, 96, 101, 112, 59, 71, 104, 90, 84, 67, 108, 37, 20, 70, 52, 116, 26, 107, 41, 109, 99, 98,
   38, 83, 32, 105, 72, 60, 64, 89, 95, 17, 112, 36, 104, 40, 56, 74, 22, 114, 80, 29, 101, 113, 34, 97, 57, 102,
   69, 92, 68, 85, 110, 19, 38, 54, 72, 106, 41, 115, 25, 100, 111, 82, 31, 98, 37, 103, 58, 70, 66, 94, 88, 21,
   28, 118, 35, 114, 27, 117, 59, 65, 33, 84, 39, 91, 104, 110, 67, 73, 112, 96, 90, 71, 22, 117, 30, 114, 36, 57,
   63, 29, 118, 85, 34, 102, 108, 40, 93, 68, 113, 74, 97, 69, 92, 27, 23, 119, 28, 117, 33, 115, 67, 61, 39, 90,
   35, 86, 112, 106, 71, 65, 110, 91, 96, 73, 117, 25, 32, 58, 64, 115, 38, 119, 31, 103, 109, 88, 37, 95, 41, 111,
   66, 72, 70, 98, 94, 29, 119, 24, 118, 30, 68, 62, 34, 116, 92, 40, 113, 107, 36, 87, 69, 108, 63, 93, 74, 97,
   118, 31, 26, 66, 60, 119, 32, 116, 37, 111, 105, 94, 41, 89, 38, 109, 70, 64, 72, 95, 98, 44, 71, 69, 67, 68,
   47, 92, 45, 90, 55, 56, 59, 104, 57, 102, 75, 84, 85, 101, 80, 78, 73, 43, 70, 49, 94, 65, 66, 91, 46, 61,
   106, 53, 54, 103, 58, 86, 76, 88, 82, 100, 79, 74, 72, 42, 95, 50, 93, 48, 63, 64, 107, 62, 105, 60, 51, 52,
   87, 89, 77, 83, 81, 99, 96, 46, 72, 76, 98, 91, 70, 110, 54, 86, 115, 79, 58, 111, 66, 106, 82, 94, 88, 103,
   100, 97, 70, 48, 98, 77, 108, 52, 93, 72, 116, 87, 109, 64, 81, 60, 107, 95, 83, 89, 99, 105, 45, 96, 74, 90,
   69, 75, 97, 56, 112, 78, 57, 84, 114, 68, 113, 80, 104, 92, 102, 85, 101, 69, 98, 50, 109, 51, 97, 77, 74, 95,
   108, 63, 116, 89, 62, 83, 93, 105, 81, 99, 87, 107, 47, 73, 97, 71, 92, 55, 113, 75, 96, 59, 80, 67, 112, 85,
   114, 78, 90, 102, 104, 101, 84, 71, 49, 98, 53, 111, 73, 94, 96, 76, 65, 110, 61, 82, 115, 88, 91, 79, 103, 100,
   106, 86, 55, 65, 108, 73, 113, 59, 118, 78, 91, 67, 101, 71, 110, 102, 117, 84, 96, 114, 112, 104, 90, 56, 110, 63,
   112, 74, 80, 93, 57, 117, 101, 68, 104, 118, 69, 108, 85, 114, 97, 113, 92, 102, 67, 53, 109, 61, 119, 71, 111, 90,
   79, 73, 112, 65, 100, 117, 103, 96, 86, 115, 106, 110, 91, 68, 111, 51, 119, 62, 92, 81, 69, 109, 113, 74, 118, 105,
   63, 99, 97, 116, 87, 107, 93, 108, 112, 54, 64, 82, 95, 110, 72, 117, 58, 106, 119, 100, 66, 109, 70, 115, 88, 98,
   94, 111, 103, 113, 66, 52, 94, 83, 118, 60, 108, 70, 119, 107, 111, 72, 99, 64, 116, 98, 89, 95, 105, 109, 114, 58,
   60, 88, 89, 117, 64, 118, 66, 115, 116, 103, 70, 105, 72, 119, 94, 95, 98, 109, 111, 57, 115, 62, 117, 63, 85, 87,
   68, 119, 102, 69, 114, 116, 74, 107, 92, 118, 93, 108, 97, 113, 59, 61, 116, 65, 118, 67, 119, 84, 86, 71, 104, 73,
   106, 114, 115, 90, 91, 117, 110, 112, 96, 75, 91, 93, 96, 97, 78, 108, 80, 110, 84, 85, 90, 117, 92, 118, 101, 112,
   113, 114, 102, 104, 90, 76, 95, 79, 109, 96, 98, 112, 82, 91, 117, 86, 88, 119, 94, 110, 100, 111, 103, 115, 106, 92,
   94, 77, 111, 81, 113, 83, 97, 98, 118, 93, 119, 95, 87, 89, 108, 109, 99, 105, 107, 116, 84, 79, 105, 86, 116, 90,
   109, 104, 100, 96, 114, 91, 103, 118, 111, 112, 106, 119, 115, 117, 110, 85, 103, 81, 115, 87, 102, 99, 92, 111, 114, 97,
   117, 109, 93, 105, 113, 119, 107, 116, 108, 118, 78, 86, 107, 91, 108, 84, 116, 101, 106, 90, 102, 96, 115, 113, 119, 104,
   110, 118, 117, 114, 112, 102, 88, 83, 103, 99, 114, 89, 113, 94, 117, 108, 115, 98, 107, 95, 118, 111, 105, 109, 116, 119,
   80, 106, 87, 110, 93, 101, 107, 85, 115, 104, 92, 112, 119, 97, 116, 102, 117, 108, 118, 113, 114, 104, 82, 89, 100, 105,
   112, 95, 114, 88, 110, 118, 106, 94, 116, 98, 117, 103, 109, 111, 119, 115, 101, 100, 99, 106, 107, 104, 105, 102, 103, 112,
   113, 110, 111, 108, 109, 114, 115, 116, 119, 118, 117
}; // 2.26 kb
static const cart_index_t iCartYY_ab14_a6[1260] = {
   0, 33, 34, 3, 27, 5, 29, 67, 68, 9, 10, 21, 22, 84, 85, 15, 17, 101, 57, 59, 44, 45, 78, 47, 80, 55,
   56, 75, 35, 1, 37, 28, 4, 65, 66, 7, 31, 23, 86, 11, 88, 13, 25, 16, 100, 19, 58, 43, 61, 79, 46, 53,
   54, 49, 82, 76, 36, 38, 2, 63, 64, 30, 6, 32, 8, 87, 24, 89, 12, 26, 14, 99, 18, 20, 42, 60, 62, 51,
   52, 81, 48, 83, 50, 77, 3, 39, 69, 9, 33, 44, 68, 71, 92, 15, 45, 27, 57, 90, 102, 21, 56, 104, 85, 67,
   47, 75, 84, 55, 101, 59, 80, 78, 39, 4, 70, 35, 11, 73, 94, 43, 66, 28, 91, 16, 103, 46, 58, 23, 106, 54,
   88, 49, 65, 86, 76, 61, 82, 53, 100, 79, 5, 71, 40, 44, 67, 10, 34, 90, 69, 47, 17, 59, 29, 104, 92, 55,
   22, 102, 68, 84, 45, 56, 101, 75, 85, 78, 57, 80, 40, 72, 6, 74, 95, 36, 12, 64, 42, 93, 30, 105, 18, 60,
   48, 107, 24, 52, 50, 89, 63, 62, 83, 87, 77, 99, 51, 81, 73, 7, 41, 65, 43, 91, 70, 13, 37, 61, 106, 49,
   94, 19, 31, 53, 103, 25, 66, 46, 86, 100, 54, 79, 58, 76, 88, 82, 74, 41, 8, 93, 72, 63, 42, 38, 14, 107,
   62, 95, 50, 32, 20, 105, 51, 26, 48, 64, 87, 81, 60, 99, 52, 89, 77, 83, 9, 35, 97, 15, 39, 47, 92, 73,
   113, 21, 75, 33, 85, 96, 114, 27, 80, 112, 102, 71, 55, 78, 90, 59, 104, 67, 101, 84, 10, 96, 36, 45, 90, 17,
   40, 112, 74, 75, 22, 84, 34, 114, 97, 78, 29, 113, 69, 104, 56, 57, 102, 80, 92, 101, 68, 85, 33, 11, 98, 39,
   16, 71, 111, 49, 94, 35, 96, 23, 115, 76, 88, 28, 110, 82, 103, 53, 73, 91, 79, 65, 100, 61, 106, 86, 34, 98,
   12, 69, 109, 40, 18, 95, 50, 97, 36, 116, 24, 89, 77, 108, 30, 83, 51, 105, 74, 63, 99, 93, 81, 107, 62, 87,
   96, 13, 38, 91, 46, 110, 72, 19, 41, 86, 115, 76, 98, 25, 37, 79, 111, 31, 70, 54, 106, 103, 58, 100, 66, 82,
   94, 88, 97, 37, 14, 108, 70, 93, 48, 41, 20, 116, 87, 98, 77, 38, 26, 109, 81, 32, 52, 72, 107, 99, 64, 105,
   60, 95, 83, 89, 15, 28, 108, 21, 35, 55, 113, 65, 118, 27, 78, 39, 102, 91, 117, 33, 101, 110, 114, 73, 59, 84,
   96, 67, 112, 71, 104, 90, 27, 16, 109, 33, 23, 67, 119, 53, 111, 39, 90, 28, 117, 79, 103, 35, 112, 100, 115, 61,
   71, 96, 86, 73, 106, 65, 110, 91, 17, 110, 30, 56, 112, 22, 36, 117, 63, 80, 29, 104, 40, 118, 93, 101, 34, 108,
   74, 114, 57, 68, 113, 85, 97, 102, 69, 92, 29, 111, 18, 68, 119, 34, 24, 109, 51, 92, 40, 118, 30, 105, 81, 113,
   36, 99, 62, 116, 69, 74, 107, 97, 87, 108, 63, 93, 112, 19, 32, 110, 54, 117, 64, 25, 38, 106, 119, 82, 95, 31,
   41, 100, 109, 37, 72, 58, 115, 111, 66, 103, 70, 88, 98, 94, 113, 31, 20, 118, 66, 108, 52, 37, 26, 119, 107, 94,
   83, 41, 32, 111, 99, 38, 60, 70, 116, 105, 72, 109, 64, 98, 89, 95, 21, 23, 116, 27, 28, 59, 118, 61, 119, 33,
   84, 35, 114, 86, 115, 39, 104, 106, 117, 65, 67, 90, 91, 71, 110, 73, 112, 96, 22, 115, 24, 57, 117, 29, 30, 119,
   62, 85, 34, 114, 36, 116, 87, 102, 40, 107, 63, 118, 68, 69, 108, 92, 93, 113, 74, 97, 114, 25, 26, 117, 58, 118,
   60, 31, 32, 115, 116, 88, 89, 37, 38, 103, 105, 41, 64, 66, 119, 109, 70, 111, 72, 94, 95, 98, 69, 70, 42, 97,
   98, 74, 50, 72, 48, 108, 63, 109, 51, 64, 52, 116, 62, 60, 77, 95, 93, 87, 89, 107, 83, 105, 81, 99, 71, 43,
   72, 73, 49, 96, 98, 46, 70, 65, 110, 53, 111, 54, 66, 61, 115, 58, 94, 76, 91, 106, 82, 86, 88, 79, 103, 100,
   44, 73, 74, 47, 71, 45, 69, 96, 97, 55, 56, 67, 68, 112, 113, 59, 57, 114, 92, 90, 75, 80, 104, 78, 102, 84,
   85, 101, 45, 91, 63, 75, 96, 56, 74, 110, 93, 78, 57, 90, 69, 117, 108, 84, 68, 118, 97, 112, 80, 85, 114, 101,
   113, 104, 92, 102, 90, 46, 64, 96, 76, 112, 95, 54, 72, 91, 117, 79, 109, 58, 70, 86, 119, 66, 98, 82, 110, 115,
   88, 106, 94, 100, 111, 103, 47, 65, 93, 55, 73, 75, 97, 91, 108, 59, 80, 71, 92, 110, 118, 67, 85, 117, 113, 96,
   78, 101, 112, 84, 114, 90, 102, 104, 92, 66, 48, 113, 94, 97, 77, 70, 52, 118, 93, 111, 81, 72, 60, 119, 87, 64,
   83, 98, 108, 107, 95, 116, 89, 109, 99, 105, 67, 49, 95, 71, 53, 90, 109, 76, 98, 73, 112, 61, 119, 82, 94, 65,
   117, 88, 111, 79, 96, 110, 100, 91, 103, 86, 115, 106, 68, 94, 50, 92, 111, 69, 51, 98, 77, 113, 74, 119, 62, 95,
   83, 118, 63, 89, 81, 109, 97, 93, 105, 108, 99, 116, 87, 107, 57, 103, 51, 85, 115, 68, 62, 111, 81, 102, 69, 117,
   63, 109, 99, 114, 74, 105, 87, 119, 92, 97, 116, 113, 107, 118, 93, 108, 102, 58, 52, 114, 88, 113, 83, 66, 60, 117,
   108, 103, 99, 70, 64, 115, 107, 72, 89, 94, 118, 116, 98, 119, 95, 111, 105, 109, 59, 53, 105, 67, 61, 84, 116, 79,
   109, 71, 104, 65, 118, 100, 111, 73, 114, 103, 119, 86, 90, 112, 106, 96, 115, 91, 117, 110, 104, 54, 60, 112, 82, 114,
   89, 58, 64, 110, 118, 100, 105, 66, 72, 106, 116, 70, 95, 88, 117, 119, 94, 115, 98, 103, 109, 111, 55, 61, 107, 59,
   65, 78, 108, 86, 116, 67, 101, 73, 113, 106, 119, 71, 102, 115, 118, 91, 84, 104, 110, 90, 117, 96, 114, 112, 56, 106,
   62, 80, 110, 57, 63, 115, 87, 101, 68, 112, 74, 119, 107, 104, 69, 116, 93, 117, 85, 92, 118, 102, 108, 114, 97, 113,
   75, 86, 87, 78, 91, 80, 93, 106, 107, 84, 85, 96, 97, 115, 116, 90, 92, 119, 108, 110, 101, 102, 117, 104, 118, 112,
   113, 114, 84, 76, 89, 90, 79, 104, 105, 82, 95, 96, 114, 86, 116, 88, 98, 91, 118, 94, 109, 100, 112, 117, 103, 110,
   111, 106, 119, 115, 85, 88, 77, 102, 103, 92, 81, 94, 83, 114, 97, 115, 87, 98, 89, 117, 93, 95, 99, 111, 113, 108,
   109, 118, 105, 119, 107, 116, 78, 79, 99, 84, 86, 101, 107, 100, 105, 90, 102, 91, 108, 103, 109, 96, 113, 111, 116, 106,
   104, 114, 115, 112, 119, 110, 118, 117, 80, 100, 81, 101, 106, 85, 87, 103, 99, 104, 92, 110, 93, 111, 105, 112, 97, 109,
   107, 115, 102, 113, 119, 114, 116, 117, 108, 118, 101, 82, 83, 104, 100, 102, 99, 88, 89, 112, 113, 106, 107, 94, 95, 110,
   108, 98, 105, 103, 114, 118, 111, 117, 109, 115, 116, 119
}; // 2.46 kb
static const cart_index_t iCartYY_ab14_a7[1296] = {
   0, 39, 40, 33, 34, 3, 69, 5, 71, 9, 10, 27, 90, 29, 92, 21, 22, 15, 102, 17, 104, 44, 67, 68, 84, 85,
   45, 57, 47, 59, 55, 56, 101, 75, 78, 80, 39, 1, 41, 4, 70, 35, 37, 73, 7, 28, 91, 11, 13, 94, 31, 16,
   103, 23, 25, 106, 19, 65, 43, 66, 46, 58, 86, 88, 61, 49, 53, 100, 54, 79, 76, 82, 40, 41, 2, 72, 6, 74,
   8, 36, 38, 93, 30, 95, 32, 12, 14, 105, 18, 107, 20, 24, 26, 63, 64, 42, 60, 48, 62, 50, 87, 89, 99, 51,
   52, 81, 83, 77, 33, 4, 72, 11, 98, 39, 70, 71, 43, 35, 96, 16, 46, 111, 66, 23, 115, 28, 58, 110, 54, 73,
   49, 94, 76, 88, 91, 103, 65, 53, 61, 106, 82, 86, 79, 100, 34, 70, 6, 98, 12, 69, 42, 40, 72, 97, 36, 109,
   64, 18, 48, 116, 24, 108, 52, 30, 60, 74, 95, 50, 89, 77, 63, 51, 93, 105, 107, 62, 83, 87, 99, 81, 3, 35,
   74, 39, 69, 9, 97, 44, 73, 15, 45, 33, 96, 68, 113, 27, 57, 21, 114, 56, 112, 47, 71, 92, 90, 102, 75, 85,
   55, 67, 59, 80, 104, 78, 84, 101, 69, 37, 8, 70, 42, 97, 14, 74, 41, 108, 63, 98, 38, 50, 20, 109, 51, 116,
   26, 62, 32, 93, 72, 48, 64, 52, 87, 77, 107, 95, 105, 81, 60, 99, 89, 83, 5, 73, 36, 71, 40, 44, 74, 10,
   96, 47, 17, 67, 112, 34, 97, 59, 29, 55, 113, 22, 114, 45, 90, 69, 104, 92, 56, 68, 75, 84, 78, 57, 102, 80,
   101, 85, 71, 7, 38, 43, 72, 73, 41, 96, 13, 65, 110, 49, 19, 98, 37, 53, 111, 61, 31, 115, 25, 91, 46, 70,
   54, 66, 106, 94, 86, 76, 79, 103, 58, 100, 82, 88, 9, 28, 93, 35, 97, 15, 108, 47, 65, 21, 75, 39, 91, 92,
   118, 33, 85, 27, 117, 80, 110, 55, 73, 113, 96, 114, 78, 102, 59, 71, 67, 101, 112, 84, 90, 104, 10, 91, 30, 96,
   36, 45, 63, 17, 110, 75, 22, 90, 117, 40, 93, 84, 34, 78, 108, 29, 118, 56, 112, 74, 114, 97, 57, 69, 80, 104,
   101, 68, 113, 85, 102, 92, 27, 11, 95, 16, 109, 33, 98, 67, 49, 39, 90, 23, 76, 119, 94, 28, 117, 35, 88, 112,
   82, 71, 53, 111, 79, 103, 96, 115, 73, 61, 65, 110, 100, 91, 86, 106, 90, 13, 32, 46, 64, 96, 38, 112, 19, 91,
   117, 76, 25, 95, 41, 79, 109, 86, 37, 119, 31, 110, 54, 72, 58, 70, 115, 98, 106, 82, 100, 111, 66, 103, 88, 94,
   29, 94, 12, 111, 18, 68, 50, 34, 98, 92, 40, 119, 95, 24, 77, 118, 30, 113, 83, 36, 89, 69, 109, 51, 105, 81,
   74, 62, 97, 116, 108, 63, 99, 93, 107, 87, 92, 31, 14, 66, 48, 113, 20, 97, 37, 118, 93, 94, 41, 77, 26, 111,
   81, 119, 32, 87, 38, 108, 70, 52, 72, 60, 107, 83, 116, 98, 109, 99, 64, 105, 95, 89, 21, 16, 105, 23, 116, 27,
   109, 59, 53, 33, 84, 28, 79, 118, 111, 35, 114, 39, 103, 104, 100, 67, 61, 119, 86, 115, 90, 117, 71, 65, 73, 112,
   106, 96, 91, 110, 22, 103, 18, 115, 24, 57, 51, 29, 111, 85, 34, 117, 109, 30, 81, 114, 36, 102, 99, 40, 105, 68,
   119, 62, 116, 87, 69, 63, 92, 118, 113, 74, 107, 97, 108, 93, 15, 23, 107, 28, 108, 21, 116, 55, 61, 27, 78, 35,
   86, 113, 119, 39, 102, 33, 115, 101, 106, 59, 65, 118, 91, 117, 84, 114, 67, 73, 71, 104, 110, 90, 96, 112, 102, 25,
   20, 58, 52, 114, 26, 113, 31, 117, 108, 88, 37, 83, 32, 103, 99, 115, 38, 107, 41, 118, 66, 60, 70, 64, 116, 89,
   119, 94, 111, 105, 72, 109, 98, 95, 17, 106, 24, 110, 30, 56, 62, 22, 115, 80, 29, 112, 119, 36, 87, 104, 40, 101,
   107, 34, 116, 57, 117, 63, 118, 93, 68, 74, 85, 114, 102, 69, 108, 92, 113, 97, 104, 19, 26, 54, 60, 112, 32, 114,
   25, 110, 118, 82, 31, 89, 38, 100, 105, 106, 41, 116, 37, 117, 58, 64, 66, 72, 119, 95, 115, 88, 103, 109, 70, 111,
   94, 98, 44, 65, 63, 73, 74, 47, 93, 45, 91, 55, 56, 71, 110, 69, 108, 67, 68, 59, 118, 57, 117, 75, 96, 97,
   112, 113, 80, 92, 78, 90, 84, 85, 114, 101, 104, 102, 67, 43, 64, 49, 95, 71, 72, 90, 46, 73, 112, 53, 54, 109,
   70, 61, 119, 65, 66, 117, 58, 96, 76, 98, 82, 94, 110, 111, 91, 79, 86, 115, 88, 106, 100, 103, 68, 66, 42, 94,
   50, 92, 48, 69, 70, 113, 74, 111, 72, 51, 52, 119, 62, 118, 60, 63, 64, 97, 98, 77, 95, 83, 93, 81, 108, 109,
   116, 87, 89, 107, 105, 99, 84, 46, 60, 76, 89, 90, 64, 104, 54, 96, 114, 79, 58, 105, 72, 86, 116, 91, 70, 118,
   66, 112, 82, 95, 88, 98, 117, 109, 110, 100, 106, 119, 94, 115, 103, 111, 85, 58, 48, 88, 77, 102, 52, 92, 66, 114,
   97, 103, 70, 81, 60, 115, 87, 117, 64, 93, 72, 113, 94, 83, 98, 89, 108, 99, 118, 111, 119, 107, 95, 116, 109, 105,
   45, 86, 62, 91, 63, 75, 87, 56, 106, 78, 57, 96, 115, 74, 107, 90, 69, 84, 116, 68, 119, 80, 110, 93, 117, 108,
   85, 97, 101, 112, 104, 92, 118, 102, 114, 113, 57, 88, 50, 103, 51, 85, 77, 68, 94, 102, 69, 115, 98, 62, 83, 117,
   63, 114, 89, 74, 95, 92, 111, 81, 109, 99, 97, 87, 113, 119, 118, 93, 105, 108, 116, 107, 47, 61, 87, 65, 93, 55,
   107, 75, 86, 59, 80, 73, 106, 97, 116, 71, 92, 67, 119, 85, 115, 78, 91, 108, 110, 118, 101, 113, 84, 96, 90, 102,
   117, 104, 112, 114, 59, 49, 89, 53, 105, 67, 95, 84, 76, 71, 104, 61, 82, 116, 98, 65, 118, 73, 94, 114, 88, 90,
   79, 109, 100, 111, 112, 119, 96, 86, 91, 117, 103, 110, 106, 115, 55, 53, 99, 61, 107, 59, 105, 78, 79, 67, 101, 65,
   100, 108, 109, 73, 113, 71, 111, 102, 103, 84, 86, 116, 106, 119, 104, 118, 90, 91, 96, 114, 115, 112, 110, 117, 56, 100,
   51, 106, 62, 80, 81, 57, 103, 101, 68, 110, 111, 63, 99, 112, 74, 104, 105, 69, 109, 85, 115, 87, 119, 107, 92, 93,
   102, 117, 114, 97, 116, 113, 118, 108, 101, 54, 52, 82, 83, 104, 60, 102, 58, 112, 113, 100, 66, 99, 64, 106, 107, 110,
   72, 108, 70, 114, 88, 89, 94, 95, 118, 105, 117, 103, 115, 116, 98, 119, 111, 109, 75, 79, 81, 86, 87, 78, 99, 80,
   100, 84, 85, 91, 103, 93, 105, 96, 97, 90, 109, 92, 111, 101, 106, 107, 115, 116, 102, 108, 104, 110, 112, 113, 119, 114,
   117, 118, 78, 76, 83, 79, 99, 84, 89, 101, 82, 90, 102, 86, 88, 107, 95, 91, 108, 96, 98, 113, 94, 104, 100, 105,
   103, 109, 114, 116, 112, 106, 110, 118, 111, 117, 115, 119, 80, 82, 77, 100, 81, 101, 83, 85, 88, 104, 92, 106, 94, 87,
   89, 110, 93, 112, 95, 97, 98, 102, 103, 99, 111, 105, 113, 107, 114, 115, 117, 108, 109, 118, 119, 116
}; // 2.53 kb
static const cart_index_t iCartYY_ab14_a8[1260] = {
   0, 35, 36, 3, 39, 5, 40, 73, 74, 9, 10, 33, 34, 96, 97, 15, 27, 17, 29, 112, 113, 21, 22, 114, 69, 71,
   44, 45, 90, 47, 92, 67, 68, 57, 102, 59, 104, 55, 56, 75, 84, 85, 78, 80, 101, 33, 1, 38, 39, 4, 71, 72,
   7, 41, 35, 96, 11, 98, 13, 37, 28, 16, 110, 111, 19, 31, 23, 115, 25, 70, 43, 73, 91, 46, 65, 66, 49, 94,
   103, 58, 53, 54, 61, 106, 86, 76, 88, 79, 100, 82, 34, 37, 2, 69, 70, 40, 6, 41, 8, 97, 36, 98, 12, 38,
   14, 108, 109, 30, 18, 32, 20, 116, 24, 26, 42, 72, 74, 63, 64, 93, 48, 95, 50, 51, 52, 105, 60, 107, 62, 87,
   89, 77, 99, 81, 83, 3, 28, 63, 9, 35, 44, 74, 65, 93, 15, 45, 39, 69, 91, 108, 21, 33, 56, 68, 110, 118,
   27, 57, 117, 97, 73, 47, 75, 96, 55, 113, 71, 92, 85, 114, 67, 112, 59, 80, 78, 90, 102, 84, 101, 104, 27, 4,
   64, 33, 11, 67, 95, 43, 72, 39, 90, 16, 109, 46, 70, 35, 23, 112, 119, 54, 66, 28, 117, 58, 98, 49, 71, 96,
   76, 73, 94, 53, 111, 115, 88, 61, 82, 65, 110, 91, 79, 103, 86, 106, 100, 5, 65, 30, 44, 73, 10, 36, 91, 63,
   47, 17, 71, 40, 110, 93, 55, 67, 22, 34, 117, 108, 59, 29, 118, 74, 96, 45, 56, 112, 75, 97, 90, 69, 68, 113,
   84, 114, 78, 57, 80, 104, 92, 101, 85, 102, 29, 66, 6, 68, 94, 34, 12, 70, 42, 92, 40, 111, 18, 72, 48, 113,
   119, 36, 24, 64, 52, 118, 30, 60, 50, 98, 69, 74, 95, 97, 77, 109, 51, 62, 83, 116, 89, 108, 63, 93, 105, 81,
   107, 87, 99, 67, 7, 32, 71, 43, 90, 64, 13, 38, 73, 112, 49, 95, 19, 41, 65, 53, 117, 109, 25, 37, 61, 119,
   31, 72, 46, 96, 110, 54, 91, 70, 76, 98, 111, 66, 79, 58, 86, 115, 106, 82, 94, 100, 103, 88, 68, 31, 8, 92,
   66, 69, 42, 37, 14, 113, 74, 94, 50, 41, 20, 118, 111, 63, 51, 38, 26, 119, 62, 32, 48, 70, 97, 93, 72, 108,
   52, 98, 77, 81, 60, 109, 64, 116, 87, 107, 95, 83, 105, 99, 89, 9, 23, 87, 15, 28, 47, 93, 61, 107, 21, 75,
   35, 97, 86, 116, 27, 39, 80, 92, 106, 119, 33, 85, 115, 108, 65, 55, 78, 91, 59, 118, 73, 113, 102, 117, 71, 110,
   67, 101, 84, 96, 114, 90, 104, 112, 10, 86, 24, 45, 91, 17, 30, 106, 62, 75, 22, 96, 36, 115, 87, 78, 90, 29,
   40, 119, 107, 84, 34, 116, 63, 110, 56, 57, 117, 80, 93, 112, 74, 69, 108, 104, 118, 101, 68, 85, 114, 97, 102, 92,
   113, 21, 11, 89, 27, 16, 59, 105, 49, 95, 33, 84, 23, 116, 76, 98, 39, 28, 104, 118, 82, 94, 35, 114, 88, 109,
   53, 67, 90, 79, 71, 111, 61, 119, 117, 103, 65, 100, 73, 112, 96, 86, 115, 91, 110, 106, 22, 88, 12, 57, 103, 29,
   18, 94, 50, 85, 34, 115, 24, 98, 77, 102, 117, 40, 30, 95, 83, 114, 36, 89, 51, 111, 68, 69, 109, 92, 81, 119,
   62, 63, 99, 118, 105, 113, 74, 97, 116, 87, 108, 93, 107, 84, 13, 26, 90, 46, 104, 60, 19, 32, 96, 114, 76, 89,
   25, 38, 91, 79, 118, 105, 31, 41, 86, 116, 37, 64, 54, 112, 117, 58, 110, 72, 82, 95, 109, 70, 100, 66, 106, 119,
   115, 88, 98, 103, 111, 94, 85, 25, 14, 102, 58, 92, 48, 31, 20, 114, 97, 88, 77, 37, 26, 117, 103, 93, 81, 41,
   32, 115, 87, 38, 52, 66, 113, 108, 70, 118, 60, 94, 83, 99, 64, 111, 72, 119, 107, 116, 98, 89, 109, 105, 95, 15,
   16, 99, 21, 23, 55, 107, 53, 105, 27, 78, 28, 108, 79, 109, 33, 35, 101, 113, 100, 111, 39, 102, 103, 116, 61, 59,
   84, 86, 67, 119, 65, 118, 114, 115, 73, 106, 71, 104, 90, 91, 117, 96, 112, 110, 17, 100, 18, 56, 106, 22, 24, 103,
   51, 80, 29, 110, 30, 111, 81, 101, 112, 34, 36, 109, 99, 104, 40, 105, 62, 115, 57, 68, 119, 85, 87, 117, 63, 74,
   107, 114, 116, 102, 69, 92, 118, 93, 113, 97, 108, 101, 19, 20, 104, 54, 102, 52, 25, 26, 112, 113, 82, 83, 31, 32,
   110, 100, 108, 99, 37, 38, 106, 107, 41, 60, 58, 114, 118, 66, 117, 64, 88, 89, 105, 72, 103, 70, 115, 116, 119, 94,
   95, 111, 109, 98, 57, 58, 42, 85, 88, 68, 50, 66, 48, 102, 69, 103, 51, 70, 52, 114, 115, 74, 62, 72, 60, 117,
   63, 64, 77, 94, 92, 97, 98, 113, 83, 111, 81, 87, 89, 119, 95, 118, 93, 108, 109, 99, 116, 107, 105, 59, 43, 60,
   67, 49, 84, 89, 46, 64, 71, 104, 53, 105, 54, 72, 73, 61, 114, 116, 58, 70, 65, 118, 66, 95, 76, 90, 112, 82,
   96, 98, 79, 109, 119, 94, 86, 88, 91, 117, 110, 100, 111, 106, 115, 103, 44, 61, 62, 47, 65, 45, 63, 86, 87, 55,
   56, 73, 74, 106, 107, 59, 71, 57, 69, 115, 116, 67, 68, 119, 93, 91, 75, 80, 110, 78, 108, 96, 97, 92, 118, 90,
   117, 84, 85, 101, 112, 113, 104, 102, 114, 45, 79, 51, 75, 86, 56, 62, 100, 81, 78, 57, 91, 63, 103, 99, 84, 96,
   68, 74, 111, 105, 90, 69, 109, 87, 106, 80, 85, 115, 101, 107, 110, 93, 97, 116, 112, 119, 104, 92, 102, 117, 108, 114,
   113, 118, 78, 46, 52, 84, 76, 101, 83, 54, 60, 90, 102, 79, 99, 58, 64, 96, 86, 113, 107, 66, 72, 91, 108, 70,
   89, 82, 104, 114, 88, 112, 95, 100, 105, 116, 98, 106, 94, 110, 118, 117, 103, 109, 115, 119, 111, 47, 53, 81, 55, 61,
   75, 87, 79, 99, 59, 80, 65, 93, 100, 105, 67, 73, 85, 97, 103, 109, 71, 92, 111, 107, 86, 78, 101, 106, 84, 116,
   91, 108, 113, 119, 96, 115, 90, 102, 104, 110, 118, 112, 114, 117, 80, 54, 48, 101, 82, 85, 77, 58, 52, 104, 92, 100,
   81, 66, 60, 112, 106, 97, 87, 70, 64, 110, 93, 72, 83, 88, 102, 113, 94, 114, 89, 103, 99, 107, 95, 115, 98, 117,
   108, 118, 111, 105, 119, 116, 109, 55, 49, 83, 59, 53, 78, 99, 76, 89, 67, 101, 61, 107, 82, 95, 71, 65, 102, 108,
   88, 98, 73, 113, 94, 105, 79, 84, 104, 100, 90, 109, 86, 116, 118, 111, 91, 103, 96, 114, 112, 106, 119, 110, 117, 115,
   56, 82, 50, 80, 100, 57, 51, 88, 77, 101, 68, 106, 62, 94, 83, 104, 110, 69, 63, 98, 89, 112, 74, 95, 81, 103,
   85, 92, 111, 102, 99, 115, 87, 93, 105, 117, 109, 114, 97, 113, 119, 107, 118, 108, 116, 75, 76, 77, 78, 79, 80, 81,
   82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
   108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119
}; // 2.46 kb
static const cart_index_t iCartYY_ab14_a9[1155] = {
   0, 28, 30, 35, 36, 3, 63, 5, 65, 9, 10, 39, 91, 40, 93, 33, 34, 15, 108, 17, 110, 21, 22, 27, 117, 29,
   118, 44, 73, 74, 96, 97, 45, 69, 47, 71, 55, 56, 67, 68, 112, 113, 114, 57, 59, 75, 90, 92, 84, 85, 78, 102,
   80, 104, 101, 27, 1, 32, 4, 64, 33, 38, 67, 7, 39, 90, 11, 13, 95, 41, 16, 109, 35, 37, 112, 19, 28, 117,
   23, 25, 119, 31, 71, 43, 72, 46, 70, 96, 98, 73, 49, 65, 110, 53, 111, 54, 66, 58, 115, 61, 91, 76, 94, 79,
   103, 86, 88, 106, 82, 100, 29, 31, 2, 66, 6, 68, 8, 34, 37, 92, 40, 94, 41, 12, 14, 111, 18, 113, 20, 36,
   38, 118, 30, 119, 32, 24, 26, 69, 70, 42, 72, 48, 74, 50, 97, 98, 108, 63, 109, 51, 64, 52, 60, 62, 116, 93,
   95, 77, 105, 81, 107, 83, 87, 89, 99, 21, 4, 60, 11, 89, 27, 64, 59, 43, 33, 84, 16, 46, 105, 72, 23, 116,
   39, 70, 104, 54, 35, 114, 28, 58, 118, 66, 67, 49, 95, 76, 98, 90, 109, 71, 53, 73, 112, 61, 119, 82, 94, 88,
   117, 65, 96, 79, 111, 86, 115, 91, 103, 110, 100, 106, 22, 58, 6, 88, 12, 57, 42, 29, 66, 85, 34, 103, 70, 18,
   48, 115, 24, 102, 52, 40, 72, 114, 36, 117, 64, 30, 60, 68, 94, 50, 98, 77, 69, 51, 92, 111, 113, 74, 119, 62,
   95, 83, 89, 63, 118, 97, 109, 81, 116, 87, 108, 99, 93, 105, 107, 3, 23, 62, 28, 63, 9, 87, 44, 61, 15, 45,
   35, 86, 74, 107, 39, 69, 21, 116, 56, 106, 27, 57, 33, 115, 68, 119, 47, 65, 93, 91, 108, 75, 97, 55, 73, 59,
   80, 71, 92, 110, 118, 117, 85, 67, 78, 96, 113, 90, 102, 84, 114, 101, 112, 104, 57, 25, 8, 58, 42, 85, 14, 68,
   31, 102, 69, 88, 37, 50, 20, 103, 51, 114, 26, 74, 41, 117, 63, 115, 38, 62, 32, 92, 66, 48, 70, 52, 97, 77,
   113, 94, 118, 93, 111, 81, 72, 60, 64, 87, 119, 108, 98, 83, 109, 99, 116, 89, 107, 95, 105, 5, 61, 24, 65, 30,
   44, 62, 10, 86, 47, 17, 73, 106, 36, 87, 71, 40, 55, 107, 22, 115, 59, 29, 67, 119, 34, 116, 45, 91, 63, 110,
   93, 56, 74, 75, 96, 78, 57, 90, 69, 117, 108, 118, 68, 84, 80, 112, 97, 104, 92, 101, 113, 85, 114, 102, 59, 7,
   26, 43, 60, 67, 32, 84, 13, 71, 104, 49, 19, 89, 38, 53, 105, 73, 41, 114, 25, 65, 118, 61, 31, 116, 37, 90,
   46, 64, 54, 72, 112, 95, 96, 76, 91, 117, 79, 109, 58, 70, 66, 119, 86, 110, 82, 98, 100, 111, 106, 94, 115, 88,
   103, 9, 16, 81, 23, 87, 15, 99, 47, 53, 21, 75, 28, 79, 93, 105, 35, 97, 27, 109, 80, 100, 33, 85, 39, 103,
   92, 111, 55, 61, 107, 86, 116, 78, 108, 59, 65, 67, 101, 73, 113, 106, 119, 115, 102, 71, 84, 91, 118, 96, 114, 90,
   117, 104, 110, 112, 10, 79, 18, 86, 24, 45, 51, 17, 100, 75, 22, 91, 103, 30, 81, 96, 36, 78, 99, 29, 111, 84,
   34, 90, 109, 40, 105, 56, 106, 62, 115, 87, 57, 63, 80, 110, 101, 68, 112, 74, 119, 107, 116, 69, 104, 85, 117, 93,
   114, 97, 102, 108, 92, 118, 113, 15, 11, 83, 16, 99, 21, 89, 55, 49, 27, 78, 23, 76, 107, 95, 28, 108, 33, 98,
   101, 82, 39, 102, 35, 88, 113, 94, 59, 53, 105, 79, 109, 84, 116, 67, 61, 71, 104, 65, 118, 100, 111, 103, 114, 73,
   90, 86, 119, 91, 117, 96, 115, 112, 106, 110, 78, 13, 20, 46, 52, 84, 26, 101, 19, 90, 102, 76, 25, 83, 32, 79,
   99, 96, 38, 113, 31, 91, 108, 86, 37, 107, 41, 104, 54, 60, 58, 64, 114, 89, 112, 82, 110, 118, 100, 105, 66, 72,
   70, 116, 106, 117, 88, 95, 103, 109, 115, 98, 119, 94, 111, 17, 82, 12, 100, 18, 56, 50, 22, 88, 80, 29, 106, 94,
   24, 77, 110, 30, 101, 83, 34, 98, 104, 40, 112, 95, 36, 89, 57, 103, 51, 111, 81, 68, 62, 85, 115, 102, 69, 117,
   63, 109, 99, 105, 74, 114, 92, 119, 87, 118, 93, 113, 107, 97, 116, 108, 80, 19, 14, 54, 48, 101, 20, 85, 25, 104,
   92, 82, 31, 77, 26, 100, 81, 112, 32, 97, 37, 110, 93, 106, 41, 87, 38, 102, 58, 52, 66, 60, 113, 83, 114, 88,
   117, 108, 103, 99, 70, 64, 72, 107, 115, 118, 94, 89, 111, 105, 119, 95, 116, 98, 109, 44, 53, 51, 61, 62, 47, 81,
   45, 79, 55, 56, 65, 100, 63, 99, 73, 74, 59, 105, 57, 103, 67, 68, 71, 111, 69, 109, 75, 86, 87, 106, 107, 80,
   93, 78, 91, 84, 85, 96, 97, 115, 116, 119, 92, 90, 101, 110, 108, 112, 113, 104, 118, 102, 117, 114, 55, 43, 52, 49,
   83, 59, 60, 78, 46, 67, 101, 53, 54, 99, 64, 61, 107, 71, 72, 102, 58, 73, 113, 65, 66, 108, 70, 84, 76, 89,
   82, 95, 104, 105, 90, 79, 96, 114, 86, 116, 88, 98, 94, 118, 91, 112, 100, 109, 106, 119, 110, 111, 117, 103, 115, 56,
   54, 42, 82, 50, 80, 48, 57, 58, 101, 68, 100, 66, 51, 52, 106, 62, 104, 60, 69, 70, 112, 74, 110, 72, 63, 64,
   85, 88, 77, 94, 83, 92, 81, 102, 103, 114, 97, 115, 87, 98, 89, 95, 93, 117, 113, 111, 99, 119, 107, 118, 105, 108,
   109, 116, 75, 46, 48, 76, 77, 78, 52, 80, 54, 84, 85, 79, 58, 81, 60, 86, 87, 90, 64, 92, 66, 96, 97, 91,
   70, 93, 72, 101, 82, 83, 88, 89, 102, 99, 104, 100, 112, 113, 106, 107, 94, 95, 98, 108, 110, 114, 103, 105, 115, 116,
   117, 109, 118, 111, 119, 45, 76, 50, 79, 51, 75, 77, 56, 82, 78, 57, 86, 88, 62, 83, 91, 63, 84, 89, 68, 94,
   90, 69, 96, 98, 74, 95, 80, 100, 81, 103, 99, 85, 87, 101, 106, 104, 92, 110, 93, 111, 105, 109, 97, 112, 102, 115,
   107, 117, 108, 114, 116, 113, 119, 118, 47, 49, 77, 53, 81, 55, 83, 75, 76, 59, 80, 61, 82, 87, 89, 65, 93, 67,
   95, 85, 88, 71, 92, 73, 94, 97, 98, 78, 79, 99, 100, 105, 101, 107, 84, 86, 90, 102, 91, 108, 103, 109, 111, 113,
   96, 104, 106, 116, 110, 118, 112, 119, 114, 115, 117
}; // 2.26 kb
static const cart_index_t iCartYY_ab14_a10[990] = {
   0, 23, 24, 3, 28, 5, 30, 61, 62, 9, 10, 35, 36, 86, 87, 15, 39, 17, 40, 106, 107, 21, 22, 33, 34, 115,
   116, 27, 29, 119, 63, 65, 44, 45, 91, 47, 93, 73, 74, 69, 108, 71, 110, 55, 56, 57, 117, 59, 118, 67, 68, 75,
   96, 97, 78, 90, 80, 92, 112, 113, 84, 85, 114, 102, 104, 101, 21, 1, 26, 27, 4, 59, 60, 7, 32, 33, 84, 11,
   89, 13, 38, 39, 16, 104, 105, 19, 41, 35, 114, 23, 116, 25, 37, 28, 118, 31, 64, 43, 67, 90, 46, 71, 72, 49,
   95, 109, 70, 53, 54, 73, 112, 117, 58, 65, 66, 61, 119, 96, 76, 98, 91, 79, 110, 111, 82, 94, 86, 115, 88, 103,
   100, 106, 22, 25, 2, 57, 58, 29, 6, 31, 8, 85, 34, 88, 12, 37, 14, 102, 103, 40, 18, 41, 20, 114, 36, 115,
   24, 38, 26, 117, 30, 32, 42, 66, 68, 69, 70, 92, 48, 94, 50, 51, 52, 111, 72, 113, 74, 63, 64, 118, 60, 119,
   62, 97, 98, 77, 108, 109, 93, 81, 95, 83, 116, 87, 89, 99, 105, 107, 3, 16, 51, 9, 23, 44, 62, 53, 81, 15,
   45, 28, 63, 79, 99, 21, 35, 56, 74, 100, 105, 27, 57, 39, 69, 103, 109, 33, 68, 111, 87, 61, 47, 75, 86, 55,
   107, 65, 93, 97, 116, 73, 106, 59, 80, 85, 115, 67, 119, 71, 92, 78, 91, 108, 84, 96, 101, 113, 110, 118, 90, 102,
   117, 114, 112, 104, 15, 4, 52, 21, 11, 55, 83, 43, 60, 27, 78, 16, 99, 46, 64, 33, 23, 101, 107, 54, 72, 39,
   102, 28, 108, 58, 70, 35, 113, 66, 89, 49, 59, 84, 76, 67, 95, 53, 105, 116, 98, 61, 82, 71, 104, 114, 88, 73,
   94, 65, 118, 90, 79, 109, 96, 86, 112, 119, 100, 111, 91, 117, 103, 115, 106, 110, 5, 53, 18, 44, 61, 10, 24, 79,
   51, 47, 17, 65, 30, 100, 81, 55, 73, 22, 36, 103, 99, 59, 29, 71, 40, 111, 105, 67, 34, 109, 62, 86, 45, 56,
   106, 75, 87, 91, 63, 74, 107, 96, 115, 78, 57, 68, 119, 84, 116, 90, 69, 80, 110, 93, 101, 112, 85, 97, 117, 108,
   104, 92, 118, 113, 114, 102, 17, 54, 6, 56, 82, 22, 12, 58, 42, 80, 29, 100, 18, 66, 48, 101, 106, 34, 24, 70,
   52, 104, 40, 110, 30, 72, 60, 112, 36, 64, 50, 88, 57, 68, 94, 85, 77, 103, 51, 62, 83, 115, 98, 102, 69, 74,
   95, 114, 89, 117, 63, 92, 111, 81, 113, 119, 97, 87, 109, 99, 118, 93, 105, 107, 116, 108, 55, 7, 20, 59, 43, 78,
   52, 13, 26, 67, 101, 49, 83, 19, 32, 71, 53, 102, 99, 25, 38, 73, 113, 61, 107, 31, 41, 65, 108, 37, 60, 46,
   84, 104, 54, 90, 64, 76, 89, 105, 72, 79, 58, 96, 114, 118, 66, 91, 70, 86, 116, 112, 82, 95, 110, 100, 117, 109,
   88, 98, 106, 119, 94, 111, 103, 115, 56, 19, 8, 80, 54, 57, 42, 25, 14, 101, 68, 82, 50, 31, 20, 104, 100, 69,
   51, 37, 26, 112, 74, 106, 62, 41, 32, 110, 63, 38, 48, 58, 85, 92, 66, 102, 52, 88, 77, 81, 60, 103, 70, 114,
   97, 93, 72, 117, 64, 115, 87, 113, 94, 83, 118, 111, 108, 99, 98, 89, 119, 107, 95, 105, 109, 116, 9, 11, 77, 15,
   16, 47, 81, 49, 83, 21, 75, 23, 87, 76, 89, 27, 28, 80, 93, 82, 95, 33, 85, 35, 97, 88, 98, 39, 92, 94,
   99, 53, 55, 78, 79, 59, 105, 61, 107, 108, 109, 65, 100, 67, 101, 102, 103, 71, 111, 73, 113, 84, 86, 116, 90, 91,
   104, 118, 106, 119, 96, 114, 115, 117, 110, 112, 10, 76, 12, 45, 79, 17, 18, 82, 50, 75, 22, 86, 24, 88, 77, 78,
   91, 29, 30, 94, 83, 84, 34, 96, 36, 98, 89, 90, 40, 95, 51, 100, 56, 57, 103, 80, 81, 106, 62, 63, 99, 110,
   111, 101, 68, 69, 109, 104, 105, 112, 74, 85, 115, 87, 102, 117, 92, 93, 119, 107, 114, 97, 116, 108, 118, 113, 75, 13,
   14, 78, 46, 80, 48, 19, 20, 84, 85, 76, 77, 25, 26, 90, 79, 92, 81, 31, 32, 96, 97, 86, 87, 37, 38, 91,
   93, 41, 52, 54, 101, 102, 58, 104, 60, 82, 83, 99, 64, 100, 66, 112, 113, 108, 70, 110, 72, 106, 107, 114, 88, 89,
   117, 103, 118, 105, 94, 95, 115, 116, 98, 109, 111, 119, 45, 46, 42, 75, 76, 56, 50, 54, 48, 78, 57, 79, 51, 58,
   52, 84, 86, 68, 62, 66, 60, 90, 69, 91, 63, 70, 64, 96, 74, 72, 77, 82, 80, 85, 88, 101, 83, 100, 81, 87,
   89, 106, 94, 104, 92, 97, 98, 112, 95, 110, 93, 102, 103, 99, 114, 115, 113, 107, 111, 105, 117, 108, 109, 116, 119, 118,
   47, 43, 48, 55, 49, 75, 77, 46, 52, 59, 80, 53, 81, 54, 60, 67, 61, 85, 87, 58, 64, 71, 92, 65, 93, 66,
   72, 73, 97, 70, 83, 76, 78, 101, 82, 84, 89, 79, 99, 107, 95, 86, 88, 90, 102, 113, 94, 96, 98, 91, 108, 104,
   100, 105, 112, 106, 114, 116, 103, 109, 110, 118, 111, 119, 115, 117, 44, 49, 50, 47, 53, 45, 51, 76, 77, 55, 56, 61,
   62, 82, 83, 59, 65, 57, 63, 88, 89, 67, 68, 73, 74, 94, 95, 71, 69, 98, 81, 79, 75, 80, 100, 78, 99, 86,
   87, 93, 105, 91, 103, 84, 85, 92, 111, 90, 109, 96, 97, 101, 106, 107, 104, 110, 102, 108, 115, 116, 112, 113, 119, 118,
   117, 114
}; // 1.93 kb
static const cart_index_t iCartYY_ab14_a11[780] = {
   0, 16, 18, 23, 24, 3, 51, 5, 53, 9, 10, 28, 79, 30, 81, 35, 36, 15, 99, 17, 100, 21, 22, 39, 103, 40,
   105, 33, 34, 27, 109, 29, 111, 44, 61, 62, 86, 87, 45, 63, 47, 65, 55, 56, 73, 74, 106, 107, 115, 116, 57, 69,
   59, 71, 67, 68, 119, 75, 91, 93, 96, 97, 78, 108, 80, 110, 84, 85, 90, 117, 92, 118, 101, 112, 113, 114, 102, 104,
   15, 1, 20, 4, 52, 21, 26, 55, 7, 27, 78, 11, 13, 83, 32, 16, 99, 33, 38, 101, 19, 39, 102, 23, 25, 107,
   41, 28, 108, 35, 37, 113, 31, 59, 43, 60, 46, 64, 84, 89, 67, 49, 71, 104, 53, 105, 54, 72, 58, 70, 114, 116,
   73, 61, 65, 118, 66, 90, 76, 95, 79, 109, 96, 98, 112, 82, 91, 117, 86, 88, 119, 94, 110, 100, 111, 103, 115, 106,
   17, 19, 2, 54, 6, 56, 8, 22, 25, 80, 29, 82, 31, 12, 14, 100, 18, 101, 20, 34, 37, 104, 40, 106, 41, 24,
   26, 110, 30, 112, 32, 36, 38, 57, 58, 42, 66, 48, 68, 50, 85, 88, 102, 69, 103, 51, 70, 52, 72, 60, 74, 62,
   114, 115, 117, 63, 64, 92, 94, 77, 111, 81, 113, 83, 97, 98, 118, 93, 119, 95, 87, 89, 108, 109, 99, 105, 107, 116,
   9, 4, 48, 11, 77, 15, 52, 47, 43, 21, 75, 16, 46, 81, 60, 23, 87, 27, 64, 80, 54, 33, 85, 28, 58, 93,
   72, 35, 97, 39, 70, 92, 66, 55, 49, 83, 76, 89, 78, 99, 59, 53, 67, 101, 61, 107, 82, 95, 88, 98, 102, 108,
   71, 65, 73, 113, 94, 84, 79, 105, 86, 116, 90, 109, 104, 100, 96, 114, 91, 103, 118, 111, 112, 106, 119, 115, 117, 110,
   10, 46, 6, 76, 12, 45, 42, 17, 54, 75, 22, 79, 58, 18, 48, 86, 24, 78, 52, 29, 66, 84, 34, 91, 70, 30,
   60, 96, 36, 90, 64, 40, 72, 56, 82, 50, 88, 77, 57, 51, 80, 100, 101, 68, 106, 62, 94, 83, 98, 89, 69, 63,
   104, 110, 112, 74, 95, 85, 103, 81, 115, 87, 102, 99, 92, 111, 114, 97, 117, 109, 93, 105, 113, 119, 107, 116, 108, 118,
   3, 11, 50, 16, 51, 9, 77, 44, 49, 15, 45, 23, 76, 62, 83, 28, 63, 21, 89, 56, 82, 27, 57, 35, 88, 74,
   95, 39, 69, 33, 98, 68, 94, 47, 53, 81, 79, 99, 75, 87, 55, 61, 59, 80, 65, 93, 100, 105, 103, 109, 85, 97,
   67, 73, 71, 92, 111, 78, 86, 107, 91, 108, 84, 116, 101, 106, 90, 102, 96, 115, 113, 119, 104, 110, 118, 117, 114, 112,
   45, 13, 8, 46, 42, 75, 14, 56, 19, 78, 57, 76, 25, 50, 20, 79, 51, 84, 26, 68, 31, 90, 69, 86, 37, 62,
   32, 91, 63, 96, 38, 74, 41, 80, 54, 48, 58, 52, 85, 77, 101, 82, 104, 92, 100, 81, 66, 60, 70, 64, 97, 87,
   112, 106, 110, 93, 72, 102, 88, 83, 103, 99, 114, 89, 113, 94, 117, 108, 115, 98, 107, 95, 118, 111, 105, 109, 116, 119,
   5, 49, 12, 53, 18, 44, 50, 10, 76, 47, 17, 61, 82, 24, 77, 65, 30, 55, 83, 22, 88, 59, 29, 73, 94, 36,
   89, 71, 40, 67, 95, 34, 98, 45, 79, 51, 100, 81, 56, 62, 75, 86, 78, 57, 91, 63, 103, 99, 111, 105, 68, 74,
   84, 96, 90, 69, 109, 80, 106, 87, 110, 93, 101, 107, 85, 115, 104, 92, 112, 119, 97, 116, 102, 117, 108, 118, 113, 114,
   47, 7, 14, 43, 48, 55, 20, 75, 13, 59, 80, 49, 19, 77, 26, 53, 81, 67, 32, 85, 25, 71, 92, 61, 31, 87,
   38, 65, 93, 73, 41, 97, 37, 78, 46, 52, 54, 60, 101, 83, 84, 76, 90, 102, 79, 99, 58, 64, 66, 72, 113, 107,
   96, 86, 91, 108, 70, 104, 82, 89, 100, 105, 112, 95, 114, 88, 110, 118, 106, 94, 116, 98, 117, 103, 109, 111, 119, 115,
   44, 43, 42, 49, 50, 47, 48, 45, 46, 55, 56, 53, 54, 51, 52, 61, 62, 59, 60, 57, 58, 67, 68, 65, 66, 63,
   64, 73, 74, 71, 72, 69, 70, 75, 76, 77, 82, 83, 80, 81, 78, 79, 84, 85, 86, 87, 88, 89, 94, 95, 92, 93,
   90, 91, 96, 97, 98, 101, 100, 99, 106, 107, 104, 105, 102, 103, 112, 113, 110, 111, 108, 109, 114, 115, 116, 119, 118, 117
}; // 1.52 kb
static const cart_index_t iCartYY_ab14_a12[546] = {
   0, 11, 12, 3, 16, 5, 18, 49, 50, 9, 10, 23, 24, 76, 77, 15, 28, 17, 30, 82, 83, 21, 22, 35, 36, 88,
   89, 27, 39, 29, 40, 94, 95, 33, 34, 98, 51, 53, 44, 45, 79, 47, 81, 61, 62, 63, 99, 65, 100, 55, 56, 57,
   103, 59, 105, 73, 74, 69, 109, 71, 111, 67, 68, 75, 86, 87, 78, 91, 80, 93, 106, 107, 84, 85, 96, 97, 115, 116,
   90, 92, 119, 108, 110, 101, 102, 117, 104, 118, 112, 113, 114, 9, 1, 14, 15, 4, 47, 48, 7, 20, 21, 75, 11, 77,
   13, 26, 27, 16, 80, 81, 19, 32, 33, 85, 23, 87, 25, 38, 39, 28, 92, 93, 31, 41, 35, 97, 37, 52, 43, 55,
   78, 46, 59, 60, 49, 83, 99, 64, 53, 54, 67, 101, 102, 58, 71, 72, 61, 107, 108, 70, 65, 66, 73, 113, 84, 76,
   89, 90, 79, 104, 105, 82, 95, 96, 114, 86, 116, 88, 98, 91, 118, 94, 109, 100, 112, 117, 103, 110, 111, 106, 119, 115,
   10, 13, 2, 45, 46, 17, 6, 19, 8, 75, 22, 76, 12, 25, 14, 78, 79, 29, 18, 31, 20, 84, 34, 86, 24, 37,
   26, 90, 91, 40, 30, 41, 32, 96, 36, 38, 42, 54, 56, 57, 58, 80, 48, 82, 50, 51, 52, 100, 66, 101, 68, 69,
   70, 104, 60, 106, 62, 63, 64, 110, 72, 112, 74, 85, 88, 77, 102, 103, 92, 81, 94, 83, 114, 97, 115, 87, 98, 89,
   117, 93, 95, 99, 111, 113, 108, 109, 118, 105, 119, 107, 116, 3, 4, 42, 9, 11, 44, 50, 43, 48, 15, 45, 16, 51,
   46, 52, 21, 23, 56, 62, 54, 60, 27, 57, 28, 63, 58, 64, 33, 35, 68, 74, 66, 72, 39, 69, 70, 77, 49, 47,
   75, 76, 55, 83, 53, 81, 87, 89, 61, 82, 59, 80, 85, 88, 67, 95, 65, 93, 97, 98, 73, 94, 71, 92, 78, 79,
   99, 84, 86, 101, 107, 100, 105, 90, 102, 91, 108, 103, 109, 96, 113, 111, 116, 106, 104, 114, 115, 112, 119, 110, 118, 117,
   5, 43, 6, 44, 49, 10, 12, 46, 42, 47, 17, 53, 18, 54, 48, 55, 61, 22, 24, 58, 52, 59, 29, 65, 30, 66,
   60, 67, 73, 34, 36, 70, 64, 71, 40, 72, 50, 76, 45, 56, 82, 75, 77, 79, 51, 62, 83, 86, 88, 78, 57, 68,
   94, 84, 89, 91, 63, 74, 95, 96, 98, 90, 69, 80, 100, 81, 101, 106, 85, 87, 103, 99, 104, 92, 110, 93, 111, 105,
   112, 97, 109, 107, 115, 102, 113, 119, 114, 116, 117, 108, 118, 44, 7, 8, 47, 43, 45, 42, 13, 14, 55, 56, 49, 50,
   19, 20, 59, 53, 57, 51, 25, 26, 67, 68, 61, 62, 31, 32, 71, 65, 69, 63, 37, 38, 73, 74, 41, 48, 46, 75,
   80, 54, 78, 52, 76, 77, 81, 60, 79, 58, 84, 85, 92, 66, 90, 64, 86, 87, 93, 72, 91, 70, 96, 97, 101, 82,
   83, 104, 100, 102, 99, 88, 89, 112, 113, 106, 107, 94, 95, 110, 108, 98, 105, 103, 114, 118, 111, 117, 109, 115, 116, 119
}; // 1.07 kb
static const cart_index_t iCartYY_ab14_a13[315] = {
   0, 4, 6, 11, 12, 3, 42, 5, 43, 9, 10, 16, 46, 18, 48, 23, 24, 15, 52, 17, 54, 21, 22, 28, 58, 30,
   60, 35, 36, 27, 64, 29, 66, 33, 34, 39, 70, 40, 72, 44, 49, 50, 76, 77, 45, 51, 47, 53, 55, 56, 61, 62,
   82, 83, 88, 89, 57, 63, 59, 65, 67, 68, 73, 74, 94, 95, 98, 69, 71, 75, 79, 81, 86, 87, 78, 99, 80, 100,
   84, 85, 91, 103, 93, 105, 96, 97, 90, 109, 92, 111, 101, 106, 107, 115, 116, 102, 108, 104, 110, 112, 113, 119, 114, 117,
   118, 3, 1, 8, 4, 42, 9, 14, 44, 7, 15, 45, 11, 13, 50, 20, 16, 51, 21, 26, 56, 19, 27, 57, 23, 25,
   62, 32, 28, 63, 33, 38, 68, 31, 39, 69, 35, 37, 74, 41, 47, 43, 48, 46, 52, 75, 77, 55, 49, 59, 80, 53,
   81, 54, 60, 58, 64, 85, 87, 67, 61, 71, 92, 65, 93, 66, 72, 70, 97, 73, 78, 76, 83, 79, 99, 84, 89, 101,
   82, 90, 102, 86, 88, 107, 95, 91, 108, 96, 98, 113, 94, 104, 100, 105, 103, 109, 114, 116, 112, 106, 110, 118, 111, 117,
   115, 119, 5, 7, 2, 43, 6, 44, 8, 10, 13, 47, 17, 49, 19, 12, 14, 53, 18, 55, 20, 22, 25, 59, 29, 61,
   31, 24, 26, 65, 30, 67, 32, 34, 37, 71, 40, 73, 41, 36, 38, 45, 46, 42, 54, 48, 56, 50, 75, 76, 78, 57,
   79, 51, 58, 52, 66, 60, 68, 62, 84, 86, 90, 69, 91, 63, 70, 64, 72, 74, 96, 80, 82, 77, 100, 81, 101, 83,
   85, 88, 104, 92, 106, 94, 87, 89, 110, 93, 112, 95, 97, 98, 102, 103, 99, 111, 105, 113, 107, 114, 115, 117, 108, 109,
   118, 119, 116
}; // 0.62 kb
static const cart_index_t iCartYY_ab14_a14[120] = {
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
   52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
   78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
   104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119
}; // 0.23 kb

// What this does: [R] x M -> [r] x S(la) x M
// where R = lab and r == la. In order to do that, the cartesian component
// indices for nCartX(lab-la) set of nCartY(la) monomials need to be input manually (via ii).
// The actual parameters are thus: N == nSets (e.g., nCartX(lab-la)), ii: nCartY(la) x N integer array.
// M: number of sets to transform (M could in principle be done as an outer loop over the function)
void ShTrN_Indirect(double * pOut, size_t so, double const * pIn, size_t si, unsigned la, cart_index_t const *ii, size_t N, size_t M)
{
   switch(la) {
      case 0: {
         for (size_t n = 0; n != N; ++ n) {
            size_t j0 = ii[0+1*n];
            for (size_t m = 0; m != M; ++ m) {
               pOut[m*so+N*0+n] = pIn[m*si+j0];
            }
         }
         return;
      }
      case 1: {
         for (size_t n = 0; n != N; ++ n) {
            size_t j0 = ii[0+3*n], j1 = ii[1+3*n], j2 = ii[2+3*n];
            for (size_t m = 0; m != M; ++ m) {
               pOut[m*so+N*0+n] = pIn[m*si+j0];
               pOut[m*so+N*1+n] = pIn[m*si+j1];
               pOut[m*so+N*2+n] = pIn[m*si+j2];
            }
         }
         return;
      }
      case 2: {
         for (size_t n = 0; n != N; ++ n) {
            size_t j0 = ii[0+6*n], j1 = ii[1+6*n], j2 = ii[2+6*n], j3 = ii[3+6*n], j4 = ii[4+6*n], j5 = ii[5+6*n];
            for (size_t m = 0; m != M; ++ m) {
               double z0 = pIn[m*si+j0], z1 = pIn[m*si+j1];
               pOut[m*so+N*0+n] = pIn[m*si+j2] - sd0*z0 - sd0*z1;
               pOut[m*so+N*1+n] = pIn[m*si+j3]*sd1;
               pOut[m*so+N*2+n] = pIn[m*si+j4]*sd1;
               pOut[m*so+N*3+n] = sd2*z0 - sd2*z1;
               pOut[m*so+N*4+n] = pIn[m*si+j5]*sd1;
            }
         }
         return;
      }
      case 3: {
         for (size_t n = 0; n != N; ++ n) {
            size_t j0 = ii[0+10*n], j1 = ii[1+10*n], j2 = ii[2+10*n], j3 = ii[3+10*n], j4 = ii[4+10*n], j5 = ii[5+10*n], j6 = ii[6+10*n], j7 = ii[7+10*n], j8 = ii[8+10*n], j9 = ii[9+10*n];
            for (size_t m = 0; m != M; ++ m) {
               double z0 = pIn[m*si+j0], z1 = pIn[m*si+j1], z3 = pIn[m*si+j3], z5 = pIn[m*si+j5], z7 = pIn[m*si+j7], z8 = pIn[m*si+j8];
               pOut[m*so+N*0+n] = pIn[m*si+j4]*sd4 - sd3*z0 - sd3*z3;
               pOut[m*so+N*1+n] = pIn[m*si+j6]*sd4 - sd3*z1 - sd3*z5;
               pOut[m*so+N*2+n] = pIn[m*si+j2] - sd5*z7 - sd5*z8;
               pOut[m*so+N*3+n] = sd6*z0 - sd7*z3;
               pOut[m*so+N*4+n] = pIn[m*si+j9]*sd8;
               pOut[m*so+N*5+n] = -sd6*z1 + sd7*z5;
               pOut[m*so+N*6+n] = sd9*z7 - sd9*z8;
            }
         }
         return;
      }
      case 4: {
         for (size_t n = 0; n != N; ++ n) {
            size_t j0 = ii[0+15*n], j1 = ii[1+15*n], j2 = ii[2+15*n], j3 = ii[3+15*n], j4 = ii[4+15*n], j5 = ii[5+15*n], j6 = ii[6+15*n], j7 = ii[7+15*n], j8 = ii[8+15*n], j9 = ii[9+15*n], ja = ii[10+15*n], jb = ii[11+15*n], jc = ii[12+15*n], jd = ii[13+15*n], je = ii[14+15*n];
            for (size_t m = 0; m != M; ++ m) {
               double z0 = pIn[m*si+j0], z1 = pIn[m*si+j1], z3 = pIn[m*si+j3], z4 = pIn[m*si+j4], z5 = pIn[m*si+j5], z7 = pIn[m*si+j7], z9 = pIn[m*si+j9], za = pIn[m*si+ja], zb = pIn[m*si+jb], zd = pIn[m*si+jd], ze = pIn[m*si+je];
               pOut[m*so+N*0+n] = pIn[m*si+j2] + sda*z0 + sda*z1 + sdb*z9 - sdc*za - sdc*zb;
               pOut[m*so+N*1+n] = pIn[m*si+jc]*sde - sdd*z3 - sdd*z4;
               pOut[m*so+N*2+n] = pIn[m*si+j6]*sdf - sd7*z5 - sd7*zd;
               pOut[m*so+N*3+n] = sd10*z0 + sd10*z1 - sd11*z9;
               pOut[m*so+N*4+n] = pIn[m*si+j8]*sdf - sd7*z7 - sd7*ze;
               pOut[m*so+N*5+n] = -sd12*z0 + sd12*z1 + sd13*za - sd13*zb;
               pOut[m*so+N*6+n] = sd14*z3 - sd14*z4;
               pOut[m*so+N*7+n] = sd15*z5 - sd16*zd;
               pOut[m*so+N*8+n] = -sd15*z7 + sd16*ze;
            }
         }
         return;
      }
      case 5: {
         for (size_t n = 0; n != N; ++ n) {
            size_t j0 = ii[0+21*n], j1 = ii[1+21*n], j2 = ii[2+21*n], j3 = ii[3+21*n], j4 = ii[4+21*n], j5 = ii[5+21*n], j6 = ii[6+21*n], j7 = ii[7+21*n], j8 = ii[8+21*n], j9 = ii[9+21*n], ja = ii[10+21*n], jb = ii[11+21*n], jc = ii[12+21*n], jd = ii[13+21*n], je = ii[14+21*n], jf = ii[15+21*n], j10 = ii[16+21*n], j11 = ii[17+21*n], j12 = ii[18+21*n], j13 = ii[19+21*n], j14 = ii[20+21*n];
            for (size_t m = 0; m != M; ++ m) {
               double z0 = pIn[m*si+j0], z1 = pIn[m*si+j1], z3 = pIn[m*si+j3], z5 = pIn[m*si+j5], z7 = pIn[m*si+j7], z8 = pIn[m*si+j8], z9 = pIn[m*si+j9], za = pIn[m*si+ja], zb = pIn[m*si+jb], zc = pIn[m*si+jc], zd = pIn[m*si+jd], ze = pIn[m*si+je], zf = pIn[m*si+jf], z10 = pIn[m*si+j10], z12 = pIn[m*si+j12], z13 = pIn[m*si+j13], z14 = pIn[m*si+j14];
               pOut[m*so+N*0+n] = pIn[m*si+j4]*sd8 + sd17*z0 + sd17*z3 + sd18*z9 - sd19*z12 - sd19*za;
               pOut[m*so+N*1+n] = pIn[m*si+j6]*sd8 + sd17*z1 + sd17*z5 + sd18*zb - sd19*z13 - sd19*zc;
               pOut[m*so+N*2+n] = -sd1a*z7 + sd1a*z8 + sd1b*zd - sd1b*ze;
               pOut[m*so+N*3+n] = -sd1c*z0 + sd1d*z9 + sd1e*za + sd1f*z3 - sd20*z12;
               pOut[m*so+N*4+n] = -sd21*z10 + sd21*zf;
               pOut[m*so+N*5+n] = sd1c*z1 - sd1d*zb - sd1e*zc - sd1f*z5 + sd20*z13;
               pOut[m*so+N*6+n] = sd22*z7 + sd22*z8 - sd23*z14;
               pOut[m*so+N*7+n] = sd24*z5 - sd25*zb + sd26*z1;
               pOut[m*so+N*8+n] = pIn[m*si+j2] + sd27*z7 + sd27*z8 + sd28*z14 - sd29*zd - sd29*ze;
               pOut[m*so+N*9+n] = sd24*z3 - sd25*z9 + sd26*z0;
               pOut[m*so+N*10+n] = pIn[m*si+j11]*sd2a - sd1b*z10 - sd1b*zf;
            }
         }
         return;
      }
      case 6: {
         for (size_t n = 0; n != N; ++ n) {
            size_t j0 = ii[0+28*n], j1 = ii[1+28*n], j2 = ii[2+28*n], j3 = ii[3+28*n], j4 = ii[4+28*n], j5 = ii[5+28*n], j6 = ii[6+28*n], j7 = ii[7+28*n], j8 = ii[8+28*n], j9 = ii[9+28*n], ja = ii[10+28*n], jb = ii[11+28*n], jc = ii[12+28*n], jd = ii[13+28*n], je = ii[14+28*n], jf = ii[15+28*n], j10 = ii[16+28*n], j11 = ii[17+28*n], j12 = ii[18+28*n], j13 = ii[19+28*n], j14 = ii[20+28*n], j15 = ii[21+28*n], j16 = ii[22+28*n], j17 = ii[23+28*n], j18 = ii[24+28*n], j19 = ii[25+28*n], j1a = ii[26+28*n], j1b = ii[27+28*n];
            for (size_t m = 0; m != M; ++ m) {
               double z0 = pIn[m*si+j0], z1 = pIn[m*si+j1], z3 = pIn[m*si+j3], z4 = pIn[m*si+j4], z5 = pIn[m*si+j5], z7 = pIn[m*si+j7], z9 = pIn[m*si+j9], za = pIn[m*si+ja], zb = pIn[m*si+jb], zc = pIn[m*si+jc], zd = pIn[m*si+jd], ze = pIn[m*si+je], zf = pIn[m*si+jf], z10 = pIn[m*si+j10], z11 = pIn[m*si+j11], z13 = pIn[m*si+j13], z14 = pIn[m*si+j14], z15 = pIn[m*si+j15], z16 = pIn[m*si+j16], z17 = pIn[m*si+j17], z18 = pIn[m*si+j18], z19 = pIn[m*si+j19], z1a = pIn[m*si+j1a], z1b = pIn[m*si+j1b];
               pOut[m*so+N*0+n] = sd2b*z0 - sd2b*z1 - sd2c*z9 + sd2c*zb;
               pOut[m*so+N*1+n] = pIn[m*si+j12]*sd2f + sd2d*z3 + sd2d*z4 + sd2e*zf - sd2f*z15 - sd2f*z16;
               pOut[m*so+N*2+n] = sd30*z5 - sd31*z17 + sd32*z13;
               pOut[m*so+N*3+n] = -sd33*z0 - sd33*z1 + sd34*z9 + sd34*zb + sd35*za + sd35*zd - sd36*z1b;
               pOut[m*so+N*4+n] = sd30*z7 - sd31*z19 + sd32*z14;
               pOut[m*so+N*5+n] = sd37*z0 - sd37*z1 + sd37*z9 - sd37*zb - sd38*za + sd38*zc + sd38*zd - sd38*ze;
               pOut[m*so+N*6+n] = sd39*z3 + sd39*z4 - sd3a*zf;
               pOut[m*so+N*7+n] = sd38*z10 - sd3b*z5 + sd3c*z17 + sd3d*z13 - sd3e*z18;
               pOut[m*so+N*8+n] = -sd3f*z3 + sd3f*z4 + sd40*z15 - sd40*z16;
               pOut[m*so+N*9+n] = pIn[m*si+j2] - sd41*z0 - sd41*z1 - sd42*z9 - sd42*zb + sd43*za + sd43*zd + sd44*z1b - sd45*zc - sd45*ze;
               pOut[m*so+N*10+n] = -sd38*z11 + sd3b*z7 - sd3c*z19 - sd3d*z14 + sd3e*z1a;
               pOut[m*so+N*11+n] = pIn[m*si+j8]*sd49 + sd46*z14 + sd46*z7 + sd47*z19 - sd48*z11 - sd48*z1a;
               pOut[m*so+N*12+n] = pIn[m*si+j6]*sd49 + sd46*z13 + sd46*z5 + sd47*z17 - sd48*z10 - sd48*z18;
            }
         }
         return;
      }
   }
   //assert(0);
}


// Factorize a matrix (nCartX(lab)-nCartX(a-1)) x M into nCartX(lab-la) x (2*la+1) x M. Now la < lb is also allowed.
void ShTrA_XY(double * pOut, double const * pIn, unsigned la, unsigned lab, size_t M)
{
   //assert(lab >= la);
   #define C_AB_A(lab,la) ((lab*(lab+1))/2 + la)
   switch(C_AB_A(lab,la)) {
      case C_AB_A( 0, 0): return ShTrN_Indirect(pOut,  1, pIn,   1, 0, &iCartXY_ab0_a0[0],  1, M); // case: 0
      case C_AB_A( 1, 0): return ShTrN_Indirect(pOut,  4, pIn,   4, 0, &iCartXY_ab1_a0[0],  4, M); // case: 1
      case C_AB_A( 1, 1): return ShTrN_Indirect(pOut,  3, pIn,   3, 1, &iCartXY_ab1_a1[0],  1, M); // case: 2
      case C_AB_A( 2, 0): return ShTrN_Indirect(pOut, 10, pIn,  10, 0, &iCartXY_ab2_a0[0], 10, M); // case: 3
      case C_AB_A( 2, 1): return ShTrN_Indirect(pOut, 12, pIn,   9, 1, &iCartXY_ab2_a1[0],  4, M); // case: 4
      case C_AB_A( 2, 2): return ShTrN_Indirect(pOut,  5, pIn,   6, 2, &iCartXY_ab2_a2[0],  1, M); // case: 5
      case C_AB_A( 3, 0): return ShTrN_Indirect(pOut, 20, pIn,  20, 0, &iCartXY_ab3_a0[0], 20, M); // case: 6
      case C_AB_A( 3, 1): return ShTrN_Indirect(pOut, 30, pIn,  19, 1, &iCartXY_ab3_a1[0], 10, M); // case: 7
      case C_AB_A( 3, 2): return ShTrN_Indirect(pOut, 20, pIn,  16, 2, &iCartXY_ab3_a2[0],  4, M); // case: 8
      case C_AB_A( 3, 3): return ShTrN_Indirect(pOut,  7, pIn,  10, 3, &iCartXY_ab3_a3[0],  1, M); // case: 9
      case C_AB_A( 4, 0): return ShTrN_Indirect(pOut, 35, pIn,  35, 0, &iCartXY_ab4_a0[0], 35, M); // case: 10
      case C_AB_A( 4, 1): return ShTrN_Indirect(pOut, 60, pIn,  34, 1, &iCartXY_ab4_a1[0], 20, M); // case: 11
      case C_AB_A( 4, 2): return ShTrN_Indirect(pOut, 50, pIn,  31, 2, &iCartXY_ab4_a2[0], 10, M); // case: 12
      case C_AB_A( 4, 3): return ShTrN_Indirect(pOut, 28, pIn,  25, 3, &iCartXY_ab4_a3[0],  4, M); // case: 13
      case C_AB_A( 4, 4): return ShTrN_Indirect(pOut,  9, pIn,  15, 4, &iCartXY_ab4_a4[0],  1, M); // case: 14
      case C_AB_A( 5, 0): return ShTrN_Indirect(pOut, 56, pIn,  56, 0, &iCartXY_ab5_a0[0], 56, M); // case: 15
      case C_AB_A( 5, 1): return ShTrN_Indirect(pOut,105, pIn,  55, 1, &iCartXY_ab5_a1[0], 35, M); // case: 16
      case C_AB_A( 5, 2): return ShTrN_Indirect(pOut,100, pIn,  52, 2, &iCartXY_ab5_a2[0], 20, M); // case: 17
      case C_AB_A( 5, 3): return ShTrN_Indirect(pOut, 70, pIn,  46, 3, &iCartXY_ab5_a3[0], 10, M); // case: 18
      case C_AB_A( 5, 4): return ShTrN_Indirect(pOut, 36, pIn,  36, 4, &iCartXY_ab5_a4[0],  4, M); // case: 19
      case C_AB_A( 5, 5): return ShTrN_Indirect(pOut, 11, pIn,  21, 5, &iCartXY_ab5_a5[0],  1, M); // case: 20
      case C_AB_A( 6, 0): return ShTrN_Indirect(pOut, 84, pIn,  84, 0, &iCartXY_ab6_a0[0], 84, M); // case: 21
      case C_AB_A( 6, 1): return ShTrN_Indirect(pOut,168, pIn,  83, 1, &iCartXY_ab6_a1[0], 56, M); // case: 22
      case C_AB_A( 6, 2): return ShTrN_Indirect(pOut,175, pIn,  80, 2, &iCartXY_ab6_a2[0], 35, M); // case: 23
      case C_AB_A( 6, 3): return ShTrN_Indirect(pOut,140, pIn,  74, 3, &iCartXY_ab6_a3[0], 20, M); // case: 24
      case C_AB_A( 6, 4): return ShTrN_Indirect(pOut, 90, pIn,  64, 4, &iCartXY_ab6_a4[0], 10, M); // case: 25
      case C_AB_A( 6, 5): return ShTrN_Indirect(pOut, 44, pIn,  49, 5, &iCartXY_ab6_a5[0],  4, M); // case: 26
      case C_AB_A( 6, 6): return ShTrN_Indirect(pOut, 13, pIn,  28, 6, &iCartXY_ab6_a6[0],  1, M); // case: 27
      case C_AB_A( 7, 0): return ShTrN_Indirect(pOut,120, pIn, 120, 0, &iCartXY_ab7_a0[0],120, M); // case: 28
      case C_AB_A( 7, 1): return ShTrN_Indirect(pOut,252, pIn, 119, 1, &iCartXY_ab7_a1[0], 84, M); // case: 29
      case C_AB_A( 7, 2): return ShTrN_Indirect(pOut,280, pIn, 116, 2, &iCartXY_ab7_a2[0], 56, M); // case: 30
      case C_AB_A( 7, 3): return ShTrN_Indirect(pOut,245, pIn, 110, 3, &iCartXY_ab7_a3[0], 35, M); // case: 31
      case C_AB_A( 7, 4): return ShTrN_Indirect(pOut,180, pIn, 100, 4, &iCartXY_ab7_a4[0], 20, M); // case: 32
      case C_AB_A( 7, 5): return ShTrN_Indirect(pOut,110, pIn,  85, 5, &iCartXY_ab7_a5[0], 10, M); // case: 33
      case C_AB_A( 7, 6): return ShTrN_Indirect(pOut, 52, pIn,  64, 6, &iCartXY_ab7_a6[0],  4, M); // case: 34
      case C_AB_A( 8, 0): return ShTrN_Indirect(pOut,165, pIn, 165, 0, &iCartXY_ab8_a0[0],165, M); // case: 36
      case C_AB_A( 8, 1): return ShTrN_Indirect(pOut,360, pIn, 164, 1, &iCartXY_ab8_a1[0],120, M); // case: 37
      case C_AB_A( 8, 2): return ShTrN_Indirect(pOut,420, pIn, 161, 2, &iCartXY_ab8_a2[0], 84, M); // case: 38
      case C_AB_A( 8, 3): return ShTrN_Indirect(pOut,392, pIn, 155, 3, &iCartXY_ab8_a3[0], 56, M); // case: 39
      case C_AB_A( 8, 4): return ShTrN_Indirect(pOut,315, pIn, 145, 4, &iCartXY_ab8_a4[0], 35, M); // case: 40
      case C_AB_A( 8, 5): return ShTrN_Indirect(pOut,220, pIn, 130, 5, &iCartXY_ab8_a5[0], 20, M); // case: 41
      case C_AB_A( 8, 6): return ShTrN_Indirect(pOut,130, pIn, 109, 6, &iCartXY_ab8_a6[0], 10, M); // case: 42
      case C_AB_A( 9, 0): return ShTrN_Indirect(pOut,220, pIn, 220, 0, &iCartXY_ab9_a0[0],220, M); // case: 45
      case C_AB_A( 9, 1): return ShTrN_Indirect(pOut,495, pIn, 219, 1, &iCartXY_ab9_a1[0],165, M); // case: 46
      case C_AB_A( 9, 2): return ShTrN_Indirect(pOut,600, pIn, 216, 2, &iCartXY_ab9_a2[0],120, M); // case: 47
      case C_AB_A( 9, 3): return ShTrN_Indirect(pOut,588, pIn, 210, 3, &iCartXY_ab9_a3[0], 84, M); // case: 48
      case C_AB_A( 9, 4): return ShTrN_Indirect(pOut,504, pIn, 200, 4, &iCartXY_ab9_a4[0], 56, M); // case: 49
      case C_AB_A( 9, 5): return ShTrN_Indirect(pOut,385, pIn, 185, 5, &iCartXY_ab9_a5[0], 35, M); // case: 50
      case C_AB_A( 9, 6): return ShTrN_Indirect(pOut,260, pIn, 164, 6, &iCartXY_ab9_a6[0], 20, M); // case: 51
      case C_AB_A(10, 0): return ShTrN_Indirect(pOut,286, pIn, 286, 0, &iCartXY_ab10_a0[0],286, M); // case: 55
      case C_AB_A(10, 1): return ShTrN_Indirect(pOut,660, pIn, 285, 1, &iCartXY_ab10_a1[0],220, M); // case: 56
      case C_AB_A(10, 2): return ShTrN_Indirect(pOut,825, pIn, 282, 2, &iCartXY_ab10_a2[0],165, M); // case: 57
      case C_AB_A(10, 3): return ShTrN_Indirect(pOut,840, pIn, 276, 3, &iCartXY_ab10_a3[0],120, M); // case: 58
      case C_AB_A(10, 4): return ShTrN_Indirect(pOut,756, pIn, 266, 4, &iCartXY_ab10_a4[0], 84, M); // case: 59
      case C_AB_A(10, 5): return ShTrN_Indirect(pOut,616, pIn, 251, 5, &iCartXY_ab10_a5[0], 56, M); // case: 60
      case C_AB_A(10, 6): return ShTrN_Indirect(pOut,455, pIn, 230, 6, &iCartXY_ab10_a6[0], 35, M); // case: 61
      case C_AB_A(11, 0): return ShTrN_Indirect(pOut,364, pIn, 364, 0, &iCartXY_ab11_a0[0],364, M); // case: 66
      case C_AB_A(11, 1): return ShTrN_Indirect(pOut,858, pIn, 363, 1, &iCartXY_ab11_a1[0],286, M); // case: 67
      case C_AB_A(11, 2): return ShTrN_Indirect(pOut,1100, pIn, 360, 2, &iCartXY_ab11_a2[0],220, M); // case: 68
      case C_AB_A(11, 3): return ShTrN_Indirect(pOut,1155, pIn, 354, 3, &iCartXY_ab11_a3[0],165, M); // case: 69
      case C_AB_A(11, 4): return ShTrN_Indirect(pOut,1080, pIn, 344, 4, &iCartXY_ab11_a4[0],120, M); // case: 70
      case C_AB_A(11, 5): return ShTrN_Indirect(pOut,924, pIn, 329, 5, &iCartXY_ab11_a5[0], 84, M); // case: 71
      case C_AB_A(11, 6): return ShTrN_Indirect(pOut,728, pIn, 308, 6, &iCartXY_ab11_a6[0], 56, M); // case: 72
      case C_AB_A(12, 0): return ShTrN_Indirect(pOut,455, pIn, 455, 0, &iCartXY_ab12_a0[0],455, M); // case: 78
      case C_AB_A(12, 1): return ShTrN_Indirect(pOut,1092, pIn, 454, 1, &iCartXY_ab12_a1[0],364, M); // case: 79
      case C_AB_A(12, 2): return ShTrN_Indirect(pOut,1430, pIn, 451, 2, &iCartXY_ab12_a2[0],286, M); // case: 80
      case C_AB_A(12, 3): return ShTrN_Indirect(pOut,1540, pIn, 445, 3, &iCartXY_ab12_a3[0],220, M); // case: 81
      case C_AB_A(12, 4): return ShTrN_Indirect(pOut,1485, pIn, 435, 4, &iCartXY_ab12_a4[0],165, M); // case: 82
      case C_AB_A(12, 5): return ShTrN_Indirect(pOut,1320, pIn, 420, 5, &iCartXY_ab12_a5[0],120, M); // case: 83
      case C_AB_A(12, 6): return ShTrN_Indirect(pOut,1092, pIn, 399, 6, &iCartXY_ab12_a6[0], 84, M); // case: 84
   }
   #undef C_AB_A
   //assert(0);
}


// Factorize a matrix nCartX(lab) x M into nCartX(lab-la) x (2*la+1) x M. Now la < lb is also allowed.
void ShTrA_XfY(double * pOut, double const * pIn, unsigned la, unsigned lab, size_t M)
{
   //assert(lab >= la);
   #define C_AB_A(lab,la) ((lab*(lab+1))/2 + la)
   switch(C_AB_A(lab,la)) {
      case C_AB_A( 0, 0): return ShTrN_Indirect(pOut,  1, pIn +  0,   1, 0, &iCartXY_ab0_a0[0],  1, M); // case: 0
      case C_AB_A( 1, 0): return ShTrN_Indirect(pOut,  4, pIn +  0,   4, 0, &iCartXY_ab1_a0[0],  4, M); // case: 1
      case C_AB_A( 1, 1): return ShTrN_Indirect(pOut,  3, pIn +  1,   4, 1, &iCartXY_ab1_a1[0],  1, M); // case: 2
      case C_AB_A( 2, 0): return ShTrN_Indirect(pOut, 10, pIn +  0,  10, 0, &iCartXY_ab2_a0[0], 10, M); // case: 3
      case C_AB_A( 2, 1): return ShTrN_Indirect(pOut, 12, pIn +  1,  10, 1, &iCartXY_ab2_a1[0],  4, M); // case: 4
      case C_AB_A( 2, 2): return ShTrN_Indirect(pOut,  5, pIn +  4,  10, 2, &iCartXY_ab2_a2[0],  1, M); // case: 5
      case C_AB_A( 3, 0): return ShTrN_Indirect(pOut, 20, pIn +  0,  20, 0, &iCartXY_ab3_a0[0], 20, M); // case: 6
      case C_AB_A( 3, 1): return ShTrN_Indirect(pOut, 30, pIn +  1,  20, 1, &iCartXY_ab3_a1[0], 10, M); // case: 7
      case C_AB_A( 3, 2): return ShTrN_Indirect(pOut, 20, pIn +  4,  20, 2, &iCartXY_ab3_a2[0],  4, M); // case: 8
      case C_AB_A( 3, 3): return ShTrN_Indirect(pOut,  7, pIn + 10,  20, 3, &iCartXY_ab3_a3[0],  1, M); // case: 9
      case C_AB_A( 4, 0): return ShTrN_Indirect(pOut, 35, pIn +  0,  35, 0, &iCartXY_ab4_a0[0], 35, M); // case: 10
      case C_AB_A( 4, 1): return ShTrN_Indirect(pOut, 60, pIn +  1,  35, 1, &iCartXY_ab4_a1[0], 20, M); // case: 11
      case C_AB_A( 4, 2): return ShTrN_Indirect(pOut, 50, pIn +  4,  35, 2, &iCartXY_ab4_a2[0], 10, M); // case: 12
      case C_AB_A( 4, 3): return ShTrN_Indirect(pOut, 28, pIn + 10,  35, 3, &iCartXY_ab4_a3[0],  4, M); // case: 13
      case C_AB_A( 4, 4): return ShTrN_Indirect(pOut,  9, pIn + 20,  35, 4, &iCartXY_ab4_a4[0],  1, M); // case: 14
      case C_AB_A( 5, 0): return ShTrN_Indirect(pOut, 56, pIn +  0,  56, 0, &iCartXY_ab5_a0[0], 56, M); // case: 15
      case C_AB_A( 5, 1): return ShTrN_Indirect(pOut,105, pIn +  1,  56, 1, &iCartXY_ab5_a1[0], 35, M); // case: 16
      case C_AB_A( 5, 2): return ShTrN_Indirect(pOut,100, pIn +  4,  56, 2, &iCartXY_ab5_a2[0], 20, M); // case: 17
      case C_AB_A( 5, 3): return ShTrN_Indirect(pOut, 70, pIn + 10,  56, 3, &iCartXY_ab5_a3[0], 10, M); // case: 18
      case C_AB_A( 5, 4): return ShTrN_Indirect(pOut, 36, pIn + 20,  56, 4, &iCartXY_ab5_a4[0],  4, M); // case: 19
      case C_AB_A( 5, 5): return ShTrN_Indirect(pOut, 11, pIn + 35,  56, 5, &iCartXY_ab5_a5[0],  1, M); // case: 20
      case C_AB_A( 6, 0): return ShTrN_Indirect(pOut, 84, pIn +  0,  84, 0, &iCartXY_ab6_a0[0], 84, M); // case: 21
      case C_AB_A( 6, 1): return ShTrN_Indirect(pOut,168, pIn +  1,  84, 1, &iCartXY_ab6_a1[0], 56, M); // case: 22
      case C_AB_A( 6, 2): return ShTrN_Indirect(pOut,175, pIn +  4,  84, 2, &iCartXY_ab6_a2[0], 35, M); // case: 23
      case C_AB_A( 6, 3): return ShTrN_Indirect(pOut,140, pIn + 10,  84, 3, &iCartXY_ab6_a3[0], 20, M); // case: 24
      case C_AB_A( 6, 4): return ShTrN_Indirect(pOut, 90, pIn + 20,  84, 4, &iCartXY_ab6_a4[0], 10, M); // case: 25
      case C_AB_A( 6, 5): return ShTrN_Indirect(pOut, 44, pIn + 35,  84, 5, &iCartXY_ab6_a5[0],  4, M); // case: 26
      case C_AB_A( 6, 6): return ShTrN_Indirect(pOut, 13, pIn + 56,  84, 6, &iCartXY_ab6_a6[0],  1, M); // case: 27
      case C_AB_A( 7, 0): return ShTrN_Indirect(pOut,120, pIn +  0, 120, 0, &iCartXY_ab7_a0[0],120, M); // case: 28
      case C_AB_A( 7, 1): return ShTrN_Indirect(pOut,252, pIn +  1, 120, 1, &iCartXY_ab7_a1[0], 84, M); // case: 29
      case C_AB_A( 7, 2): return ShTrN_Indirect(pOut,280, pIn +  4, 120, 2, &iCartXY_ab7_a2[0], 56, M); // case: 30
      case C_AB_A( 7, 3): return ShTrN_Indirect(pOut,245, pIn + 10, 120, 3, &iCartXY_ab7_a3[0], 35, M); // case: 31
      case C_AB_A( 7, 4): return ShTrN_Indirect(pOut,180, pIn + 20, 120, 4, &iCartXY_ab7_a4[0], 20, M); // case: 32
      case C_AB_A( 7, 5): return ShTrN_Indirect(pOut,110, pIn + 35, 120, 5, &iCartXY_ab7_a5[0], 10, M); // case: 33
      case C_AB_A( 7, 6): return ShTrN_Indirect(pOut, 52, pIn + 56, 120, 6, &iCartXY_ab7_a6[0],  4, M); // case: 34
      case C_AB_A( 8, 0): return ShTrN_Indirect(pOut,165, pIn +  0, 165, 0, &iCartXY_ab8_a0[0],165, M); // case: 36
      case C_AB_A( 8, 1): return ShTrN_Indirect(pOut,360, pIn +  1, 165, 1, &iCartXY_ab8_a1[0],120, M); // case: 37
      case C_AB_A( 8, 2): return ShTrN_Indirect(pOut,420, pIn +  4, 165, 2, &iCartXY_ab8_a2[0], 84, M); // case: 38
      case C_AB_A( 8, 3): return ShTrN_Indirect(pOut,392, pIn + 10, 165, 3, &iCartXY_ab8_a3[0], 56, M); // case: 39
      case C_AB_A( 8, 4): return ShTrN_Indirect(pOut,315, pIn + 20, 165, 4, &iCartXY_ab8_a4[0], 35, M); // case: 40
      case C_AB_A( 8, 5): return ShTrN_Indirect(pOut,220, pIn + 35, 165, 5, &iCartXY_ab8_a5[0], 20, M); // case: 41
      case C_AB_A( 8, 6): return ShTrN_Indirect(pOut,130, pIn + 56, 165, 6, &iCartXY_ab8_a6[0], 10, M); // case: 42
      case C_AB_A( 9, 0): return ShTrN_Indirect(pOut,220, pIn +  0, 220, 0, &iCartXY_ab9_a0[0],220, M); // case: 45
      case C_AB_A( 9, 1): return ShTrN_Indirect(pOut,495, pIn +  1, 220, 1, &iCartXY_ab9_a1[0],165, M); // case: 46
      case C_AB_A( 9, 2): return ShTrN_Indirect(pOut,600, pIn +  4, 220, 2, &iCartXY_ab9_a2[0],120, M); // case: 47
      case C_AB_A( 9, 3): return ShTrN_Indirect(pOut,588, pIn + 10, 220, 3, &iCartXY_ab9_a3[0], 84, M); // case: 48
      case C_AB_A( 9, 4): return ShTrN_Indirect(pOut,504, pIn + 20, 220, 4, &iCartXY_ab9_a4[0], 56, M); // case: 49
      case C_AB_A( 9, 5): return ShTrN_Indirect(pOut,385, pIn + 35, 220, 5, &iCartXY_ab9_a5[0], 35, M); // case: 50
      case C_AB_A( 9, 6): return ShTrN_Indirect(pOut,260, pIn + 56, 220, 6, &iCartXY_ab9_a6[0], 20, M); // case: 51
      case C_AB_A(10, 0): return ShTrN_Indirect(pOut,286, pIn +  0, 286, 0, &iCartXY_ab10_a0[0],286, M); // case: 55
      case C_AB_A(10, 1): return ShTrN_Indirect(pOut,660, pIn +  1, 286, 1, &iCartXY_ab10_a1[0],220, M); // case: 56
      case C_AB_A(10, 2): return ShTrN_Indirect(pOut,825, pIn +  4, 286, 2, &iCartXY_ab10_a2[0],165, M); // case: 57
      case C_AB_A(10, 3): return ShTrN_Indirect(pOut,840, pIn + 10, 286, 3, &iCartXY_ab10_a3[0],120, M); // case: 58
      case C_AB_A(10, 4): return ShTrN_Indirect(pOut,756, pIn + 20, 286, 4, &iCartXY_ab10_a4[0], 84, M); // case: 59
      case C_AB_A(10, 5): return ShTrN_Indirect(pOut,616, pIn + 35, 286, 5, &iCartXY_ab10_a5[0], 56, M); // case: 60
      case C_AB_A(10, 6): return ShTrN_Indirect(pOut,455, pIn + 56, 286, 6, &iCartXY_ab10_a6[0], 35, M); // case: 61
      case C_AB_A(11, 0): return ShTrN_Indirect(pOut,364, pIn +  0, 364, 0, &iCartXY_ab11_a0[0],364, M); // case: 66
      case C_AB_A(11, 1): return ShTrN_Indirect(pOut,858, pIn +  1, 364, 1, &iCartXY_ab11_a1[0],286, M); // case: 67
      case C_AB_A(11, 2): return ShTrN_Indirect(pOut,1100, pIn +  4, 364, 2, &iCartXY_ab11_a2[0],220, M); // case: 68
      case C_AB_A(11, 3): return ShTrN_Indirect(pOut,1155, pIn + 10, 364, 3, &iCartXY_ab11_a3[0],165, M); // case: 69
      case C_AB_A(11, 4): return ShTrN_Indirect(pOut,1080, pIn + 20, 364, 4, &iCartXY_ab11_a4[0],120, M); // case: 70
      case C_AB_A(11, 5): return ShTrN_Indirect(pOut,924, pIn + 35, 364, 5, &iCartXY_ab11_a5[0], 84, M); // case: 71
      case C_AB_A(11, 6): return ShTrN_Indirect(pOut,728, pIn + 56, 364, 6, &iCartXY_ab11_a6[0], 56, M); // case: 72
      case C_AB_A(12, 0): return ShTrN_Indirect(pOut,455, pIn +  0, 455, 0, &iCartXY_ab12_a0[0],455, M); // case: 78
      case C_AB_A(12, 1): return ShTrN_Indirect(pOut,1092, pIn +  1, 455, 1, &iCartXY_ab12_a1[0],364, M); // case: 79
      case C_AB_A(12, 2): return ShTrN_Indirect(pOut,1430, pIn +  4, 455, 2, &iCartXY_ab12_a2[0],286, M); // case: 80
      case C_AB_A(12, 3): return ShTrN_Indirect(pOut,1540, pIn + 10, 455, 3, &iCartXY_ab12_a3[0],220, M); // case: 81
      case C_AB_A(12, 4): return ShTrN_Indirect(pOut,1485, pIn + 20, 455, 4, &iCartXY_ab12_a4[0],165, M); // case: 82
      case C_AB_A(12, 5): return ShTrN_Indirect(pOut,1320, pIn + 35, 455, 5, &iCartXY_ab12_a5[0],120, M); // case: 83
      case C_AB_A(12, 6): return ShTrN_Indirect(pOut,1092, pIn + 56, 455, 6, &iCartXY_ab12_a6[0], 84, M); // case: 84
      case C_AB_A(13, 0): return ShTrN_Indirect(pOut,560, pIn +  0, 560, 0, &iCartXY_ab13_a0[0],560, M); // case: 91
      case C_AB_A(13, 1): return ShTrN_Indirect(pOut,1365, pIn +  1, 560, 1, &iCartXY_ab13_a1[0],455, M); // case: 92
      case C_AB_A(13, 2): return ShTrN_Indirect(pOut,1820, pIn +  4, 560, 2, &iCartXY_ab13_a2[0],364, M); // case: 93
      case C_AB_A(13, 3): return ShTrN_Indirect(pOut,2002, pIn + 10, 560, 3, &iCartXY_ab13_a3[0],286, M); // case: 94
      case C_AB_A(13, 4): return ShTrN_Indirect(pOut,1980, pIn + 20, 560, 4, &iCartXY_ab13_a4[0],220, M); // case: 95
      case C_AB_A(13, 5): return ShTrN_Indirect(pOut,1815, pIn + 35, 560, 5, &iCartXY_ab13_a5[0],165, M); // case: 96
      case C_AB_A(13, 6): return ShTrN_Indirect(pOut,1560, pIn + 56, 560, 6, &iCartXY_ab13_a6[0],120, M); // case: 97
      case C_AB_A(14, 0): return ShTrN_Indirect(pOut,680, pIn +  0, 680, 0, &iCartXY_ab14_a0[0],680, M); // case: 105
      case C_AB_A(14, 1): return ShTrN_Indirect(pOut,1680, pIn +  1, 680, 1, &iCartXY_ab14_a1[0],560, M); // case: 106
      case C_AB_A(14, 2): return ShTrN_Indirect(pOut,2275, pIn +  4, 680, 2, &iCartXY_ab14_a2[0],455, M); // case: 107
      case C_AB_A(14, 3): return ShTrN_Indirect(pOut,2548, pIn + 10, 680, 3, &iCartXY_ab14_a3[0],364, M); // case: 108
      case C_AB_A(14, 4): return ShTrN_Indirect(pOut,2574, pIn + 20, 680, 4, &iCartXY_ab14_a4[0],286, M); // case: 109
      case C_AB_A(14, 5): return ShTrN_Indirect(pOut,2420, pIn + 35, 680, 5, &iCartXY_ab14_a5[0],220, M); // case: 110
      case C_AB_A(14, 6): return ShTrN_Indirect(pOut,2145, pIn + 56, 680, 6, &iCartXY_ab14_a6[0],165, M); // case: 111
   }
   #undef C_AB_A
   //assert(0);
}


// Factorize a matrix nCartY(lab) x M into nCartY(lab-la) x (2*la+1) x M. Now la < lb also allowed.
void ShTrA_YY(double * pOut, double const * pIn, unsigned la, unsigned lab, size_t M)
{
   //assert(lab >= la);
   #define C_AB_A(lab,la) ((lab*(lab+1))/2 + la)
   switch(C_AB_A(lab,la)) {
      case C_AB_A( 0, 0): return ShTrN_Indirect(pOut,  1, pIn,   1, 0, &iCartYY_ab0_a0[0],  1, M); // case: 0
      case C_AB_A( 1, 0): return ShTrN_Indirect(pOut,  3, pIn,   3, 0, &iCartYY_ab1_a0[0],  3, M); // case: 1
      case C_AB_A( 1, 1): return ShTrN_Indirect(pOut,  3, pIn,   3, 1, &iCartYY_ab1_a1[0],  1, M); // case: 2
      case C_AB_A( 2, 0): return ShTrN_Indirect(pOut,  6, pIn,   6, 0, &iCartYY_ab2_a0[0],  6, M); // case: 3
      case C_AB_A( 2, 1): return ShTrN_Indirect(pOut,  9, pIn,   6, 1, &iCartYY_ab2_a1[0],  3, M); // case: 4
      case C_AB_A( 2, 2): return ShTrN_Indirect(pOut,  5, pIn,   6, 2, &iCartYY_ab2_a2[0],  1, M); // case: 5
      case C_AB_A( 3, 0): return ShTrN_Indirect(pOut, 10, pIn,  10, 0, &iCartYY_ab3_a0[0], 10, M); // case: 6
      case C_AB_A( 3, 1): return ShTrN_Indirect(pOut, 18, pIn,  10, 1, &iCartYY_ab3_a1[0],  6, M); // case: 7
      case C_AB_A( 3, 2): return ShTrN_Indirect(pOut, 15, pIn,  10, 2, &iCartYY_ab3_a2[0],  3, M); // case: 8
      case C_AB_A( 3, 3): return ShTrN_Indirect(pOut,  7, pIn,  10, 3, &iCartYY_ab3_a3[0],  1, M); // case: 9
      case C_AB_A( 4, 0): return ShTrN_Indirect(pOut, 15, pIn,  15, 0, &iCartYY_ab4_a0[0], 15, M); // case: 10
      case C_AB_A( 4, 1): return ShTrN_Indirect(pOut, 30, pIn,  15, 1, &iCartYY_ab4_a1[0], 10, M); // case: 11
      case C_AB_A( 4, 2): return ShTrN_Indirect(pOut, 30, pIn,  15, 2, &iCartYY_ab4_a2[0],  6, M); // case: 12
      case C_AB_A( 4, 3): return ShTrN_Indirect(pOut, 21, pIn,  15, 3, &iCartYY_ab4_a3[0],  3, M); // case: 13
      case C_AB_A( 4, 4): return ShTrN_Indirect(pOut,  9, pIn,  15, 4, &iCartYY_ab4_a4[0],  1, M); // case: 14
      case C_AB_A( 5, 0): return ShTrN_Indirect(pOut, 21, pIn,  21, 0, &iCartYY_ab5_a0[0], 21, M); // case: 15
      case C_AB_A( 5, 1): return ShTrN_Indirect(pOut, 45, pIn,  21, 1, &iCartYY_ab5_a1[0], 15, M); // case: 16
      case C_AB_A( 5, 2): return ShTrN_Indirect(pOut, 50, pIn,  21, 2, &iCartYY_ab5_a2[0], 10, M); // case: 17
      case C_AB_A( 5, 3): return ShTrN_Indirect(pOut, 42, pIn,  21, 3, &iCartYY_ab5_a3[0],  6, M); // case: 18
      case C_AB_A( 5, 4): return ShTrN_Indirect(pOut, 27, pIn,  21, 4, &iCartYY_ab5_a4[0],  3, M); // case: 19
      case C_AB_A( 5, 5): return ShTrN_Indirect(pOut, 11, pIn,  21, 5, &iCartYY_ab5_a5[0],  1, M); // case: 20
      case C_AB_A( 6, 0): return ShTrN_Indirect(pOut, 28, pIn,  28, 0, &iCartYY_ab6_a0[0], 28, M); // case: 21
      case C_AB_A( 6, 1): return ShTrN_Indirect(pOut, 63, pIn,  28, 1, &iCartYY_ab6_a1[0], 21, M); // case: 22
      case C_AB_A( 6, 2): return ShTrN_Indirect(pOut, 75, pIn,  28, 2, &iCartYY_ab6_a2[0], 15, M); // case: 23
      case C_AB_A( 6, 3): return ShTrN_Indirect(pOut, 70, pIn,  28, 3, &iCartYY_ab6_a3[0], 10, M); // case: 24
      case C_AB_A( 6, 4): return ShTrN_Indirect(pOut, 54, pIn,  28, 4, &iCartYY_ab6_a4[0],  6, M); // case: 25
      case C_AB_A( 6, 5): return ShTrN_Indirect(pOut, 33, pIn,  28, 5, &iCartYY_ab6_a5[0],  3, M); // case: 26
      case C_AB_A( 6, 6): return ShTrN_Indirect(pOut, 13, pIn,  28, 6, &iCartYY_ab6_a6[0],  1, M); // case: 27
      case C_AB_A( 7, 0): return ShTrN_Indirect(pOut, 36, pIn,  36, 0, &iCartYY_ab7_a0[0], 36, M); // case: 28
      case C_AB_A( 7, 1): return ShTrN_Indirect(pOut, 84, pIn,  36, 1, &iCartYY_ab7_a1[0], 28, M); // case: 29
      case C_AB_A( 7, 2): return ShTrN_Indirect(pOut,105, pIn,  36, 2, &iCartYY_ab7_a2[0], 21, M); // case: 30
      case C_AB_A( 7, 3): return ShTrN_Indirect(pOut,105, pIn,  36, 3, &iCartYY_ab7_a3[0], 15, M); // case: 31
      case C_AB_A( 7, 4): return ShTrN_Indirect(pOut, 90, pIn,  36, 4, &iCartYY_ab7_a4[0], 10, M); // case: 32
      case C_AB_A( 7, 5): return ShTrN_Indirect(pOut, 66, pIn,  36, 5, &iCartYY_ab7_a5[0],  6, M); // case: 33
      case C_AB_A( 7, 6): return ShTrN_Indirect(pOut, 39, pIn,  36, 6, &iCartYY_ab7_a6[0],  3, M); // case: 34
      case C_AB_A( 7, 7): return ShTrN_Indirect(pOut, 15, pIn,  36, 7, &iCartYY_ab7_a7[0],  1, M); // case: 35
      case C_AB_A( 8, 0): return ShTrN_Indirect(pOut, 45, pIn,  45, 0, &iCartYY_ab8_a0[0], 45, M); // case: 36
      case C_AB_A( 8, 1): return ShTrN_Indirect(pOut,108, pIn,  45, 1, &iCartYY_ab8_a1[0], 36, M); // case: 37
      case C_AB_A( 8, 2): return ShTrN_Indirect(pOut,140, pIn,  45, 2, &iCartYY_ab8_a2[0], 28, M); // case: 38
      case C_AB_A( 8, 3): return ShTrN_Indirect(pOut,147, pIn,  45, 3, &iCartYY_ab8_a3[0], 21, M); // case: 39
      case C_AB_A( 8, 4): return ShTrN_Indirect(pOut,135, pIn,  45, 4, &iCartYY_ab8_a4[0], 15, M); // case: 40
      case C_AB_A( 8, 5): return ShTrN_Indirect(pOut,110, pIn,  45, 5, &iCartYY_ab8_a5[0], 10, M); // case: 41
      case C_AB_A( 8, 6): return ShTrN_Indirect(pOut, 78, pIn,  45, 6, &iCartYY_ab8_a6[0],  6, M); // case: 42
      case C_AB_A( 8, 7): return ShTrN_Indirect(pOut, 45, pIn,  45, 7, &iCartYY_ab8_a7[0],  3, M); // case: 43
      case C_AB_A( 8, 8): return ShTrN_Indirect(pOut, 17, pIn,  45, 8, &iCartYY_ab8_a8[0],  1, M); // case: 44
      case C_AB_A( 9, 0): return ShTrN_Indirect(pOut, 55, pIn,  55, 0, &iCartYY_ab9_a0[0], 55, M); // case: 45
      case C_AB_A( 9, 1): return ShTrN_Indirect(pOut,135, pIn,  55, 1, &iCartYY_ab9_a1[0], 45, M); // case: 46
      case C_AB_A( 9, 2): return ShTrN_Indirect(pOut,180, pIn,  55, 2, &iCartYY_ab9_a2[0], 36, M); // case: 47
      case C_AB_A( 9, 3): return ShTrN_Indirect(pOut,196, pIn,  55, 3, &iCartYY_ab9_a3[0], 28, M); // case: 48
      case C_AB_A( 9, 4): return ShTrN_Indirect(pOut,189, pIn,  55, 4, &iCartYY_ab9_a4[0], 21, M); // case: 49
      case C_AB_A( 9, 5): return ShTrN_Indirect(pOut,165, pIn,  55, 5, &iCartYY_ab9_a5[0], 15, M); // case: 50
      case C_AB_A( 9, 6): return ShTrN_Indirect(pOut,130, pIn,  55, 6, &iCartYY_ab9_a6[0], 10, M); // case: 51
      case C_AB_A( 9, 7): return ShTrN_Indirect(pOut, 90, pIn,  55, 7, &iCartYY_ab9_a7[0],  6, M); // case: 52
      case C_AB_A( 9, 8): return ShTrN_Indirect(pOut, 51, pIn,  55, 8, &iCartYY_ab9_a8[0],  3, M); // case: 53
      case C_AB_A( 9, 9): return ShTrN_Indirect(pOut, 19, pIn,  55, 9, &iCartYY_ab9_a9[0],  1, M); // case: 54
      case C_AB_A(10, 0): return ShTrN_Indirect(pOut, 66, pIn,  66, 0, &iCartYY_ab10_a0[0], 66, M); // case: 55
      case C_AB_A(10, 1): return ShTrN_Indirect(pOut,165, pIn,  66, 1, &iCartYY_ab10_a1[0], 55, M); // case: 56
      case C_AB_A(10, 2): return ShTrN_Indirect(pOut,225, pIn,  66, 2, &iCartYY_ab10_a2[0], 45, M); // case: 57
      case C_AB_A(10, 3): return ShTrN_Indirect(pOut,252, pIn,  66, 3, &iCartYY_ab10_a3[0], 36, M); // case: 58
      case C_AB_A(10, 4): return ShTrN_Indirect(pOut,252, pIn,  66, 4, &iCartYY_ab10_a4[0], 28, M); // case: 59
      case C_AB_A(10, 5): return ShTrN_Indirect(pOut,231, pIn,  66, 5, &iCartYY_ab10_a5[0], 21, M); // case: 60
      case C_AB_A(10, 6): return ShTrN_Indirect(pOut,195, pIn,  66, 6, &iCartYY_ab10_a6[0], 15, M); // case: 61
      case C_AB_A(10, 7): return ShTrN_Indirect(pOut,150, pIn,  66, 7, &iCartYY_ab10_a7[0], 10, M); // case: 62
      case C_AB_A(10, 8): return ShTrN_Indirect(pOut,102, pIn,  66, 8, &iCartYY_ab10_a8[0],  6, M); // case: 63
      case C_AB_A(10, 9): return ShTrN_Indirect(pOut, 57, pIn,  66, 9, &iCartYY_ab10_a9[0],  3, M); // case: 64
      case C_AB_A(10,10): return ShTrN_Indirect(pOut, 21, pIn,  66,10, &iCartYY_ab10_a10[0],  1, M); // case: 65
      case C_AB_A(11, 0): return ShTrN_Indirect(pOut, 78, pIn,  78, 0, &iCartYY_ab11_a0[0], 78, M); // case: 66
      case C_AB_A(11, 1): return ShTrN_Indirect(pOut,198, pIn,  78, 1, &iCartYY_ab11_a1[0], 66, M); // case: 67
      case C_AB_A(11, 2): return ShTrN_Indirect(pOut,275, pIn,  78, 2, &iCartYY_ab11_a2[0], 55, M); // case: 68
      case C_AB_A(11, 3): return ShTrN_Indirect(pOut,315, pIn,  78, 3, &iCartYY_ab11_a3[0], 45, M); // case: 69
      case C_AB_A(11, 4): return ShTrN_Indirect(pOut,324, pIn,  78, 4, &iCartYY_ab11_a4[0], 36, M); // case: 70
      case C_AB_A(11, 5): return ShTrN_Indirect(pOut,308, pIn,  78, 5, &iCartYY_ab11_a5[0], 28, M); // case: 71
      case C_AB_A(11, 6): return ShTrN_Indirect(pOut,273, pIn,  78, 6, &iCartYY_ab11_a6[0], 21, M); // case: 72
      case C_AB_A(11, 7): return ShTrN_Indirect(pOut,225, pIn,  78, 7, &iCartYY_ab11_a7[0], 15, M); // case: 73
      case C_AB_A(11, 8): return ShTrN_Indirect(pOut,170, pIn,  78, 8, &iCartYY_ab11_a8[0], 10, M); // case: 74
      case C_AB_A(11, 9): return ShTrN_Indirect(pOut,114, pIn,  78, 9, &iCartYY_ab11_a9[0],  6, M); // case: 75
      case C_AB_A(11,10): return ShTrN_Indirect(pOut, 63, pIn,  78,10, &iCartYY_ab11_a10[0],  3, M); // case: 76
      case C_AB_A(11,11): return ShTrN_Indirect(pOut, 23, pIn,  78,11, &iCartYY_ab11_a11[0],  1, M); // case: 77
      case C_AB_A(12, 0): return ShTrN_Indirect(pOut, 91, pIn,  91, 0, &iCartYY_ab12_a0[0], 91, M); // case: 78
      case C_AB_A(12, 1): return ShTrN_Indirect(pOut,234, pIn,  91, 1, &iCartYY_ab12_a1[0], 78, M); // case: 79
      case C_AB_A(12, 2): return ShTrN_Indirect(pOut,330, pIn,  91, 2, &iCartYY_ab12_a2[0], 66, M); // case: 80
      case C_AB_A(12, 3): return ShTrN_Indirect(pOut,385, pIn,  91, 3, &iCartYY_ab12_a3[0], 55, M); // case: 81
      case C_AB_A(12, 4): return ShTrN_Indirect(pOut,405, pIn,  91, 4, &iCartYY_ab12_a4[0], 45, M); // case: 82
      case C_AB_A(12, 5): return ShTrN_Indirect(pOut,396, pIn,  91, 5, &iCartYY_ab12_a5[0], 36, M); // case: 83
      case C_AB_A(12, 6): return ShTrN_Indirect(pOut,364, pIn,  91, 6, &iCartYY_ab12_a6[0], 28, M); // case: 84
      case C_AB_A(12, 7): return ShTrN_Indirect(pOut,315, pIn,  91, 7, &iCartYY_ab12_a7[0], 21, M); // case: 85
      case C_AB_A(12, 8): return ShTrN_Indirect(pOut,255, pIn,  91, 8, &iCartYY_ab12_a8[0], 15, M); // case: 86
      case C_AB_A(12, 9): return ShTrN_Indirect(pOut,190, pIn,  91, 9, &iCartYY_ab12_a9[0], 10, M); // case: 87
      case C_AB_A(12,10): return ShTrN_Indirect(pOut,126, pIn,  91,10, &iCartYY_ab12_a10[0],  6, M); // case: 88
      case C_AB_A(12,11): return ShTrN_Indirect(pOut, 69, pIn,  91,11, &iCartYY_ab12_a11[0],  3, M); // case: 89
      case C_AB_A(12,12): return ShTrN_Indirect(pOut, 25, pIn,  91,12, &iCartYY_ab12_a12[0],  1, M); // case: 90
      case C_AB_A(13, 0): return ShTrN_Indirect(pOut,105, pIn, 105, 0, &iCartYY_ab13_a0[0],105, M); // case: 91
      case C_AB_A(13, 1): return ShTrN_Indirect(pOut,273, pIn, 105, 1, &iCartYY_ab13_a1[0], 91, M); // case: 92
      case C_AB_A(13, 2): return ShTrN_Indirect(pOut,390, pIn, 105, 2, &iCartYY_ab13_a2[0], 78, M); // case: 93
      case C_AB_A(13, 3): return ShTrN_Indirect(pOut,462, pIn, 105, 3, &iCartYY_ab13_a3[0], 66, M); // case: 94
      case C_AB_A(13, 4): return ShTrN_Indirect(pOut,495, pIn, 105, 4, &iCartYY_ab13_a4[0], 55, M); // case: 95
      case C_AB_A(13, 5): return ShTrN_Indirect(pOut,495, pIn, 105, 5, &iCartYY_ab13_a5[0], 45, M); // case: 96
      case C_AB_A(13, 6): return ShTrN_Indirect(pOut,468, pIn, 105, 6, &iCartYY_ab13_a6[0], 36, M); // case: 97
      case C_AB_A(13, 7): return ShTrN_Indirect(pOut,420, pIn, 105, 7, &iCartYY_ab13_a7[0], 28, M); // case: 98
      case C_AB_A(13, 8): return ShTrN_Indirect(pOut,357, pIn, 105, 8, &iCartYY_ab13_a8[0], 21, M); // case: 99
      case C_AB_A(13, 9): return ShTrN_Indirect(pOut,285, pIn, 105, 9, &iCartYY_ab13_a9[0], 15, M); // case: 100
      case C_AB_A(13,10): return ShTrN_Indirect(pOut,210, pIn, 105,10, &iCartYY_ab13_a10[0], 10, M); // case: 101
      case C_AB_A(13,11): return ShTrN_Indirect(pOut,138, pIn, 105,11, &iCartYY_ab13_a11[0],  6, M); // case: 102
      case C_AB_A(13,12): return ShTrN_Indirect(pOut, 75, pIn, 105,12, &iCartYY_ab13_a12[0],  3, M); // case: 103
      case C_AB_A(13,13): return ShTrN_Indirect(pOut, 27, pIn, 105,13, &iCartYY_ab13_a13[0],  1, M); // case: 104
      case C_AB_A(14, 0): return ShTrN_Indirect(pOut,120, pIn, 120, 0, &iCartYY_ab14_a0[0],120, M); // case: 105
      case C_AB_A(14, 1): return ShTrN_Indirect(pOut,315, pIn, 120, 1, &iCartYY_ab14_a1[0],105, M); // case: 106
      case C_AB_A(14, 2): return ShTrN_Indirect(pOut,455, pIn, 120, 2, &iCartYY_ab14_a2[0], 91, M); // case: 107
      case C_AB_A(14, 3): return ShTrN_Indirect(pOut,546, pIn, 120, 3, &iCartYY_ab14_a3[0], 78, M); // case: 108
      case C_AB_A(14, 4): return ShTrN_Indirect(pOut,594, pIn, 120, 4, &iCartYY_ab14_a4[0], 66, M); // case: 109
      case C_AB_A(14, 5): return ShTrN_Indirect(pOut,605, pIn, 120, 5, &iCartYY_ab14_a5[0], 55, M); // case: 110
      case C_AB_A(14, 6): return ShTrN_Indirect(pOut,585, pIn, 120, 6, &iCartYY_ab14_a6[0], 45, M); // case: 111
      case C_AB_A(14, 7): return ShTrN_Indirect(pOut,540, pIn, 120, 7, &iCartYY_ab14_a7[0], 36, M); // case: 112
      case C_AB_A(14, 8): return ShTrN_Indirect(pOut,476, pIn, 120, 8, &iCartYY_ab14_a8[0], 28, M); // case: 113
      case C_AB_A(14, 9): return ShTrN_Indirect(pOut,399, pIn, 120, 9, &iCartYY_ab14_a9[0], 21, M); // case: 114
      case C_AB_A(14,10): return ShTrN_Indirect(pOut,315, pIn, 120,10, &iCartYY_ab14_a10[0], 15, M); // case: 115
      case C_AB_A(14,11): return ShTrN_Indirect(pOut,230, pIn, 120,11, &iCartYY_ab14_a11[0], 10, M); // case: 116
      case C_AB_A(14,12): return ShTrN_Indirect(pOut,150, pIn, 120,12, &iCartYY_ab14_a12[0],  6, M); // case: 117
      case C_AB_A(14,13): return ShTrN_Indirect(pOut, 81, pIn, 120,13, &iCartYY_ab14_a13[0],  3, M); // case: 118
      case C_AB_A(14,14): return ShTrN_Indirect(pOut, 29, pIn, 120,14, &iCartYY_ab14_a14[0],  1, M); // case: 119
   }
   #undef C_AB_A
   //assert(0);
}

// transform cartesians CartX[(x-A)^lb], centered at A, to solid harmoincs Slm(x-B), centered at B.
// Input is nCartX(lb) x nCount, output is (2l+1); sa indexes Count, sb indexes Slm(x-B).
void OsrrC(double * pOut, size_t sa, size_t sb, double const * p0Z, double AmBx, double AmBy, double AmBz, unsigned lb, size_t nCount)
{
   // About the prefetches: Yes, I am aware of the fact that they should be pointless, especially the ones
   // on lb=0 and lb=1. But DOES make a difference. On my dual Xeon E5-2687W v3 they increase integration
   // speed by 25%(!!) if writing directly into large matrices/tensors.
   // The lb=0 and lb=1 cases help most, despite the proximity of the prefetch to the write. I have no idea
   // what is going on here. My i7 3820QM, on the other hand, doesn't care either way. So I just leave them in for the time being.
   switch(lb) {
      case 0: {
         for (size_t ia = 0; ia < nCount; ++ ia) {
            double const * pAx0 = p0Z + 1 * ia;
            double * pOut_ = pOut + sa * ia;
            //IR_PREFETCH_W(&pOut_[sb*0]);
            double a_000 = pAx0[0];
            // 1.00 steps per component, 0.01 kb stack
            pOut_[sb*0] = a_000;
         }
         return;
      }
      case 1: {
         for (size_t ia = 0; ia < nCount; ++ ia) {
            double const * pAx0 = p0Z + 4 * ia;
            double * pOut_ = pOut + sa * ia;
            //IR_PREFETCH_W(&pOut_[sb*0]);
            //IR_PREFETCH_W(&pOut_[sb*1]);
            //IR_PREFETCH_W(&pOut_[sb*2]);
            double b_100 = AmBx*pAx0[0] + pAx0[1];
            double b_010 = AmBy*pAx0[0] + pAx0[2];
            double b_001 = AmBz*pAx0[0] + pAx0[3];
            // 1.00 steps per component, 0.02 kb stack
            pOut_[sb*0] = b_100;
            pOut_[sb*1] = b_010;
            pOut_[sb*2] = b_001;
         }
         return;
      }
      case 2: {
         for (size_t ia = 0; ia < nCount; ++ ia) {
            double const * pAx0 = p0Z + 10 * ia;
            double * pOut_ = pOut + sa * ia;
            //IR_PREFETCH_W(&pOut_[sb*0]);
            //IR_PREFETCH_W(&pOut_[sb*1]);
            //IR_PREFETCH_W(&pOut_[sb*2]);
            //IR_PREFETCH_W(&pOut_[sb*3]);
            //IR_PREFETCH_W(&pOut_[sb*4]);
            double b_100 = AmBx*pAx0[0] + pAx0[1];
            double r_100_100 = AmBx*pAx0[1] + pAx0[4];
            double r_010_100 = AmBx*pAx0[2] + pAx0[7];
            double r_001_100 = AmBx*pAx0[3] + pAx0[8];
            double b_010 = AmBy*pAx0[0] + pAx0[2];
            double r_010_010 = AmBy*pAx0[2] + pAx0[5];
            double r_001_010 = AmBy*pAx0[3] + pAx0[9];
            double b_001 = AmBz*pAx0[0] + pAx0[3];
            double r_001_001 = AmBz*pAx0[3] + pAx0[6];
            double b_200 = AmBx*b_100 + r_100_100;
            double b_020 = AmBy*b_010 + r_010_010;
            double b_002 = AmBz*b_001 + r_001_001;
            double b_110 = AmBy*b_100 + r_010_100;
            double b_101 = AmBz*b_100 + r_001_100;
            double b_011 = AmBz*b_010 + r_001_010;
            // 2.50 steps per component, 0.12 kb stack
            pOut_[sb*0] = b_002 - b_020*sd0 - b_200*sd0;
            pOut_[sb*1] = b_110*sd1;
            pOut_[sb*2] = b_101*sd1;
            pOut_[sb*3] = -b_020*sd2 + b_200*sd2;
            pOut_[sb*4] = b_011*sd1;
         }
         return;
      }
      case 3: {
         for (size_t ia = 0; ia < nCount; ++ ia) {
            double const * pAx0 = p0Z + 20 * ia;
            double * pOut_ = pOut + sa * ia;
            //IR_PREFETCH_W(&pOut_[sb*0]);
            //IR_PREFETCH_W(&pOut_[sb*1]);
            //IR_PREFETCH_W(&pOut_[sb*2]);
            //IR_PREFETCH_W(&pOut_[sb*3]);
            //IR_PREFETCH_W(&pOut_[sb*4]);
            //IR_PREFETCH_W(&pOut_[sb*5]);
            //IR_PREFETCH_W(&pOut_[sb*6]);
            double b_100 = AmBx*pAx0[0] + pAx0[1];
            double r_100_100 = AmBx*pAx0[1] + pAx0[4];
            double r_010_100 = AmBx*pAx0[2] + pAx0[7];
            double r_001_100 = AmBx*pAx0[3] + pAx0[8];
            double r_200_100 = AmBx*pAx0[4] + pAx0[10];
            double r_110_100 = AmBx*pAx0[7] + pAx0[15];
            double r_101_100 = AmBx*pAx0[8] + pAx0[17];
            double r_011_100 = AmBx*pAx0[9] + pAx0[19];
            double b_010 = AmBy*pAx0[0] + pAx0[2];
            double r_100_010 = AmBy*pAx0[1] + pAx0[7];
            double r_010_010 = AmBy*pAx0[2] + pAx0[5];
            double r_001_010 = AmBy*pAx0[3] + pAx0[9];
            double r_020_010 = AmBy*pAx0[5] + pAx0[11];
            double r_110_010 = AmBy*pAx0[7] + pAx0[13];
            double r_011_010 = AmBy*pAx0[9] + pAx0[18];
            double b_001 = AmBz*pAx0[0] + pAx0[3];
            double r_100_001 = AmBz*pAx0[1] + pAx0[8];
            double r_010_001 = AmBz*pAx0[2] + pAx0[9];
            double r_001_001 = AmBz*pAx0[3] + pAx0[6];
            double r_002_001 = AmBz*pAx0[6] + pAx0[12];
            double r_101_001 = AmBz*pAx0[8] + pAx0[14];
            double r_011_001 = AmBz*pAx0[9] + pAx0[16];
            double b_200 = AmBx*b_100 + r_100_100;
            double r_100_200 = AmBx*r_100_100 + r_200_100;
            double r_010_200 = AmBx*r_010_100 + r_110_100;
            double r_001_200 = AmBx*r_001_100 + r_101_100;
            double b_020 = AmBy*b_010 + r_010_010;
            double r_100_020 = AmBy*r_100_010 + r_110_010;
            double r_010_020 = AmBy*r_010_010 + r_020_010;
            double r_001_020 = AmBy*r_001_010 + r_011_010;
            double b_002 = AmBz*b_001 + r_001_001;
            double r_100_002 = AmBz*r_100_001 + r_101_001;
            double r_010_002 = AmBz*r_010_001 + r_011_001;
            double r_001_002 = AmBz*r_001_001 + r_002_001;
            double b_110 = AmBy*b_100 + r_010_100;
            double r_001_110 = AmBy*r_001_100 + r_011_100;
            double b_300 = AmBx*b_200 + r_100_200;
            double b_030 = AmBy*b_020 + r_010_020;
            double b_003 = AmBz*b_002 + r_001_002;
            double b_120 = AmBx*b_020 + r_100_020;
            double b_102 = AmBx*b_002 + r_100_002;
            double b_210 = AmBy*b_200 + r_010_200;
            double b_012 = AmBy*b_002 + r_010_002;
            double b_201 = AmBz*b_200 + r_001_200;
            double b_021 = AmBz*b_020 + r_001_020;
            double b_111 = AmBz*b_110 + r_001_110;
            // 4.60 steps per component, 0.36 kb stack
            pOut_[sb*0] = b_102*sd4 - b_120*sd3 - b_300*sd3;
            pOut_[sb*1] = b_012*sd4 - b_030*sd3 - b_210*sd3;
            pOut_[sb*2] = b_003 - b_021*sd5 - b_201*sd5;
            pOut_[sb*3] = -b_120*sd7 + b_300*sd6;
            pOut_[sb*4] = b_111*sd8;
            pOut_[sb*5] = -b_030*sd6 + b_210*sd7;
            pOut_[sb*6] = -b_021*sd9 + b_201*sd9;
         }
         return;
      }
      case 4: {
         for (size_t ia = 0; ia < nCount; ++ ia) {
            double const * pAx0 = p0Z + 35 * ia;
            double * pOut_ = pOut + sa * ia;
            //IR_PREFETCH_W(&pOut_[sb*0]);
            //IR_PREFETCH_W(&pOut_[sb*1]);
            //IR_PREFETCH_W(&pOut_[sb*2]);
            //IR_PREFETCH_W(&pOut_[sb*3]);
            //IR_PREFETCH_W(&pOut_[sb*4]);
            //IR_PREFETCH_W(&pOut_[sb*5]);
            //IR_PREFETCH_W(&pOut_[sb*6]);
            //IR_PREFETCH_W(&pOut_[sb*7]);
            //IR_PREFETCH_W(&pOut_[sb*8]);
            double b_100 = AmBx*pAx0[0] + pAx0[1];
            double r_100_100 = AmBx*pAx0[1] + pAx0[4];
            double r_010_100 = AmBx*pAx0[2] + pAx0[7];
            double r_001_100 = AmBx*pAx0[3] + pAx0[8];
            double r_200_100 = AmBx*pAx0[4] + pAx0[10];
            double r_110_100 = AmBx*pAx0[7] + pAx0[15];
            double r_101_100 = AmBx*pAx0[8] + pAx0[17];
            double r_011_100 = AmBx*pAx0[9] + pAx0[19];
            double r_300_100 = AmBx*pAx0[10] + pAx0[20];
            double r_210_100 = AmBx*pAx0[15] + pAx0[23];
            double r_201_100 = AmBx*pAx0[17] + pAx0[25];
            double r_111_100 = AmBx*pAx0[19] + pAx0[34];
            double b_010 = AmBy*pAx0[0] + pAx0[2];
            double r_100_010 = AmBy*pAx0[1] + pAx0[7];
            double r_010_010 = AmBy*pAx0[2] + pAx0[5];
            double r_001_010 = AmBy*pAx0[3] + pAx0[9];
            double r_200_010 = AmBy*pAx0[4] + pAx0[15];
            double r_020_010 = AmBy*pAx0[5] + pAx0[11];
            double r_110_010 = AmBy*pAx0[7] + pAx0[13];
            double r_101_010 = AmBy*pAx0[8] + pAx0[19];
            double r_011_010 = AmBy*pAx0[9] + pAx0[18];
            double r_030_010 = AmBy*pAx0[11] + pAx0[21];
            double r_120_010 = AmBy*pAx0[13] + pAx0[24];
            double r_210_010 = AmBy*pAx0[15] + pAx0[29];
            double r_021_010 = AmBy*pAx0[18] + pAx0[27];
            double r_111_010 = AmBy*pAx0[19] + pAx0[33];
            double b_001 = AmBz*pAx0[0] + pAx0[3];
            double r_100_001 = AmBz*pAx0[1] + pAx0[8];
            double r_010_001 = AmBz*pAx0[2] + pAx0[9];
            double r_001_001 = AmBz*pAx0[3] + pAx0[6];
            double r_200_001 = AmBz*pAx0[4] + pAx0[17];
            double r_020_001 = AmBz*pAx0[5] + pAx0[18];
            double r_002_001 = AmBz*pAx0[6] + pAx0[12];
            double r_110_001 = AmBz*pAx0[7] + pAx0[19];
            double r_101_001 = AmBz*pAx0[8] + pAx0[14];
            double r_011_001 = AmBz*pAx0[9] + pAx0[16];
            double r_003_001 = AmBz*pAx0[12] + pAx0[22];
            double r_102_001 = AmBz*pAx0[14] + pAx0[26];
            double r_012_001 = AmBz*pAx0[16] + pAx0[28];
            double r_201_001 = AmBz*pAx0[17] + pAx0[30];
            double r_021_001 = AmBz*pAx0[18] + pAx0[31];
            double r_111_001 = AmBz*pAx0[19] + pAx0[32];
            double b_200 = AmBx*b_100 + r_100_100;
            double r_100_200 = AmBx*r_100_100 + r_200_100;
            double r_010_200 = AmBx*r_010_100 + r_110_100;
            double r_001_200 = AmBx*r_001_100 + r_101_100;
            double r_200_200 = AmBx*r_200_100 + r_300_100;
            double r_110_200 = AmBx*r_110_100 + r_210_100;
            double r_101_200 = AmBx*r_101_100 + r_201_100;
            double r_011_200 = AmBx*r_011_100 + r_111_100;
            double b_020 = AmBy*b_010 + r_010_010;
            double r_100_020 = AmBy*r_100_010 + r_110_010;
            double r_010_020 = AmBy*r_010_010 + r_020_010;
            double r_001_020 = AmBy*r_001_010 + r_011_010;
            double r_200_020 = AmBy*r_200_010 + r_210_010;
            double r_020_020 = AmBy*r_020_010 + r_030_010;
            double r_110_020 = AmBy*r_110_010 + r_120_010;
            double r_101_020 = AmBy*r_101_010 + r_111_010;
            double r_011_020 = AmBy*r_011_010 + r_021_010;
            double b_002 = AmBz*b_001 + r_001_001;
            double r_100_002 = AmBz*r_100_001 + r_101_001;
            double r_010_002 = AmBz*r_010_001 + r_011_001;
            double r_001_002 = AmBz*r_001_001 + r_002_001;
            double r_200_002 = AmBz*r_200_001 + r_201_001;
            double r_020_002 = AmBz*r_020_001 + r_021_001;
            double r_002_002 = AmBz*r_002_001 + r_003_001;
            double r_110_002 = AmBz*r_110_001 + r_111_001;
            double r_101_002 = AmBz*r_101_001 + r_102_001;
            double r_011_002 = AmBz*r_011_001 + r_012_001;
            double b_300 = AmBx*b_200 + r_100_200;
            double r_100_300 = AmBx*r_100_200 + r_200_200;
            double r_010_300 = AmBx*r_010_200 + r_110_200;
            double r_001_300 = AmBx*r_001_200 + r_101_200;
            double b_030 = AmBy*b_020 + r_010_020;
            double r_100_030 = AmBy*r_100_020 + r_110_020;
            double r_010_030 = AmBy*r_010_020 + r_020_020;
            double r_001_030 = AmBy*r_001_020 + r_011_020;
            double b_003 = AmBz*b_002 + r_001_002;
            double r_100_003 = AmBz*r_100_002 + r_101_002;
            double r_010_003 = AmBz*r_010_002 + r_011_002;
            double r_001_003 = AmBz*r_001_002 + r_002_002;
            double b_120 = AmBx*b_020 + r_100_020;
            double r_100_120 = AmBx*r_100_020 + r_200_020;
            double r_001_120 = AmBx*r_001_020 + r_101_020;
            double b_102 = AmBx*b_002 + r_100_002;
            double r_100_102 = AmBx*r_100_002 + r_200_002;
            double r_010_102 = AmBx*r_010_002 + r_110_002;
            double b_210 = AmBy*b_200 + r_010_200;
            double r_001_210 = AmBy*r_001_200 + r_011_200;
            double b_012 = AmBy*b_002 + r_010_002;
            double r_010_012 = AmBy*r_010_002 + r_020_002;
            double b_400 = AmBx*b_300 + r_100_300;
            double b_040 = AmBy*b_030 + r_010_030;
            double b_004 = AmBz*b_003 + r_001_003;
            double b_310 = AmBy*b_300 + r_010_300;
            double b_130 = AmBx*b_030 + r_100_030;
            double b_301 = AmBz*b_300 + r_001_300;
            double b_103 = AmBx*b_003 + r_100_003;
            double b_031 = AmBz*b_030 + r_001_030;
            double b_013 = AmBy*b_003 + r_010_003;
            double b_220 = AmBx*b_120 + r_100_120;
            double b_202 = AmBx*b_102 + r_100_102;
            double b_022 = AmBy*b_012 + r_010_012;
            double b_112 = AmBy*b_102 + r_010_102;
            double b_121 = AmBz*b_120 + r_001_120;
            double b_211 = AmBz*b_210 + r_001_210;
            // 7.07 steps per component, 0.83 kb stack
            pOut_[sb*0] = b_004 - b_022*sdc + b_040*sda - b_202*sdc + b_220*sdb + b_400*sda;
            pOut_[sb*1] = b_112*sde - b_130*sdd - b_310*sdd;
            pOut_[sb*2] = b_103*sdf - b_121*sd7 - b_301*sd7;
            pOut_[sb*3] = b_040*sd10 - b_220*sd11 + b_400*sd10;
            pOut_[sb*4] = b_013*sdf - b_031*sd7 - b_211*sd7;
            pOut_[sb*5] = -b_022*sd13 + b_040*sd12 + b_202*sd13 - b_400*sd12;
            pOut_[sb*6] = -b_130*sd14 + b_310*sd14;
            pOut_[sb*7] = -b_121*sd16 + b_301*sd15;
            pOut_[sb*8] = -b_031*sd15 + b_211*sd16;
         }
         return;
      }
      case 5: {
         for (size_t ia = 0; ia < nCount; ++ ia) {
            double const * pAx0 = p0Z + 56 * ia;
            double * pOut_ = pOut + sa * ia;
            //IR_PREFETCH_W(&pOut_[sb*0]);
            //IR_PREFETCH_W(&pOut_[sb*1]);
            //IR_PREFETCH_W(&pOut_[sb*2]);
            //IR_PREFETCH_W(&pOut_[sb*3]);
            //IR_PREFETCH_W(&pOut_[sb*4]);
            //IR_PREFETCH_W(&pOut_[sb*5]);
            //IR_PREFETCH_W(&pOut_[sb*6]);
            //IR_PREFETCH_W(&pOut_[sb*7]);
            //IR_PREFETCH_W(&pOut_[sb*8]);
            //IR_PREFETCH_W(&pOut_[sb*9]);
            //IR_PREFETCH_W(&pOut_[sb*10]);
            double b_100 = AmBx*pAx0[0] + pAx0[1];
            double r_100_100 = AmBx*pAx0[1] + pAx0[4];
            double r_010_100 = AmBx*pAx0[2] + pAx0[7];
            double r_001_100 = AmBx*pAx0[3] + pAx0[8];
            double r_200_100 = AmBx*pAx0[4] + pAx0[10];
            double r_020_100 = AmBx*pAx0[5] + pAx0[13];
            double r_002_100 = AmBx*pAx0[6] + pAx0[14];
            double r_110_100 = AmBx*pAx0[7] + pAx0[15];
            double r_101_100 = AmBx*pAx0[8] + pAx0[17];
            double r_011_100 = AmBx*pAx0[9] + pAx0[19];
            double r_300_100 = AmBx*pAx0[10] + pAx0[20];
            double r_120_100 = AmBx*pAx0[13] + pAx0[29];
            double r_102_100 = AmBx*pAx0[14] + pAx0[30];
            double r_210_100 = AmBx*pAx0[15] + pAx0[23];
            double r_201_100 = AmBx*pAx0[17] + pAx0[25];
            double r_111_100 = AmBx*pAx0[19] + pAx0[34];
            double r_400_100 = AmBx*pAx0[20] + pAx0[35];
            double r_310_100 = AmBx*pAx0[23] + pAx0[40];
            double r_301_100 = AmBx*pAx0[25] + pAx0[42];
            double r_220_100 = AmBx*pAx0[29] + pAx0[44];
            double r_202_100 = AmBx*pAx0[30] + pAx0[45];
            double r_211_100 = AmBx*pAx0[34] + pAx0[50];
            double b_010 = AmBy*pAx0[0] + pAx0[2];
            double r_100_010 = AmBy*pAx0[1] + pAx0[7];
            double r_010_010 = AmBy*pAx0[2] + pAx0[5];
            double r_001_010 = AmBy*pAx0[3] + pAx0[9];
            double r_200_010 = AmBy*pAx0[4] + pAx0[15];
            double r_020_010 = AmBy*pAx0[5] + pAx0[11];
            double r_002_010 = AmBy*pAx0[6] + pAx0[16];
            double r_110_010 = AmBy*pAx0[7] + pAx0[13];
            double r_101_010 = AmBy*pAx0[8] + pAx0[19];
            double r_011_010 = AmBy*pAx0[9] + pAx0[18];
            double r_030_010 = AmBy*pAx0[11] + pAx0[21];
            double r_120_010 = AmBy*pAx0[13] + pAx0[24];
            double r_210_010 = AmBy*pAx0[15] + pAx0[29];
            double r_012_010 = AmBy*pAx0[16] + pAx0[31];
            double r_201_010 = AmBy*pAx0[17] + pAx0[34];
            double r_021_010 = AmBy*pAx0[18] + pAx0[27];
            double r_111_010 = AmBy*pAx0[19] + pAx0[33];
            double r_040_010 = AmBy*pAx0[21] + pAx0[36];
            double r_130_010 = AmBy*pAx0[24] + pAx0[38];
            double r_031_010 = AmBy*pAx0[27] + pAx0[43];
            double r_220_010 = AmBy*pAx0[29] + pAx0[46];
            double r_022_010 = AmBy*pAx0[31] + pAx0[47];
            double r_121_010 = AmBy*pAx0[33] + pAx0[51];
            double r_211_010 = AmBy*pAx0[34] + pAx0[55];
            double b_001 = AmBz*pAx0[0] + pAx0[3];
            double r_100_001 = AmBz*pAx0[1] + pAx0[8];
            double r_010_001 = AmBz*pAx0[2] + pAx0[9];
            double r_001_001 = AmBz*pAx0[3] + pAx0[6];
            double r_200_001 = AmBz*pAx0[4] + pAx0[17];
            double r_020_001 = AmBz*pAx0[5] + pAx0[18];
            double r_002_001 = AmBz*pAx0[6] + pAx0[12];
            double r_110_001 = AmBz*pAx0[7] + pAx0[19];
            double r_101_001 = AmBz*pAx0[8] + pAx0[14];
            double r_011_001 = AmBz*pAx0[9] + pAx0[16];
            double r_003_001 = AmBz*pAx0[12] + pAx0[22];
            double r_120_001 = AmBz*pAx0[13] + pAx0[33];
            double r_102_001 = AmBz*pAx0[14] + pAx0[26];
            double r_210_001 = AmBz*pAx0[15] + pAx0[34];
            double r_012_001 = AmBz*pAx0[16] + pAx0[28];
            double r_201_001 = AmBz*pAx0[17] + pAx0[30];
            double r_021_001 = AmBz*pAx0[18] + pAx0[31];
            double r_111_001 = AmBz*pAx0[19] + pAx0[32];
            double r_004_001 = AmBz*pAx0[22] + pAx0[37];
            double r_103_001 = AmBz*pAx0[26] + pAx0[39];
            double r_013_001 = AmBz*pAx0[28] + pAx0[41];
            double r_202_001 = AmBz*pAx0[30] + pAx0[48];
            double r_022_001 = AmBz*pAx0[31] + pAx0[49];
            double r_112_001 = AmBz*pAx0[32] + pAx0[52];
            double r_121_001 = AmBz*pAx0[33] + pAx0[53];
            double r_211_001 = AmBz*pAx0[34] + pAx0[54];
            double b_200 = AmBx*b_100 + r_100_100;
            double r_100_200 = AmBx*r_100_100 + r_200_100;
            double r_010_200 = AmBx*r_010_100 + r_110_100;
            double r_001_200 = AmBx*r_001_100 + r_101_100;
            double r_200_200 = AmBx*r_200_100 + r_300_100;
            double r_020_200 = AmBx*r_020_100 + r_120_100;
            double r_002_200 = AmBx*r_002_100 + r_102_100;
            double r_110_200 = AmBx*r_110_100 + r_210_100;
            double r_101_200 = AmBx*r_101_100 + r_201_100;
            double r_011_200 = AmBx*r_011_100 + r_111_100;
            double r_300_200 = AmBx*r_300_100 + r_400_100;
            double r_120_200 = AmBx*r_120_100 + r_220_100;
            double r_102_200 = AmBx*r_102_100 + r_202_100;
            double r_210_200 = AmBx*r_210_100 + r_310_100;
            double r_201_200 = AmBx*r_201_100 + r_301_100;
            double r_111_200 = AmBx*r_111_100 + r_211_100;
            double b_020 = AmBy*b_010 + r_010_010;
            double r_100_020 = AmBy*r_100_010 + r_110_010;
            double r_010_020 = AmBy*r_010_010 + r_020_010;
            double r_001_020 = AmBy*r_001_010 + r_011_010;
            double r_200_020 = AmBy*r_200_010 + r_210_010;
            double r_020_020 = AmBy*r_020_010 + r_030_010;
            double r_002_020 = AmBy*r_002_010 + r_012_010;
            double r_110_020 = AmBy*r_110_010 + r_120_010;
            double r_101_020 = AmBy*r_101_010 + r_111_010;
            double r_011_020 = AmBy*r_011_010 + r_021_010;
            double r_030_020 = AmBy*r_030_010 + r_040_010;
            double r_120_020 = AmBy*r_120_010 + r_130_010;
            double r_210_020 = AmBy*r_210_010 + r_220_010;
            double r_012_020 = AmBy*r_012_010 + r_022_010;
            double r_201_020 = AmBy*r_201_010 + r_211_010;
            double r_021_020 = AmBy*r_021_010 + r_031_010;
            double r_111_020 = AmBy*r_111_010 + r_121_010;
            double b_002 = AmBz*b_001 + r_001_001;
            double r_100_002 = AmBz*r_100_001 + r_101_001;
            double r_010_002 = AmBz*r_010_001 + r_011_001;
            double r_001_002 = AmBz*r_001_001 + r_002_001;
            double r_200_002 = AmBz*r_200_001 + r_201_001;
            double r_020_002 = AmBz*r_020_001 + r_021_001;
            double r_002_002 = AmBz*r_002_001 + r_003_001;
            double r_110_002 = AmBz*r_110_001 + r_111_001;
            double r_101_002 = AmBz*r_101_001 + r_102_001;
            double r_011_002 = AmBz*r_011_001 + r_012_001;
            double r_003_002 = AmBz*r_003_001 + r_004_001;
            double r_120_002 = AmBz*r_120_001 + r_121_001;
            double r_102_002 = AmBz*r_102_001 + r_103_001;
            double r_210_002 = AmBz*r_210_001 + r_211_001;
            double r_012_002 = AmBz*r_012_001 + r_013_001;
            double r_201_002 = AmBz*r_201_001 + r_202_001;
            double r_021_002 = AmBz*r_021_001 + r_022_001;
            double r_111_002 = AmBz*r_111_001 + r_112_001;
            double b_300 = AmBx*b_200 + r_100_200;
            double r_100_300 = AmBx*r_100_200 + r_200_200;
            double r_010_300 = AmBx*r_010_200 + r_110_200;
            double r_001_300 = AmBx*r_001_200 + r_101_200;
            double r_200_300 = AmBx*r_200_200 + r_300_200;
            double r_020_300 = AmBx*r_020_200 + r_120_200;
            double r_002_300 = AmBx*r_002_200 + r_102_200;
            double r_110_300 = AmBx*r_110_200 + r_210_200;
            double r_101_300 = AmBx*r_101_200 + r_201_200;
            double r_011_300 = AmBx*r_011_200 + r_111_200;
            double b_030 = AmBy*b_020 + r_010_020;
            double r_100_030 = AmBy*r_100_020 + r_110_020;
            double r_010_030 = AmBy*r_010_020 + r_020_020;
            double r_001_030 = AmBy*r_001_020 + r_011_020;
            double r_200_030 = AmBy*r_200_020 + r_210_020;
            double r_020_030 = AmBy*r_020_020 + r_030_020;
            double r_002_030 = AmBy*r_002_020 + r_012_020;
            double r_110_030 = AmBy*r_110_020 + r_120_020;
            double r_101_030 = AmBy*r_101_020 + r_111_020;
            double r_011_030 = AmBy*r_011_020 + r_021_020;
            double b_003 = AmBz*b_002 + r_001_002;
            double r_100_003 = AmBz*r_100_002 + r_101_002;
            double r_010_003 = AmBz*r_010_002 + r_011_002;
            double r_001_003 = AmBz*r_001_002 + r_002_002;
            double r_200_003 = AmBz*r_200_002 + r_201_002;
            double r_020_003 = AmBz*r_020_002 + r_021_002;
            double r_002_003 = AmBz*r_002_002 + r_003_002;
            double r_110_003 = AmBz*r_110_002 + r_111_002;
            double r_101_003 = AmBz*r_101_002 + r_102_002;
            double r_011_003 = AmBz*r_011_002 + r_012_002;
            double b_120 = AmBx*b_020 + r_100_020;
            double r_100_120 = AmBx*r_100_020 + r_200_020;
            double r_001_120 = AmBx*r_001_020 + r_101_020;
            double r_101_120 = AmBx*r_101_020 + r_201_020;
            double b_102 = AmBx*b_002 + r_100_002;
            double r_100_102 = AmBx*r_100_002 + r_200_002;
            double r_010_102 = AmBx*r_010_002 + r_110_002;
            double r_110_102 = AmBx*r_110_002 + r_210_002;
            double b_012 = AmBy*b_002 + r_010_002;
            double r_100_012 = AmBy*r_100_002 + r_110_002;
            double r_010_012 = AmBy*r_010_002 + r_020_002;
            double r_110_012 = AmBy*r_110_002 + r_120_002;
            double b_400 = AmBx*b_300 + r_100_300;
            double r_100_400 = AmBx*r_100_300 + r_200_300;
            double r_010_400 = AmBx*r_010_300 + r_110_300;
            double r_001_400 = AmBx*r_001_300 + r_101_300;
            double b_040 = AmBy*b_030 + r_010_030;
            double r_100_040 = AmBy*r_100_030 + r_110_030;
            double r_010_040 = AmBy*r_010_030 + r_020_030;
            double r_001_040 = AmBy*r_001_030 + r_011_030;
            double b_004 = AmBz*b_003 + r_001_003;
            double r_100_004 = AmBz*r_100_003 + r_101_003;
            double r_010_004 = AmBz*r_010_003 + r_011_003;
            double r_001_004 = AmBz*r_001_003 + r_002_003;
            double b_310 = AmBy*b_300 + r_010_300;
            double r_010_310 = AmBy*r_010_300 + r_020_300;
            double r_001_310 = AmBy*r_001_300 + r_011_300;
            double b_130 = AmBx*b_030 + r_100_030;
            double r_100_130 = AmBx*r_100_030 + r_200_030;
            double r_001_130 = AmBx*r_001_030 + r_101_030;
            double b_301 = AmBz*b_300 + r_001_300;
            double r_001_301 = AmBz*r_001_300 + r_002_300;
            double b_103 = AmBx*b_003 + r_100_003;
            double r_100_103 = AmBx*r_100_003 + r_200_003;
            double r_010_103 = AmBx*r_010_003 + r_110_003;
            double b_031 = AmBz*b_030 + r_001_030;
            double r_001_031 = AmBz*r_001_030 + r_002_030;
            double b_013 = AmBy*b_003 + r_010_003;
            double r_010_013 = AmBy*r_010_003 + r_020_003;
            double b_220 = AmBx*b_120 + r_100_120;
            double r_001_220 = AmBx*r_001_120 + r_101_120;
            double b_202 = AmBx*b_102 + r_100_102;
            double r_010_202 = AmBx*r_010_102 + r_110_102;
            double b_022 = AmBy*b_012 + r_010_012;
            double r_100_022 = AmBy*r_100_012 + r_110_012;
            double b_500 = AmBx*b_400 + r_100_400;
            double b_050 = AmBy*b_040 + r_010_040;
            double b_005 = AmBz*b_004 + r_001_004;
            double b_140 = AmBx*b_040 + r_100_040;
            double b_104 = AmBx*b_004 + r_100_004;
            double b_410 = AmBy*b_400 + r_010_400;
            double b_014 = AmBy*b_004 + r_010_004;
            double b_401 = AmBz*b_400 + r_001_400;
            double b_041 = AmBz*b_040 + r_001_040;
            double b_320 = AmBy*b_310 + r_010_310;
            double b_302 = AmBz*b_301 + r_001_301;
            double b_230 = AmBx*b_130 + r_100_130;
            double b_032 = AmBz*b_031 + r_001_031;
            double b_203 = AmBx*b_103 + r_100_103;
            double b_023 = AmBy*b_013 + r_010_013;
            double b_311 = AmBz*b_310 + r_001_310;
            double b_131 = AmBz*b_130 + r_001_130;
            double b_113 = AmBy*b_103 + r_010_103;
            double b_122 = AmBx*b_022 + r_100_022;
            double b_212 = AmBy*b_202 + r_010_202;
            double b_221 = AmBz*b_220 + r_001_220;
            // 10.43 steps per component, 1.71 kb stack
            pOut_[sb*0] = b_104*sd8 - b_122*sd19 + b_140*sd17 - b_302*sd19 + b_320*sd18 + b_500*sd17;
            pOut_[sb*10] = b_113*sd2a - b_131*sd1b - b_311*sd1b;
            pOut_[sb*1] = b_014*sd8 - b_032*sd19 + b_050*sd17 - b_212*sd19 + b_230*sd18 + b_410*sd17;
            pOut_[sb*2] = -b_023*sd1b + b_041*sd1a + b_203*sd1b - b_401*sd1a;
            pOut_[sb*3] = -b_122*sd20 + b_140*sd1f + b_302*sd1e + b_320*sd1d - b_500*sd1c;
            pOut_[sb*4] = -b_131*sd21 + b_311*sd21;
            pOut_[sb*5] = -b_032*sd1e + b_050*sd1c + b_212*sd20 - b_230*sd1d - b_410*sd1f;
            pOut_[sb*6] = b_041*sd22 - b_221*sd23 + b_401*sd22;
            pOut_[sb*7] = b_050*sd26 - b_230*sd25 + b_410*sd24;
            pOut_[sb*8] = b_005 - b_023*sd29 + b_041*sd27 - b_203*sd29 + b_221*sd28 + b_401*sd27;
            pOut_[sb*9] = b_140*sd24 - b_320*sd25 + b_500*sd26;
         }
         return;
      }
      case 6: {
         for (size_t ia = 0; ia < nCount; ++ ia) {
            double const * pAx0 = p0Z + 84 * ia;
            double * pOut_ = pOut + sa * ia;
            //IR_PREFETCH_W(&pOut_[sb*0]);
            //IR_PREFETCH_W(&pOut_[sb*1]);
            //IR_PREFETCH_W(&pOut_[sb*2]);
            //IR_PREFETCH_W(&pOut_[sb*3]);
            //IR_PREFETCH_W(&pOut_[sb*4]);
            //IR_PREFETCH_W(&pOut_[sb*5]);
            //IR_PREFETCH_W(&pOut_[sb*6]);
            //IR_PREFETCH_W(&pOut_[sb*7]);
            //IR_PREFETCH_W(&pOut_[sb*8]);
            //IR_PREFETCH_W(&pOut_[sb*9]);
            //IR_PREFETCH_W(&pOut_[sb*10]);
            //IR_PREFETCH_W(&pOut_[sb*11]);
            //IR_PREFETCH_W(&pOut_[sb*12]);
            double b_100 = AmBx*pAx0[0] + pAx0[1];
            double r_100_100 = AmBx*pAx0[1] + pAx0[4];
            double r_010_100 = AmBx*pAx0[2] + pAx0[7];
            double r_001_100 = AmBx*pAx0[3] + pAx0[8];
            double r_200_100 = AmBx*pAx0[4] + pAx0[10];
            double r_020_100 = AmBx*pAx0[5] + pAx0[13];
            double r_002_100 = AmBx*pAx0[6] + pAx0[14];
            double r_110_100 = AmBx*pAx0[7] + pAx0[15];
            double r_101_100 = AmBx*pAx0[8] + pAx0[17];
            double r_011_100 = AmBx*pAx0[9] + pAx0[19];
            double r_300_100 = AmBx*pAx0[10] + pAx0[20];
            double r_030_100 = AmBx*pAx0[11] + pAx0[24];
            double r_003_100 = AmBx*pAx0[12] + pAx0[26];
            double r_120_100 = AmBx*pAx0[13] + pAx0[29];
            double r_102_100 = AmBx*pAx0[14] + pAx0[30];
            double r_210_100 = AmBx*pAx0[15] + pAx0[23];
            double r_012_100 = AmBx*pAx0[16] + pAx0[32];
            double r_201_100 = AmBx*pAx0[17] + pAx0[25];
            double r_021_100 = AmBx*pAx0[18] + pAx0[33];
            double r_111_100 = AmBx*pAx0[19] + pAx0[34];
            double r_400_100 = AmBx*pAx0[20] + pAx0[35];
            double r_310_100 = AmBx*pAx0[23] + pAx0[40];
            double r_130_100 = AmBx*pAx0[24] + pAx0[46];
            double r_301_100 = AmBx*pAx0[25] + pAx0[42];
            double r_103_100 = AmBx*pAx0[26] + pAx0[48];
            double r_220_100 = AmBx*pAx0[29] + pAx0[44];
            double r_202_100 = AmBx*pAx0[30] + pAx0[45];
            double r_112_100 = AmBx*pAx0[32] + pAx0[54];
            double r_121_100 = AmBx*pAx0[33] + pAx0[55];
            double r_211_100 = AmBx*pAx0[34] + pAx0[50];
            double r_500_100 = AmBx*pAx0[35] + pAx0[56];
            double r_410_100 = AmBx*pAx0[40] + pAx0[59];
            double r_401_100 = AmBx*pAx0[42] + pAx0[61];
            double r_320_100 = AmBx*pAx0[44] + pAx0[65];
            double r_302_100 = AmBx*pAx0[45] + pAx0[66];
            double r_230_100 = AmBx*pAx0[46] + pAx0[71];
            double r_203_100 = AmBx*pAx0[48] + pAx0[72];
            double r_311_100 = AmBx*pAx0[50] + pAx0[76];
            double r_212_100 = AmBx*pAx0[54] + pAx0[77];
            double r_221_100 = AmBx*pAx0[55] + pAx0[79];
            double b_010 = AmBy*pAx0[0] + pAx0[2];
            double r_100_010 = AmBy*pAx0[1] + pAx0[7];
            double r_010_010 = AmBy*pAx0[2] + pAx0[5];
            double r_001_010 = AmBy*pAx0[3] + pAx0[9];
            double r_200_010 = AmBy*pAx0[4] + pAx0[15];
            double r_020_010 = AmBy*pAx0[5] + pAx0[11];
            double r_002_010 = AmBy*pAx0[6] + pAx0[16];
            double r_110_010 = AmBy*pAx0[7] + pAx0[13];
            double r_101_010 = AmBy*pAx0[8] + pAx0[19];
            double r_011_010 = AmBy*pAx0[9] + pAx0[18];
            double r_030_010 = AmBy*pAx0[11] + pAx0[21];
            double r_003_010 = AmBy*pAx0[12] + pAx0[28];
            double r_120_010 = AmBy*pAx0[13] + pAx0[24];
            double r_102_010 = AmBy*pAx0[14] + pAx0[32];
            double r_210_010 = AmBy*pAx0[15] + pAx0[29];
            double r_012_010 = AmBy*pAx0[16] + pAx0[31];
            double r_201_010 = AmBy*pAx0[17] + pAx0[34];
            double r_021_010 = AmBy*pAx0[18] + pAx0[27];
            double r_111_010 = AmBy*pAx0[19] + pAx0[33];
            double r_040_010 = AmBy*pAx0[21] + pAx0[36];
            double r_130_010 = AmBy*pAx0[24] + pAx0[38];
            double r_031_010 = AmBy*pAx0[27] + pAx0[43];
            double r_013_010 = AmBy*pAx0[28] + pAx0[49];
            double r_220_010 = AmBy*pAx0[29] + pAx0[46];
            double r_022_010 = AmBy*pAx0[31] + pAx0[47];
            double r_112_010 = AmBy*pAx0[32] + pAx0[53];
            double r_121_010 = AmBy*pAx0[33] + pAx0[51];
            double r_211_010 = AmBy*pAx0[34] + pAx0[55];
            double r_050_010 = AmBy*pAx0[36] + pAx0[57];
            double r_140_010 = AmBy*pAx0[38] + pAx0[60];
            double r_041_010 = AmBy*pAx0[43] + pAx0[63];
            double r_230_010 = AmBy*pAx0[46] + pAx0[67];
            double r_032_010 = AmBy*pAx0[47] + pAx0[69];
            double r_023_010 = AmBy*pAx0[49] + pAx0[73];
            double r_131_010 = AmBy*pAx0[51] + pAx0[75];
            double r_122_010 = AmBy*pAx0[53] + pAx0[78];
            double r_221_010 = AmBy*pAx0[55] + pAx0[81];
            double b_001 = AmBz*pAx0[0] + pAx0[3];
            double r_100_001 = AmBz*pAx0[1] + pAx0[8];
            double r_010_001 = AmBz*pAx0[2] + pAx0[9];
            double r_001_001 = AmBz*pAx0[3] + pAx0[6];
            double r_200_001 = AmBz*pAx0[4] + pAx0[17];
            double r_020_001 = AmBz*pAx0[5] + pAx0[18];
            double r_002_001 = AmBz*pAx0[6] + pAx0[12];
            double r_110_001 = AmBz*pAx0[7] + pAx0[19];
            double r_101_001 = AmBz*pAx0[8] + pAx0[14];
            double r_011_001 = AmBz*pAx0[9] + pAx0[16];
            double r_003_001 = AmBz*pAx0[12] + pAx0[22];
            double r_120_001 = AmBz*pAx0[13] + pAx0[33];
            double r_102_001 = AmBz*pAx0[14] + pAx0[26];
            double r_210_001 = AmBz*pAx0[15] + pAx0[34];
            double r_012_001 = AmBz*pAx0[16] + pAx0[28];
            double r_201_001 = AmBz*pAx0[17] + pAx0[30];
            double r_021_001 = AmBz*pAx0[18] + pAx0[31];
            double r_111_001 = AmBz*pAx0[19] + pAx0[32];
            double r_004_001 = AmBz*pAx0[22] + pAx0[37];
            double r_103_001 = AmBz*pAx0[26] + pAx0[39];
            double r_013_001 = AmBz*pAx0[28] + pAx0[41];
            double r_220_001 = AmBz*pAx0[29] + pAx0[55];
            double r_202_001 = AmBz*pAx0[30] + pAx0[48];
            double r_022_001 = AmBz*pAx0[31] + pAx0[49];
            double r_112_001 = AmBz*pAx0[32] + pAx0[52];
            double r_121_001 = AmBz*pAx0[33] + pAx0[53];
            double r_211_001 = AmBz*pAx0[34] + pAx0[54];
            double r_005_001 = AmBz*pAx0[37] + pAx0[58];
            double r_104_001 = AmBz*pAx0[39] + pAx0[62];
            double r_014_001 = AmBz*pAx0[41] + pAx0[64];
            double r_203_001 = AmBz*pAx0[48] + pAx0[68];
            double r_023_001 = AmBz*pAx0[49] + pAx0[70];
            double r_113_001 = AmBz*pAx0[52] + pAx0[74];
            double r_122_001 = AmBz*pAx0[53] + pAx0[80];
            double r_212_001 = AmBz*pAx0[54] + pAx0[82];
            double r_221_001 = AmBz*pAx0[55] + pAx0[83];
            double b_200 = AmBx*b_100 + r_100_100;
            double r_100_200 = AmBx*r_100_100 + r_200_100;
            double r_010_200 = AmBx*r_010_100 + r_110_100;
            double r_001_200 = AmBx*r_001_100 + r_101_100;
            double r_200_200 = AmBx*r_200_100 + r_300_100;
            double r_020_200 = AmBx*r_020_100 + r_120_100;
            double r_002_200 = AmBx*r_002_100 + r_102_100;
            double r_110_200 = AmBx*r_110_100 + r_210_100;
            double r_101_200 = AmBx*r_101_100 + r_201_100;
            double r_011_200 = AmBx*r_011_100 + r_111_100;
            double r_300_200 = AmBx*r_300_100 + r_400_100;
            double r_030_200 = AmBx*r_030_100 + r_130_100;
            double r_003_200 = AmBx*r_003_100 + r_103_100;
            double r_120_200 = AmBx*r_120_100 + r_220_100;
            double r_102_200 = AmBx*r_102_100 + r_202_100;
            double r_210_200 = AmBx*r_210_100 + r_310_100;
            double r_012_200 = AmBx*r_012_100 + r_112_100;
            double r_201_200 = AmBx*r_201_100 + r_301_100;
            double r_021_200 = AmBx*r_021_100 + r_121_100;
            double r_111_200 = AmBx*r_111_100 + r_211_100;
            double r_400_200 = AmBx*r_400_100 + r_500_100;
            double r_310_200 = AmBx*r_310_100 + r_410_100;
            double r_130_200 = AmBx*r_130_100 + r_230_100;
            double r_301_200 = AmBx*r_301_100 + r_401_100;
            double r_103_200 = AmBx*r_103_100 + r_203_100;
            double r_220_200 = AmBx*r_220_100 + r_320_100;
            double r_202_200 = AmBx*r_202_100 + r_302_100;
            double r_112_200 = AmBx*r_112_100 + r_212_100;
            double r_121_200 = AmBx*r_121_100 + r_221_100;
            double r_211_200 = AmBx*r_211_100 + r_311_100;
            double b_020 = AmBy*b_010 + r_010_010;
            double r_100_020 = AmBy*r_100_010 + r_110_010;
            double r_010_020 = AmBy*r_010_010 + r_020_010;
            double r_001_020 = AmBy*r_001_010 + r_011_010;
            double r_200_020 = AmBy*r_200_010 + r_210_010;
            double r_020_020 = AmBy*r_020_010 + r_030_010;
            double r_002_020 = AmBy*r_002_010 + r_012_010;
            double r_110_020 = AmBy*r_110_010 + r_120_010;
            double r_101_020 = AmBy*r_101_010 + r_111_010;
            double r_011_020 = AmBy*r_011_010 + r_021_010;
            double r_030_020 = AmBy*r_030_010 + r_040_010;
            double r_003_020 = AmBy*r_003_010 + r_013_010;
            double r_120_020 = AmBy*r_120_010 + r_130_010;
            double r_102_020 = AmBy*r_102_010 + r_112_010;
            double r_210_020 = AmBy*r_210_010 + r_220_010;
            double r_012_020 = AmBy*r_012_010 + r_022_010;
            double r_201_020 = AmBy*r_201_010 + r_211_010;
            double r_021_020 = AmBy*r_021_010 + r_031_010;
            double r_111_020 = AmBy*r_111_010 + r_121_010;
            double r_040_020 = AmBy*r_040_010 + r_050_010;
            double r_130_020 = AmBy*r_130_010 + r_140_010;
            double r_031_020 = AmBy*r_031_010 + r_041_010;
            double r_013_020 = AmBy*r_013_010 + r_023_010;
            double r_220_020 = AmBy*r_220_010 + r_230_010;
            double r_022_020 = AmBy*r_022_010 + r_032_010;
            double r_112_020 = AmBy*r_112_010 + r_122_010;
            double r_121_020 = AmBy*r_121_010 + r_131_010;
            double r_211_020 = AmBy*r_211_010 + r_221_010;
            double b_002 = AmBz*b_001 + r_001_001;
            double r_100_002 = AmBz*r_100_001 + r_101_001;
            double r_010_002 = AmBz*r_010_001 + r_011_001;
            double r_001_002 = AmBz*r_001_001 + r_002_001;
            double r_200_002 = AmBz*r_200_001 + r_201_001;
            double r_020_002 = AmBz*r_020_001 + r_021_001;
            double r_002_002 = AmBz*r_002_001 + r_003_001;
            double r_110_002 = AmBz*r_110_001 + r_111_001;
            double r_101_002 = AmBz*r_101_001 + r_102_001;
            double r_011_002 = AmBz*r_011_001 + r_012_001;
            double r_003_002 = AmBz*r_003_001 + r_004_001;
            double r_120_002 = AmBz*r_120_001 + r_121_001;
            double r_102_002 = AmBz*r_102_001 + r_103_001;
            double r_210_002 = AmBz*r_210_001 + r_211_001;
            double r_012_002 = AmBz*r_012_001 + r_013_001;
            double r_201_002 = AmBz*r_201_001 + r_202_001;
            double r_021_002 = AmBz*r_021_001 + r_022_001;
            double r_111_002 = AmBz*r_111_001 + r_112_001;
            double r_004_002 = AmBz*r_004_001 + r_005_001;
            double r_103_002 = AmBz*r_103_001 + r_104_001;
            double r_013_002 = AmBz*r_013_001 + r_014_001;
            double r_220_002 = AmBz*r_220_001 + r_221_001;
            double r_202_002 = AmBz*r_202_001 + r_203_001;
            double r_022_002 = AmBz*r_022_001 + r_023_001;
            double r_112_002 = AmBz*r_112_001 + r_113_001;
            double r_121_002 = AmBz*r_121_001 + r_122_001;
            double r_211_002 = AmBz*r_211_001 + r_212_001;
            double b_300 = AmBx*b_200 + r_100_200;
            double r_100_300 = AmBx*r_100_200 + r_200_200;
            double r_010_300 = AmBx*r_010_200 + r_110_200;
            double r_001_300 = AmBx*r_001_200 + r_101_200;
            double r_200_300 = AmBx*r_200_200 + r_300_200;
            double r_020_300 = AmBx*r_020_200 + r_120_200;
            double r_002_300 = AmBx*r_002_200 + r_102_200;
            double r_110_300 = AmBx*r_110_200 + r_210_200;
            double r_101_300 = AmBx*r_101_200 + r_201_200;
            double r_011_300 = AmBx*r_011_200 + r_111_200;
            double r_300_300 = AmBx*r_300_200 + r_400_200;
            double r_030_300 = AmBx*r_030_200 + r_130_200;
            double r_003_300 = AmBx*r_003_200 + r_103_200;
            double r_120_300 = AmBx*r_120_200 + r_220_200;
            double r_102_300 = AmBx*r_102_200 + r_202_200;
            double r_210_300 = AmBx*r_210_200 + r_310_200;
            double r_012_300 = AmBx*r_012_200 + r_112_200;
            double r_201_300 = AmBx*r_201_200 + r_301_200;
            double r_021_300 = AmBx*r_021_200 + r_121_200;
            double r_111_300 = AmBx*r_111_200 + r_211_200;
            double b_030 = AmBy*b_020 + r_010_020;
            double r_100_030 = AmBy*r_100_020 + r_110_020;
            double r_010_030 = AmBy*r_010_020 + r_020_020;
            double r_001_030 = AmBy*r_001_020 + r_011_020;
            double r_200_030 = AmBy*r_200_020 + r_210_020;
            double r_020_030 = AmBy*r_020_020 + r_030_020;
            double r_002_030 = AmBy*r_002_020 + r_012_020;
            double r_110_030 = AmBy*r_110_020 + r_120_020;
            double r_101_030 = AmBy*r_101_020 + r_111_020;
            double r_011_030 = AmBy*r_011_020 + r_021_020;
            double r_030_030 = AmBy*r_030_020 + r_040_020;
            double r_003_030 = AmBy*r_003_020 + r_013_020;
            double r_120_030 = AmBy*r_120_020 + r_130_020;
            double r_102_030 = AmBy*r_102_020 + r_112_020;
            double r_210_030 = AmBy*r_210_020 + r_220_020;
            double r_012_030 = AmBy*r_012_020 + r_022_020;
            double r_201_030 = AmBy*r_201_020 + r_211_020;
            double r_021_030 = AmBy*r_021_020 + r_031_020;
            double r_111_030 = AmBy*r_111_020 + r_121_020;
            double b_003 = AmBz*b_002 + r_001_002;
            double r_100_003 = AmBz*r_100_002 + r_101_002;
            double r_010_003 = AmBz*r_010_002 + r_011_002;
            double r_001_003 = AmBz*r_001_002 + r_002_002;
            double r_200_003 = AmBz*r_200_002 + r_201_002;
            double r_020_003 = AmBz*r_020_002 + r_021_002;
            double r_002_003 = AmBz*r_002_002 + r_003_002;
            double r_110_003 = AmBz*r_110_002 + r_111_002;
            double r_101_003 = AmBz*r_101_002 + r_102_002;
            double r_011_003 = AmBz*r_011_002 + r_012_002;
            double r_003_003 = AmBz*r_003_002 + r_004_002;
            double r_120_003 = AmBz*r_120_002 + r_121_002;
            double r_102_003 = AmBz*r_102_002 + r_103_002;
            double r_210_003 = AmBz*r_210_002 + r_211_002;
            double r_012_003 = AmBz*r_012_002 + r_013_002;
            double r_201_003 = AmBz*r_201_002 + r_202_002;
            double r_021_003 = AmBz*r_021_002 + r_022_002;
            double r_111_003 = AmBz*r_111_002 + r_112_002;
            double b_012 = AmBy*b_002 + r_010_002;
            double r_100_012 = AmBy*r_100_002 + r_110_002;
            double r_010_012 = AmBy*r_010_002 + r_020_002;
            double r_200_012 = AmBy*r_200_002 + r_210_002;
            double r_110_012 = AmBy*r_110_002 + r_120_002;
            double r_210_012 = AmBy*r_210_002 + r_220_002;
            double b_400 = AmBx*b_300 + r_100_300;
            double r_100_400 = AmBx*r_100_300 + r_200_300;
            double r_010_400 = AmBx*r_010_300 + r_110_300;
            double r_001_400 = AmBx*r_001_300 + r_101_300;
            double r_200_400 = AmBx*r_200_300 + r_300_300;
            double r_020_400 = AmBx*r_020_300 + r_120_300;
            double r_002_400 = AmBx*r_002_300 + r_102_300;
            double r_110_400 = AmBx*r_110_300 + r_210_300;
            double r_101_400 = AmBx*r_101_300 + r_201_300;
            double r_011_400 = AmBx*r_011_300 + r_111_300;
            double b_040 = AmBy*b_030 + r_010_030;
            double r_100_040 = AmBy*r_100_030 + r_110_030;
            double r_010_040 = AmBy*r_010_030 + r_020_030;
            double r_001_040 = AmBy*r_001_030 + r_011_030;
            double r_200_040 = AmBy*r_200_030 + r_210_030;
            double r_020_040 = AmBy*r_020_030 + r_030_030;
            double r_002_040 = AmBy*r_002_030 + r_012_030;
            double r_110_040 = AmBy*r_110_030 + r_120_030;
            double r_101_040 = AmBy*r_101_030 + r_111_030;
            double r_011_040 = AmBy*r_011_030 + r_021_030;
            double b_004 = AmBz*b_003 + r_001_003;
            double r_100_004 = AmBz*r_100_003 + r_101_003;
            double r_010_004 = AmBz*r_010_003 + r_011_003;
            double r_001_004 = AmBz*r_001_003 + r_002_003;
            double r_200_004 = AmBz*r_200_003 + r_201_003;
            double r_020_004 = AmBz*r_020_003 + r_021_003;
            double r_002_004 = AmBz*r_002_003 + r_003_003;
            double r_110_004 = AmBz*r_110_003 + r_111_003;
            double r_101_004 = AmBz*r_101_003 + r_102_003;
            double r_011_004 = AmBz*r_011_003 + r_012_003;
            double b_310 = AmBy*b_300 + r_010_300;
            double r_010_310 = AmBy*r_010_300 + r_020_300;
            double r_001_310 = AmBy*r_001_300 + r_011_300;
            double r_020_310 = AmBy*r_020_300 + r_030_300;
            double r_011_310 = AmBy*r_011_300 + r_021_300;
            double b_130 = AmBx*b_030 + r_100_030;
            double r_100_130 = AmBx*r_100_030 + r_200_030;
            double r_001_130 = AmBx*r_001_030 + r_101_030;
            double r_101_130 = AmBx*r_101_030 + r_201_030;
            double b_301 = AmBz*b_300 + r_001_300;
            double r_010_301 = AmBz*r_010_300 + r_011_300;
            double r_001_301 = AmBz*r_001_300 + r_002_300;
            double r_002_301 = AmBz*r_002_300 + r_003_300;
            double r_011_301 = AmBz*r_011_300 + r_012_300;
            double b_103 = AmBx*b_003 + r_100_003;
            double r_100_103 = AmBx*r_100_003 + r_200_003;
            double r_010_103 = AmBx*r_010_003 + r_110_003;
            double r_110_103 = AmBx*r_110_003 + r_210_003;
            double b_031 = AmBz*b_030 + r_001_030;
            double r_100_031 = AmBz*r_100_030 + r_101_030;
            double r_001_031 = AmBz*r_001_030 + r_002_030;
            double r_002_031 = AmBz*r_002_030 + r_003_030;
            double r_101_031 = AmBz*r_101_030 + r_102_030;
            double b_013 = AmBy*b_003 + r_010_003;
            double r_100_013 = AmBy*r_100_003 + r_110_003;
            double r_010_013 = AmBy*r_010_003 + r_020_003;
            double r_110_013 = AmBy*r_110_003 + r_120_003;
            double b_022 = AmBy*b_012 + r_010_012;
            double r_100_022 = AmBy*r_100_012 + r_110_012;
            double r_200_022 = AmBy*r_200_012 + r_210_012;
            double b_500 = AmBx*b_400 + r_100_400;
            double r_100_500 = AmBx*r_100_400 + r_200_400;
            double r_010_500 = AmBx*r_010_400 + r_110_400;
            double r_001_500 = AmBx*r_001_400 + r_101_400;
            double b_050 = AmBy*b_040 + r_010_040;
            double r_100_050 = AmBy*r_100_040 + r_110_040;
            double r_010_050 = AmBy*r_010_040 + r_020_040;
            double r_001_050 = AmBy*r_001_040 + r_011_040;
            double b_005 = AmBz*b_004 + r_001_004;
            double r_100_005 = AmBz*r_100_004 + r_101_004;
            double r_010_005 = AmBz*r_010_004 + r_011_004;
            double r_001_005 = AmBz*r_001_004 + r_002_004;
            double b_140 = AmBx*b_040 + r_100_040;
            double r_100_140 = AmBx*r_100_040 + r_200_040;
            double r_001_140 = AmBx*r_001_040 + r_101_040;
            double b_104 = AmBx*b_004 + r_100_004;
            double r_100_104 = AmBx*r_100_004 + r_200_004;
            double r_010_104 = AmBx*r_010_004 + r_110_004;
            double b_410 = AmBy*b_400 + r_010_400;
            double r_010_410 = AmBy*r_010_400 + r_020_400;
            double r_001_410 = AmBy*r_001_400 + r_011_400;
            double b_014 = AmBy*b_004 + r_010_004;
            double r_010_014 = AmBy*r_010_004 + r_020_004;
            double b_401 = AmBz*b_400 + r_001_400;
            double r_001_401 = AmBz*r_001_400 + r_002_400;
            double b_041 = AmBz*b_040 + r_001_040;
            double r_001_041 = AmBz*r_001_040 + r_002_040;
            double b_320 = AmBy*b_310 + r_010_310;
            double r_010_320 = AmBy*r_010_310 + r_020_310;
            double r_001_320 = AmBy*r_001_310 + r_011_310;
            double b_302 = AmBz*b_301 + r_001_301;
            double r_010_302 = AmBz*r_010_301 + r_011_301;
            double r_001_302 = AmBz*r_001_301 + r_002_301;
            double b_230 = AmBx*b_130 + r_100_130;
            double r_001_230 = AmBx*r_001_130 + r_101_130;
            double b_032 = AmBz*b_031 + r_001_031;
            double r_100_032 = AmBz*r_100_031 + r_101_031;
            double r_001_032 = AmBz*r_001_031 + r_002_031;
            double b_203 = AmBx*b_103 + r_100_103;
            double r_010_203 = AmBx*r_010_103 + r_110_103;
            double b_023 = AmBy*b_013 + r_010_013;
            double r_100_023 = AmBy*r_100_013 + r_110_013;
            double b_122 = AmBx*b_022 + r_100_022;
            double r_100_122 = AmBx*r_100_022 + r_200_022;
            double b_600 = AmBx*b_500 + r_100_500;
            double b_060 = AmBy*b_050 + r_010_050;
            double b_006 = AmBz*b_005 + r_001_005;
            double b_510 = AmBy*b_500 + r_010_500;
            double b_150 = AmBx*b_050 + r_100_050;
            double b_501 = AmBz*b_500 + r_001_500;
            double b_105 = AmBx*b_005 + r_100_005;
            double b_051 = AmBz*b_050 + r_001_050;
            double b_015 = AmBy*b_005 + r_010_005;
            double b_420 = AmBy*b_410 + r_010_410;
            double b_402 = AmBz*b_401 + r_001_401;
            double b_240 = AmBx*b_140 + r_100_140;
            double b_204 = AmBx*b_104 + r_100_104;
            double b_042 = AmBz*b_041 + r_001_041;
            double b_024 = AmBy*b_014 + r_010_014;
            double b_330 = AmBy*b_320 + r_010_320;
            double b_303 = AmBz*b_302 + r_001_302;
            double b_033 = AmBz*b_032 + r_001_032;
            double b_114 = AmBy*b_104 + r_010_104;
            double b_141 = AmBz*b_140 + r_001_140;
            double b_411 = AmBz*b_410 + r_001_410;
            double b_312 = AmBy*b_302 + r_010_302;
            double b_132 = AmBx*b_032 + r_100_032;
            double b_321 = AmBz*b_320 + r_001_320;
            double b_123 = AmBx*b_023 + r_100_023;
            double b_231 = AmBz*b_230 + r_001_230;
            double b_213 = AmBy*b_203 + r_010_203;
            double b_222 = AmBx*b_122 + r_100_122;
            // 14.04 steps per component, 3.07 kb stack
            pOut_[sb*0] = -b_060*sd2b + b_240*sd2c - b_420*sd2c + b_600*sd2b;
            pOut_[sb*10] = -b_033*sd38 + b_051*sd3b + b_213*sd3e - b_231*sd3c - b_411*sd3d;
            pOut_[sb*11] = b_015*sd49 - b_033*sd48 + b_051*sd46 - b_213*sd48 + b_231*sd47 + b_411*sd46;
            pOut_[sb*12] = b_105*sd49 - b_123*sd48 + b_141*sd46 - b_303*sd48 + b_321*sd47 + b_501*sd46;
            pOut_[sb*1] = b_114*sd2f - b_132*sd2f + b_150*sd2d - b_312*sd2f + b_330*sd2e + b_510*sd2d;
            pOut_[sb*2] = b_141*sd32 - b_321*sd31 + b_501*sd30;
            pOut_[sb*3] = b_042*sd35 - b_060*sd33 - b_222*sd36 + b_240*sd34 + b_402*sd35 + b_420*sd34 - b_600*sd33;
            pOut_[sb*4] = b_051*sd30 - b_231*sd31 + b_411*sd32;
            pOut_[sb*5] = -b_024*sd38 + b_042*sd38 - b_060*sd37 + b_204*sd38 - b_240*sd37 - b_402*sd38 + b_420*sd37 + b_600*sd37;
            pOut_[sb*6] = b_150*sd39 - b_330*sd3a + b_510*sd39;
            pOut_[sb*7] = -b_123*sd3e + b_141*sd3d + b_303*sd38 + b_321*sd3c - b_501*sd3b;
            pOut_[sb*8] = -b_132*sd40 + b_150*sd3f + b_312*sd40 - b_510*sd3f;
            pOut_[sb*9] = b_006 - b_024*sd45 + b_042*sd43 - b_060*sd41 - b_204*sd45 + b_222*sd44 - b_240*sd42 + b_402*sd43 - b_420*sd42 - b_600*sd41;
         }
         return;
      }
   }
   //assert(0);
}

// Cartesian -> Solid harmonic transforms: Transform a matrix
// nCartY(l) x N to N x (2*l+1).
static void ShTrC6_TN(double * pOut, double const * pIn, size_t N)
{
   for (size_t i = 0; i < N; ++ i) {
      double z0 = pIn[0], z1 = pIn[1], z3 = pIn[3], z4 = pIn[4], z5 = pIn[5], z7 = pIn[7], z9 = pIn[9], za = pIn[10], zb = pIn[11], zc = pIn[12], zd = pIn[13], ze = pIn[14], zf = pIn[15], z10 = pIn[16], z11 = pIn[17], z13 = pIn[19], z14 = pIn[20], z15 = pIn[21], z16 = pIn[22], z17 = pIn[23], z18 = pIn[24], z19 = pIn[25], z1a = pIn[26], z1b = pIn[27];
      pOut[N*0] = sd2b*z0 - sd2b*z1 - sd2c*z9 + sd2c*zb;
      pOut[N*1] = pIn[18]*sd2f + sd2d*z3 + sd2d*z4 + sd2e*zf - sd2f*z15 - sd2f*z16;
      pOut[N*2] = sd30*z5 - sd31*z17 + sd32*z13;
      pOut[N*3] = -sd33*z0 - sd33*z1 + sd34*z9 + sd34*zb + sd35*za + sd35*zd - sd36*z1b;
      pOut[N*4] = sd30*z7 - sd31*z19 + sd32*z14;
      pOut[N*5] = sd37*z0 - sd37*z1 + sd37*z9 - sd37*zb - sd38*za + sd38*zc + sd38*zd - sd38*ze;
      pOut[N*6] = sd39*z3 + sd39*z4 - sd3a*zf;
      pOut[N*7] = sd38*z10 - sd3b*z5 + sd3c*z17 + sd3d*z13 - sd3e*z18;
      pOut[N*8] = -sd3f*z3 + sd3f*z4 + sd40*z15 - sd40*z16;
      pOut[N*9] = pIn[2] - sd41*z0 - sd41*z1 - sd42*z9 - sd42*zb + sd43*za + sd43*zd + sd44*z1b - sd45*zc - sd45*ze;
      pOut[N*10] = -sd38*z11 + sd3b*z7 - sd3c*z19 - sd3d*z14 + sd3e*z1a;
      pOut[N*11] = pIn[8]*sd49 + sd46*z14 + sd46*z7 + sd47*z19 - sd48*z11 - sd48*z1a;
      pOut[N*12] = pIn[6]*sd49 + sd46*z13 + sd46*z5 + sd47*z17 - sd48*z10 - sd48*z18;
      pOut += 1;
      pIn += 28;
   }
   return;
}

static void ShTrC5_TN(double * pOut, double const * pIn, size_t N)
{
   for (size_t i = 0; i < N; ++ i) {
      double z0 = pIn[0], z1 = pIn[1], z3 = pIn[3], z5 = pIn[5], z7 = pIn[7], z8 = pIn[8], z9 = pIn[9], za = pIn[10], zb = pIn[11], zc = pIn[12], zd = pIn[13], ze = pIn[14], zf = pIn[15], z10 = pIn[16], z12 = pIn[18], z13 = pIn[19], z14 = pIn[20];
      pOut[N*0] = pIn[4]*sd8 + sd17*z0 + sd17*z3 + sd18*z9 - sd19*z12 - sd19*za;
      pOut[N*1] = pIn[6]*sd8 + sd17*z1 + sd17*z5 + sd18*zb - sd19*z13 - sd19*zc;
      pOut[N*2] = -sd1a*z7 + sd1a*z8 + sd1b*zd - sd1b*ze;
      pOut[N*3] = -sd1c*z0 + sd1d*z9 + sd1e*za + sd1f*z3 - sd20*z12;
      pOut[N*4] = -sd21*z10 + sd21*zf;
      pOut[N*5] = sd1c*z1 - sd1d*zb - sd1e*zc - sd1f*z5 + sd20*z13;
      pOut[N*6] = sd22*z7 + sd22*z8 - sd23*z14;
      pOut[N*7] = sd24*z5 - sd25*zb + sd26*z1;
      pOut[N*8] = pIn[2] + sd27*z7 + sd27*z8 + sd28*z14 - sd29*zd - sd29*ze;
      pOut[N*9] = sd24*z3 - sd25*z9 + sd26*z0;
      pOut[N*10] = pIn[17]*sd2a - sd1b*z10 - sd1b*zf;
      pOut += 1;
      pIn += 21;
   }
   return;
}

static void ShTrC4_TN(double * pOut, double const * pIn, size_t N)
{
   for (size_t i = 0; i < N; ++ i) {
      double z0 = pIn[0], z1 = pIn[1], z3 = pIn[3], z4 = pIn[4], z5 = pIn[5], z7 = pIn[7], z9 = pIn[9], za = pIn[10], zb = pIn[11], zd = pIn[13], ze = pIn[14];
      pOut[N*0] = pIn[2] + sda*z0 + sda*z1 + sdb*z9 - sdc*za - sdc*zb;
      pOut[N*1] = pIn[12]*sde - sdd*z3 - sdd*z4;
      pOut[N*2] = pIn[6]*sdf - sd7*z5 - sd7*zd;
      pOut[N*3] = sd10*z0 + sd10*z1 - sd11*z9;
      pOut[N*4] = pIn[8]*sdf - sd7*z7 - sd7*ze;
      pOut[N*5] = -sd12*z0 + sd12*z1 + sd13*za - sd13*zb;
      pOut[N*6] = sd14*z3 - sd14*z4;
      pOut[N*7] = sd15*z5 - sd16*zd;
      pOut[N*8] = -sd15*z7 + sd16*ze;
      pOut += 1;
      pIn += 15;
   }
   return;
}

static void ShTrC3_TN(double * pOut, double const * pIn, size_t N)
{
   for (size_t i = 0; i < N; ++ i) {
      double z0 = pIn[0], z1 = pIn[1], z3 = pIn[3], z5 = pIn[5], z7 = pIn[7], z8 = pIn[8];
      pOut[N*0] = pIn[4]*sd4 - sd3*z0 - sd3*z3;
      pOut[N*1] = pIn[6]*sd4 - sd3*z1 - sd3*z5;
      pOut[N*2] = pIn[2] - sd5*z7 - sd5*z8;
      pOut[N*3] = sd6*z0 - sd7*z3;
      pOut[N*4] = pIn[9]*sd8;
      pOut[N*5] = -sd6*z1 + sd7*z5;
      pOut[N*6] = sd9*z7 - sd9*z8;
      pOut += 1;
      pIn += 10;
   }
   return;
}

static void ShTrC2_TN(double * pOut, double const * pIn, size_t N)
{
   for (size_t i = 0; i < N; ++ i) {
      double z0 = pIn[0], z1 = pIn[1];
      pOut[N*0] = pIn[2] - sd0*z0 - sd0*z1;
      pOut[N*1] = pIn[3]*sd1;
      pOut[N*2] = pIn[4]*sd1;
      pOut[N*3] = sd2*z0 - sd2*z1;
      pOut[N*4] = pIn[5]*sd1;
      pOut += 1;
      pIn += 6;
   }
   return;
}

static void ShTrC1_TN(double * pOut, double const * pIn, size_t N)
{
   for (size_t i = 0; i < N; ++ i) {
      pOut[N*0] = pIn[0];
      pOut[N*1] = pIn[1];
      pOut[N*2] = pIn[2];
      pOut += 1;
      pIn += 3;
   }
   return;
}

static void ShTrC0_TN(double * pOut, double const * pIn, size_t N)
{
   for (size_t i = 0; i < N; ++ i) {
      pOut[N*0] = pIn[0];
      pOut += 1;
      pIn += 1;
   }
   return;
}

static void ShTrC6_NsN(double * pOut, size_t so, double const * pIn, size_t N)
{
   for (size_t i = 0; i < N; ++ i) {
      double z0 = pIn[0], z1 = pIn[1], z3 = pIn[3], z4 = pIn[4], z5 = pIn[5], z7 = pIn[7], z9 = pIn[9], za = pIn[10], zb = pIn[11], zc = pIn[12], zd = pIn[13], ze = pIn[14], zf = pIn[15], z10 = pIn[16], z11 = pIn[17], z13 = pIn[19], z14 = pIn[20], z15 = pIn[21], z16 = pIn[22], z17 = pIn[23], z18 = pIn[24], z19 = pIn[25], z1a = pIn[26], z1b = pIn[27];
      pOut[so*0] = sd2b*z0 - sd2b*z1 - sd2c*z9 + sd2c*zb;
      pOut[so*1] = pIn[18]*sd2f + sd2d*z3 + sd2d*z4 + sd2e*zf - sd2f*z15 - sd2f*z16;
      pOut[so*2] = sd30*z5 - sd31*z17 + sd32*z13;
      pOut[so*3] = -sd33*z0 - sd33*z1 + sd34*z9 + sd34*zb + sd35*za + sd35*zd - sd36*z1b;
      pOut[so*4] = sd30*z7 - sd31*z19 + sd32*z14;
      pOut[so*5] = sd37*z0 - sd37*z1 + sd37*z9 - sd37*zb - sd38*za + sd38*zc + sd38*zd - sd38*ze;
      pOut[so*6] = sd39*z3 + sd39*z4 - sd3a*zf;
      pOut[so*7] = sd38*z10 - sd3b*z5 + sd3c*z17 + sd3d*z13 - sd3e*z18;
      pOut[so*8] = -sd3f*z3 + sd3f*z4 + sd40*z15 - sd40*z16;
      pOut[so*9] = pIn[2] - sd41*z0 - sd41*z1 - sd42*z9 - sd42*zb + sd43*za + sd43*zd + sd44*z1b - sd45*zc - sd45*ze;
      pOut[so*10] = -sd38*z11 + sd3b*z7 - sd3c*z19 - sd3d*z14 + sd3e*z1a;
      pOut[so*11] = pIn[8]*sd49 + sd46*z14 + sd46*z7 + sd47*z19 - sd48*z11 - sd48*z1a;
      pOut[so*12] = pIn[6]*sd49 + sd46*z13 + sd46*z5 + sd47*z17 - sd48*z10 - sd48*z18;
      pOut += 13*so;
      pIn += 28;
   }
   return;
}

static void ShTrC5_NsN(double * pOut, size_t so, double const * pIn, size_t N)
{
   for (size_t i = 0; i < N; ++ i) {
      double z0 = pIn[0], z1 = pIn[1], z3 = pIn[3], z5 = pIn[5], z7 = pIn[7], z8 = pIn[8], z9 = pIn[9], za = pIn[10], zb = pIn[11], zc = pIn[12], zd = pIn[13], ze = pIn[14], zf = pIn[15], z10 = pIn[16], z12 = pIn[18], z13 = pIn[19], z14 = pIn[20];
      pOut[so*0] = pIn[4]*sd8 + sd17*z0 + sd17*z3 + sd18*z9 - sd19*z12 - sd19*za;
      pOut[so*1] = pIn[6]*sd8 + sd17*z1 + sd17*z5 + sd18*zb - sd19*z13 - sd19*zc;
      pOut[so*2] = -sd1a*z7 + sd1a*z8 + sd1b*zd - sd1b*ze;
      pOut[so*3] = -sd1c*z0 + sd1d*z9 + sd1e*za + sd1f*z3 - sd20*z12;
      pOut[so*4] = -sd21*z10 + sd21*zf;
      pOut[so*5] = sd1c*z1 - sd1d*zb - sd1e*zc - sd1f*z5 + sd20*z13;
      pOut[so*6] = sd22*z7 + sd22*z8 - sd23*z14;
      pOut[so*7] = sd24*z5 - sd25*zb + sd26*z1;
      pOut[so*8] = pIn[2] + sd27*z7 + sd27*z8 + sd28*z14 - sd29*zd - sd29*ze;
      pOut[so*9] = sd24*z3 - sd25*z9 + sd26*z0;
      pOut[so*10] = pIn[17]*sd2a - sd1b*z10 - sd1b*zf;
      pOut += 11*so;
      pIn += 21;
   }
   return;
}

static void ShTrC4_NsN(double * pOut, size_t so, double const * pIn, size_t N)
{
   for (size_t i = 0; i < N; ++ i) {
      double z0 = pIn[0], z1 = pIn[1], z3 = pIn[3], z4 = pIn[4], z5 = pIn[5], z7 = pIn[7], z9 = pIn[9], za = pIn[10], zb = pIn[11], zd = pIn[13], ze = pIn[14];
      pOut[so*0] = pIn[2] + sda*z0 + sda*z1 + sdb*z9 - sdc*za - sdc*zb;
      pOut[so*1] = pIn[12]*sde - sdd*z3 - sdd*z4;
      pOut[so*2] = pIn[6]*sdf - sd7*z5 - sd7*zd;
      pOut[so*3] = sd10*z0 + sd10*z1 - sd11*z9;
      pOut[so*4] = pIn[8]*sdf - sd7*z7 - sd7*ze;
      pOut[so*5] = -sd12*z0 + sd12*z1 + sd13*za - sd13*zb;
      pOut[so*6] = sd14*z3 - sd14*z4;
      pOut[so*7] = sd15*z5 - sd16*zd;
      pOut[so*8] = -sd15*z7 + sd16*ze;
      pOut += 9*so;
      pIn += 15;
   }
   return;
}

static void ShTrC3_NsN(double * pOut, size_t so, double const * pIn, size_t N)
{
   for (size_t i = 0; i < N; ++ i) {
      double z0 = pIn[0], z1 = pIn[1], z3 = pIn[3], z5 = pIn[5], z7 = pIn[7], z8 = pIn[8];
      pOut[so*0] = pIn[4]*sd4 - sd3*z0 - sd3*z3;
      pOut[so*1] = pIn[6]*sd4 - sd3*z1 - sd3*z5;
      pOut[so*2] = pIn[2] - sd5*z7 - sd5*z8;
      pOut[so*3] = sd6*z0 - sd7*z3;
      pOut[so*4] = pIn[9]*sd8;
      pOut[so*5] = -sd6*z1 + sd7*z5;
      pOut[so*6] = sd9*z7 - sd9*z8;
      pOut += 7*so;
      pIn += 10;
   }
   return;
}

static void ShTrC2_NsN(double * pOut, size_t so, double const * pIn, size_t N)
{
   for (size_t i = 0; i < N; ++ i) {
      double z0 = pIn[0], z1 = pIn[1];
      pOut[so*0] = pIn[2] - sd0*z0 - sd0*z1;
      pOut[so*1] = pIn[3]*sd1;
      pOut[so*2] = pIn[4]*sd1;
      pOut[so*3] = sd2*z0 - sd2*z1;
      pOut[so*4] = pIn[5]*sd1;
      pOut += 5*so;
      pIn += 6;
   }
   return;
}

static void ShTrC1_NsN(double * pOut, size_t so, double const * pIn, size_t N)
{
   for (size_t i = 0; i < N; ++ i) {
      pOut[so*0] = pIn[0];
      pOut[so*1] = pIn[1];
      pOut[so*2] = pIn[2];
      pOut += 3*so;
      pIn += 3;
   }
   return;
}

static void ShTrC0_NsN(double * pOut, size_t so, double const * pIn, size_t N)
{
   for (size_t i = 0; i < N; ++ i) {
      pOut[so*0] = pIn[0];
      pOut += 1*so;
      pIn += 1;
   }
   return;
}

// Cartesian -> Solid harmonic transform: Transform a matrix
// nCartY(l) x N to N x (2*l+1).
void ShTrN_TN(double * pOut, double const * pIn, size_t N, unsigned l)
{
   switch(l) {
      case 0: return ShTrC0_TN(pOut, pIn, N);
      case 1: return ShTrC1_TN(pOut, pIn, N);
      case 2: return ShTrC2_TN(pOut, pIn, N);
      case 3: return ShTrC3_TN(pOut, pIn, N);
      case 4: return ShTrC4_TN(pOut, pIn, N);
      case 5: return ShTrC5_TN(pOut, pIn, N);
      case 6: return ShTrC6_TN(pOut, pIn, N);
   }
   //assert(0);
}

// transform cartesians centered at A and multiplied by (2 ZetaA)^n, to 1st derivative integrals with respect to A at center A.
// input p0Z: nCartX(lb-1) x nCount matrix of unscaled (a0| sets.
// input p2Z: nCartX(lb+1) x nCount matrix of (2 ZetaA)^1-scaled (a0| sets.
// output is nCartX(lb) x nCartY(la) x 3 x nCount, with middle dimension for derivatives x y z. Linear output, no strides.
void AmrrDerivA1(double * pOut, double const * p0Z, double const * p2Z, unsigned lab, unsigned la, size_t nCount)
{
   unsigned const
      lb = lab - la;
   size_t
      nAcB = nCartX(lb);
   switch(la) {
      case 0: {
         for (size_t ic = 0; ic < nCount; ++ ic) {
            double const * pAx1 = &p2Z[nCartX(lb+1)*ic];
            for (size_t xb = 0; xb < nAcB; ++ xb) {
               cart_vec_t const *ivb = &iv2x[ix2v[xb]];
               double T[1*3];
               size_t const sd = 1;   // stride for derivative components in T
               double a1_100 = pAx1[ivb[1]];
               double a1_010 = pAx1[ivb[15]];
               double a1_001 = pAx1[ivb[225]];
               T[0+sd*0] = a1_100;
               T[0+sd*1] = a1_010;
               T[0+sd*2] = a1_001;
               // 2.00 steps per component, 0.02 kb stack
               ShTrC0_NsN(&pOut[xb+nAcB*1*3*ic], nAcB, T, 3);
            }
         }
         return;
      }
      case 1: {
         for (size_t ic = 0; ic < nCount; ++ ic) {
            double const * pAx0 = &p0Z[nCartX(lb+0)*ic];
            double const * pAx1 = &p2Z[nCartX(lb+2)*ic];
            for (size_t xb = 0; xb < nAcB; ++ xb) {
               cart_vec_t const *ivb = &iv2x[ix2v[xb]];
               double T[3*3];
               size_t const sd = 3;   // stride for derivative components in T
               double a0_000 = pAx0[ivb[0]];
               double a1_200 = pAx1[ivb[2]];
               double a1_020 = pAx1[ivb[30]];
               double a1_002 = pAx1[ivb[450]];
               double a1_110 = pAx1[ivb[16]];
               double a1_101 = pAx1[ivb[226]];
               double a1_011 = pAx1[ivb[240]];
               T[0+sd*0] = -a0_000 + a1_200;
               T[1+sd*0] = a1_110;
               T[2+sd*0] = a1_101;
               T[0+sd*1] = a1_110;
               T[1+sd*1] = -a0_000 + a1_020;
               T[2+sd*1] = a1_011;
               T[0+sd*2] = a1_101;
               T[1+sd*2] = a1_011;
               T[2+sd*2] = -a0_000 + a1_002;
               // 1.78 steps per component, 0.05 kb stack
               ShTrC1_NsN(&pOut[xb+nAcB*3*3*ic], nAcB, T, 3);
            }
         }
         return;
      }
      case 2: {
         for (size_t ic = 0; ic < nCount; ++ ic) {
            double const * pAx0 = &p0Z[nCartX(lb+1)*ic];
            double const * pAx1 = &p2Z[nCartX(lb+3)*ic];
            for (size_t xb = 0; xb < nAcB; ++ xb) {
               cart_vec_t const *ivb = &iv2x[ix2v[xb]];
               double T[6*3];
               size_t const sd = 6;   // stride for derivative components in T
               double a0_100 = pAx0[ivb[1]];
               double a0_010 = pAx0[ivb[15]];
               double a0_001 = pAx0[ivb[225]];
               double a1_300 = pAx1[ivb[3]];
               double a1_030 = pAx1[ivb[45]];
               double a1_003 = pAx1[ivb[675]];
               double a1_120 = pAx1[ivb[31]];
               double a1_102 = pAx1[ivb[451]];
               double a1_210 = pAx1[ivb[17]];
               double a1_012 = pAx1[ivb[465]];
               double a1_201 = pAx1[ivb[227]];
               double a1_021 = pAx1[ivb[255]];
               double a1_111 = pAx1[ivb[241]];
               T[0+sd*0] = -2*a0_100 + a1_300;
               T[1+sd*0] = a1_120;
               T[2+sd*0] = a1_102;
               T[3+sd*0] = -a0_010 + a1_210;
               T[4+sd*0] = -a0_001 + a1_201;
               T[5+sd*0] = a1_111;
               T[0+sd*1] = a1_210;
               T[1+sd*1] = -2*a0_010 + a1_030;
               T[2+sd*1] = a1_012;
               T[3+sd*1] = -a0_100 + a1_120;
               T[4+sd*1] = a1_111;
               T[5+sd*1] = -a0_001 + a1_021;
               T[0+sd*2] = a1_201;
               T[1+sd*2] = a1_021;
               T[2+sd*2] = -2*a0_001 + a1_003;
               T[3+sd*2] = a1_111;
               T[4+sd*2] = -a0_100 + a1_102;
               T[5+sd*2] = -a0_010 + a1_012;
               // 1.72 steps per component, 0.10 kb stack
               ShTrC2_NsN(&pOut[xb+nAcB*5*3*ic], nAcB, T, 3);
            }
         }
         return;
      }
      case 3: {
         for (size_t ic = 0; ic < nCount; ++ ic) {
            double const * pAx0 = &p0Z[nCartX(lb+2)*ic];
            double const * pAx1 = &p2Z[nCartX(lb+4)*ic];
            for (size_t xb = 0; xb < nAcB; ++ xb) {
               cart_vec_t const *ivb = &iv2x[ix2v[xb]];
               double T[10*3];
               size_t const sd = 10;   // stride for derivative components in T
               double a0_200 = pAx0[ivb[2]];
               double a0_020 = pAx0[ivb[30]];
               double a0_002 = pAx0[ivb[450]];
               double a0_110 = pAx0[ivb[16]];
               double a0_101 = pAx0[ivb[226]];
               double a0_011 = pAx0[ivb[240]];
               double a1_400 = pAx1[ivb[4]];
               double a1_040 = pAx1[ivb[60]];
               double a1_004 = pAx1[ivb[900]];
               double a1_310 = pAx1[ivb[18]];
               double a1_130 = pAx1[ivb[46]];
               double a1_301 = pAx1[ivb[228]];
               double a1_103 = pAx1[ivb[676]];
               double a1_031 = pAx1[ivb[270]];
               double a1_013 = pAx1[ivb[690]];
               double a1_220 = pAx1[ivb[32]];
               double a1_202 = pAx1[ivb[452]];
               double a1_022 = pAx1[ivb[480]];
               double a1_112 = pAx1[ivb[466]];
               double a1_121 = pAx1[ivb[256]];
               double a1_211 = pAx1[ivb[242]];
               T[0+sd*0] = -3*a0_200 + a1_400;
               T[1+sd*0] = a1_130;
               T[2+sd*0] = a1_103;
               T[3+sd*0] = -a0_020 + a1_220;
               T[4+sd*0] = -a0_002 + a1_202;
               T[5+sd*0] = -2*a0_110 + a1_310;
               T[6+sd*0] = a1_112;
               T[7+sd*0] = -2*a0_101 + a1_301;
               T[8+sd*0] = a1_121;
               T[9+sd*0] = -a0_011 + a1_211;
               T[0+sd*1] = a1_310;
               T[1+sd*1] = -3*a0_020 + a1_040;
               T[2+sd*1] = a1_013;
               T[3+sd*1] = -2*a0_110 + a1_130;
               T[4+sd*1] = a1_112;
               T[5+sd*1] = -a0_200 + a1_220;
               T[6+sd*1] = -a0_002 + a1_022;
               T[7+sd*1] = a1_211;
               T[8+sd*1] = -2*a0_011 + a1_031;
               T[9+sd*1] = -a0_101 + a1_121;
               T[0+sd*2] = a1_301;
               T[1+sd*2] = a1_031;
               T[2+sd*2] = -3*a0_002 + a1_004;
               T[3+sd*2] = a1_121;
               T[4+sd*2] = -2*a0_101 + a1_103;
               T[5+sd*2] = a1_211;
               T[6+sd*2] = -2*a0_011 + a1_013;
               T[7+sd*2] = -a0_200 + a1_202;
               T[8+sd*2] = -a0_020 + a1_022;
               T[9+sd*2] = -a0_110 + a1_112;
               // 1.70 steps per component, 0.16 kb stack
               ShTrC3_NsN(&pOut[xb+nAcB*7*3*ic], nAcB, T, 3);
            }
         }
         return;
      }
      case 4: {
         for (size_t ic = 0; ic < nCount; ++ ic) {
            double const * pAx0 = &p0Z[nCartX(lb+3)*ic];
            double const * pAx1 = &p2Z[nCartX(lb+5)*ic];
            for (size_t xb = 0; xb < nAcB; ++ xb) {
               cart_vec_t const *ivb = &iv2x[ix2v[xb]];
               double T[15*3];
               size_t const sd = 15;   // stride for derivative components in T
               double a0_300 = pAx0[ivb[3]];
               double a0_030 = pAx0[ivb[45]];
               double a0_003 = pAx0[ivb[675]];
               double a0_120 = pAx0[ivb[31]];
               double a0_102 = pAx0[ivb[451]];
               double a0_210 = pAx0[ivb[17]];
               double a0_012 = pAx0[ivb[465]];
               double a0_201 = pAx0[ivb[227]];
               double a0_021 = pAx0[ivb[255]];
               double a0_111 = pAx0[ivb[241]];
               double a1_500 = pAx1[ivb[5]];
               double a1_050 = pAx1[ivb[75]];
               double a1_005 = pAx1[ivb[1125]];
               double a1_140 = pAx1[ivb[61]];
               double a1_104 = pAx1[ivb[901]];
               double a1_410 = pAx1[ivb[19]];
               double a1_014 = pAx1[ivb[915]];
               double a1_401 = pAx1[ivb[229]];
               double a1_041 = pAx1[ivb[285]];
               double a1_320 = pAx1[ivb[33]];
               double a1_302 = pAx1[ivb[453]];
               double a1_230 = pAx1[ivb[47]];
               double a1_032 = pAx1[ivb[495]];
               double a1_203 = pAx1[ivb[677]];
               double a1_023 = pAx1[ivb[705]];
               double a1_311 = pAx1[ivb[243]];
               double a1_131 = pAx1[ivb[271]];
               double a1_113 = pAx1[ivb[691]];
               double a1_122 = pAx1[ivb[481]];
               double a1_212 = pAx1[ivb[467]];
               double a1_221 = pAx1[ivb[257]];
               T[0+sd*0] = -4*a0_300 + a1_500;
               T[1+sd*0] = a1_140;
               T[2+sd*0] = a1_104;
               T[3+sd*0] = -3*a0_210 + a1_410;
               T[4+sd*0] = -a0_030 + a1_230;
               T[5+sd*0] = -3*a0_201 + a1_401;
               T[6+sd*0] = -a0_003 + a1_203;
               T[7+sd*0] = a1_131;
               T[8+sd*0] = a1_113;
               T[9+sd*0] = -2*a0_120 + a1_320;
               T[10+sd*0] = -2*a0_102 + a1_302;
               T[11+sd*0] = a1_122;
               T[12+sd*0] = -a0_012 + a1_212;
               T[13+sd*0] = -a0_021 + a1_221;
               T[14+sd*0] = -2*a0_111 + a1_311;
               T[0+sd*1] = a1_410;
               T[1+sd*1] = -4*a0_030 + a1_050;
               T[2+sd*1] = a1_014;
               T[3+sd*1] = -a0_300 + a1_320;
               T[4+sd*1] = -3*a0_120 + a1_140;
               T[5+sd*1] = a1_311;
               T[6+sd*1] = a1_113;
               T[7+sd*1] = -3*a0_021 + a1_041;
               T[8+sd*1] = -a0_003 + a1_023;
               T[9+sd*1] = -2*a0_210 + a1_230;
               T[10+sd*1] = a1_212;
               T[11+sd*1] = -2*a0_012 + a1_032;
               T[12+sd*1] = -a0_102 + a1_122;
               T[13+sd*1] = -2*a0_111 + a1_131;
               T[14+sd*1] = -a0_201 + a1_221;
               T[0+sd*2] = a1_401;
               T[1+sd*2] = a1_041;
               T[2+sd*2] = -4*a0_003 + a1_005;
               T[3+sd*2] = a1_311;
               T[4+sd*2] = a1_131;
               T[5+sd*2] = -a0_300 + a1_302;
               T[6+sd*2] = -3*a0_102 + a1_104;
               T[7+sd*2] = -a0_030 + a1_032;
               T[8+sd*2] = -3*a0_012 + a1_014;
               T[9+sd*2] = a1_221;
               T[10+sd*2] = -2*a0_201 + a1_203;
               T[11+sd*2] = -2*a0_021 + a1_023;
               T[12+sd*2] = -2*a0_111 + a1_113;
               T[13+sd*2] = -a0_120 + a1_122;
               T[14+sd*2] = -a0_210 + a1_212;
               // 1.69 steps per component, 0.24 kb stack
               ShTrC4_NsN(&pOut[xb+nAcB*9*3*ic], nAcB, T, 3);
            }
         }
         return;
      }
      case 5: {
         for (size_t ic = 0; ic < nCount; ++ ic) {
            double const * pAx0 = &p0Z[nCartX(lb+4)*ic];
            double const * pAx1 = &p2Z[nCartX(lb+6)*ic];
            for (size_t xb = 0; xb < nAcB; ++ xb) {
               cart_vec_t const *ivb = &iv2x[ix2v[xb]];
               double T[21*3];
               size_t const sd = 21;   // stride for derivative components in T
               double a0_400 = pAx0[ivb[4]];
               double a0_040 = pAx0[ivb[60]];
               double a0_004 = pAx0[ivb[900]];
               double a0_310 = pAx0[ivb[18]];
               double a0_130 = pAx0[ivb[46]];
               double a0_301 = pAx0[ivb[228]];
               double a0_103 = pAx0[ivb[676]];
               double a0_031 = pAx0[ivb[270]];
               double a0_013 = pAx0[ivb[690]];
               double a0_220 = pAx0[ivb[32]];
               double a0_202 = pAx0[ivb[452]];
               double a0_022 = pAx0[ivb[480]];
               double a0_112 = pAx0[ivb[466]];
               double a0_121 = pAx0[ivb[256]];
               double a0_211 = pAx0[ivb[242]];
               double a1_600 = pAx1[ivb[6]];
               double a1_060 = pAx1[ivb[90]];
               double a1_006 = pAx1[ivb[1350]];
               double a1_510 = pAx1[ivb[20]];
               double a1_150 = pAx1[ivb[76]];
               double a1_501 = pAx1[ivb[230]];
               double a1_105 = pAx1[ivb[1126]];
               double a1_051 = pAx1[ivb[300]];
               double a1_015 = pAx1[ivb[1140]];
               double a1_420 = pAx1[ivb[34]];
               double a1_402 = pAx1[ivb[454]];
               double a1_240 = pAx1[ivb[62]];
               double a1_204 = pAx1[ivb[902]];
               double a1_042 = pAx1[ivb[510]];
               double a1_024 = pAx1[ivb[930]];
               double a1_330 = pAx1[ivb[48]];
               double a1_303 = pAx1[ivb[678]];
               double a1_033 = pAx1[ivb[720]];
               double a1_114 = pAx1[ivb[916]];
               double a1_141 = pAx1[ivb[286]];
               double a1_411 = pAx1[ivb[244]];
               double a1_312 = pAx1[ivb[468]];
               double a1_132 = pAx1[ivb[496]];
               double a1_321 = pAx1[ivb[258]];
               double a1_123 = pAx1[ivb[706]];
               double a1_231 = pAx1[ivb[272]];
               double a1_213 = pAx1[ivb[692]];
               double a1_222 = pAx1[ivb[482]];
               T[0+sd*0] = -5*a0_400 + a1_600;
               T[1+sd*0] = a1_150;
               T[2+sd*0] = a1_105;
               T[3+sd*0] = -a0_040 + a1_240;
               T[4+sd*0] = -a0_004 + a1_204;
               T[5+sd*0] = -4*a0_310 + a1_510;
               T[6+sd*0] = a1_114;
               T[7+sd*0] = -4*a0_301 + a1_501;
               T[8+sd*0] = a1_141;
               T[9+sd*0] = -3*a0_220 + a1_420;
               T[10+sd*0] = -3*a0_202 + a1_402;
               T[11+sd*0] = -2*a0_130 + a1_330;
               T[12+sd*0] = a1_132;
               T[13+sd*0] = -2*a0_103 + a1_303;
               T[14+sd*0] = a1_123;
               T[15+sd*0] = -3*a0_211 + a1_411;
               T[16+sd*0] = -a0_031 + a1_231;
               T[17+sd*0] = -a0_013 + a1_213;
               T[18+sd*0] = -a0_022 + a1_222;
               T[19+sd*0] = -2*a0_112 + a1_312;
               T[20+sd*0] = -2*a0_121 + a1_321;
               T[0+sd*1] = a1_510;
               T[1+sd*1] = -5*a0_040 + a1_060;
               T[2+sd*1] = a1_015;
               T[3+sd*1] = -4*a0_130 + a1_150;
               T[4+sd*1] = a1_114;
               T[5+sd*1] = -a0_400 + a1_420;
               T[6+sd*1] = -a0_004 + a1_024;
               T[7+sd*1] = a1_411;
               T[8+sd*1] = -4*a0_031 + a1_051;
               T[9+sd*1] = -2*a0_310 + a1_330;
               T[10+sd*1] = a1_312;
               T[11+sd*1] = -3*a0_220 + a1_240;
               T[12+sd*1] = -3*a0_022 + a1_042;
               T[13+sd*1] = a1_213;
               T[14+sd*1] = -2*a0_013 + a1_033;
               T[15+sd*1] = -a0_301 + a1_321;
               T[16+sd*1] = -3*a0_121 + a1_141;
               T[17+sd*1] = -a0_103 + a1_123;
               T[18+sd*1] = -2*a0_112 + a1_132;
               T[19+sd*1] = -a0_202 + a1_222;
               T[20+sd*1] = -2*a0_211 + a1_231;
               T[0+sd*2] = a1_501;
               T[1+sd*2] = a1_051;
               T[2+sd*2] = -5*a0_004 + a1_006;
               T[3+sd*2] = a1_141;
               T[4+sd*2] = -4*a0_103 + a1_105;
               T[5+sd*2] = a1_411;
               T[6+sd*2] = -4*a0_013 + a1_015;
               T[7+sd*2] = -a0_400 + a1_402;
               T[8+sd*2] = -a0_040 + a1_042;
               T[9+sd*2] = a1_321;
               T[10+sd*2] = -2*a0_301 + a1_303;
               T[11+sd*2] = a1_231;
               T[12+sd*2] = -2*a0_031 + a1_033;
               T[13+sd*2] = -3*a0_202 + a1_204;
               T[14+sd*2] = -3*a0_022 + a1_024;
               T[15+sd*2] = -a0_310 + a1_312;
               T[16+sd*2] = -a0_130 + a1_132;
               T[17+sd*2] = -3*a0_112 + a1_114;
               T[18+sd*2] = -2*a0_121 + a1_123;
               T[19+sd*2] = -2*a0_211 + a1_213;
               T[20+sd*2] = -a0_220 + a1_222;
               // 1.68 steps per component, 0.34 kb stack
               ShTrC5_NsN(&pOut[xb+nAcB*11*3*ic], nAcB, T, 3);
            }
         }
         return;
      }
      case 6: {
         for (size_t ic = 0; ic < nCount; ++ ic) {
            double const * pAx0 = &p0Z[nCartX(lb+5)*ic];
            double const * pAx1 = &p2Z[nCartX(lb+7)*ic];
            for (size_t xb = 0; xb < nAcB; ++ xb) {
               cart_vec_t const *ivb = &iv2x[ix2v[xb]];
               double T[28*3];
               size_t const sd = 28;   // stride for derivative components in T
               double a0_500 = pAx0[ivb[5]];
               double a0_050 = pAx0[ivb[75]];
               double a0_005 = pAx0[ivb[1125]];
               double a0_140 = pAx0[ivb[61]];
               double a0_104 = pAx0[ivb[901]];
               double a0_410 = pAx0[ivb[19]];
               double a0_014 = pAx0[ivb[915]];
               double a0_401 = pAx0[ivb[229]];
               double a0_041 = pAx0[ivb[285]];
               double a0_320 = pAx0[ivb[33]];
               double a0_302 = pAx0[ivb[453]];
               double a0_230 = pAx0[ivb[47]];
               double a0_032 = pAx0[ivb[495]];
               double a0_203 = pAx0[ivb[677]];
               double a0_023 = pAx0[ivb[705]];
               double a0_311 = pAx0[ivb[243]];
               double a0_131 = pAx0[ivb[271]];
               double a0_113 = pAx0[ivb[691]];
               double a0_122 = pAx0[ivb[481]];
               double a0_212 = pAx0[ivb[467]];
               double a0_221 = pAx0[ivb[257]];
               double a1_700 = pAx1[ivb[7]];
               double a1_070 = pAx1[ivb[105]];
               double a1_007 = pAx1[ivb[1575]];
               double a1_160 = pAx1[ivb[91]];
               double a1_106 = pAx1[ivb[1351]];
               double a1_610 = pAx1[ivb[21]];
               double a1_016 = pAx1[ivb[1365]];
               double a1_601 = pAx1[ivb[231]];
               double a1_061 = pAx1[ivb[315]];
               double a1_520 = pAx1[ivb[35]];
               double a1_502 = pAx1[ivb[455]];
               double a1_250 = pAx1[ivb[77]];
               double a1_052 = pAx1[ivb[525]];
               double a1_205 = pAx1[ivb[1127]];
               double a1_025 = pAx1[ivb[1155]];
               double a1_340 = pAx1[ivb[63]];
               double a1_304 = pAx1[ivb[903]];
               double a1_430 = pAx1[ivb[49]];
               double a1_034 = pAx1[ivb[945]];
               double a1_403 = pAx1[ivb[679]];
               double a1_043 = pAx1[ivb[735]];
               double a1_511 = pAx1[ivb[245]];
               double a1_151 = pAx1[ivb[301]];
               double a1_115 = pAx1[ivb[1141]];
               double a1_142 = pAx1[ivb[511]];
               double a1_124 = pAx1[ivb[931]];
               double a1_412 = pAx1[ivb[469]];
               double a1_214 = pAx1[ivb[917]];
               double a1_421 = pAx1[ivb[259]];
               double a1_241 = pAx1[ivb[287]];
               double a1_331 = pAx1[ivb[273]];
               double a1_313 = pAx1[ivb[693]];
               double a1_133 = pAx1[ivb[721]];
               double a1_322 = pAx1[ivb[483]];
               double a1_232 = pAx1[ivb[497]];
               double a1_223 = pAx1[ivb[707]];
               T[0+sd*0] = -6*a0_500 + a1_700;
               T[1+sd*0] = a1_160;
               T[2+sd*0] = a1_106;
               T[3+sd*0] = -5*a0_410 + a1_610;
               T[4+sd*0] = -a0_050 + a1_250;
               T[5+sd*0] = -5*a0_401 + a1_601;
               T[6+sd*0] = -a0_005 + a1_205;
               T[7+sd*0] = a1_151;
               T[8+sd*0] = a1_115;
               T[9+sd*0] = -4*a0_320 + a1_520;
               T[10+sd*0] = -4*a0_302 + a1_502;
               T[11+sd*0] = -2*a0_140 + a1_340;
               T[12+sd*0] = -2*a0_104 + a1_304;
               T[13+sd*0] = a1_142;
               T[14+sd*0] = a1_124;
               T[15+sd*0] = -3*a0_230 + a1_430;
               T[16+sd*0] = -3*a0_203 + a1_403;
               T[17+sd*0] = a1_133;
               T[18+sd*0] = -a0_014 + a1_214;
               T[19+sd*0] = -a0_041 + a1_241;
               T[20+sd*0] = -4*a0_311 + a1_511;
               T[21+sd*0] = -3*a0_212 + a1_412;
               T[22+sd*0] = -a0_032 + a1_232;
               T[23+sd*0] = -3*a0_221 + a1_421;
               T[24+sd*0] = -a0_023 + a1_223;
               T[25+sd*0] = -2*a0_131 + a1_331;
               T[26+sd*0] = -2*a0_113 + a1_313;
               T[27+sd*0] = -2*a0_122 + a1_322;
               T[0+sd*1] = a1_610;
               T[1+sd*1] = -6*a0_050 + a1_070;
               T[2+sd*1] = a1_016;
               T[3+sd*1] = -a0_500 + a1_520;
               T[4+sd*1] = -5*a0_140 + a1_160;
               T[5+sd*1] = a1_511;
               T[6+sd*1] = a1_115;
               T[7+sd*1] = -5*a0_041 + a1_061;
               T[8+sd*1] = -a0_005 + a1_025;
               T[9+sd*1] = -2*a0_410 + a1_430;
               T[10+sd*1] = a1_412;
               T[11+sd*1] = -4*a0_230 + a1_250;
               T[12+sd*1] = a1_214;
               T[13+sd*1] = -4*a0_032 + a1_052;
               T[14+sd*1] = -2*a0_014 + a1_034;
               T[15+sd*1] = -3*a0_320 + a1_340;
               T[16+sd*1] = a1_313;
               T[17+sd*1] = -3*a0_023 + a1_043;
               T[18+sd*1] = -a0_104 + a1_124;
               T[19+sd*1] = -4*a0_131 + a1_151;
               T[20+sd*1] = -a0_401 + a1_421;
               T[21+sd*1] = -a0_302 + a1_322;
               T[22+sd*1] = -3*a0_122 + a1_142;
               T[23+sd*1] = -2*a0_311 + a1_331;
               T[24+sd*1] = -2*a0_113 + a1_133;
               T[25+sd*1] = -3*a0_221 + a1_241;
               T[26+sd*1] = -a0_203 + a1_223;
               T[27+sd*1] = -2*a0_212 + a1_232;
               T[0+sd*2] = a1_601;
               T[1+sd*2] = a1_061;
               T[2+sd*2] = -6*a0_005 + a1_007;
               T[3+sd*2] = a1_511;
               T[4+sd*2] = a1_151;
               T[5+sd*2] = -a0_500 + a1_502;
               T[6+sd*2] = -5*a0_104 + a1_106;
               T[7+sd*2] = -a0_050 + a1_052;
               T[8+sd*2] = -5*a0_014 + a1_016;
               T[9+sd*2] = a1_421;
               T[10+sd*2] = -2*a0_401 + a1_403;
               T[11+sd*2] = a1_241;
               T[12+sd*2] = -4*a0_203 + a1_205;
               T[13+sd*2] = -2*a0_041 + a1_043;
               T[14+sd*2] = -4*a0_023 + a1_025;
               T[15+sd*2] = a1_331;
               T[16+sd*2] = -3*a0_302 + a1_304;
               T[17+sd*2] = -3*a0_032 + a1_034;
               T[18+sd*2] = -4*a0_113 + a1_115;
               T[19+sd*2] = -a0_140 + a1_142;
               T[20+sd*2] = -a0_410 + a1_412;
               T[21+sd*2] = -2*a0_311 + a1_313;
               T[22+sd*2] = -2*a0_131 + a1_133;
               T[23+sd*2] = -a0_320 + a1_322;
               T[24+sd*2] = -3*a0_122 + a1_124;
               T[25+sd*2] = -a0_230 + a1_232;
               T[26+sd*2] = -3*a0_212 + a1_214;
               T[27+sd*2] = -2*a0_221 + a1_223;
               // 1.68 steps per component, 0.45 kb stack
               ShTrC6_NsN(&pOut[xb+nAcB*13*3*ic], nAcB, T, 3);
            }
         }
         return;
      }
   }
   //assert(0);
}

// transform cartesians centered at A and multiplied by (2 ZetaA)^n, to 2nd derivative integrals with respect to A at center A.
// input p0Z: nCartX(lb-2) x nCount matrix of unscaled (a0| sets.
// input p2Z: nCartX(lb+0) x nCount matrix of (2 ZetaA)^1-scaled (a0| sets.
// input p4Z: nCartX(lb+2) x nCount matrix of (2 ZetaA)^2-scaled (a0| sets.
// output is nCartX(lb) x nCartY(la) x 6 x nCount, with middle dimension for derivatives xx yy zz xy xz yz. Linear output, no strides.
void AmrrDerivA2(double * pOut, double const * p0Z, double const * p2Z, double const * p4Z, unsigned lab, unsigned la, size_t nCount)
{
   unsigned const
      lb = lab - la;
   size_t
      nAcB = nCartX(lb);
   switch(la) {
      case 0: {
         for (size_t ic = 0; ic < nCount; ++ ic) {
            double const * pAx1 = &p2Z[nCartX(lb+0)*ic];
            double const * pAx2 = &p4Z[nCartX(lb+2)*ic];
            for (size_t xb = 0; xb < nAcB; ++ xb) {
               cart_vec_t const *ivb = &iv2x[ix2v[xb]];
               double T[1*6];
               size_t const sd = 1;   // stride for derivative components in T
               double a1_000 = pAx1[ivb[0]];
               double a2_200 = pAx2[ivb[2]];
               double a2_020 = pAx2[ivb[30]];
               double a2_002 = pAx2[ivb[450]];
               double a2_110 = pAx2[ivb[16]];
               double a2_101 = pAx2[ivb[226]];
               double a2_011 = pAx2[ivb[240]];
               double rx_100_1 = -a1_000 + a2_200;
               double ry_010_1 = -a1_000 + a2_020;
               double rz_001_1 = -a1_000 + a2_002;
               T[0+sd*0] = rx_100_1;
               T[0+sd*1] = ry_010_1;
               T[0+sd*2] = rz_001_1;
               T[0+sd*3] = a2_110;
               T[0+sd*4] = a2_101;
               T[0+sd*5] = a2_011;
               // 2.67 steps per component, 0.08 kb stack
               ShTrC0_NsN(&pOut[xb+nAcB*1*6*ic], nAcB, T, 6);
            }
         }
         return;
      }
      case 1: {
         for (size_t ic = 0; ic < nCount; ++ ic) {
            double const * pAx1 = &p2Z[nCartX(lb+1)*ic];
            double const * pAx2 = &p4Z[nCartX(lb+3)*ic];
            for (size_t xb = 0; xb < nAcB; ++ xb) {
               cart_vec_t const *ivb = &iv2x[ix2v[xb]];
               double T[3*6];
               size_t const sd = 3;   // stride for derivative components in T
               double a1_100 = pAx1[ivb[1]];
               double a1_010 = pAx1[ivb[15]];
               double a1_001 = pAx1[ivb[225]];
               double a2_300 = pAx2[ivb[3]];
               double a2_030 = pAx2[ivb[45]];
               double a2_003 = pAx2[ivb[675]];
               double a2_120 = pAx2[ivb[31]];
               double a2_102 = pAx2[ivb[451]];
               double a2_210 = pAx2[ivb[17]];
               double a2_012 = pAx2[ivb[465]];
               double a2_201 = pAx2[ivb[227]];
               double a2_021 = pAx2[ivb[255]];
               double a2_111 = pAx2[ivb[241]];
               double rx_200_1 = -2*a1_100 + a2_300;
               double rx_110_1 = -a1_010 + a2_210;
               double rx_101_1 = -a1_001 + a2_201;
               double ry_020_1 = -2*a1_010 + a2_030;
               double ry_110_1 = -a1_100 + a2_120;
               double ry_011_1 = -a1_001 + a2_021;
               double rz_002_1 = -2*a1_001 + a2_003;
               double rz_101_1 = -a1_100 + a2_102;
               double rz_011_1 = -a1_010 + a2_012;
               T[0+sd*0] = -a1_100 + rx_200_1;
               T[1+sd*0] = rx_110_1;
               T[2+sd*0] = rx_101_1;
               T[0+sd*1] = ry_110_1;
               T[1+sd*1] = -a1_010 + ry_020_1;
               T[2+sd*1] = ry_011_1;
               T[0+sd*2] = rz_101_1;
               T[1+sd*2] = rz_011_1;
               T[2+sd*2] = -a1_001 + rz_002_1;
               T[0+sd*3] = rx_110_1;
               T[1+sd*3] = -a1_100 + a2_120;
               T[2+sd*3] = a2_111;
               T[0+sd*4] = rx_101_1;
               T[1+sd*4] = a2_111;
               T[2+sd*4] = -a1_100 + a2_102;
               T[0+sd*5] = a2_111;
               T[1+sd*5] = ry_011_1;
               T[2+sd*5] = -a1_010 + a2_012;
               // 2.22 steps per component, 0.17 kb stack
               ShTrC1_NsN(&pOut[xb+nAcB*3*6*ic], nAcB, T, 6);
            }
         }
         return;
      }
      case 2: {
         for (size_t ic = 0; ic < nCount; ++ ic) {
            double const * pAx0 = &p0Z[nCartX(lb+0)*ic];
            double const * pAx1 = &p2Z[nCartX(lb+2)*ic];
            double const * pAx2 = &p4Z[nCartX(lb+4)*ic];
            for (size_t xb = 0; xb < nAcB; ++ xb) {
               cart_vec_t const *ivb = &iv2x[ix2v[xb]];
               double T[6*6];
               size_t const sd = 6;   // stride for derivative components in T
               double a0_000 = pAx0[ivb[0]];
               double a1_200 = pAx1[ivb[2]];
               double a1_020 = pAx1[ivb[30]];
               double a1_002 = pAx1[ivb[450]];
               double a1_110 = pAx1[ivb[16]];
               double a1_101 = pAx1[ivb[226]];
               double a1_011 = pAx1[ivb[240]];
               double a2_400 = pAx2[ivb[4]];
               double a2_040 = pAx2[ivb[60]];
               double a2_004 = pAx2[ivb[900]];
               double a2_310 = pAx2[ivb[18]];
               double a2_130 = pAx2[ivb[46]];
               double a2_301 = pAx2[ivb[228]];
               double a2_103 = pAx2[ivb[676]];
               double a2_031 = pAx2[ivb[270]];
               double a2_013 = pAx2[ivb[690]];
               double a2_220 = pAx2[ivb[32]];
               double a2_202 = pAx2[ivb[452]];
               double a2_022 = pAx2[ivb[480]];
               double a2_112 = pAx2[ivb[466]];
               double a2_121 = pAx2[ivb[256]];
               double a2_211 = pAx2[ivb[242]];
               double rx_100 = -a0_000 + a1_200;
               double rx_300_1 = -3*a1_200 + a2_400;
               double rx_120_1 = -a1_020 + a2_220;
               double rx_102_1 = -a1_002 + a2_202;
               double rx_210_1 = -2*a1_110 + a2_310;
               double rx_201_1 = -2*a1_101 + a2_301;
               double rx_111_1 = -a1_011 + a2_211;
               double ry_010 = -a0_000 + a1_020;
               double ry_030_1 = -3*a1_020 + a2_040;
               double ry_120_1 = -2*a1_110 + a2_130;
               double ry_210_1 = -a1_200 + a2_220;
               double ry_012_1 = -a1_002 + a2_022;
               double ry_021_1 = -2*a1_011 + a2_031;
               double ry_111_1 = -a1_101 + a2_121;
               double rz_001 = -a0_000 + a1_002;
               double rz_003_1 = -3*a1_002 + a2_004;
               double rz_102_1 = -2*a1_101 + a2_103;
               double rz_012_1 = -2*a1_011 + a2_013;
               double rz_201_1 = -a1_200 + a2_202;
               double rz_021_1 = -a1_020 + a2_022;
               double rz_111_1 = -a1_110 + a2_112;
               T[0+sd*0] = -2*rx_100 + rx_300_1;
               T[1+sd*0] = rx_120_1;
               T[2+sd*0] = rx_102_1;
               T[3+sd*0] = -a1_110 + rx_210_1;
               T[4+sd*0] = -a1_101 + rx_201_1;
               T[5+sd*0] = rx_111_1;
               T[0+sd*1] = ry_210_1;
               T[1+sd*1] = -2*ry_010 + ry_030_1;
               T[2+sd*1] = ry_012_1;
               T[3+sd*1] = -a1_110 + ry_120_1;
               T[4+sd*1] = ry_111_1;
               T[5+sd*1] = -a1_011 + ry_021_1;
               T[0+sd*2] = rz_201_1;
               T[1+sd*2] = rz_021_1;
               T[2+sd*2] = -2*rz_001 + rz_003_1;
               T[3+sd*2] = rz_111_1;
               T[4+sd*2] = -a1_101 + rz_102_1;
               T[5+sd*2] = -a1_011 + rz_012_1;
               T[0+sd*3] = rx_210_1;
               T[1+sd*3] = -2*a1_110 + a2_130;
               T[2+sd*3] = a2_112;
               T[3+sd*3] = -rx_100 + rx_120_1;
               T[4+sd*3] = rx_111_1;
               T[5+sd*3] = -a1_101 + a2_121;
               T[0+sd*4] = rx_201_1;
               T[1+sd*4] = a2_121;
               T[2+sd*4] = -2*a1_101 + a2_103;
               T[3+sd*4] = rx_111_1;
               T[4+sd*4] = -rx_100 + rx_102_1;
               T[5+sd*4] = -a1_110 + a2_112;
               T[0+sd*5] = a2_211;
               T[1+sd*5] = ry_021_1;
               T[2+sd*5] = -2*a1_011 + a2_013;
               T[3+sd*5] = ry_111_1;
               T[4+sd*5] = -a1_110 + a2_112;
               T[5+sd*5] = -ry_010 + ry_012_1;
               // 2.19 steps per component, 0.34 kb stack
               ShTrC2_NsN(&pOut[xb+nAcB*5*6*ic], nAcB, T, 6);
            }
         }
         return;
      }
      case 3: {
         for (size_t ic = 0; ic < nCount; ++ ic) {
            double const * pAx0 = &p0Z[nCartX(lb+1)*ic];
            double const * pAx1 = &p2Z[nCartX(lb+3)*ic];
            double const * pAx2 = &p4Z[nCartX(lb+5)*ic];
            for (size_t xb = 0; xb < nAcB; ++ xb) {
               cart_vec_t const *ivb = &iv2x[ix2v[xb]];
               double T[10*6];
               size_t const sd = 10;   // stride for derivative components in T
               double a0_100 = pAx0[ivb[1]];
               double a0_010 = pAx0[ivb[15]];
               double a0_001 = pAx0[ivb[225]];
               double a1_300 = pAx1[ivb[3]];
               double a1_030 = pAx1[ivb[45]];
               double a1_003 = pAx1[ivb[675]];
               double a1_120 = pAx1[ivb[31]];
               double a1_102 = pAx1[ivb[451]];
               double a1_210 = pAx1[ivb[17]];
               double a1_012 = pAx1[ivb[465]];
               double a1_201 = pAx1[ivb[227]];
               double a1_021 = pAx1[ivb[255]];
               double a1_111 = pAx1[ivb[241]];
               double a2_500 = pAx2[ivb[5]];
               double a2_050 = pAx2[ivb[75]];
               double a2_005 = pAx2[ivb[1125]];
               double a2_140 = pAx2[ivb[61]];
               double a2_104 = pAx2[ivb[901]];
               double a2_410 = pAx2[ivb[19]];
               double a2_014 = pAx2[ivb[915]];
               double a2_401 = pAx2[ivb[229]];
               double a2_041 = pAx2[ivb[285]];
               double a2_320 = pAx2[ivb[33]];
               double a2_302 = pAx2[ivb[453]];
               double a2_230 = pAx2[ivb[47]];
               double a2_032 = pAx2[ivb[495]];
               double a2_203 = pAx2[ivb[677]];
               double a2_023 = pAx2[ivb[705]];
               double a2_311 = pAx2[ivb[243]];
               double a2_131 = pAx2[ivb[271]];
               double a2_113 = pAx2[ivb[691]];
               double a2_122 = pAx2[ivb[481]];
               double a2_212 = pAx2[ivb[467]];
               double a2_221 = pAx2[ivb[257]];
               double rx_200 = -2*a0_100 + a1_300;
               double rx_110 = -a0_010 + a1_210;
               double rx_101 = -a0_001 + a1_201;
               double rx_400_1 = -4*a1_300 + a2_500;
               double rx_310_1 = -3*a1_210 + a2_410;
               double rx_130_1 = -a1_030 + a2_230;
               double rx_301_1 = -3*a1_201 + a2_401;
               double rx_103_1 = -a1_003 + a2_203;
               double rx_220_1 = -2*a1_120 + a2_320;
               double rx_202_1 = -2*a1_102 + a2_302;
               double rx_112_1 = -a1_012 + a2_212;
               double rx_121_1 = -a1_021 + a2_221;
               double rx_211_1 = -2*a1_111 + a2_311;
               double ry_020 = -2*a0_010 + a1_030;
               double ry_110 = -a0_100 + a1_120;
               double ry_011 = -a0_001 + a1_021;
               double ry_040_1 = -4*a1_030 + a2_050;
               double ry_310_1 = -a1_300 + a2_320;
               double ry_130_1 = -3*a1_120 + a2_140;
               double ry_031_1 = -3*a1_021 + a2_041;
               double ry_013_1 = -a1_003 + a2_023;
               double ry_220_1 = -2*a1_210 + a2_230;
               double ry_022_1 = -2*a1_012 + a2_032;
               double ry_112_1 = -a1_102 + a2_122;
               double ry_121_1 = -2*a1_111 + a2_131;
               double ry_211_1 = -a1_201 + a2_221;
               double rz_002 = -2*a0_001 + a1_003;
               double rz_101 = -a0_100 + a1_102;
               double rz_011 = -a0_010 + a1_012;
               double rz_004_1 = -4*a1_003 + a2_005;
               double rz_301_1 = -a1_300 + a2_302;
               double rz_103_1 = -3*a1_102 + a2_104;
               double rz_031_1 = -a1_030 + a2_032;
               double rz_013_1 = -3*a1_012 + a2_014;
               double rz_202_1 = -2*a1_201 + a2_203;
               double rz_022_1 = -2*a1_021 + a2_023;
               double rz_112_1 = -2*a1_111 + a2_113;
               double rz_121_1 = -a1_120 + a2_122;
               double rz_211_1 = -a1_210 + a2_212;
               T[0+sd*0] = -3*rx_200 + rx_400_1;
               T[1+sd*0] = rx_130_1;
               T[2+sd*0] = rx_103_1;
               T[3+sd*0] = -a1_120 + rx_220_1;
               T[4+sd*0] = -a1_102 + rx_202_1;
               T[5+sd*0] = -2*rx_110 + rx_310_1;
               T[6+sd*0] = rx_112_1;
               T[7+sd*0] = -2*rx_101 + rx_301_1;
               T[8+sd*0] = rx_121_1;
               T[9+sd*0] = -a1_111 + rx_211_1;
               T[0+sd*1] = ry_310_1;
               T[1+sd*1] = -3*ry_020 + ry_040_1;
               T[2+sd*1] = ry_013_1;
               T[3+sd*1] = -2*ry_110 + ry_130_1;
               T[4+sd*1] = ry_112_1;
               T[5+sd*1] = -a1_210 + ry_220_1;
               T[6+sd*1] = -a1_012 + ry_022_1;
               T[7+sd*1] = ry_211_1;
               T[8+sd*1] = -2*ry_011 + ry_031_1;
               T[9+sd*1] = -a1_111 + ry_121_1;
               T[0+sd*2] = rz_301_1;
               T[1+sd*2] = rz_031_1;
               T[2+sd*2] = -3*rz_002 + rz_004_1;
               T[3+sd*2] = rz_121_1;
               T[4+sd*2] = -2*rz_101 + rz_103_1;
               T[5+sd*2] = rz_211_1;
               T[6+sd*2] = -2*rz_011 + rz_013_1;
               T[7+sd*2] = -a1_201 + rz_202_1;
               T[8+sd*2] = -a1_021 + rz_022_1;
               T[9+sd*2] = -a1_111 + rz_112_1;
               T[0+sd*3] = rx_310_1;
               T[1+sd*3] = -3*a1_120 + a2_140;
               T[2+sd*3] = a2_113;
               T[3+sd*3] = -2*rx_110 + rx_130_1;
               T[4+sd*3] = rx_112_1;
               T[5+sd*3] = -rx_200 + rx_220_1;
               T[6+sd*3] = -a1_102 + a2_122;
               T[7+sd*3] = rx_211_1;
               T[8+sd*3] = -2*a1_111 + a2_131;
               T[9+sd*3] = -rx_101 + rx_121_1;
               T[0+sd*4] = rx_301_1;
               T[1+sd*4] = a2_131;
               T[2+sd*4] = -3*a1_102 + a2_104;
               T[3+sd*4] = rx_121_1;
               T[4+sd*4] = -2*rx_101 + rx_103_1;
               T[5+sd*4] = rx_211_1;
               T[6+sd*4] = -2*a1_111 + a2_113;
               T[7+sd*4] = -rx_200 + rx_202_1;
               T[8+sd*4] = -a1_120 + a2_122;
               T[9+sd*4] = -rx_110 + rx_112_1;
               T[0+sd*5] = a2_311;
               T[1+sd*5] = ry_031_1;
               T[2+sd*5] = -3*a1_012 + a2_014;
               T[3+sd*5] = ry_121_1;
               T[4+sd*5] = -2*a1_111 + a2_113;
               T[5+sd*5] = ry_211_1;
               T[6+sd*5] = -2*ry_011 + ry_013_1;
               T[7+sd*5] = -a1_210 + a2_212;
               T[8+sd*5] = -ry_020 + ry_022_1;
               T[9+sd*5] = -ry_110 + ry_112_1;
               // 2.22 steps per component, 0.57 kb stack
               ShTrC3_NsN(&pOut[xb+nAcB*7*6*ic], nAcB, T, 6);
            }
         }
         return;
      }
      case 4: {
         for (size_t ic = 0; ic < nCount; ++ ic) {
            double const * pAx0 = &p0Z[nCartX(lb+2)*ic];
            double const * pAx1 = &p2Z[nCartX(lb+4)*ic];
            double const * pAx2 = &p4Z[nCartX(lb+6)*ic];
            for (size_t xb = 0; xb < nAcB; ++ xb) {
               cart_vec_t const *ivb = &iv2x[ix2v[xb]];
               double T[15*6];
               size_t const sd = 15;   // stride for derivative components in T
               double a0_200 = pAx0[ivb[2]];
               double a0_020 = pAx0[ivb[30]];
               double a0_002 = pAx0[ivb[450]];
               double a0_110 = pAx0[ivb[16]];
               double a0_101 = pAx0[ivb[226]];
               double a0_011 = pAx0[ivb[240]];
               double a1_400 = pAx1[ivb[4]];
               double a1_040 = pAx1[ivb[60]];
               double a1_004 = pAx1[ivb[900]];
               double a1_310 = pAx1[ivb[18]];
               double a1_130 = pAx1[ivb[46]];
               double a1_301 = pAx1[ivb[228]];
               double a1_103 = pAx1[ivb[676]];
               double a1_031 = pAx1[ivb[270]];
               double a1_013 = pAx1[ivb[690]];
               double a1_220 = pAx1[ivb[32]];
               double a1_202 = pAx1[ivb[452]];
               double a1_022 = pAx1[ivb[480]];
               double a1_112 = pAx1[ivb[466]];
               double a1_121 = pAx1[ivb[256]];
               double a1_211 = pAx1[ivb[242]];
               double a2_600 = pAx2[ivb[6]];
               double a2_060 = pAx2[ivb[90]];
               double a2_006 = pAx2[ivb[1350]];
               double a2_510 = pAx2[ivb[20]];
               double a2_150 = pAx2[ivb[76]];
               double a2_501 = pAx2[ivb[230]];
               double a2_105 = pAx2[ivb[1126]];
               double a2_051 = pAx2[ivb[300]];
               double a2_015 = pAx2[ivb[1140]];
               double a2_420 = pAx2[ivb[34]];
               double a2_402 = pAx2[ivb[454]];
               double a2_240 = pAx2[ivb[62]];
               double a2_204 = pAx2[ivb[902]];
               double a2_042 = pAx2[ivb[510]];
               double a2_024 = pAx2[ivb[930]];
               double a2_330 = pAx2[ivb[48]];
               double a2_303 = pAx2[ivb[678]];
               double a2_033 = pAx2[ivb[720]];
               double a2_114 = pAx2[ivb[916]];
               double a2_141 = pAx2[ivb[286]];
               double a2_411 = pAx2[ivb[244]];
               double a2_312 = pAx2[ivb[468]];
               double a2_132 = pAx2[ivb[496]];
               double a2_321 = pAx2[ivb[258]];
               double a2_123 = pAx2[ivb[706]];
               double a2_231 = pAx2[ivb[272]];
               double a2_213 = pAx2[ivb[692]];
               double a2_222 = pAx2[ivb[482]];
               double rx_300 = -3*a0_200 + a1_400;
               double rx_120 = -a0_020 + a1_220;
               double rx_102 = -a0_002 + a1_202;
               double rx_210 = -2*a0_110 + a1_310;
               double rx_201 = -2*a0_101 + a1_301;
               double rx_111 = -a0_011 + a1_211;
               double rx_500_1 = -5*a1_400 + a2_600;
               double rx_140_1 = -a1_040 + a2_240;
               double rx_104_1 = -a1_004 + a2_204;
               double rx_410_1 = -4*a1_310 + a2_510;
               double rx_401_1 = -4*a1_301 + a2_501;
               double rx_320_1 = -3*a1_220 + a2_420;
               double rx_302_1 = -3*a1_202 + a2_402;
               double rx_230_1 = -2*a1_130 + a2_330;
               double rx_203_1 = -2*a1_103 + a2_303;
               double rx_311_1 = -3*a1_211 + a2_411;
               double rx_131_1 = -a1_031 + a2_231;
               double rx_113_1 = -a1_013 + a2_213;
               double rx_122_1 = -a1_022 + a2_222;
               double rx_212_1 = -2*a1_112 + a2_312;
               double rx_221_1 = -2*a1_121 + a2_321;
               double ry_030 = -3*a0_020 + a1_040;
               double ry_120 = -2*a0_110 + a1_130;
               double ry_210 = -a0_200 + a1_220;
               double ry_012 = -a0_002 + a1_022;
               double ry_021 = -2*a0_011 + a1_031;
               double ry_111 = -a0_101 + a1_121;
               double ry_050_1 = -5*a1_040 + a2_060;
               double ry_140_1 = -4*a1_130 + a2_150;
               double ry_410_1 = -a1_400 + a2_420;
               double ry_014_1 = -a1_004 + a2_024;
               double ry_041_1 = -4*a1_031 + a2_051;
               double ry_320_1 = -2*a1_310 + a2_330;
               double ry_230_1 = -3*a1_220 + a2_240;
               double ry_032_1 = -3*a1_022 + a2_042;
               double ry_023_1 = -2*a1_013 + a2_033;
               double ry_311_1 = -a1_301 + a2_321;
               double ry_131_1 = -3*a1_121 + a2_141;
               double ry_113_1 = -a1_103 + a2_123;
               double ry_122_1 = -2*a1_112 + a2_132;
               double ry_212_1 = -a1_202 + a2_222;
               double ry_221_1 = -2*a1_211 + a2_231;
               double rz_003 = -3*a0_002 + a1_004;
               double rz_102 = -2*a0_101 + a1_103;
               double rz_012 = -2*a0_011 + a1_013;
               double rz_201 = -a0_200 + a1_202;
               double rz_021 = -a0_020 + a1_022;
               double rz_111 = -a0_110 + a1_112;
               double rz_005_1 = -5*a1_004 + a2_006;
               double rz_104_1 = -4*a1_103 + a2_105;
               double rz_014_1 = -4*a1_013 + a2_015;
               double rz_401_1 = -a1_400 + a2_402;
               double rz_041_1 = -a1_040 + a2_042;
               double rz_302_1 = -2*a1_301 + a2_303;
               double rz_032_1 = -2*a1_031 + a2_033;
               double rz_203_1 = -3*a1_202 + a2_204;
               double rz_023_1 = -3*a1_022 + a2_024;
               double rz_311_1 = -a1_310 + a2_312;
               double rz_131_1 = -a1_130 + a2_132;
               double rz_113_1 = -3*a1_112 + a2_114;
               double rz_122_1 = -2*a1_121 + a2_123;
               double rz_212_1 = -2*a1_211 + a2_213;
               double rz_221_1 = -a1_220 + a2_222;
               T[0+sd*0] = -4*rx_300 + rx_500_1;
               T[1+sd*0] = rx_140_1;
               T[2+sd*0] = rx_104_1;
               T[3+sd*0] = -3*rx_210 + rx_410_1;
               T[4+sd*0] = -a1_130 + rx_230_1;
               T[5+sd*0] = -3*rx_201 + rx_401_1;
               T[6+sd*0] = -a1_103 + rx_203_1;
               T[7+sd*0] = rx_131_1;
               T[8+sd*0] = rx_113_1;
               T[9+sd*0] = -2*rx_120 + rx_320_1;
               T[10+sd*0] = -2*rx_102 + rx_302_1;
               T[11+sd*0] = rx_122_1;
               T[12+sd*0] = -a1_112 + rx_212_1;
               T[13+sd*0] = -a1_121 + rx_221_1;
               T[14+sd*0] = -2*rx_111 + rx_311_1;
               T[0+sd*1] = ry_410_1;
               T[1+sd*1] = -4*ry_030 + ry_050_1;
               T[2+sd*1] = ry_014_1;
               T[3+sd*1] = -a1_310 + ry_320_1;
               T[4+sd*1] = -3*ry_120 + ry_140_1;
               T[5+sd*1] = ry_311_1;
               T[6+sd*1] = ry_113_1;
               T[7+sd*1] = -3*ry_021 + ry_041_1;
               T[8+sd*1] = -a1_013 + ry_023_1;
               T[9+sd*1] = -2*ry_210 + ry_230_1;
               T[10+sd*1] = ry_212_1;
               T[11+sd*1] = -2*ry_012 + ry_032_1;
               T[12+sd*1] = -a1_112 + ry_122_1;
               T[13+sd*1] = -2*ry_111 + ry_131_1;
               T[14+sd*1] = -a1_211 + ry_221_1;
               T[0+sd*2] = rz_401_1;
               T[1+sd*2] = rz_041_1;
               T[2+sd*2] = -4*rz_003 + rz_005_1;
               T[3+sd*2] = rz_311_1;
               T[4+sd*2] = rz_131_1;
               T[5+sd*2] = -a1_301 + rz_302_1;
               T[6+sd*2] = -3*rz_102 + rz_104_1;
               T[7+sd*2] = -a1_031 + rz_032_1;
               T[8+sd*2] = -3*rz_012 + rz_014_1;
               T[9+sd*2] = rz_221_1;
               T[10+sd*2] = -2*rz_201 + rz_203_1;
               T[11+sd*2] = -2*rz_021 + rz_023_1;
               T[12+sd*2] = -2*rz_111 + rz_113_1;
               T[13+sd*2] = -a1_121 + rz_122_1;
               T[14+sd*2] = -a1_211 + rz_212_1;
               T[0+sd*3] = rx_410_1;
               T[1+sd*3] = -4*a1_130 + a2_150;
               T[2+sd*3] = a2_114;
               T[3+sd*3] = -rx_300 + rx_320_1;
               T[4+sd*3] = -3*rx_120 + rx_140_1;
               T[5+sd*3] = rx_311_1;
               T[6+sd*3] = rx_113_1;
               T[7+sd*3] = -3*a1_121 + a2_141;
               T[8+sd*3] = -a1_103 + a2_123;
               T[9+sd*3] = -2*rx_210 + rx_230_1;
               T[10+sd*3] = rx_212_1;
               T[11+sd*3] = -2*a1_112 + a2_132;
               T[12+sd*3] = -rx_102 + rx_122_1;
               T[13+sd*3] = -2*rx_111 + rx_131_1;
               T[14+sd*3] = -rx_201 + rx_221_1;
               T[0+sd*4] = rx_401_1;
               T[1+sd*4] = a2_141;
               T[2+sd*4] = -4*a1_103 + a2_105;
               T[3+sd*4] = rx_311_1;
               T[4+sd*4] = rx_131_1;
               T[5+sd*4] = -rx_300 + rx_302_1;
               T[6+sd*4] = -3*rx_102 + rx_104_1;
               T[7+sd*4] = -a1_130 + a2_132;
               T[8+sd*4] = -3*a1_112 + a2_114;
               T[9+sd*4] = rx_221_1;
               T[10+sd*4] = -2*rx_201 + rx_203_1;
               T[11+sd*4] = -2*a1_121 + a2_123;
               T[12+sd*4] = -2*rx_111 + rx_113_1;
               T[13+sd*4] = -rx_120 + rx_122_1;
               T[14+sd*4] = -rx_210 + rx_212_1;
               T[0+sd*5] = a2_411;
               T[1+sd*5] = ry_041_1;
               T[2+sd*5] = -4*a1_013 + a2_015;
               T[3+sd*5] = ry_311_1;
               T[4+sd*5] = ry_131_1;
               T[5+sd*5] = -a1_310 + a2_312;
               T[6+sd*5] = -3*a1_112 + a2_114;
               T[7+sd*5] = -ry_030 + ry_032_1;
               T[8+sd*5] = -3*ry_012 + ry_014_1;
               T[9+sd*5] = ry_221_1;
               T[10+sd*5] = -2*a1_211 + a2_213;
               T[11+sd*5] = -2*ry_021 + ry_023_1;
               T[12+sd*5] = -2*ry_111 + ry_113_1;
               T[13+sd*5] = -ry_120 + ry_122_1;
               T[14+sd*5] = -ry_210 + ry_212_1;
               // 2.24 steps per component, 0.88 kb stack
               ShTrC4_NsN(&pOut[xb+nAcB*9*6*ic], nAcB, T, 6);
            }
         }
         return;
      }
      case 5: {
         for (size_t ic = 0; ic < nCount; ++ ic) {
            double const * pAx0 = &p0Z[nCartX(lb+3)*ic];
            double const * pAx1 = &p2Z[nCartX(lb+5)*ic];
            double const * pAx2 = &p4Z[nCartX(lb+7)*ic];
            for (size_t xb = 0; xb < nAcB; ++ xb) {
               cart_vec_t const *ivb = &iv2x[ix2v[xb]];
               double T[21*6];
               size_t const sd = 21;   // stride for derivative components in T
               double a0_300 = pAx0[ivb[3]];
               double a0_030 = pAx0[ivb[45]];
               double a0_003 = pAx0[ivb[675]];
               double a0_120 = pAx0[ivb[31]];
               double a0_102 = pAx0[ivb[451]];
               double a0_210 = pAx0[ivb[17]];
               double a0_012 = pAx0[ivb[465]];
               double a0_201 = pAx0[ivb[227]];
               double a0_021 = pAx0[ivb[255]];
               double a0_111 = pAx0[ivb[241]];
               double a1_500 = pAx1[ivb[5]];
               double a1_050 = pAx1[ivb[75]];
               double a1_005 = pAx1[ivb[1125]];
               double a1_140 = pAx1[ivb[61]];
               double a1_104 = pAx1[ivb[901]];
               double a1_410 = pAx1[ivb[19]];
               double a1_014 = pAx1[ivb[915]];
               double a1_401 = pAx1[ivb[229]];
               double a1_041 = pAx1[ivb[285]];
               double a1_320 = pAx1[ivb[33]];
               double a1_302 = pAx1[ivb[453]];
               double a1_230 = pAx1[ivb[47]];
               double a1_032 = pAx1[ivb[495]];
               double a1_203 = pAx1[ivb[677]];
               double a1_023 = pAx1[ivb[705]];
               double a1_311 = pAx1[ivb[243]];
               double a1_131 = pAx1[ivb[271]];
               double a1_113 = pAx1[ivb[691]];
               double a1_122 = pAx1[ivb[481]];
               double a1_212 = pAx1[ivb[467]];
               double a1_221 = pAx1[ivb[257]];
               double a2_700 = pAx2[ivb[7]];
               double a2_070 = pAx2[ivb[105]];
               double a2_007 = pAx2[ivb[1575]];
               double a2_160 = pAx2[ivb[91]];
               double a2_106 = pAx2[ivb[1351]];
               double a2_610 = pAx2[ivb[21]];
               double a2_016 = pAx2[ivb[1365]];
               double a2_601 = pAx2[ivb[231]];
               double a2_061 = pAx2[ivb[315]];
               double a2_520 = pAx2[ivb[35]];
               double a2_502 = pAx2[ivb[455]];
               double a2_250 = pAx2[ivb[77]];
               double a2_052 = pAx2[ivb[525]];
               double a2_205 = pAx2[ivb[1127]];
               double a2_025 = pAx2[ivb[1155]];
               double a2_340 = pAx2[ivb[63]];
               double a2_304 = pAx2[ivb[903]];
               double a2_430 = pAx2[ivb[49]];
               double a2_034 = pAx2[ivb[945]];
               double a2_403 = pAx2[ivb[679]];
               double a2_043 = pAx2[ivb[735]];
               double a2_511 = pAx2[ivb[245]];
               double a2_151 = pAx2[ivb[301]];
               double a2_115 = pAx2[ivb[1141]];
               double a2_142 = pAx2[ivb[511]];
               double a2_124 = pAx2[ivb[931]];
               double a2_412 = pAx2[ivb[469]];
               double a2_214 = pAx2[ivb[917]];
               double a2_421 = pAx2[ivb[259]];
               double a2_241 = pAx2[ivb[287]];
               double a2_331 = pAx2[ivb[273]];
               double a2_313 = pAx2[ivb[693]];
               double a2_133 = pAx2[ivb[721]];
               double a2_322 = pAx2[ivb[483]];
               double a2_232 = pAx2[ivb[497]];
               double a2_223 = pAx2[ivb[707]];
               double rx_400 = -4*a0_300 + a1_500;
               double rx_310 = -3*a0_210 + a1_410;
               double rx_130 = -a0_030 + a1_230;
               double rx_301 = -3*a0_201 + a1_401;
               double rx_103 = -a0_003 + a1_203;
               double rx_220 = -2*a0_120 + a1_320;
               double rx_202 = -2*a0_102 + a1_302;
               double rx_112 = -a0_012 + a1_212;
               double rx_121 = -a0_021 + a1_221;
               double rx_211 = -2*a0_111 + a1_311;
               double rx_600_1 = -6*a1_500 + a2_700;
               double rx_510_1 = -5*a1_410 + a2_610;
               double rx_150_1 = -a1_050 + a2_250;
               double rx_501_1 = -5*a1_401 + a2_601;
               double rx_105_1 = -a1_005 + a2_205;
               double rx_420_1 = -4*a1_320 + a2_520;
               double rx_402_1 = -4*a1_302 + a2_502;
               double rx_240_1 = -2*a1_140 + a2_340;
               double rx_204_1 = -2*a1_104 + a2_304;
               double rx_330_1 = -3*a1_230 + a2_430;
               double rx_303_1 = -3*a1_203 + a2_403;
               double rx_114_1 = -a1_014 + a2_214;
               double rx_141_1 = -a1_041 + a2_241;
               double rx_411_1 = -4*a1_311 + a2_511;
               double rx_312_1 = -3*a1_212 + a2_412;
               double rx_132_1 = -a1_032 + a2_232;
               double rx_321_1 = -3*a1_221 + a2_421;
               double rx_123_1 = -a1_023 + a2_223;
               double rx_231_1 = -2*a1_131 + a2_331;
               double rx_213_1 = -2*a1_113 + a2_313;
               double rx_222_1 = -2*a1_122 + a2_322;
               double ry_040 = -4*a0_030 + a1_050;
               double ry_310 = -a0_300 + a1_320;
               double ry_130 = -3*a0_120 + a1_140;
               double ry_031 = -3*a0_021 + a1_041;
               double ry_013 = -a0_003 + a1_023;
               double ry_220 = -2*a0_210 + a1_230;
               double ry_022 = -2*a0_012 + a1_032;
               double ry_112 = -a0_102 + a1_122;
               double ry_121 = -2*a0_111 + a1_131;
               double ry_211 = -a0_201 + a1_221;
               double ry_060_1 = -6*a1_050 + a2_070;
               double ry_510_1 = -a1_500 + a2_520;
               double ry_150_1 = -5*a1_140 + a2_160;
               double ry_051_1 = -5*a1_041 + a2_061;
               double ry_015_1 = -a1_005 + a2_025;
               double ry_420_1 = -2*a1_410 + a2_430;
               double ry_240_1 = -4*a1_230 + a2_250;
               double ry_042_1 = -4*a1_032 + a2_052;
               double ry_024_1 = -2*a1_014 + a2_034;
               double ry_330_1 = -3*a1_320 + a2_340;
               double ry_033_1 = -3*a1_023 + a2_043;
               double ry_114_1 = -a1_104 + a2_124;
               double ry_141_1 = -4*a1_131 + a2_151;
               double ry_411_1 = -a1_401 + a2_421;
               double ry_312_1 = -a1_302 + a2_322;
               double ry_132_1 = -3*a1_122 + a2_142;
               double ry_321_1 = -2*a1_311 + a2_331;
               double ry_123_1 = -2*a1_113 + a2_133;
               double ry_231_1 = -3*a1_221 + a2_241;
               double ry_213_1 = -a1_203 + a2_223;
               double ry_222_1 = -2*a1_212 + a2_232;
               double rz_004 = -4*a0_003 + a1_005;
               double rz_301 = -a0_300 + a1_302;
               double rz_103 = -3*a0_102 + a1_104;
               double rz_031 = -a0_030 + a1_032;
               double rz_013 = -3*a0_012 + a1_014;
               double rz_202 = -2*a0_201 + a1_203;
               double rz_022 = -2*a0_021 + a1_023;
               double rz_112 = -2*a0_111 + a1_113;
               double rz_121 = -a0_120 + a1_122;
               double rz_211 = -a0_210 + a1_212;
               double rz_006_1 = -6*a1_005 + a2_007;
               double rz_501_1 = -a1_500 + a2_502;
               double rz_105_1 = -5*a1_104 + a2_106;
               double rz_051_1 = -a1_050 + a2_052;
               double rz_015_1 = -5*a1_014 + a2_016;
               double rz_402_1 = -2*a1_401 + a2_403;
               double rz_204_1 = -4*a1_203 + a2_205;
               double rz_042_1 = -2*a1_041 + a2_043;
               double rz_024_1 = -4*a1_023 + a2_025;
               double rz_303_1 = -3*a1_302 + a2_304;
               double rz_033_1 = -3*a1_032 + a2_034;
               double rz_114_1 = -4*a1_113 + a2_115;
               double rz_141_1 = -a1_140 + a2_142;
               double rz_411_1 = -a1_410 + a2_412;
               double rz_312_1 = -2*a1_311 + a2_313;
               double rz_132_1 = -2*a1_131 + a2_133;
               double rz_321_1 = -a1_320 + a2_322;
               double rz_123_1 = -3*a1_122 + a2_124;
               double rz_231_1 = -a1_230 + a2_232;
               double rz_213_1 = -3*a1_212 + a2_214;
               double rz_222_1 = -2*a1_221 + a2_223;
               T[0+sd*0] = -5*rx_400 + rx_600_1;
               T[1+sd*0] = rx_150_1;
               T[2+sd*0] = rx_105_1;
               T[3+sd*0] = -a1_140 + rx_240_1;
               T[4+sd*0] = -a1_104 + rx_204_1;
               T[5+sd*0] = -4*rx_310 + rx_510_1;
               T[6+sd*0] = rx_114_1;
               T[7+sd*0] = -4*rx_301 + rx_501_1;
               T[8+sd*0] = rx_141_1;
               T[9+sd*0] = -3*rx_220 + rx_420_1;
               T[10+sd*0] = -3*rx_202 + rx_402_1;
               T[11+sd*0] = -2*rx_130 + rx_330_1;
               T[12+sd*0] = rx_132_1;
               T[13+sd*0] = -2*rx_103 + rx_303_1;
               T[14+sd*0] = rx_123_1;
               T[15+sd*0] = -3*rx_211 + rx_411_1;
               T[16+sd*0] = -a1_131 + rx_231_1;
               T[17+sd*0] = -a1_113 + rx_213_1;
               T[18+sd*0] = -a1_122 + rx_222_1;
               T[19+sd*0] = -2*rx_112 + rx_312_1;
               T[20+sd*0] = -2*rx_121 + rx_321_1;
               T[0+sd*1] = ry_510_1;
               T[1+sd*1] = -5*ry_040 + ry_060_1;
               T[2+sd*1] = ry_015_1;
               T[3+sd*1] = -4*ry_130 + ry_150_1;
               T[4+sd*1] = ry_114_1;
               T[5+sd*1] = -a1_410 + ry_420_1;
               T[6+sd*1] = -a1_014 + ry_024_1;
               T[7+sd*1] = ry_411_1;
               T[8+sd*1] = -4*ry_031 + ry_051_1;
               T[9+sd*1] = -2*ry_310 + ry_330_1;
               T[10+sd*1] = ry_312_1;
               T[11+sd*1] = -3*ry_220 + ry_240_1;
               T[12+sd*1] = -3*ry_022 + ry_042_1;
               T[13+sd*1] = ry_213_1;
               T[14+sd*1] = -2*ry_013 + ry_033_1;
               T[15+sd*1] = -a1_311 + ry_321_1;
               T[16+sd*1] = -3*ry_121 + ry_141_1;
               T[17+sd*1] = -a1_113 + ry_123_1;
               T[18+sd*1] = -2*ry_112 + ry_132_1;
               T[19+sd*1] = -a1_212 + ry_222_1;
               T[20+sd*1] = -2*ry_211 + ry_231_1;
               T[0+sd*2] = rz_501_1;
               T[1+sd*2] = rz_051_1;
               T[2+sd*2] = -5*rz_004 + rz_006_1;
               T[3+sd*2] = rz_141_1;
               T[4+sd*2] = -4*rz_103 + rz_105_1;
               T[5+sd*2] = rz_411_1;
               T[6+sd*2] = -4*rz_013 + rz_015_1;
               T[7+sd*2] = -a1_401 + rz_402_1;
               T[8+sd*2] = -a1_041 + rz_042_1;
               T[9+sd*2] = rz_321_1;
               T[10+sd*2] = -2*rz_301 + rz_303_1;
               T[11+sd*2] = rz_231_1;
               T[12+sd*2] = -2*rz_031 + rz_033_1;
               T[13+sd*2] = -3*rz_202 + rz_204_1;
               T[14+sd*2] = -3*rz_022 + rz_024_1;
               T[15+sd*2] = -a1_311 + rz_312_1;
               T[16+sd*2] = -a1_131 + rz_132_1;
               T[17+sd*2] = -3*rz_112 + rz_114_1;
               T[18+sd*2] = -2*rz_121 + rz_123_1;
               T[19+sd*2] = -2*rz_211 + rz_213_1;
               T[20+sd*2] = -a1_221 + rz_222_1;
               T[0+sd*3] = rx_510_1;
               T[1+sd*3] = -5*a1_140 + a2_160;
               T[2+sd*3] = a2_115;
               T[3+sd*3] = -4*rx_130 + rx_150_1;
               T[4+sd*3] = rx_114_1;
               T[5+sd*3] = -rx_400 + rx_420_1;
               T[6+sd*3] = -a1_104 + a2_124;
               T[7+sd*3] = rx_411_1;
               T[8+sd*3] = -4*a1_131 + a2_151;
               T[9+sd*3] = -2*rx_310 + rx_330_1;
               T[10+sd*3] = rx_312_1;
               T[11+sd*3] = -3*rx_220 + rx_240_1;
               T[12+sd*3] = -3*a1_122 + a2_142;
               T[13+sd*3] = rx_213_1;
               T[14+sd*3] = -2*a1_113 + a2_133;
               T[15+sd*3] = -rx_301 + rx_321_1;
               T[16+sd*3] = -3*rx_121 + rx_141_1;
               T[17+sd*3] = -rx_103 + rx_123_1;
               T[18+sd*3] = -2*rx_112 + rx_132_1;
               T[19+sd*3] = -rx_202 + rx_222_1;
               T[20+sd*3] = -2*rx_211 + rx_231_1;
               T[0+sd*4] = rx_501_1;
               T[1+sd*4] = a2_151;
               T[2+sd*4] = -5*a1_104 + a2_106;
               T[3+sd*4] = rx_141_1;
               T[4+sd*4] = -4*rx_103 + rx_105_1;
               T[5+sd*4] = rx_411_1;
               T[6+sd*4] = -4*a1_113 + a2_115;
               T[7+sd*4] = -rx_400 + rx_402_1;
               T[8+sd*4] = -a1_140 + a2_142;
               T[9+sd*4] = rx_321_1;
               T[10+sd*4] = -2*rx_301 + rx_303_1;
               T[11+sd*4] = rx_231_1;
               T[12+sd*4] = -2*a1_131 + a2_133;
               T[13+sd*4] = -3*rx_202 + rx_204_1;
               T[14+sd*4] = -3*a1_122 + a2_124;
               T[15+sd*4] = -rx_310 + rx_312_1;
               T[16+sd*4] = -rx_130 + rx_132_1;
               T[17+sd*4] = -3*rx_112 + rx_114_1;
               T[18+sd*4] = -2*rx_121 + rx_123_1;
               T[19+sd*4] = -2*rx_211 + rx_213_1;
               T[20+sd*4] = -rx_220 + rx_222_1;
               T[0+sd*5] = a2_511;
               T[1+sd*5] = ry_051_1;
               T[2+sd*5] = -5*a1_014 + a2_016;
               T[3+sd*5] = ry_141_1;
               T[4+sd*5] = -4*a1_113 + a2_115;
               T[5+sd*5] = ry_411_1;
               T[6+sd*5] = -4*ry_013 + ry_015_1;
               T[7+sd*5] = -a1_410 + a2_412;
               T[8+sd*5] = -ry_040 + ry_042_1;
               T[9+sd*5] = ry_321_1;
               T[10+sd*5] = -2*a1_311 + a2_313;
               T[11+sd*5] = ry_231_1;
               T[12+sd*5] = -2*ry_031 + ry_033_1;
               T[13+sd*5] = -3*a1_212 + a2_214;
               T[14+sd*5] = -3*ry_022 + ry_024_1;
               T[15+sd*5] = -ry_310 + ry_312_1;
               T[16+sd*5] = -ry_130 + ry_132_1;
               T[17+sd*5] = -3*ry_112 + ry_114_1;
               T[18+sd*5] = -2*ry_121 + ry_123_1;
               T[19+sd*5] = -2*ry_211 + ry_213_1;
               T[20+sd*5] = -ry_220 + ry_222_1;
               // 2.27 steps per component, 1.25 kb stack
               ShTrC5_NsN(&pOut[xb+nAcB*11*6*ic], nAcB, T, 6);
            }
         }
         return;
      }
      case 6: {
         for (size_t ic = 0; ic < nCount; ++ ic) {
            double const * pAx0 = &p0Z[nCartX(lb+4)*ic];
            double const * pAx1 = &p2Z[nCartX(lb+6)*ic];
            double const * pAx2 = &p4Z[nCartX(lb+8)*ic];
            for (size_t xb = 0; xb < nAcB; ++ xb) {
               cart_vec_t const *ivb = &iv2x[ix2v[xb]];
               double T[28*6];
               size_t const sd = 28;   // stride for derivative components in T
               double a0_400 = pAx0[ivb[4]];
               double a0_040 = pAx0[ivb[60]];
               double a0_004 = pAx0[ivb[900]];
               double a0_310 = pAx0[ivb[18]];
               double a0_130 = pAx0[ivb[46]];
               double a0_301 = pAx0[ivb[228]];
               double a0_103 = pAx0[ivb[676]];
               double a0_031 = pAx0[ivb[270]];
               double a0_013 = pAx0[ivb[690]];
               double a0_220 = pAx0[ivb[32]];
               double a0_202 = pAx0[ivb[452]];
               double a0_022 = pAx0[ivb[480]];
               double a0_112 = pAx0[ivb[466]];
               double a0_121 = pAx0[ivb[256]];
               double a0_211 = pAx0[ivb[242]];
               double a1_600 = pAx1[ivb[6]];
               double a1_060 = pAx1[ivb[90]];
               double a1_006 = pAx1[ivb[1350]];
               double a1_510 = pAx1[ivb[20]];
               double a1_150 = pAx1[ivb[76]];
               double a1_501 = pAx1[ivb[230]];
               double a1_105 = pAx1[ivb[1126]];
               double a1_051 = pAx1[ivb[300]];
               double a1_015 = pAx1[ivb[1140]];
               double a1_420 = pAx1[ivb[34]];
               double a1_402 = pAx1[ivb[454]];
               double a1_240 = pAx1[ivb[62]];
               double a1_204 = pAx1[ivb[902]];
               double a1_042 = pAx1[ivb[510]];
               double a1_024 = pAx1[ivb[930]];
               double a1_330 = pAx1[ivb[48]];
               double a1_303 = pAx1[ivb[678]];
               double a1_033 = pAx1[ivb[720]];
               double a1_114 = pAx1[ivb[916]];
               double a1_141 = pAx1[ivb[286]];
               double a1_411 = pAx1[ivb[244]];
               double a1_312 = pAx1[ivb[468]];
               double a1_132 = pAx1[ivb[496]];
               double a1_321 = pAx1[ivb[258]];
               double a1_123 = pAx1[ivb[706]];
               double a1_231 = pAx1[ivb[272]];
               double a1_213 = pAx1[ivb[692]];
               double a1_222 = pAx1[ivb[482]];
               double a2_800 = pAx2[ivb[8]];
               double a2_080 = pAx2[ivb[120]];
               double a2_008 = pAx2[ivb[1800]];
               double a2_710 = pAx2[ivb[22]];
               double a2_170 = pAx2[ivb[106]];
               double a2_701 = pAx2[ivb[232]];
               double a2_107 = pAx2[ivb[1576]];
               double a2_071 = pAx2[ivb[330]];
               double a2_017 = pAx2[ivb[1590]];
               double a2_620 = pAx2[ivb[36]];
               double a2_602 = pAx2[ivb[456]];
               double a2_260 = pAx2[ivb[92]];
               double a2_206 = pAx2[ivb[1352]];
               double a2_062 = pAx2[ivb[540]];
               double a2_026 = pAx2[ivb[1380]];
               double a2_530 = pAx2[ivb[50]];
               double a2_350 = pAx2[ivb[78]];
               double a2_503 = pAx2[ivb[680]];
               double a2_305 = pAx2[ivb[1128]];
               double a2_053 = pAx2[ivb[750]];
               double a2_035 = pAx2[ivb[1170]];
               double a2_440 = pAx2[ivb[64]];
               double a2_404 = pAx2[ivb[904]];
               double a2_044 = pAx2[ivb[960]];
               double a2_116 = pAx2[ivb[1366]];
               double a2_161 = pAx2[ivb[316]];
               double a2_611 = pAx2[ivb[246]];
               double a2_512 = pAx2[ivb[470]];
               double a2_152 = pAx2[ivb[526]];
               double a2_521 = pAx2[ivb[260]];
               double a2_125 = pAx2[ivb[1156]];
               double a2_251 = pAx2[ivb[302]];
               double a2_215 = pAx2[ivb[1142]];
               double a2_314 = pAx2[ivb[918]];
               double a2_134 = pAx2[ivb[946]];
               double a2_341 = pAx2[ivb[288]];
               double a2_143 = pAx2[ivb[736]];
               double a2_431 = pAx2[ivb[274]];
               double a2_413 = pAx2[ivb[694]];
               double a2_422 = pAx2[ivb[484]];
               double a2_242 = pAx2[ivb[512]];
               double a2_224 = pAx2[ivb[932]];
               double a2_332 = pAx2[ivb[498]];
               double a2_323 = pAx2[ivb[708]];
               double a2_233 = pAx2[ivb[722]];
               double rx_500 = -5*a0_400 + a1_600;
               double rx_140 = -a0_040 + a1_240;
               double rx_104 = -a0_004 + a1_204;
               double rx_410 = -4*a0_310 + a1_510;
               double rx_401 = -4*a0_301 + a1_501;
               double rx_320 = -3*a0_220 + a1_420;
               double rx_302 = -3*a0_202 + a1_402;
               double rx_230 = -2*a0_130 + a1_330;
               double rx_203 = -2*a0_103 + a1_303;
               double rx_311 = -3*a0_211 + a1_411;
               double rx_131 = -a0_031 + a1_231;
               double rx_113 = -a0_013 + a1_213;
               double rx_122 = -a0_022 + a1_222;
               double rx_212 = -2*a0_112 + a1_312;
               double rx_221 = -2*a0_121 + a1_321;
               double rx_700_1 = -7*a1_600 + a2_800;
               double rx_160_1 = -a1_060 + a2_260;
               double rx_106_1 = -a1_006 + a2_206;
               double rx_610_1 = -6*a1_510 + a2_710;
               double rx_601_1 = -6*a1_501 + a2_701;
               double rx_520_1 = -5*a1_420 + a2_620;
               double rx_502_1 = -5*a1_402 + a2_602;
               double rx_250_1 = -2*a1_150 + a2_350;
               double rx_205_1 = -2*a1_105 + a2_305;
               double rx_340_1 = -3*a1_240 + a2_440;
               double rx_304_1 = -3*a1_204 + a2_404;
               double rx_430_1 = -4*a1_330 + a2_530;
               double rx_403_1 = -4*a1_303 + a2_503;
               double rx_511_1 = -5*a1_411 + a2_611;
               double rx_151_1 = -a1_051 + a2_251;
               double rx_115_1 = -a1_015 + a2_215;
               double rx_142_1 = -a1_042 + a2_242;
               double rx_124_1 = -a1_024 + a2_224;
               double rx_412_1 = -4*a1_312 + a2_512;
               double rx_214_1 = -2*a1_114 + a2_314;
               double rx_421_1 = -4*a1_321 + a2_521;
               double rx_241_1 = -2*a1_141 + a2_341;
               double rx_331_1 = -3*a1_231 + a2_431;
               double rx_313_1 = -3*a1_213 + a2_413;
               double rx_133_1 = -a1_033 + a2_233;
               double rx_322_1 = -3*a1_222 + a2_422;
               double rx_232_1 = -2*a1_132 + a2_332;
               double rx_223_1 = -2*a1_123 + a2_323;
               double ry_050 = -5*a0_040 + a1_060;
               double ry_140 = -4*a0_130 + a1_150;
               double ry_410 = -a0_400 + a1_420;
               double ry_014 = -a0_004 + a1_024;
               double ry_041 = -4*a0_031 + a1_051;
               double ry_320 = -2*a0_310 + a1_330;
               double ry_230 = -3*a0_220 + a1_240;
               double ry_032 = -3*a0_022 + a1_042;
               double ry_023 = -2*a0_013 + a1_033;
               double ry_311 = -a0_301 + a1_321;
               double ry_131 = -3*a0_121 + a1_141;
               double ry_113 = -a0_103 + a1_123;
               double ry_122 = -2*a0_112 + a1_132;
               double ry_212 = -a0_202 + a1_222;
               double ry_221 = -2*a0_211 + a1_231;
               double ry_070_1 = -7*a1_060 + a2_080;
               double ry_160_1 = -6*a1_150 + a2_170;
               double ry_610_1 = -a1_600 + a2_620;
               double ry_016_1 = -a1_006 + a2_026;
               double ry_061_1 = -6*a1_051 + a2_071;
               double ry_520_1 = -2*a1_510 + a2_530;
               double ry_250_1 = -5*a1_240 + a2_260;
               double ry_052_1 = -5*a1_042 + a2_062;
               double ry_025_1 = -2*a1_015 + a2_035;
               double ry_340_1 = -4*a1_330 + a2_350;
               double ry_430_1 = -3*a1_420 + a2_440;
               double ry_034_1 = -3*a1_024 + a2_044;
               double ry_043_1 = -4*a1_033 + a2_053;
               double ry_511_1 = -a1_501 + a2_521;
               double ry_151_1 = -5*a1_141 + a2_161;
               double ry_115_1 = -a1_105 + a2_125;
               double ry_142_1 = -4*a1_132 + a2_152;
               double ry_124_1 = -2*a1_114 + a2_134;
               double ry_412_1 = -a1_402 + a2_422;
               double ry_214_1 = -a1_204 + a2_224;
               double ry_421_1 = -2*a1_411 + a2_431;
               double ry_241_1 = -4*a1_231 + a2_251;
               double ry_331_1 = -3*a1_321 + a2_341;
               double ry_313_1 = -a1_303 + a2_323;
               double ry_133_1 = -3*a1_123 + a2_143;
               double ry_322_1 = -2*a1_312 + a2_332;
               double ry_232_1 = -3*a1_222 + a2_242;
               double ry_223_1 = -2*a1_213 + a2_233;
               double rz_005 = -5*a0_004 + a1_006;
               double rz_104 = -4*a0_103 + a1_105;
               double rz_014 = -4*a0_013 + a1_015;
               double rz_401 = -a0_400 + a1_402;
               double rz_041 = -a0_040 + a1_042;
               double rz_302 = -2*a0_301 + a1_303;
               double rz_032 = -2*a0_031 + a1_033;
               double rz_203 = -3*a0_202 + a1_204;
               double rz_023 = -3*a0_022 + a1_024;
               double rz_311 = -a0_310 + a1_312;
               double rz_131 = -a0_130 + a1_132;
               double rz_113 = -3*a0_112 + a1_114;
               double rz_122 = -2*a0_121 + a1_123;
               double rz_212 = -2*a0_211 + a1_213;
               double rz_221 = -a0_220 + a1_222;
               double rz_007_1 = -7*a1_006 + a2_008;
               double rz_106_1 = -6*a1_105 + a2_107;
               double rz_016_1 = -6*a1_015 + a2_017;
               double rz_601_1 = -a1_600 + a2_602;
               double rz_061_1 = -a1_060 + a2_062;
               double rz_502_1 = -2*a1_501 + a2_503;
               double rz_052_1 = -2*a1_051 + a2_053;
               double rz_205_1 = -5*a1_204 + a2_206;
               double rz_025_1 = -5*a1_024 + a2_026;
               double rz_304_1 = -4*a1_303 + a2_305;
               double rz_034_1 = -4*a1_033 + a2_035;
               double rz_403_1 = -3*a1_402 + a2_404;
               double rz_043_1 = -3*a1_042 + a2_044;
               double rz_511_1 = -a1_510 + a2_512;
               double rz_151_1 = -a1_150 + a2_152;
               double rz_115_1 = -5*a1_114 + a2_116;
               double rz_142_1 = -2*a1_141 + a2_143;
               double rz_124_1 = -4*a1_123 + a2_125;
               double rz_412_1 = -2*a1_411 + a2_413;
               double rz_214_1 = -4*a1_213 + a2_215;
               double rz_421_1 = -a1_420 + a2_422;
               double rz_241_1 = -a1_240 + a2_242;
               double rz_331_1 = -a1_330 + a2_332;
               double rz_313_1 = -3*a1_312 + a2_314;
               double rz_133_1 = -3*a1_132 + a2_134;
               double rz_322_1 = -2*a1_321 + a2_323;
               double rz_232_1 = -2*a1_231 + a2_233;
               double rz_223_1 = -3*a1_222 + a2_224;
               T[0+sd*0] = -6*rx_500 + rx_700_1;
               T[1+sd*0] = rx_160_1;
               T[2+sd*0] = rx_106_1;
               T[3+sd*0] = -5*rx_410 + rx_610_1;
               T[4+sd*0] = -a1_150 + rx_250_1;
               T[5+sd*0] = -5*rx_401 + rx_601_1;
               T[6+sd*0] = -a1_105 + rx_205_1;
               T[7+sd*0] = rx_151_1;
               T[8+sd*0] = rx_115_1;
               T[9+sd*0] = -4*rx_320 + rx_520_1;
               T[10+sd*0] = -4*rx_302 + rx_502_1;
               T[11+sd*0] = -2*rx_140 + rx_340_1;
               T[12+sd*0] = -2*rx_104 + rx_304_1;
               T[13+sd*0] = rx_142_1;
               T[14+sd*0] = rx_124_1;
               T[15+sd*0] = -3*rx_230 + rx_430_1;
               T[16+sd*0] = -3*rx_203 + rx_403_1;
               T[17+sd*0] = rx_133_1;
               T[18+sd*0] = -a1_114 + rx_214_1;
               T[19+sd*0] = -a1_141 + rx_241_1;
               T[20+sd*0] = -4*rx_311 + rx_511_1;
               T[21+sd*0] = -3*rx_212 + rx_412_1;
               T[22+sd*0] = -a1_132 + rx_232_1;
               T[23+sd*0] = -3*rx_221 + rx_421_1;
               T[24+sd*0] = -a1_123 + rx_223_1;
               T[25+sd*0] = -2*rx_131 + rx_331_1;
               T[26+sd*0] = -2*rx_113 + rx_313_1;
               T[27+sd*0] = -2*rx_122 + rx_322_1;
               T[0+sd*1] = ry_610_1;
               T[1+sd*1] = -6*ry_050 + ry_070_1;
               T[2+sd*1] = ry_016_1;
               T[3+sd*1] = -a1_510 + ry_520_1;
               T[4+sd*1] = -5*ry_140 + ry_160_1;
               T[5+sd*1] = ry_511_1;
               T[6+sd*1] = ry_115_1;
               T[7+sd*1] = -5*ry_041 + ry_061_1;
               T[8+sd*1] = -a1_015 + ry_025_1;
               T[9+sd*1] = -2*ry_410 + ry_430_1;
               T[10+sd*1] = ry_412_1;
               T[11+sd*1] = -4*ry_230 + ry_250_1;
               T[12+sd*1] = ry_214_1;
               T[13+sd*1] = -4*ry_032 + ry_052_1;
               T[14+sd*1] = -2*ry_014 + ry_034_1;
               T[15+sd*1] = -3*ry_320 + ry_340_1;
               T[16+sd*1] = ry_313_1;
               T[17+sd*1] = -3*ry_023 + ry_043_1;
               T[18+sd*1] = -a1_114 + ry_124_1;
               T[19+sd*1] = -4*ry_131 + ry_151_1;
               T[20+sd*1] = -a1_411 + ry_421_1;
               T[21+sd*1] = -a1_312 + ry_322_1;
               T[22+sd*1] = -3*ry_122 + ry_142_1;
               T[23+sd*1] = -2*ry_311 + ry_331_1;
               T[24+sd*1] = -2*ry_113 + ry_133_1;
               T[25+sd*1] = -3*ry_221 + ry_241_1;
               T[26+sd*1] = -a1_213 + ry_223_1;
               T[27+sd*1] = -2*ry_212 + ry_232_1;
               T[0+sd*2] = rz_601_1;
               T[1+sd*2] = rz_061_1;
               T[2+sd*2] = -6*rz_005 + rz_007_1;
               T[3+sd*2] = rz_511_1;
               T[4+sd*2] = rz_151_1;
               T[5+sd*2] = -a1_501 + rz_502_1;
               T[6+sd*2] = -5*rz_104 + rz_106_1;
               T[7+sd*2] = -a1_051 + rz_052_1;
               T[8+sd*2] = -5*rz_014 + rz_016_1;
               T[9+sd*2] = rz_421_1;
               T[10+sd*2] = -2*rz_401 + rz_403_1;
               T[11+sd*2] = rz_241_1;
               T[12+sd*2] = -4*rz_203 + rz_205_1;
               T[13+sd*2] = -2*rz_041 + rz_043_1;
               T[14+sd*2] = -4*rz_023 + rz_025_1;
               T[15+sd*2] = rz_331_1;
               T[16+sd*2] = -3*rz_302 + rz_304_1;
               T[17+sd*2] = -3*rz_032 + rz_034_1;
               T[18+sd*2] = -4*rz_113 + rz_115_1;
               T[19+sd*2] = -a1_141 + rz_142_1;
               T[20+sd*2] = -a1_411 + rz_412_1;
               T[21+sd*2] = -2*rz_311 + rz_313_1;
               T[22+sd*2] = -2*rz_131 + rz_133_1;
               T[23+sd*2] = -a1_321 + rz_322_1;
               T[24+sd*2] = -3*rz_122 + rz_124_1;
               T[25+sd*2] = -a1_231 + rz_232_1;
               T[26+sd*2] = -3*rz_212 + rz_214_1;
               T[27+sd*2] = -2*rz_221 + rz_223_1;
               T[0+sd*3] = rx_610_1;
               T[1+sd*3] = -6*a1_150 + a2_170;
               T[2+sd*3] = a2_116;
               T[3+sd*3] = -rx_500 + rx_520_1;
               T[4+sd*3] = -5*rx_140 + rx_160_1;
               T[5+sd*3] = rx_511_1;
               T[6+sd*3] = rx_115_1;
               T[7+sd*3] = -5*a1_141 + a2_161;
               T[8+sd*3] = -a1_105 + a2_125;
               T[9+sd*3] = -2*rx_410 + rx_430_1;
               T[10+sd*3] = rx_412_1;
               T[11+sd*3] = -4*rx_230 + rx_250_1;
               T[12+sd*3] = rx_214_1;
               T[13+sd*3] = -4*a1_132 + a2_152;
               T[14+sd*3] = -2*a1_114 + a2_134;
               T[15+sd*3] = -3*rx_320 + rx_340_1;
               T[16+sd*3] = rx_313_1;
               T[17+sd*3] = -3*a1_123 + a2_143;
               T[18+sd*3] = -rx_104 + rx_124_1;
               T[19+sd*3] = -4*rx_131 + rx_151_1;
               T[20+sd*3] = -rx_401 + rx_421_1;
               T[21+sd*3] = -rx_302 + rx_322_1;
               T[22+sd*3] = -3*rx_122 + rx_142_1;
               T[23+sd*3] = -2*rx_311 + rx_331_1;
               T[24+sd*3] = -2*rx_113 + rx_133_1;
               T[25+sd*3] = -3*rx_221 + rx_241_1;
               T[26+sd*3] = -rx_203 + rx_223_1;
               T[27+sd*3] = -2*rx_212 + rx_232_1;
               T[0+sd*4] = rx_601_1;
               T[1+sd*4] = a2_161;
               T[2+sd*4] = -6*a1_105 + a2_107;
               T[3+sd*4] = rx_511_1;
               T[4+sd*4] = rx_151_1;
               T[5+sd*4] = -rx_500 + rx_502_1;
               T[6+sd*4] = -5*rx_104 + rx_106_1;
               T[7+sd*4] = -a1_150 + a2_152;
               T[8+sd*4] = -5*a1_114 + a2_116;
               T[9+sd*4] = rx_421_1;
               T[10+sd*4] = -2*rx_401 + rx_403_1;
               T[11+sd*4] = rx_241_1;
               T[12+sd*4] = -4*rx_203 + rx_205_1;
               T[13+sd*4] = -2*a1_141 + a2_143;
               T[14+sd*4] = -4*a1_123 + a2_125;
               T[15+sd*4] = rx_331_1;
               T[16+sd*4] = -3*rx_302 + rx_304_1;
               T[17+sd*4] = -3*a1_132 + a2_134;
               T[18+sd*4] = -4*rx_113 + rx_115_1;
               T[19+sd*4] = -rx_140 + rx_142_1;
               T[20+sd*4] = -rx_410 + rx_412_1;
               T[21+sd*4] = -2*rx_311 + rx_313_1;
               T[22+sd*4] = -2*rx_131 + rx_133_1;
               T[23+sd*4] = -rx_320 + rx_322_1;
               T[24+sd*4] = -3*rx_122 + rx_124_1;
               T[25+sd*4] = -rx_230 + rx_232_1;
               T[26+sd*4] = -3*rx_212 + rx_214_1;
               T[27+sd*4] = -2*rx_221 + rx_223_1;
               T[0+sd*5] = a2_611;
               T[1+sd*5] = ry_061_1;
               T[2+sd*5] = -6*a1_015 + a2_017;
               T[3+sd*5] = ry_511_1;
               T[4+sd*5] = ry_151_1;
               T[5+sd*5] = -a1_510 + a2_512;
               T[6+sd*5] = -5*a1_114 + a2_116;
               T[7+sd*5] = -ry_050 + ry_052_1;
               T[8+sd*5] = -5*ry_014 + ry_016_1;
               T[9+sd*5] = ry_421_1;
               T[10+sd*5] = -2*a1_411 + a2_413;
               T[11+sd*5] = ry_241_1;
               T[12+sd*5] = -4*a1_213 + a2_215;
               T[13+sd*5] = -2*ry_041 + ry_043_1;
               T[14+sd*5] = -4*ry_023 + ry_025_1;
               T[15+sd*5] = ry_331_1;
               T[16+sd*5] = -3*a1_312 + a2_314;
               T[17+sd*5] = -3*ry_032 + ry_034_1;
               T[18+sd*5] = -4*ry_113 + ry_115_1;
               T[19+sd*5] = -ry_140 + ry_142_1;
               T[20+sd*5] = -ry_410 + ry_412_1;
               T[21+sd*5] = -2*ry_311 + ry_313_1;
               T[22+sd*5] = -2*ry_131 + ry_133_1;
               T[23+sd*5] = -ry_320 + ry_322_1;
               T[24+sd*5] = -3*ry_122 + ry_124_1;
               T[25+sd*5] = -ry_230 + ry_232_1;
               T[26+sd*5] = -3*ry_212 + ry_214_1;
               T[27+sd*5] = -2*ry_221 + ry_223_1;
               // 2.29 steps per component, 1.70 kb stack
               ShTrC6_NsN(&pOut[xb+nAcB*13*6*ic], nAcB, T, 6);
            }
         }
         return;
      }
   }
   //assert(0);
}

// transform cartesians centered at A and multiplied by (2 ZetaA)^n, to 0th derivative integrals with respect to A at center A.
// input p2Z: nCartX(lb+2) x nCount matrix of (2 ZetaA)^1-scaled (a0| sets.
// input p4Z: nCartX(lb+4) x nCount matrix of (2 ZetaA)^2-scaled (a0| sets.
// output is nCartX(lb) x nCartY(la) x 1 x nCount, with middle dimension for derivatives s. Linear output, no strides.
void AmrrDerivA0L(double * pOut, double const * p2Z, double const * p4Z, unsigned lab, unsigned la, size_t nCount)
{
   unsigned const
      lb = lab - la;
   size_t
      nAcB = nCartX(lb);
   switch(la) {
      case 0: {
         for (size_t ic = 0; ic < nCount; ++ ic) {
            double const * pAx1 = &p2Z[nCartX(lb+0)*ic];
            double const * pAx2 = &p4Z[nCartX(lb+2)*ic];
            for (size_t xb = 0; xb < nAcB; ++ xb) {
               cart_vec_t const *ivb = &iv2x[ix2v[xb]];
               double T[1*1];
               size_t const sd = 1;   // stride for derivative components in T
               double a1_000 = pAx1[ivb[0]];
               double a2_200 = pAx2[ivb[2]];
               double a2_020 = pAx2[ivb[30]];
               double a2_002 = pAx2[ivb[450]];
               T[0+sd*0] = -3*a1_000 + a2_002 + a2_020 + a2_200;
               // 5.00 steps per component, 0.03 kb stack
               ShTrC0_NsN(&pOut[xb+nAcB*1*1*ic], nAcB, T, 1);
            }
         }
         return;
      }
      case 1: {
         for (size_t ic = 0; ic < nCount; ++ ic) {
            double const * pAx1 = &p2Z[nCartX(lb+1)*ic];
            double const * pAx2 = &p4Z[nCartX(lb+3)*ic];
            for (size_t xb = 0; xb < nAcB; ++ xb) {
               cart_vec_t const *ivb = &iv2x[ix2v[xb]];
               double T[3*1];
               size_t const sd = 3;   // stride for derivative components in T
               double a1_100 = pAx1[ivb[1]];
               double a1_010 = pAx1[ivb[15]];
               double a1_001 = pAx1[ivb[225]];
               double a2_300 = pAx2[ivb[3]];
               double a2_030 = pAx2[ivb[45]];
               double a2_003 = pAx2[ivb[675]];
               double a2_120 = pAx2[ivb[31]];
               double a2_102 = pAx2[ivb[451]];
               double a2_210 = pAx2[ivb[17]];
               double a2_012 = pAx2[ivb[465]];
               double a2_201 = pAx2[ivb[227]];
               double a2_021 = pAx2[ivb[255]];
               T[0+sd*0] = -5*a1_100 + a2_102 + a2_120 + a2_300;
               T[1+sd*0] = -5*a1_010 + a2_012 + a2_030 + a2_210;
               T[2+sd*0] = -5*a1_001 + a2_003 + a2_021 + a2_201;
               // 5.00 steps per component, 0.09 kb stack
               ShTrC1_NsN(&pOut[xb+nAcB*3*1*ic], nAcB, T, 1);
            }
         }
         return;
      }
      case 2: {
         for (size_t ic = 0; ic < nCount; ++ ic) {
            double const * pAx1 = &p2Z[nCartX(lb+2)*ic];
            double const * pAx2 = &p4Z[nCartX(lb+4)*ic];
            for (size_t xb = 0; xb < nAcB; ++ xb) {
               cart_vec_t const *ivb = &iv2x[ix2v[xb]];
               double T[6*1];
               size_t const sd = 6;   // stride for derivative components in T
               double a1_200 = pAx1[ivb[2]];
               double a1_020 = pAx1[ivb[30]];
               double a1_002 = pAx1[ivb[450]];
               double a1_110 = pAx1[ivb[16]];
               double a1_101 = pAx1[ivb[226]];
               double a1_011 = pAx1[ivb[240]];
               double a2_400 = pAx2[ivb[4]];
               double a2_040 = pAx2[ivb[60]];
               double a2_004 = pAx2[ivb[900]];
               double a2_310 = pAx2[ivb[18]];
               double a2_130 = pAx2[ivb[46]];
               double a2_301 = pAx2[ivb[228]];
               double a2_103 = pAx2[ivb[676]];
               double a2_031 = pAx2[ivb[270]];
               double a2_013 = pAx2[ivb[690]];
               double a2_220 = pAx2[ivb[32]];
               double a2_202 = pAx2[ivb[452]];
               double a2_022 = pAx2[ivb[480]];
               double a2_112 = pAx2[ivb[466]];
               double a2_121 = pAx2[ivb[256]];
               double a2_211 = pAx2[ivb[242]];
               T[0+sd*0] = -7*a1_200 + a2_202 + a2_220 + a2_400;
               T[1+sd*0] = -7*a1_020 + a2_022 + a2_040 + a2_220;
               T[2+sd*0] = -7*a1_002 + a2_004 + a2_022 + a2_202;
               T[3+sd*0] = -7*a1_110 + a2_112 + a2_130 + a2_310;
               T[4+sd*0] = -7*a1_101 + a2_103 + a2_121 + a2_301;
               T[5+sd*0] = -7*a1_011 + a2_013 + a2_031 + a2_211;
               // 4.50 steps per component, 0.16 kb stack
               ShTrC2_NsN(&pOut[xb+nAcB*5*1*ic], nAcB, T, 1);
            }
         }
         return;
      }
      case 3: {
         for (size_t ic = 0; ic < nCount; ++ ic) {
            double const * pAx1 = &p2Z[nCartX(lb+3)*ic];
            double const * pAx2 = &p4Z[nCartX(lb+5)*ic];
            for (size_t xb = 0; xb < nAcB; ++ xb) {
               cart_vec_t const *ivb = &iv2x[ix2v[xb]];
               double T[10*1];
               size_t const sd = 10;   // stride for derivative components in T
               double a1_300 = pAx1[ivb[3]];
               double a1_030 = pAx1[ivb[45]];
               double a1_003 = pAx1[ivb[675]];
               double a1_120 = pAx1[ivb[31]];
               double a1_102 = pAx1[ivb[451]];
               double a1_210 = pAx1[ivb[17]];
               double a1_012 = pAx1[ivb[465]];
               double a1_201 = pAx1[ivb[227]];
               double a1_021 = pAx1[ivb[255]];
               double a1_111 = pAx1[ivb[241]];
               double a2_500 = pAx2[ivb[5]];
               double a2_050 = pAx2[ivb[75]];
               double a2_005 = pAx2[ivb[1125]];
               double a2_140 = pAx2[ivb[61]];
               double a2_104 = pAx2[ivb[901]];
               double a2_410 = pAx2[ivb[19]];
               double a2_014 = pAx2[ivb[915]];
               double a2_401 = pAx2[ivb[229]];
               double a2_041 = pAx2[ivb[285]];
               double a2_320 = pAx2[ivb[33]];
               double a2_302 = pAx2[ivb[453]];
               double a2_230 = pAx2[ivb[47]];
               double a2_032 = pAx2[ivb[495]];
               double a2_203 = pAx2[ivb[677]];
               double a2_023 = pAx2[ivb[705]];
               double a2_311 = pAx2[ivb[243]];
               double a2_131 = pAx2[ivb[271]];
               double a2_113 = pAx2[ivb[691]];
               double a2_122 = pAx2[ivb[481]];
               double a2_212 = pAx2[ivb[467]];
               double a2_221 = pAx2[ivb[257]];
               T[0+sd*0] = -9*a1_300 + a2_302 + a2_320 + a2_500;
               T[1+sd*0] = -9*a1_030 + a2_032 + a2_050 + a2_230;
               T[2+sd*0] = -9*a1_003 + a2_005 + a2_023 + a2_203;
               T[3+sd*0] = -9*a1_120 + a2_122 + a2_140 + a2_320;
               T[4+sd*0] = -9*a1_102 + a2_104 + a2_122 + a2_302;
               T[5+sd*0] = -9*a1_210 + a2_212 + a2_230 + a2_410;
               T[6+sd*0] = -9*a1_012 + a2_014 + a2_032 + a2_212;
               T[7+sd*0] = -9*a1_201 + a2_203 + a2_221 + a2_401;
               T[8+sd*0] = -9*a1_021 + a2_023 + a2_041 + a2_221;
               T[9+sd*0] = -9*a1_111 + a2_113 + a2_131 + a2_311;
               // 4.10 steps per component, 0.24 kb stack
               ShTrC3_NsN(&pOut[xb+nAcB*7*1*ic], nAcB, T, 1);
            }
         }
         return;
      }
      case 4: {
         for (size_t ic = 0; ic < nCount; ++ ic) {
            double const * pAx1 = &p2Z[nCartX(lb+4)*ic];
            double const * pAx2 = &p4Z[nCartX(lb+6)*ic];
            for (size_t xb = 0; xb < nAcB; ++ xb) {
               cart_vec_t const *ivb = &iv2x[ix2v[xb]];
               double T[15*1];
               size_t const sd = 15;   // stride for derivative components in T
               double a1_400 = pAx1[ivb[4]];
               double a1_040 = pAx1[ivb[60]];
               double a1_004 = pAx1[ivb[900]];
               double a1_310 = pAx1[ivb[18]];
               double a1_130 = pAx1[ivb[46]];
               double a1_301 = pAx1[ivb[228]];
               double a1_103 = pAx1[ivb[676]];
               double a1_031 = pAx1[ivb[270]];
               double a1_013 = pAx1[ivb[690]];
               double a1_220 = pAx1[ivb[32]];
               double a1_202 = pAx1[ivb[452]];
               double a1_022 = pAx1[ivb[480]];
               double a1_112 = pAx1[ivb[466]];
               double a1_121 = pAx1[ivb[256]];
               double a1_211 = pAx1[ivb[242]];
               double a2_600 = pAx2[ivb[6]];
               double a2_060 = pAx2[ivb[90]];
               double a2_006 = pAx2[ivb[1350]];
               double a2_510 = pAx2[ivb[20]];
               double a2_150 = pAx2[ivb[76]];
               double a2_501 = pAx2[ivb[230]];
               double a2_105 = pAx2[ivb[1126]];
               double a2_051 = pAx2[ivb[300]];
               double a2_015 = pAx2[ivb[1140]];
               double a2_420 = pAx2[ivb[34]];
               double a2_402 = pAx2[ivb[454]];
               double a2_240 = pAx2[ivb[62]];
               double a2_204 = pAx2[ivb[902]];
               double a2_042 = pAx2[ivb[510]];
               double a2_024 = pAx2[ivb[930]];
               double a2_330 = pAx2[ivb[48]];
               double a2_303 = pAx2[ivb[678]];
               double a2_033 = pAx2[ivb[720]];
               double a2_114 = pAx2[ivb[916]];
               double a2_141 = pAx2[ivb[286]];
               double a2_411 = pAx2[ivb[244]];
               double a2_312 = pAx2[ivb[468]];
               double a2_132 = pAx2[ivb[496]];
               double a2_321 = pAx2[ivb[258]];
               double a2_123 = pAx2[ivb[706]];
               double a2_231 = pAx2[ivb[272]];
               double a2_213 = pAx2[ivb[692]];
               double a2_222 = pAx2[ivb[482]];
               T[0+sd*0] = -11*a1_400 + a2_402 + a2_420 + a2_600;
               T[1+sd*0] = -11*a1_040 + a2_042 + a2_060 + a2_240;
               T[2+sd*0] = -11*a1_004 + a2_006 + a2_024 + a2_204;
               T[3+sd*0] = -11*a1_310 + a2_312 + a2_330 + a2_510;
               T[4+sd*0] = -11*a1_130 + a2_132 + a2_150 + a2_330;
               T[5+sd*0] = -11*a1_301 + a2_303 + a2_321 + a2_501;
               T[6+sd*0] = -11*a1_103 + a2_105 + a2_123 + a2_303;
               T[7+sd*0] = -11*a1_031 + a2_033 + a2_051 + a2_231;
               T[8+sd*0] = -11*a1_013 + a2_015 + a2_033 + a2_213;
               T[9+sd*0] = -11*a1_220 + a2_222 + a2_240 + a2_420;
               T[10+sd*0] = -11*a1_202 + a2_204 + a2_222 + a2_402;
               T[11+sd*0] = -11*a1_022 + a2_024 + a2_042 + a2_222;
               T[12+sd*0] = -11*a1_112 + a2_114 + a2_132 + a2_312;
               T[13+sd*0] = -11*a1_121 + a2_123 + a2_141 + a2_321;
               T[14+sd*0] = -11*a1_211 + a2_213 + a2_231 + a2_411;
               // 3.87 steps per component, 0.34 kb stack
               ShTrC4_NsN(&pOut[xb+nAcB*9*1*ic], nAcB, T, 1);
            }
         }
         return;
      }
      case 5: {
         for (size_t ic = 0; ic < nCount; ++ ic) {
            double const * pAx1 = &p2Z[nCartX(lb+5)*ic];
            double const * pAx2 = &p4Z[nCartX(lb+7)*ic];
            for (size_t xb = 0; xb < nAcB; ++ xb) {
               cart_vec_t const *ivb = &iv2x[ix2v[xb]];
               double T[21*1];
               size_t const sd = 21;   // stride for derivative components in T
               double a1_500 = pAx1[ivb[5]];
               double a1_050 = pAx1[ivb[75]];
               double a1_005 = pAx1[ivb[1125]];
               double a1_140 = pAx1[ivb[61]];
               double a1_104 = pAx1[ivb[901]];
               double a1_410 = pAx1[ivb[19]];
               double a1_014 = pAx1[ivb[915]];
               double a1_401 = pAx1[ivb[229]];
               double a1_041 = pAx1[ivb[285]];
               double a1_320 = pAx1[ivb[33]];
               double a1_302 = pAx1[ivb[453]];
               double a1_230 = pAx1[ivb[47]];
               double a1_032 = pAx1[ivb[495]];
               double a1_203 = pAx1[ivb[677]];
               double a1_023 = pAx1[ivb[705]];
               double a1_311 = pAx1[ivb[243]];
               double a1_131 = pAx1[ivb[271]];
               double a1_113 = pAx1[ivb[691]];
               double a1_122 = pAx1[ivb[481]];
               double a1_212 = pAx1[ivb[467]];
               double a1_221 = pAx1[ivb[257]];
               double a2_700 = pAx2[ivb[7]];
               double a2_070 = pAx2[ivb[105]];
               double a2_007 = pAx2[ivb[1575]];
               double a2_160 = pAx2[ivb[91]];
               double a2_106 = pAx2[ivb[1351]];
               double a2_610 = pAx2[ivb[21]];
               double a2_016 = pAx2[ivb[1365]];
               double a2_601 = pAx2[ivb[231]];
               double a2_061 = pAx2[ivb[315]];
               double a2_520 = pAx2[ivb[35]];
               double a2_502 = pAx2[ivb[455]];
               double a2_250 = pAx2[ivb[77]];
               double a2_052 = pAx2[ivb[525]];
               double a2_205 = pAx2[ivb[1127]];
               double a2_025 = pAx2[ivb[1155]];
               double a2_340 = pAx2[ivb[63]];
               double a2_304 = pAx2[ivb[903]];
               double a2_430 = pAx2[ivb[49]];
               double a2_034 = pAx2[ivb[945]];
               double a2_403 = pAx2[ivb[679]];
               double a2_043 = pAx2[ivb[735]];
               double a2_511 = pAx2[ivb[245]];
               double a2_151 = pAx2[ivb[301]];
               double a2_115 = pAx2[ivb[1141]];
               double a2_142 = pAx2[ivb[511]];
               double a2_124 = pAx2[ivb[931]];
               double a2_412 = pAx2[ivb[469]];
               double a2_214 = pAx2[ivb[917]];
               double a2_421 = pAx2[ivb[259]];
               double a2_241 = pAx2[ivb[287]];
               double a2_331 = pAx2[ivb[273]];
               double a2_313 = pAx2[ivb[693]];
               double a2_133 = pAx2[ivb[721]];
               double a2_322 = pAx2[ivb[483]];
               double a2_232 = pAx2[ivb[497]];
               double a2_223 = pAx2[ivb[707]];
               T[0+sd*0] = -13*a1_500 + a2_502 + a2_520 + a2_700;
               T[1+sd*0] = -13*a1_050 + a2_052 + a2_070 + a2_250;
               T[2+sd*0] = -13*a1_005 + a2_007 + a2_025 + a2_205;
               T[3+sd*0] = -13*a1_140 + a2_142 + a2_160 + a2_340;
               T[4+sd*0] = -13*a1_104 + a2_106 + a2_124 + a2_304;
               T[5+sd*0] = -13*a1_410 + a2_412 + a2_430 + a2_610;
               T[6+sd*0] = -13*a1_014 + a2_016 + a2_034 + a2_214;
               T[7+sd*0] = -13*a1_401 + a2_403 + a2_421 + a2_601;
               T[8+sd*0] = -13*a1_041 + a2_043 + a2_061 + a2_241;
               T[9+sd*0] = -13*a1_320 + a2_322 + a2_340 + a2_520;
               T[10+sd*0] = -13*a1_302 + a2_304 + a2_322 + a2_502;
               T[11+sd*0] = -13*a1_230 + a2_232 + a2_250 + a2_430;
               T[12+sd*0] = -13*a1_032 + a2_034 + a2_052 + a2_232;
               T[13+sd*0] = -13*a1_203 + a2_205 + a2_223 + a2_403;
               T[14+sd*0] = -13*a1_023 + a2_025 + a2_043 + a2_223;
               T[15+sd*0] = -13*a1_311 + a2_313 + a2_331 + a2_511;
               T[16+sd*0] = -13*a1_131 + a2_133 + a2_151 + a2_331;
               T[17+sd*0] = -13*a1_113 + a2_115 + a2_133 + a2_313;
               T[18+sd*0] = -13*a1_122 + a2_124 + a2_142 + a2_322;
               T[19+sd*0] = -13*a1_212 + a2_214 + a2_232 + a2_412;
               T[20+sd*0] = -13*a1_221 + a2_223 + a2_241 + a2_421;
               // 3.71 steps per component, 0.45 kb stack
               ShTrC5_NsN(&pOut[xb+nAcB*11*1*ic], nAcB, T, 1);
            }
         }
         return;
      }
      case 6: {
         for (size_t ic = 0; ic < nCount; ++ ic) {
            double const * pAx1 = &p2Z[nCartX(lb+6)*ic];
            double const * pAx2 = &p4Z[nCartX(lb+8)*ic];
            for (size_t xb = 0; xb < nAcB; ++ xb) {
               cart_vec_t const *ivb = &iv2x[ix2v[xb]];
               double T[28*1];
               size_t const sd = 28;   // stride for derivative components in T
               double a1_600 = pAx1[ivb[6]];
               double a1_060 = pAx1[ivb[90]];
               double a1_006 = pAx1[ivb[1350]];
               double a1_510 = pAx1[ivb[20]];
               double a1_150 = pAx1[ivb[76]];
               double a1_501 = pAx1[ivb[230]];
               double a1_105 = pAx1[ivb[1126]];
               double a1_051 = pAx1[ivb[300]];
               double a1_015 = pAx1[ivb[1140]];
               double a1_420 = pAx1[ivb[34]];
               double a1_402 = pAx1[ivb[454]];
               double a1_240 = pAx1[ivb[62]];
               double a1_204 = pAx1[ivb[902]];
               double a1_042 = pAx1[ivb[510]];
               double a1_024 = pAx1[ivb[930]];
               double a1_330 = pAx1[ivb[48]];
               double a1_303 = pAx1[ivb[678]];
               double a1_033 = pAx1[ivb[720]];
               double a1_114 = pAx1[ivb[916]];
               double a1_141 = pAx1[ivb[286]];
               double a1_411 = pAx1[ivb[244]];
               double a1_312 = pAx1[ivb[468]];
               double a1_132 = pAx1[ivb[496]];
               double a1_321 = pAx1[ivb[258]];
               double a1_123 = pAx1[ivb[706]];
               double a1_231 = pAx1[ivb[272]];
               double a1_213 = pAx1[ivb[692]];
               double a1_222 = pAx1[ivb[482]];
               double a2_800 = pAx2[ivb[8]];
               double a2_080 = pAx2[ivb[120]];
               double a2_008 = pAx2[ivb[1800]];
               double a2_710 = pAx2[ivb[22]];
               double a2_170 = pAx2[ivb[106]];
               double a2_701 = pAx2[ivb[232]];
               double a2_107 = pAx2[ivb[1576]];
               double a2_071 = pAx2[ivb[330]];
               double a2_017 = pAx2[ivb[1590]];
               double a2_620 = pAx2[ivb[36]];
               double a2_602 = pAx2[ivb[456]];
               double a2_260 = pAx2[ivb[92]];
               double a2_206 = pAx2[ivb[1352]];
               double a2_062 = pAx2[ivb[540]];
               double a2_026 = pAx2[ivb[1380]];
               double a2_530 = pAx2[ivb[50]];
               double a2_350 = pAx2[ivb[78]];
               double a2_503 = pAx2[ivb[680]];
               double a2_305 = pAx2[ivb[1128]];
               double a2_053 = pAx2[ivb[750]];
               double a2_035 = pAx2[ivb[1170]];
               double a2_440 = pAx2[ivb[64]];
               double a2_404 = pAx2[ivb[904]];
               double a2_044 = pAx2[ivb[960]];
               double a2_116 = pAx2[ivb[1366]];
               double a2_161 = pAx2[ivb[316]];
               double a2_611 = pAx2[ivb[246]];
               double a2_512 = pAx2[ivb[470]];
               double a2_152 = pAx2[ivb[526]];
               double a2_521 = pAx2[ivb[260]];
               double a2_125 = pAx2[ivb[1156]];
               double a2_251 = pAx2[ivb[302]];
               double a2_215 = pAx2[ivb[1142]];
               double a2_314 = pAx2[ivb[918]];
               double a2_134 = pAx2[ivb[946]];
               double a2_341 = pAx2[ivb[288]];
               double a2_143 = pAx2[ivb[736]];
               double a2_431 = pAx2[ivb[274]];
               double a2_413 = pAx2[ivb[694]];
               double a2_422 = pAx2[ivb[484]];
               double a2_242 = pAx2[ivb[512]];
               double a2_224 = pAx2[ivb[932]];
               double a2_332 = pAx2[ivb[498]];
               double a2_323 = pAx2[ivb[708]];
               double a2_233 = pAx2[ivb[722]];
               T[0+sd*0] = -15*a1_600 + a2_602 + a2_620 + a2_800;
               T[1+sd*0] = -15*a1_060 + a2_062 + a2_080 + a2_260;
               T[2+sd*0] = -15*a1_006 + a2_008 + a2_026 + a2_206;
               T[3+sd*0] = -15*a1_510 + a2_512 + a2_530 + a2_710;
               T[4+sd*0] = -15*a1_150 + a2_152 + a2_170 + a2_350;
               T[5+sd*0] = -15*a1_501 + a2_503 + a2_521 + a2_701;
               T[6+sd*0] = -15*a1_105 + a2_107 + a2_125 + a2_305;
               T[7+sd*0] = -15*a1_051 + a2_053 + a2_071 + a2_251;
               T[8+sd*0] = -15*a1_015 + a2_017 + a2_035 + a2_215;
               T[9+sd*0] = -15*a1_420 + a2_422 + a2_440 + a2_620;
               T[10+sd*0] = -15*a1_402 + a2_404 + a2_422 + a2_602;
               T[11+sd*0] = -15*a1_240 + a2_242 + a2_260 + a2_440;
               T[12+sd*0] = -15*a1_204 + a2_206 + a2_224 + a2_404;
               T[13+sd*0] = -15*a1_042 + a2_044 + a2_062 + a2_242;
               T[14+sd*0] = -15*a1_024 + a2_026 + a2_044 + a2_224;
               T[15+sd*0] = -15*a1_330 + a2_332 + a2_350 + a2_530;
               T[16+sd*0] = -15*a1_303 + a2_305 + a2_323 + a2_503;
               T[17+sd*0] = -15*a1_033 + a2_035 + a2_053 + a2_233;
               T[18+sd*0] = -15*a1_114 + a2_116 + a2_134 + a2_314;
               T[19+sd*0] = -15*a1_141 + a2_143 + a2_161 + a2_341;
               T[20+sd*0] = -15*a1_411 + a2_413 + a2_431 + a2_611;
               T[21+sd*0] = -15*a1_312 + a2_314 + a2_332 + a2_512;
               T[22+sd*0] = -15*a1_132 + a2_134 + a2_152 + a2_332;
               T[23+sd*0] = -15*a1_321 + a2_323 + a2_341 + a2_521;
               T[24+sd*0] = -15*a1_123 + a2_125 + a2_143 + a2_323;
               T[25+sd*0] = -15*a1_231 + a2_233 + a2_251 + a2_431;
               T[26+sd*0] = -15*a1_213 + a2_215 + a2_233 + a2_413;
               T[27+sd*0] = -15*a1_222 + a2_224 + a2_242 + a2_422;
               // 3.61 steps per component, 0.57 kb stack
               ShTrC6_NsN(&pOut[xb+nAcB*13*1*ic], nAcB, T, 1);
            }
         }
         return;
      }
   }
   //assert(0);
}

// transform cartesians centered at A and multiplied by (2 ZetaB)^n, to 1st derivative integrals with respect to B at center B.
// input p0Z: nCartX(lb-1) x nCount matrix of unscaled (a0| sets.
// input p2Z: nCartX(lb+1) x nCount matrix of (2 ZetaB)^1-scaled (a0| sets.
// output is (2lb+1) x 3 x nCount, with strides sb (for Slm(x-B)), sd (for derivatives x y z), and sa (for nCount).
void OsrrC_dB1(double * pOut, size_t sa, size_t sb, size_t sd, double const * p0Z, double const * p2Z, double AmBx, double AmBy, double AmBz, unsigned lb, size_t nCount)
{
   switch(lb) {
      case 0: {
         for (size_t ia = 0; ia < nCount; ++ ia) {
            double const * pAx1 = p2Z + 4 * ia;
            double * pOut_ = pOut + sa * ia;
            double b_100_1 = AmBx*pAx1[0] + pAx1[1];
            double b_010_1 = AmBy*pAx1[0] + pAx1[2];
            double b_001_1 = AmBz*pAx1[0] + pAx1[3];
            double bx_000 = b_100_1;
            double by_000 = b_010_1;
            double bz_000 = b_001_1;
            // 2.00 steps per component, 0.05 kb stack
            pOut_[sb*0 + sd*0] = bx_000;
            pOut_[sb*0 + sd*1] = by_000;
            pOut_[sb*0 + sd*2] = bz_000;
         }
         return;
      }
      case 1: {
         for (size_t ia = 0; ia < nCount; ++ ia) {
            double const * pAx0 = p0Z + 1 * ia;
            double const * pAx1 = p2Z + 10 * ia;
            double * pOut_ = pOut + sa * ia;
            double b_100_1 = AmBx*pAx1[0] + pAx1[1];
            double r_100_100_1 = AmBx*pAx1[1] + pAx1[4];
            double r_010_100_1 = AmBx*pAx1[2] + pAx1[7];
            double r_001_100_1 = AmBx*pAx1[3] + pAx1[8];
            double b_010_1 = AmBy*pAx1[0] + pAx1[2];
            double r_010_010_1 = AmBy*pAx1[2] + pAx1[5];
            double r_001_010_1 = AmBy*pAx1[3] + pAx1[9];
            double b_001_1 = AmBz*pAx1[0] + pAx1[3];
            double r_001_001_1 = AmBz*pAx1[3] + pAx1[6];
            double b_200_1 = AmBx*b_100_1 + r_100_100_1;
            double b_020_1 = AmBy*b_010_1 + r_010_010_1;
            double b_002_1 = AmBz*b_001_1 + r_001_001_1;
            double b_110_1 = AmBy*b_100_1 + r_010_100_1;
            double b_101_1 = AmBz*b_100_1 + r_001_100_1;
            double b_011_1 = AmBz*b_010_1 + r_001_010_1;
            double bx_100 = b_200_1 - pAx0[0];
            double bx_010 = b_110_1;
            double bx_001 = b_101_1;
            double by_100 = b_110_1;
            double by_010 = b_020_1 - pAx0[0];
            double by_001 = b_011_1;
            double bz_100 = b_101_1;
            double bz_010 = b_011_1;
            double bz_001 = b_002_1 - pAx0[0];
            // 2.67 steps per component, 0.19 kb stack
            pOut_[sb*0 + sd*0] = bx_100;
            pOut_[sb*0 + sd*1] = by_100;
            pOut_[sb*0 + sd*2] = bz_100;
            pOut_[sb*1 + sd*0] = bx_010;
            pOut_[sb*1 + sd*1] = by_010;
            pOut_[sb*1 + sd*2] = bz_010;
            pOut_[sb*2 + sd*0] = bx_001;
            pOut_[sb*2 + sd*1] = by_001;
            pOut_[sb*2 + sd*2] = bz_001;
         }
         return;
      }
      case 2: {
         for (size_t ia = 0; ia < nCount; ++ ia) {
            double const * pAx0 = p0Z + 4 * ia;
            double const * pAx1 = p2Z + 20 * ia;
            double * pOut_ = pOut + sa * ia;
            double b_100 = AmBx*pAx0[0] + pAx0[1];
            double b_100_1 = AmBx*pAx1[0] + pAx1[1];
            double r_100_100_1 = AmBx*pAx1[1] + pAx1[4];
            double r_010_100_1 = AmBx*pAx1[2] + pAx1[7];
            double r_001_100_1 = AmBx*pAx1[3] + pAx1[8];
            double r_200_100_1 = AmBx*pAx1[4] + pAx1[10];
            double r_110_100_1 = AmBx*pAx1[7] + pAx1[15];
            double r_101_100_1 = AmBx*pAx1[8] + pAx1[17];
            double r_011_100_1 = AmBx*pAx1[9] + pAx1[19];
            double b_010 = AmBy*pAx0[0] + pAx0[2];
            double b_010_1 = AmBy*pAx1[0] + pAx1[2];
            double r_100_010_1 = AmBy*pAx1[1] + pAx1[7];
            double r_010_010_1 = AmBy*pAx1[2] + pAx1[5];
            double r_001_010_1 = AmBy*pAx1[3] + pAx1[9];
            double r_020_010_1 = AmBy*pAx1[5] + pAx1[11];
            double r_110_010_1 = AmBy*pAx1[7] + pAx1[13];
            double r_011_010_1 = AmBy*pAx1[9] + pAx1[18];
            double b_001 = AmBz*pAx0[0] + pAx0[3];
            double b_001_1 = AmBz*pAx1[0] + pAx1[3];
            double r_100_001_1 = AmBz*pAx1[1] + pAx1[8];
            double r_010_001_1 = AmBz*pAx1[2] + pAx1[9];
            double r_001_001_1 = AmBz*pAx1[3] + pAx1[6];
            double r_002_001_1 = AmBz*pAx1[6] + pAx1[12];
            double r_101_001_1 = AmBz*pAx1[8] + pAx1[14];
            double r_011_001_1 = AmBz*pAx1[9] + pAx1[16];
            double b_200_1 = AmBx*b_100_1 + r_100_100_1;
            double r_100_200_1 = AmBx*r_100_100_1 + r_200_100_1;
            double r_010_200_1 = AmBx*r_010_100_1 + r_110_100_1;
            double r_001_200_1 = AmBx*r_001_100_1 + r_101_100_1;
            double b_020_1 = AmBy*b_010_1 + r_010_010_1;
            double r_100_020_1 = AmBy*r_100_010_1 + r_110_010_1;
            double r_010_020_1 = AmBy*r_010_010_1 + r_020_010_1;
            double r_001_020_1 = AmBy*r_001_010_1 + r_011_010_1;
            double b_002_1 = AmBz*b_001_1 + r_001_001_1;
            double r_100_002_1 = AmBz*r_100_001_1 + r_101_001_1;
            double r_010_002_1 = AmBz*r_010_001_1 + r_011_001_1;
            double r_001_002_1 = AmBz*r_001_001_1 + r_002_001_1;
            double b_110_1 = AmBy*b_100_1 + r_010_100_1;
            double r_001_110_1 = AmBy*r_001_100_1 + r_011_100_1;
            double b_300_1 = AmBx*b_200_1 + r_100_200_1;
            double b_030_1 = AmBy*b_020_1 + r_010_020_1;
            double b_003_1 = AmBz*b_002_1 + r_001_002_1;
            double b_120_1 = AmBx*b_020_1 + r_100_020_1;
            double b_102_1 = AmBx*b_002_1 + r_100_002_1;
            double b_210_1 = AmBy*b_200_1 + r_010_200_1;
            double b_012_1 = AmBy*b_002_1 + r_010_002_1;
            double b_201_1 = AmBz*b_200_1 + r_001_200_1;
            double b_021_1 = AmBz*b_020_1 + r_001_020_1;
            double b_111_1 = AmBz*b_110_1 + r_001_110_1;
            double bx_200 = -2*b_100 + b_300_1;
            double bx_020 = b_120_1;
            double bx_002 = b_102_1;
            double bx_110 = -b_010 + b_210_1;
            double bx_101 = -b_001 + b_201_1;
            double bx_011 = b_111_1;
            double by_200 = b_210_1;
            double by_020 = -2*b_010 + b_030_1;
            double by_002 = b_012_1;
            double by_110 = -b_100 + b_120_1;
            double by_101 = b_111_1;
            double by_011 = -b_001 + b_021_1;
            double bz_200 = b_201_1;
            double bz_020 = b_021_1;
            double bz_002 = -2*b_001 + b_003_1;
            double bz_110 = b_111_1;
            double bz_101 = -b_100 + b_102_1;
            double bz_011 = -b_010 + b_012_1;
            // 3.72 steps per component, 0.52 kb stack
            pOut_[sb*0 + sd*0] = bx_002 - bx_020*sd0 - bx_200*sd0;
            pOut_[sb*0 + sd*1] = by_002 - by_020*sd0 - by_200*sd0;
            pOut_[sb*0 + sd*2] = bz_002 - bz_020*sd0 - bz_200*sd0;
            pOut_[sb*1 + sd*0] = bx_110*sd1;
            pOut_[sb*1 + sd*1] = by_110*sd1;
            pOut_[sb*1 + sd*2] = bz_110*sd1;
            pOut_[sb*2 + sd*0] = bx_101*sd1;
            pOut_[sb*2 + sd*1] = by_101*sd1;
            pOut_[sb*2 + sd*2] = bz_101*sd1;
            pOut_[sb*3 + sd*0] = -bx_020*sd2 + bx_200*sd2;
            pOut_[sb*3 + sd*1] = -by_020*sd2 + by_200*sd2;
            pOut_[sb*3 + sd*2] = -bz_020*sd2 + bz_200*sd2;
            pOut_[sb*4 + sd*0] = bx_011*sd1;
            pOut_[sb*4 + sd*1] = by_011*sd1;
            pOut_[sb*4 + sd*2] = bz_011*sd1;
         }
         return;
      }
      case 3: {
         for (size_t ia = 0; ia < nCount; ++ ia) {
            double const * pAx0 = p0Z + 10 * ia;
            double const * pAx1 = p2Z + 35 * ia;
            double * pOut_ = pOut + sa * ia;
            double b_100 = AmBx*pAx0[0] + pAx0[1];
            double r_100_100 = AmBx*pAx0[1] + pAx0[4];
            double r_010_100 = AmBx*pAx0[2] + pAx0[7];
            double r_001_100 = AmBx*pAx0[3] + pAx0[8];
            double b_100_1 = AmBx*pAx1[0] + pAx1[1];
            double r_100_100_1 = AmBx*pAx1[1] + pAx1[4];
            double r_010_100_1 = AmBx*pAx1[2] + pAx1[7];
            double r_001_100_1 = AmBx*pAx1[3] + pAx1[8];
            double r_200_100_1 = AmBx*pAx1[4] + pAx1[10];
            double r_110_100_1 = AmBx*pAx1[7] + pAx1[15];
            double r_101_100_1 = AmBx*pAx1[8] + pAx1[17];
            double r_011_100_1 = AmBx*pAx1[9] + pAx1[19];
            double r_300_100_1 = AmBx*pAx1[10] + pAx1[20];
            double r_210_100_1 = AmBx*pAx1[15] + pAx1[23];
            double r_201_100_1 = AmBx*pAx1[17] + pAx1[25];
            double r_111_100_1 = AmBx*pAx1[19] + pAx1[34];
            double b_010 = AmBy*pAx0[0] + pAx0[2];
            double r_010_010 = AmBy*pAx0[2] + pAx0[5];
            double r_001_010 = AmBy*pAx0[3] + pAx0[9];
            double b_010_1 = AmBy*pAx1[0] + pAx1[2];
            double r_100_010_1 = AmBy*pAx1[1] + pAx1[7];
            double r_010_010_1 = AmBy*pAx1[2] + pAx1[5];
            double r_001_010_1 = AmBy*pAx1[3] + pAx1[9];
            double r_200_010_1 = AmBy*pAx1[4] + pAx1[15];
            double r_020_010_1 = AmBy*pAx1[5] + pAx1[11];
            double r_110_010_1 = AmBy*pAx1[7] + pAx1[13];
            double r_101_010_1 = AmBy*pAx1[8] + pAx1[19];
            double r_011_010_1 = AmBy*pAx1[9] + pAx1[18];
            double r_030_010_1 = AmBy*pAx1[11] + pAx1[21];
            double r_120_010_1 = AmBy*pAx1[13] + pAx1[24];
            double r_210_010_1 = AmBy*pAx1[15] + pAx1[29];
            double r_021_010_1 = AmBy*pAx1[18] + pAx1[27];
            double r_111_010_1 = AmBy*pAx1[19] + pAx1[33];
            double b_001 = AmBz*pAx0[0] + pAx0[3];
            double r_001_001 = AmBz*pAx0[3] + pAx0[6];
            double b_001_1 = AmBz*pAx1[0] + pAx1[3];
            double r_100_001_1 = AmBz*pAx1[1] + pAx1[8];
            double r_010_001_1 = AmBz*pAx1[2] + pAx1[9];
            double r_001_001_1 = AmBz*pAx1[3] + pAx1[6];
            double r_200_001_1 = AmBz*pAx1[4] + pAx1[17];
            double r_020_001_1 = AmBz*pAx1[5] + pAx1[18];
            double r_002_001_1 = AmBz*pAx1[6] + pAx1[12];
            double r_110_001_1 = AmBz*pAx1[7] + pAx1[19];
            double r_101_001_1 = AmBz*pAx1[8] + pAx1[14];
            double r_011_001_1 = AmBz*pAx1[9] + pAx1[16];
            double r_003_001_1 = AmBz*pAx1[12] + pAx1[22];
            double r_102_001_1 = AmBz*pAx1[14] + pAx1[26];
            double r_012_001_1 = AmBz*pAx1[16] + pAx1[28];
            double r_201_001_1 = AmBz*pAx1[17] + pAx1[30];
            double r_021_001_1 = AmBz*pAx1[18] + pAx1[31];
            double r_111_001_1 = AmBz*pAx1[19] + pAx1[32];
            double b_200 = AmBx*b_100 + r_100_100;
            double b_200_1 = AmBx*b_100_1 + r_100_100_1;
            double r_100_200_1 = AmBx*r_100_100_1 + r_200_100_1;
            double r_010_200_1 = AmBx*r_010_100_1 + r_110_100_1;
            double r_001_200_1 = AmBx*r_001_100_1 + r_101_100_1;
            double r_200_200_1 = AmBx*r_200_100_1 + r_300_100_1;
            double r_110_200_1 = AmBx*r_110_100_1 + r_210_100_1;
            double r_101_200_1 = AmBx*r_101_100_1 + r_201_100_1;
            double r_011_200_1 = AmBx*r_011_100_1 + r_111_100_1;
            double b_020 = AmBy*b_010 + r_010_010;
            double b_020_1 = AmBy*b_010_1 + r_010_010_1;
            double r_100_020_1 = AmBy*r_100_010_1 + r_110_010_1;
            double r_010_020_1 = AmBy*r_010_010_1 + r_020_010_1;
            double r_001_020_1 = AmBy*r_001_010_1 + r_011_010_1;
            double r_200_020_1 = AmBy*r_200_010_1 + r_210_010_1;
            double r_020_020_1 = AmBy*r_020_010_1 + r_030_010_1;
            double r_110_020_1 = AmBy*r_110_010_1 + r_120_010_1;
            double r_101_020_1 = AmBy*r_101_010_1 + r_111_010_1;
            double r_011_020_1 = AmBy*r_011_010_1 + r_021_010_1;
            double b_002 = AmBz*b_001 + r_001_001;
            double b_002_1 = AmBz*b_001_1 + r_001_001_1;
            double r_100_002_1 = AmBz*r_100_001_1 + r_101_001_1;
            double r_010_002_1 = AmBz*r_010_001_1 + r_011_001_1;
            double r_001_002_1 = AmBz*r_001_001_1 + r_002_001_1;
            double r_200_002_1 = AmBz*r_200_001_1 + r_201_001_1;
            double r_020_002_1 = AmBz*r_020_001_1 + r_021_001_1;
            double r_002_002_1 = AmBz*r_002_001_1 + r_003_001_1;
            double r_110_002_1 = AmBz*r_110_001_1 + r_111_001_1;
            double r_101_002_1 = AmBz*r_101_001_1 + r_102_001_1;
            double r_011_002_1 = AmBz*r_011_001_1 + r_012_001_1;
            double b_110 = AmBy*b_100 + r_010_100;
            double b_101 = AmBz*b_100 + r_001_100;
            double b_011 = AmBz*b_010 + r_001_010;
            double b_300_1 = AmBx*b_200_1 + r_100_200_1;
            double r_100_300_1 = AmBx*r_100_200_1 + r_200_200_1;
            double r_010_300_1 = AmBx*r_010_200_1 + r_110_200_1;
            double r_001_300_1 = AmBx*r_001_200_1 + r_101_200_1;
            double b_030_1 = AmBy*b_020_1 + r_010_020_1;
            double r_100_030_1 = AmBy*r_100_020_1 + r_110_020_1;
            double r_010_030_1 = AmBy*r_010_020_1 + r_020_020_1;
            double r_001_030_1 = AmBy*r_001_020_1 + r_011_020_1;
            double b_003_1 = AmBz*b_002_1 + r_001_002_1;
            double r_100_003_1 = AmBz*r_100_002_1 + r_101_002_1;
            double r_010_003_1 = AmBz*r_010_002_1 + r_011_002_1;
            double r_001_003_1 = AmBz*r_001_002_1 + r_002_002_1;
            double b_120_1 = AmBx*b_020_1 + r_100_020_1;
            double r_100_120_1 = AmBx*r_100_020_1 + r_200_020_1;
            double r_001_120_1 = AmBx*r_001_020_1 + r_101_020_1;
            double b_102_1 = AmBx*b_002_1 + r_100_002_1;
            double r_100_102_1 = AmBx*r_100_002_1 + r_200_002_1;
            double r_010_102_1 = AmBx*r_010_002_1 + r_110_002_1;
            double b_210_1 = AmBy*b_200_1 + r_010_200_1;
            double r_001_210_1 = AmBy*r_001_200_1 + r_011_200_1;
            double b_012_1 = AmBy*b_002_1 + r_010_002_1;
            double r_010_012_1 = AmBy*r_010_002_1 + r_020_002_1;
            double b_400_1 = AmBx*b_300_1 + r_100_300_1;
            double b_040_1 = AmBy*b_030_1 + r_010_030_1;
            double b_004_1 = AmBz*b_003_1 + r_001_003_1;
            double b_310_1 = AmBy*b_300_1 + r_010_300_1;
            double b_130_1 = AmBx*b_030_1 + r_100_030_1;
            double b_301_1 = AmBz*b_300_1 + r_001_300_1;
            double b_103_1 = AmBx*b_003_1 + r_100_003_1;
            double b_031_1 = AmBz*b_030_1 + r_001_030_1;
            double b_013_1 = AmBy*b_003_1 + r_010_003_1;
            double b_220_1 = AmBx*b_120_1 + r_100_120_1;
            double b_202_1 = AmBx*b_102_1 + r_100_102_1;
            double b_022_1 = AmBy*b_012_1 + r_010_012_1;
            double b_112_1 = AmBy*b_102_1 + r_010_102_1;
            double b_121_1 = AmBz*b_120_1 + r_001_120_1;
            double b_211_1 = AmBz*b_210_1 + r_001_210_1;
            double bx_300 = -3*b_200 + b_400_1;
            double bx_030 = b_130_1;
            double bx_003 = b_103_1;
            double bx_120 = -b_020 + b_220_1;
            double bx_102 = -b_002 + b_202_1;
            double bx_210 = -2*b_110 + b_310_1;
            double bx_012 = b_112_1;
            double bx_201 = -2*b_101 + b_301_1;
            double bx_021 = b_121_1;
            double bx_111 = -b_011 + b_211_1;
            double by_300 = b_310_1;
            double by_030 = -3*b_020 + b_040_1;
            double by_003 = b_013_1;
            double by_120 = -2*b_110 + b_130_1;
            double by_102 = b_112_1;
            double by_210 = -b_200 + b_220_1;
            double by_012 = -b_002 + b_022_1;
            double by_201 = b_211_1;
            double by_021 = -2*b_011 + b_031_1;
            double by_111 = -b_101 + b_121_1;
            double bz_300 = b_301_1;
            double bz_030 = b_031_1;
            double bz_003 = -3*b_002 + b_004_1;
            double bz_120 = b_121_1;
            double bz_102 = -2*b_101 + b_103_1;
            double bz_210 = b_211_1;
            double bz_012 = -2*b_011 + b_013_1;
            double bz_201 = -b_200 + b_202_1;
            double bz_021 = -b_020 + b_022_1;
            double bz_111 = -b_110 + b_112_1;
            // 5.03 steps per component, 1.18 kb stack
            pOut_[sb*0 + sd*0] = bx_102*sd4 - bx_120*sd3 - bx_300*sd3;
            pOut_[sb*0 + sd*1] = by_102*sd4 - by_120*sd3 - by_300*sd3;
            pOut_[sb*0 + sd*2] = bz_102*sd4 - bz_120*sd3 - bz_300*sd3;
            pOut_[sb*1 + sd*0] = bx_012*sd4 - bx_030*sd3 - bx_210*sd3;
            pOut_[sb*1 + sd*1] = by_012*sd4 - by_030*sd3 - by_210*sd3;
            pOut_[sb*1 + sd*2] = bz_012*sd4 - bz_030*sd3 - bz_210*sd3;
            pOut_[sb*2 + sd*0] = bx_003 - bx_021*sd5 - bx_201*sd5;
            pOut_[sb*2 + sd*1] = by_003 - by_021*sd5 - by_201*sd5;
            pOut_[sb*2 + sd*2] = bz_003 - bz_021*sd5 - bz_201*sd5;
            pOut_[sb*3 + sd*0] = -bx_120*sd7 + bx_300*sd6;
            pOut_[sb*3 + sd*1] = -by_120*sd7 + by_300*sd6;
            pOut_[sb*3 + sd*2] = -bz_120*sd7 + bz_300*sd6;
            pOut_[sb*4 + sd*0] = bx_111*sd8;
            pOut_[sb*4 + sd*1] = by_111*sd8;
            pOut_[sb*4 + sd*2] = bz_111*sd8;
            pOut_[sb*5 + sd*0] = -bx_030*sd6 + bx_210*sd7;
            pOut_[sb*5 + sd*1] = -by_030*sd6 + by_210*sd7;
            pOut_[sb*5 + sd*2] = -bz_030*sd6 + bz_210*sd7;
            pOut_[sb*6 + sd*0] = -bx_021*sd9 + bx_201*sd9;
            pOut_[sb*6 + sd*1] = -by_021*sd9 + by_201*sd9;
            pOut_[sb*6 + sd*2] = -bz_021*sd9 + bz_201*sd9;
         }
         return;
      }
      case 4: {
         for (size_t ia = 0; ia < nCount; ++ ia) {
            double const * pAx0 = p0Z + 20 * ia;
            double const * pAx1 = p2Z + 56 * ia;
            double * pOut_ = pOut + sa * ia;
            double b_100 = AmBx*pAx0[0] + pAx0[1];
            double r_100_100 = AmBx*pAx0[1] + pAx0[4];
            double r_010_100 = AmBx*pAx0[2] + pAx0[7];
            double r_001_100 = AmBx*pAx0[3] + pAx0[8];
            double r_200_100 = AmBx*pAx0[4] + pAx0[10];
            double r_110_100 = AmBx*pAx0[7] + pAx0[15];
            double r_101_100 = AmBx*pAx0[8] + pAx0[17];
            double r_011_100 = AmBx*pAx0[9] + pAx0[19];
            double b_100_1 = AmBx*pAx1[0] + pAx1[1];
            double r_100_100_1 = AmBx*pAx1[1] + pAx1[4];
            double r_010_100_1 = AmBx*pAx1[2] + pAx1[7];
            double r_001_100_1 = AmBx*pAx1[3] + pAx1[8];
            double r_200_100_1 = AmBx*pAx1[4] + pAx1[10];
            double r_020_100_1 = AmBx*pAx1[5] + pAx1[13];
            double r_002_100_1 = AmBx*pAx1[6] + pAx1[14];
            double r_110_100_1 = AmBx*pAx1[7] + pAx1[15];
            double r_101_100_1 = AmBx*pAx1[8] + pAx1[17];
            double r_011_100_1 = AmBx*pAx1[9] + pAx1[19];
            double r_300_100_1 = AmBx*pAx1[10] + pAx1[20];
            double r_120_100_1 = AmBx*pAx1[13] + pAx1[29];
            double r_102_100_1 = AmBx*pAx1[14] + pAx1[30];
            double r_210_100_1 = AmBx*pAx1[15] + pAx1[23];
            double r_201_100_1 = AmBx*pAx1[17] + pAx1[25];
            double r_111_100_1 = AmBx*pAx1[19] + pAx1[34];
            double r_400_100_1 = AmBx*pAx1[20] + pAx1[35];
            double r_310_100_1 = AmBx*pAx1[23] + pAx1[40];
            double r_301_100_1 = AmBx*pAx1[25] + pAx1[42];
            double r_220_100_1 = AmBx*pAx1[29] + pAx1[44];
            double r_202_100_1 = AmBx*pAx1[30] + pAx1[45];
            double r_211_100_1 = AmBx*pAx1[34] + pAx1[50];
            double b_010 = AmBy*pAx0[0] + pAx0[2];
            double r_100_010 = AmBy*pAx0[1] + pAx0[7];
            double r_010_010 = AmBy*pAx0[2] + pAx0[5];
            double r_001_010 = AmBy*pAx0[3] + pAx0[9];
            double r_020_010 = AmBy*pAx0[5] + pAx0[11];
            double r_110_010 = AmBy*pAx0[7] + pAx0[13];
            double r_011_010 = AmBy*pAx0[9] + pAx0[18];
            double b_010_1 = AmBy*pAx1[0] + pAx1[2];
            double r_100_010_1 = AmBy*pAx1[1] + pAx1[7];
            double r_010_010_1 = AmBy*pAx1[2] + pAx1[5];
            double r_001_010_1 = AmBy*pAx1[3] + pAx1[9];
            double r_200_010_1 = AmBy*pAx1[4] + pAx1[15];
            double r_020_010_1 = AmBy*pAx1[5] + pAx1[11];
            double r_002_010_1 = AmBy*pAx1[6] + pAx1[16];
            double r_110_010_1 = AmBy*pAx1[7] + pAx1[13];
            double r_101_010_1 = AmBy*pAx1[8] + pAx1[19];
            double r_011_010_1 = AmBy*pAx1[9] + pAx1[18];
            double r_030_010_1 = AmBy*pAx1[11] + pAx1[21];
            double r_120_010_1 = AmBy*pAx1[13] + pAx1[24];
            double r_210_010_1 = AmBy*pAx1[15] + pAx1[29];
            double r_012_010_1 = AmBy*pAx1[16] + pAx1[31];
            double r_201_010_1 = AmBy*pAx1[17] + pAx1[34];
            double r_021_010_1 = AmBy*pAx1[18] + pAx1[27];
            double r_111_010_1 = AmBy*pAx1[19] + pAx1[33];
            double r_040_010_1 = AmBy*pAx1[21] + pAx1[36];
            double r_130_010_1 = AmBy*pAx1[24] + pAx1[38];
            double r_031_010_1 = AmBy*pAx1[27] + pAx1[43];
            double r_220_010_1 = AmBy*pAx1[29] + pAx1[46];
            double r_022_010_1 = AmBy*pAx1[31] + pAx1[47];
            double r_121_010_1 = AmBy*pAx1[33] + pAx1[51];
            double r_211_010_1 = AmBy*pAx1[34] + pAx1[55];
            double b_001 = AmBz*pAx0[0] + pAx0[3];
            double r_100_001 = AmBz*pAx0[1] + pAx0[8];
            double r_010_001 = AmBz*pAx0[2] + pAx0[9];
            double r_001_001 = AmBz*pAx0[3] + pAx0[6];
            double r_002_001 = AmBz*pAx0[6] + pAx0[12];
            double r_101_001 = AmBz*pAx0[8] + pAx0[14];
            double r_011_001 = AmBz*pAx0[9] + pAx0[16];
            double b_001_1 = AmBz*pAx1[0] + pAx1[3];
            double r_100_001_1 = AmBz*pAx1[1] + pAx1[8];
            double r_010_001_1 = AmBz*pAx1[2] + pAx1[9];
            double r_001_001_1 = AmBz*pAx1[3] + pAx1[6];
            double r_200_001_1 = AmBz*pAx1[4] + pAx1[17];
            double r_020_001_1 = AmBz*pAx1[5] + pAx1[18];
            double r_002_001_1 = AmBz*pAx1[6] + pAx1[12];
            double r_110_001_1 = AmBz*pAx1[7] + pAx1[19];
            double r_101_001_1 = AmBz*pAx1[8] + pAx1[14];
            double r_011_001_1 = AmBz*pAx1[9] + pAx1[16];
            double r_003_001_1 = AmBz*pAx1[12] + pAx1[22];
            double r_120_001_1 = AmBz*pAx1[13] + pAx1[33];
            double r_102_001_1 = AmBz*pAx1[14] + pAx1[26];
            double r_210_001_1 = AmBz*pAx1[15] + pAx1[34];
            double r_012_001_1 = AmBz*pAx1[16] + pAx1[28];
            double r_201_001_1 = AmBz*pAx1[17] + pAx1[30];
            double r_021_001_1 = AmBz*pAx1[18] + pAx1[31];
            double r_111_001_1 = AmBz*pAx1[19] + pAx1[32];
            double r_004_001_1 = AmBz*pAx1[22] + pAx1[37];
            double r_103_001_1 = AmBz*pAx1[26] + pAx1[39];
            double r_013_001_1 = AmBz*pAx1[28] + pAx1[41];
            double r_202_001_1 = AmBz*pAx1[30] + pAx1[48];
            double r_022_001_1 = AmBz*pAx1[31] + pAx1[49];
            double r_112_001_1 = AmBz*pAx1[32] + pAx1[52];
            double r_121_001_1 = AmBz*pAx1[33] + pAx1[53];
            double r_211_001_1 = AmBz*pAx1[34] + pAx1[54];
            double b_200 = AmBx*b_100 + r_100_100;
            double r_100_200 = AmBx*r_100_100 + r_200_100;
            double r_010_200 = AmBx*r_010_100 + r_110_100;
            double r_001_200 = AmBx*r_001_100 + r_101_100;
            double b_200_1 = AmBx*b_100_1 + r_100_100_1;
            double r_100_200_1 = AmBx*r_100_100_1 + r_200_100_1;
            double r_010_200_1 = AmBx*r_010_100_1 + r_110_100_1;
            double r_001_200_1 = AmBx*r_001_100_1 + r_101_100_1;
            double r_200_200_1 = AmBx*r_200_100_1 + r_300_100_1;
            double r_020_200_1 = AmBx*r_020_100_1 + r_120_100_1;
            double r_002_200_1 = AmBx*r_002_100_1 + r_102_100_1;
            double r_110_200_1 = AmBx*r_110_100_1 + r_210_100_1;
            double r_101_200_1 = AmBx*r_101_100_1 + r_201_100_1;
            double r_011_200_1 = AmBx*r_011_100_1 + r_111_100_1;
            double r_300_200_1 = AmBx*r_300_100_1 + r_400_100_1;
            double r_120_200_1 = AmBx*r_120_100_1 + r_220_100_1;
            double r_102_200_1 = AmBx*r_102_100_1 + r_202_100_1;
            double r_210_200_1 = AmBx*r_210_100_1 + r_310_100_1;
            double r_201_200_1 = AmBx*r_201_100_1 + r_301_100_1;
            double r_111_200_1 = AmBx*r_111_100_1 + r_211_100_1;
            double b_020 = AmBy*b_010 + r_010_010;
            double r_100_020 = AmBy*r_100_010 + r_110_010;
            double r_010_020 = AmBy*r_010_010 + r_020_010;
            double r_001_020 = AmBy*r_001_010 + r_011_010;
            double b_020_1 = AmBy*b_010_1 + r_010_010_1;
            double r_100_020_1 = AmBy*r_100_010_1 + r_110_010_1;
            double r_010_020_1 = AmBy*r_010_010_1 + r_020_010_1;
            double r_001_020_1 = AmBy*r_001_010_1 + r_011_010_1;
            double r_200_020_1 = AmBy*r_200_010_1 + r_210_010_1;
            double r_020_020_1 = AmBy*r_020_010_1 + r_030_010_1;
            double r_002_020_1 = AmBy*r_002_010_1 + r_012_010_1;
            double r_110_020_1 = AmBy*r_110_010_1 + r_120_010_1;
            double r_101_020_1 = AmBy*r_101_010_1 + r_111_010_1;
            double r_011_020_1 = AmBy*r_011_010_1 + r_021_010_1;
            double r_030_020_1 = AmBy*r_030_010_1 + r_040_010_1;
            double r_120_020_1 = AmBy*r_120_010_1 + r_130_010_1;
            double r_210_020_1 = AmBy*r_210_010_1 + r_220_010_1;
            double r_012_020_1 = AmBy*r_012_010_1 + r_022_010_1;
            double r_201_020_1 = AmBy*r_201_010_1 + r_211_010_1;
            double r_021_020_1 = AmBy*r_021_010_1 + r_031_010_1;
            double r_111_020_1 = AmBy*r_111_010_1 + r_121_010_1;
            double b_002 = AmBz*b_001 + r_001_001;
            double r_100_002 = AmBz*r_100_001 + r_101_001;
            double r_010_002 = AmBz*r_010_001 + r_011_001;
            double r_001_002 = AmBz*r_001_001 + r_002_001;
            double b_002_1 = AmBz*b_001_1 + r_001_001_1;
            double r_100_002_1 = AmBz*r_100_001_1 + r_101_001_1;
            double r_010_002_1 = AmBz*r_010_001_1 + r_011_001_1;
            double r_001_002_1 = AmBz*r_001_001_1 + r_002_001_1;
            double r_200_002_1 = AmBz*r_200_001_1 + r_201_001_1;
            double r_020_002_1 = AmBz*r_020_001_1 + r_021_001_1;
            double r_002_002_1 = AmBz*r_002_001_1 + r_003_001_1;
            double r_110_002_1 = AmBz*r_110_001_1 + r_111_001_1;
            double r_101_002_1 = AmBz*r_101_001_1 + r_102_001_1;
            double r_011_002_1 = AmBz*r_011_001_1 + r_012_001_1;
            double r_003_002_1 = AmBz*r_003_001_1 + r_004_001_1;
            double r_120_002_1 = AmBz*r_120_001_1 + r_121_001_1;
            double r_102_002_1 = AmBz*r_102_001_1 + r_103_001_1;
            double r_210_002_1 = AmBz*r_210_001_1 + r_211_001_1;
            double r_012_002_1 = AmBz*r_012_001_1 + r_013_001_1;
            double r_201_002_1 = AmBz*r_201_001_1 + r_202_001_1;
            double r_021_002_1 = AmBz*r_021_001_1 + r_022_001_1;
            double r_111_002_1 = AmBz*r_111_001_1 + r_112_001_1;
            double b_110 = AmBy*b_100 + r_010_100;
            double r_001_110 = AmBy*r_001_100 + r_011_100;
            double b_300 = AmBx*b_200 + r_100_200;
            double b_300_1 = AmBx*b_200_1 + r_100_200_1;
            double r_100_300_1 = AmBx*r_100_200_1 + r_200_200_1;
            double r_010_300_1 = AmBx*r_010_200_1 + r_110_200_1;
            double r_001_300_1 = AmBx*r_001_200_1 + r_101_200_1;
            double r_200_300_1 = AmBx*r_200_200_1 + r_300_200_1;
            double r_020_300_1 = AmBx*r_020_200_1 + r_120_200_1;
            double r_002_300_1 = AmBx*r_002_200_1 + r_102_200_1;
            double r_110_300_1 = AmBx*r_110_200_1 + r_210_200_1;
            double r_101_300_1 = AmBx*r_101_200_1 + r_201_200_1;
            double r_011_300_1 = AmBx*r_011_200_1 + r_111_200_1;
            double b_030 = AmBy*b_020 + r_010_020;
            double b_030_1 = AmBy*b_020_1 + r_010_020_1;
            double r_100_030_1 = AmBy*r_100_020_1 + r_110_020_1;
            double r_010_030_1 = AmBy*r_010_020_1 + r_020_020_1;
            double r_001_030_1 = AmBy*r_001_020_1 + r_011_020_1;
            double r_200_030_1 = AmBy*r_200_020_1 + r_210_020_1;
            double r_020_030_1 = AmBy*r_020_020_1 + r_030_020_1;
            double r_002_030_1 = AmBy*r_002_020_1 + r_012_020_1;
            double r_110_030_1 = AmBy*r_110_020_1 + r_120_020_1;
            double r_101_030_1 = AmBy*r_101_020_1 + r_111_020_1;
            double r_011_030_1 = AmBy*r_011_020_1 + r_021_020_1;
            double b_003 = AmBz*b_002 + r_001_002;
            double b_003_1 = AmBz*b_002_1 + r_001_002_1;
            double r_100_003_1 = AmBz*r_100_002_1 + r_101_002_1;
            double r_010_003_1 = AmBz*r_010_002_1 + r_011_002_1;
            double r_001_003_1 = AmBz*r_001_002_1 + r_002_002_1;
            double r_200_003_1 = AmBz*r_200_002_1 + r_201_002_1;
            double r_020_003_1 = AmBz*r_020_002_1 + r_021_002_1;
            double r_002_003_1 = AmBz*r_002_002_1 + r_003_002_1;
            double r_110_003_1 = AmBz*r_110_002_1 + r_111_002_1;
            double r_101_003_1 = AmBz*r_101_002_1 + r_102_002_1;
            double r_011_003_1 = AmBz*r_011_002_1 + r_012_002_1;
            double b_120 = AmBx*b_020 + r_100_020;
            double b_120_1 = AmBx*b_020_1 + r_100_020_1;
            double r_100_120_1 = AmBx*r_100_020_1 + r_200_020_1;
            double r_001_120_1 = AmBx*r_001_020_1 + r_101_020_1;
            double r_101_120_1 = AmBx*r_101_020_1 + r_201_020_1;
            double b_102 = AmBx*b_002 + r_100_002;
            double b_102_1 = AmBx*b_002_1 + r_100_002_1;
            double r_100_102_1 = AmBx*r_100_002_1 + r_200_002_1;
            double r_010_102_1 = AmBx*r_010_002_1 + r_110_002_1;
            double r_110_102_1 = AmBx*r_110_002_1 + r_210_002_1;
            double b_210 = AmBy*b_200 + r_010_200;
            double b_012 = AmBy*b_002 + r_010_002;
            double b_012_1 = AmBy*b_002_1 + r_010_002_1;
            double r_100_012_1 = AmBy*r_100_002_1 + r_110_002_1;
            double r_010_012_1 = AmBy*r_010_002_1 + r_020_002_1;
            double r_110_012_1 = AmBy*r_110_002_1 + r_120_002_1;
            double b_201 = AmBz*b_200 + r_001_200;
            double b_021 = AmBz*b_020 + r_001_020;
            double b_111 = AmBz*b_110 + r_001_110;
            double b_400_1 = AmBx*b_300_1 + r_100_300_1;
            double r_100_400_1 = AmBx*r_100_300_1 + r_200_300_1;
            double r_010_400_1 = AmBx*r_010_300_1 + r_110_300_1;
            double r_001_400_1 = AmBx*r_001_300_1 + r_101_300_1;
            double b_040_1 = AmBy*b_030_1 + r_010_030_1;
            double r_100_040_1 = AmBy*r_100_030_1 + r_110_030_1;
            double r_010_040_1 = AmBy*r_010_030_1 + r_020_030_1;
            double r_001_040_1 = AmBy*r_001_030_1 + r_011_030_1;
            double b_004_1 = AmBz*b_003_1 + r_001_003_1;
            double r_100_004_1 = AmBz*r_100_003_1 + r_101_003_1;
            double r_010_004_1 = AmBz*r_010_003_1 + r_011_003_1;
            double r_001_004_1 = AmBz*r_001_003_1 + r_002_003_1;
            double b_310_1 = AmBy*b_300_1 + r_010_300_1;
            double r_010_310_1 = AmBy*r_010_300_1 + r_020_300_1;
            double r_001_310_1 = AmBy*r_001_300_1 + r_011_300_1;
            double b_130_1 = AmBx*b_030_1 + r_100_030_1;
            double r_100_130_1 = AmBx*r_100_030_1 + r_200_030_1;
            double r_001_130_1 = AmBx*r_001_030_1 + r_101_030_1;
            double b_301_1 = AmBz*b_300_1 + r_001_300_1;
            double r_001_301_1 = AmBz*r_001_300_1 + r_002_300_1;
            double b_103_1 = AmBx*b_003_1 + r_100_003_1;
            double r_100_103_1 = AmBx*r_100_003_1 + r_200_003_1;
            double r_010_103_1 = AmBx*r_010_003_1 + r_110_003_1;
            double b_031_1 = AmBz*b_030_1 + r_001_030_1;
            double r_001_031_1 = AmBz*r_001_030_1 + r_002_030_1;
            double b_013_1 = AmBy*b_003_1 + r_010_003_1;
            double r_010_013_1 = AmBy*r_010_003_1 + r_020_003_1;
            double b_220_1 = AmBx*b_120_1 + r_100_120_1;
            double r_001_220_1 = AmBx*r_001_120_1 + r_101_120_1;
            double b_202_1 = AmBx*b_102_1 + r_100_102_1;
            double r_010_202_1 = AmBx*r_010_102_1 + r_110_102_1;
            double b_022_1 = AmBy*b_012_1 + r_010_012_1;
            double r_100_022_1 = AmBy*r_100_012_1 + r_110_012_1;
            double b_500_1 = AmBx*b_400_1 + r_100_400_1;
            double b_050_1 = AmBy*b_040_1 + r_010_040_1;
            double b_005_1 = AmBz*b_004_1 + r_001_004_1;
            double b_140_1 = AmBx*b_040_1 + r_100_040_1;
            double b_104_1 = AmBx*b_004_1 + r_100_004_1;
            double b_410_1 = AmBy*b_400_1 + r_010_400_1;
            double b_014_1 = AmBy*b_004_1 + r_010_004_1;
            double b_401_1 = AmBz*b_400_1 + r_001_400_1;
            double b_041_1 = AmBz*b_040_1 + r_001_040_1;
            double b_320_1 = AmBy*b_310_1 + r_010_310_1;
            double b_302_1 = AmBz*b_301_1 + r_001_301_1;
            double b_230_1 = AmBx*b_130_1 + r_100_130_1;
            double b_032_1 = AmBz*b_031_1 + r_001_031_1;
            double b_203_1 = AmBx*b_103_1 + r_100_103_1;
            double b_023_1 = AmBy*b_013_1 + r_010_013_1;
            double b_311_1 = AmBz*b_310_1 + r_001_310_1;
            double b_131_1 = AmBz*b_130_1 + r_001_130_1;
            double b_113_1 = AmBy*b_103_1 + r_010_103_1;
            double b_122_1 = AmBx*b_022_1 + r_100_022_1;
            double b_212_1 = AmBy*b_202_1 + r_010_202_1;
            double b_221_1 = AmBz*b_220_1 + r_001_220_1;
            double bx_400 = -4*b_300 + b_500_1;
            double bx_040 = b_140_1;
            double bx_004 = b_104_1;
            double bx_310 = -3*b_210 + b_410_1;
            double bx_130 = -b_030 + b_230_1;
            double bx_301 = -3*b_201 + b_401_1;
            double bx_103 = -b_003 + b_203_1;
            double bx_031 = b_131_1;
            double bx_013 = b_113_1;
            double bx_220 = -2*b_120 + b_320_1;
            double bx_202 = -2*b_102 + b_302_1;
            double bx_022 = b_122_1;
            double bx_112 = -b_012 + b_212_1;
            double bx_121 = -b_021 + b_221_1;
            double bx_211 = -2*b_111 + b_311_1;
            double by_400 = b_410_1;
            double by_040 = -4*b_030 + b_050_1;
            double by_004 = b_014_1;
            double by_310 = -b_300 + b_320_1;
            double by_130 = -3*b_120 + b_140_1;
            double by_301 = b_311_1;
            double by_103 = b_113_1;
            double by_031 = -3*b_021 + b_041_1;
            double by_013 = -b_003 + b_023_1;
            double by_220 = -2*b_210 + b_230_1;
            double by_202 = b_212_1;
            double by_022 = -2*b_012 + b_032_1;
            double by_112 = -b_102 + b_122_1;
            double by_121 = -2*b_111 + b_131_1;
            double by_211 = -b_201 + b_221_1;
            double bz_400 = b_401_1;
            double bz_040 = b_041_1;
            double bz_004 = -4*b_003 + b_005_1;
            double bz_310 = b_311_1;
            double bz_130 = b_131_1;
            double bz_301 = -b_300 + b_302_1;
            double bz_103 = -3*b_102 + b_104_1;
            double bz_031 = -b_030 + b_032_1;
            double bz_013 = -3*b_012 + b_014_1;
            double bz_220 = b_221_1;
            double bz_202 = -2*b_201 + b_203_1;
            double bz_022 = -2*b_021 + b_023_1;
            double bz_112 = -2*b_111 + b_113_1;
            double bz_121 = -b_120 + b_122_1;
            double bz_211 = -b_210 + b_212_1;
            // 6.89 steps per component, 2.42 kb stack
            pOut_[sb*0 + sd*0] = bx_004 - bx_022*sdc + bx_040*sda - bx_202*sdc + bx_220*sdb + bx_400*sda;
            pOut_[sb*0 + sd*1] = by_004 - by_022*sdc + by_040*sda - by_202*sdc + by_220*sdb + by_400*sda;
            pOut_[sb*0 + sd*2] = bz_004 - bz_022*sdc + bz_040*sda - bz_202*sdc + bz_220*sdb + bz_400*sda;
            pOut_[sb*1 + sd*0] = bx_112*sde - bx_130*sdd - bx_310*sdd;
            pOut_[sb*1 + sd*1] = by_112*sde - by_130*sdd - by_310*sdd;
            pOut_[sb*1 + sd*2] = bz_112*sde - bz_130*sdd - bz_310*sdd;
            pOut_[sb*2 + sd*0] = bx_103*sdf - bx_121*sd7 - bx_301*sd7;
            pOut_[sb*2 + sd*1] = by_103*sdf - by_121*sd7 - by_301*sd7;
            pOut_[sb*2 + sd*2] = bz_103*sdf - bz_121*sd7 - bz_301*sd7;
            pOut_[sb*3 + sd*0] = bx_040*sd10 - bx_220*sd11 + bx_400*sd10;
            pOut_[sb*3 + sd*1] = by_040*sd10 - by_220*sd11 + by_400*sd10;
            pOut_[sb*3 + sd*2] = bz_040*sd10 - bz_220*sd11 + bz_400*sd10;
            pOut_[sb*4 + sd*0] = bx_013*sdf - bx_031*sd7 - bx_211*sd7;
            pOut_[sb*4 + sd*1] = by_013*sdf - by_031*sd7 - by_211*sd7;
            pOut_[sb*4 + sd*2] = bz_013*sdf - bz_031*sd7 - bz_211*sd7;
            pOut_[sb*5 + sd*0] = -bx_022*sd13 + bx_040*sd12 + bx_202*sd13 - bx_400*sd12;
            pOut_[sb*5 + sd*1] = -by_022*sd13 + by_040*sd12 + by_202*sd13 - by_400*sd12;
            pOut_[sb*5 + sd*2] = -bz_022*sd13 + bz_040*sd12 + bz_202*sd13 - bz_400*sd12;
            pOut_[sb*6 + sd*0] = -bx_130*sd14 + bx_310*sd14;
            pOut_[sb*6 + sd*1] = -by_130*sd14 + by_310*sd14;
            pOut_[sb*6 + sd*2] = -bz_130*sd14 + bz_310*sd14;
            pOut_[sb*7 + sd*0] = -bx_121*sd16 + bx_301*sd15;
            pOut_[sb*7 + sd*1] = -by_121*sd16 + by_301*sd15;
            pOut_[sb*7 + sd*2] = -bz_121*sd16 + bz_301*sd15;
            pOut_[sb*8 + sd*0] = -bx_031*sd15 + bx_211*sd16;
            pOut_[sb*8 + sd*1] = -by_031*sd15 + by_211*sd16;
            pOut_[sb*8 + sd*2] = -bz_031*sd15 + bz_211*sd16;
         }
         return;
      }
      case 5: {
         for (size_t ia = 0; ia < nCount; ++ ia) {
            double const * pAx0 = p0Z + 35 * ia;
            double const * pAx1 = p2Z + 84 * ia;
            double * pOut_ = pOut + sa * ia;
            double b_100 = AmBx*pAx0[0] + pAx0[1];
            double r_100_100 = AmBx*pAx0[1] + pAx0[4];
            double r_010_100 = AmBx*pAx0[2] + pAx0[7];
            double r_001_100 = AmBx*pAx0[3] + pAx0[8];
            double r_200_100 = AmBx*pAx0[4] + pAx0[10];
            double r_110_100 = AmBx*pAx0[7] + pAx0[15];
            double r_101_100 = AmBx*pAx0[8] + pAx0[17];
            double r_011_100 = AmBx*pAx0[9] + pAx0[19];
            double r_300_100 = AmBx*pAx0[10] + pAx0[20];
            double r_210_100 = AmBx*pAx0[15] + pAx0[23];
            double r_201_100 = AmBx*pAx0[17] + pAx0[25];
            double r_111_100 = AmBx*pAx0[19] + pAx0[34];
            double b_100_1 = AmBx*pAx1[0] + pAx1[1];
            double r_100_100_1 = AmBx*pAx1[1] + pAx1[4];
            double r_010_100_1 = AmBx*pAx1[2] + pAx1[7];
            double r_001_100_1 = AmBx*pAx1[3] + pAx1[8];
            double r_200_100_1 = AmBx*pAx1[4] + pAx1[10];
            double r_020_100_1 = AmBx*pAx1[5] + pAx1[13];
            double r_002_100_1 = AmBx*pAx1[6] + pAx1[14];
            double r_110_100_1 = AmBx*pAx1[7] + pAx1[15];
            double r_101_100_1 = AmBx*pAx1[8] + pAx1[17];
            double r_011_100_1 = AmBx*pAx1[9] + pAx1[19];
            double r_300_100_1 = AmBx*pAx1[10] + pAx1[20];
            double r_030_100_1 = AmBx*pAx1[11] + pAx1[24];
            double r_003_100_1 = AmBx*pAx1[12] + pAx1[26];
            double r_120_100_1 = AmBx*pAx1[13] + pAx1[29];
            double r_102_100_1 = AmBx*pAx1[14] + pAx1[30];
            double r_210_100_1 = AmBx*pAx1[15] + pAx1[23];
            double r_012_100_1 = AmBx*pAx1[16] + pAx1[32];
            double r_201_100_1 = AmBx*pAx1[17] + pAx1[25];
            double r_021_100_1 = AmBx*pAx1[18] + pAx1[33];
            double r_111_100_1 = AmBx*pAx1[19] + pAx1[34];
            double r_400_100_1 = AmBx*pAx1[20] + pAx1[35];
            double r_310_100_1 = AmBx*pAx1[23] + pAx1[40];
            double r_130_100_1 = AmBx*pAx1[24] + pAx1[46];
            double r_301_100_1 = AmBx*pAx1[25] + pAx1[42];
            double r_103_100_1 = AmBx*pAx1[26] + pAx1[48];
            double r_220_100_1 = AmBx*pAx1[29] + pAx1[44];
            double r_202_100_1 = AmBx*pAx1[30] + pAx1[45];
            double r_112_100_1 = AmBx*pAx1[32] + pAx1[54];
            double r_121_100_1 = AmBx*pAx1[33] + pAx1[55];
            double r_211_100_1 = AmBx*pAx1[34] + pAx1[50];
            double r_500_100_1 = AmBx*pAx1[35] + pAx1[56];
            double r_410_100_1 = AmBx*pAx1[40] + pAx1[59];
            double r_401_100_1 = AmBx*pAx1[42] + pAx1[61];
            double r_320_100_1 = AmBx*pAx1[44] + pAx1[65];
            double r_302_100_1 = AmBx*pAx1[45] + pAx1[66];
            double r_230_100_1 = AmBx*pAx1[46] + pAx1[71];
            double r_203_100_1 = AmBx*pAx1[48] + pAx1[72];
            double r_311_100_1 = AmBx*pAx1[50] + pAx1[76];
            double r_212_100_1 = AmBx*pAx1[54] + pAx1[77];
            double r_221_100_1 = AmBx*pAx1[55] + pAx1[79];
            double b_010 = AmBy*pAx0[0] + pAx0[2];
            double r_100_010 = AmBy*pAx0[1] + pAx0[7];
            double r_010_010 = AmBy*pAx0[2] + pAx0[5];
            double r_001_010 = AmBy*pAx0[3] + pAx0[9];
            double r_200_010 = AmBy*pAx0[4] + pAx0[15];
            double r_020_010 = AmBy*pAx0[5] + pAx0[11];
            double r_110_010 = AmBy*pAx0[7] + pAx0[13];
            double r_101_010 = AmBy*pAx0[8] + pAx0[19];
            double r_011_010 = AmBy*pAx0[9] + pAx0[18];
            double r_030_010 = AmBy*pAx0[11] + pAx0[21];
            double r_120_010 = AmBy*pAx0[13] + pAx0[24];
            double r_210_010 = AmBy*pAx0[15] + pAx0[29];
            double r_021_010 = AmBy*pAx0[18] + pAx0[27];
            double r_111_010 = AmBy*pAx0[19] + pAx0[33];
            double b_010_1 = AmBy*pAx1[0] + pAx1[2];
            double r_100_010_1 = AmBy*pAx1[1] + pAx1[7];
            double r_010_010_1 = AmBy*pAx1[2] + pAx1[5];
            double r_001_010_1 = AmBy*pAx1[3] + pAx1[9];
            double r_200_010_1 = AmBy*pAx1[4] + pAx1[15];
            double r_020_010_1 = AmBy*pAx1[5] + pAx1[11];
            double r_002_010_1 = AmBy*pAx1[6] + pAx1[16];
            double r_110_010_1 = AmBy*pAx1[7] + pAx1[13];
            double r_101_010_1 = AmBy*pAx1[8] + pAx1[19];
            double r_011_010_1 = AmBy*pAx1[9] + pAx1[18];
            double r_030_010_1 = AmBy*pAx1[11] + pAx1[21];
            double r_003_010_1 = AmBy*pAx1[12] + pAx1[28];
            double r_120_010_1 = AmBy*pAx1[13] + pAx1[24];
            double r_102_010_1 = AmBy*pAx1[14] + pAx1[32];
            double r_210_010_1 = AmBy*pAx1[15] + pAx1[29];
            double r_012_010_1 = AmBy*pAx1[16] + pAx1[31];
            double r_201_010_1 = AmBy*pAx1[17] + pAx1[34];
            double r_021_010_1 = AmBy*pAx1[18] + pAx1[27];
            double r_111_010_1 = AmBy*pAx1[19] + pAx1[33];
            double r_040_010_1 = AmBy*pAx1[21] + pAx1[36];
            double r_130_010_1 = AmBy*pAx1[24] + pAx1[38];
            double r_031_010_1 = AmBy*pAx1[27] + pAx1[43];
            double r_013_010_1 = AmBy*pAx1[28] + pAx1[49];
            double r_220_010_1 = AmBy*pAx1[29] + pAx1[46];
            double r_022_010_1 = AmBy*pAx1[31] + pAx1[47];
            double r_112_010_1 = AmBy*pAx1[32] + pAx1[53];
            double r_121_010_1 = AmBy*pAx1[33] + pAx1[51];
            double r_211_010_1 = AmBy*pAx1[34] + pAx1[55];
            double r_050_010_1 = AmBy*pAx1[36] + pAx1[57];
            double r_140_010_1 = AmBy*pAx1[38] + pAx1[60];
            double r_041_010_1 = AmBy*pAx1[43] + pAx1[63];
            double r_230_010_1 = AmBy*pAx1[46] + pAx1[67];
            double r_032_010_1 = AmBy*pAx1[47] + pAx1[69];
            double r_023_010_1 = AmBy*pAx1[49] + pAx1[73];
            double r_131_010_1 = AmBy*pAx1[51] + pAx1[75];
            double r_122_010_1 = AmBy*pAx1[53] + pAx1[78];
            double r_221_010_1 = AmBy*pAx1[55] + pAx1[81];
            double b_001 = AmBz*pAx0[0] + pAx0[3];
            double r_100_001 = AmBz*pAx0[1] + pAx0[8];
            double r_010_001 = AmBz*pAx0[2] + pAx0[9];
            double r_001_001 = AmBz*pAx0[3] + pAx0[6];
            double r_200_001 = AmBz*pAx0[4] + pAx0[17];
            double r_020_001 = AmBz*pAx0[5] + pAx0[18];
            double r_002_001 = AmBz*pAx0[6] + pAx0[12];
            double r_110_001 = AmBz*pAx0[7] + pAx0[19];
            double r_101_001 = AmBz*pAx0[8] + pAx0[14];
            double r_011_001 = AmBz*pAx0[9] + pAx0[16];
            double r_003_001 = AmBz*pAx0[12] + pAx0[22];
            double r_102_001 = AmBz*pAx0[14] + pAx0[26];
            double r_012_001 = AmBz*pAx0[16] + pAx0[28];
            double r_201_001 = AmBz*pAx0[17] + pAx0[30];
            double r_021_001 = AmBz*pAx0[18] + pAx0[31];
            double r_111_001 = AmBz*pAx0[19] + pAx0[32];
            double b_001_1 = AmBz*pAx1[0] + pAx1[3];
            double r_100_001_1 = AmBz*pAx1[1] + pAx1[8];
            double r_010_001_1 = AmBz*pAx1[2] + pAx1[9];
            double r_001_001_1 = AmBz*pAx1[3] + pAx1[6];
            double r_200_001_1 = AmBz*pAx1[4] + pAx1[17];
            double r_020_001_1 = AmBz*pAx1[5] + pAx1[18];
            double r_002_001_1 = AmBz*pAx1[6] + pAx1[12];
            double r_110_001_1 = AmBz*pAx1[7] + pAx1[19];
            double r_101_001_1 = AmBz*pAx1[8] + pAx1[14];
            double r_011_001_1 = AmBz*pAx1[9] + pAx1[16];
            double r_003_001_1 = AmBz*pAx1[12] + pAx1[22];
            double r_120_001_1 = AmBz*pAx1[13] + pAx1[33];
            double r_102_001_1 = AmBz*pAx1[14] + pAx1[26];
            double r_210_001_1 = AmBz*pAx1[15] + pAx1[34];
            double r_012_001_1 = AmBz*pAx1[16] + pAx1[28];
            double r_201_001_1 = AmBz*pAx1[17] + pAx1[30];
            double r_021_001_1 = AmBz*pAx1[18] + pAx1[31];
            double r_111_001_1 = AmBz*pAx1[19] + pAx1[32];
            double r_004_001_1 = AmBz*pAx1[22] + pAx1[37];
            double r_103_001_1 = AmBz*pAx1[26] + pAx1[39];
            double r_013_001_1 = AmBz*pAx1[28] + pAx1[41];
            double r_220_001_1 = AmBz*pAx1[29] + pAx1[55];
            double r_202_001_1 = AmBz*pAx1[30] + pAx1[48];
            double r_022_001_1 = AmBz*pAx1[31] + pAx1[49];
            double r_112_001_1 = AmBz*pAx1[32] + pAx1[52];
            double r_121_001_1 = AmBz*pAx1[33] + pAx1[53];
            double r_211_001_1 = AmBz*pAx1[34] + pAx1[54];
            double r_005_001_1 = AmBz*pAx1[37] + pAx1[58];
            double r_104_001_1 = AmBz*pAx1[39] + pAx1[62];
            double r_014_001_1 = AmBz*pAx1[41] + pAx1[64];
            double r_203_001_1 = AmBz*pAx1[48] + pAx1[68];
            double r_023_001_1 = AmBz*pAx1[49] + pAx1[70];
            double r_113_001_1 = AmBz*pAx1[52] + pAx1[74];
            double r_122_001_1 = AmBz*pAx1[53] + pAx1[80];
            double r_212_001_1 = AmBz*pAx1[54] + pAx1[82];
            double r_221_001_1 = AmBz*pAx1[55] + pAx1[83];
            double b_200 = AmBx*b_100 + r_100_100;
            double r_100_200 = AmBx*r_100_100 + r_200_100;
            double r_010_200 = AmBx*r_010_100 + r_110_100;
            double r_001_200 = AmBx*r_001_100 + r_101_100;
            double r_200_200 = AmBx*r_200_100 + r_300_100;
            double r_110_200 = AmBx*r_110_100 + r_210_100;
            double r_101_200 = AmBx*r_101_100 + r_201_100;
            double r_011_200 = AmBx*r_011_100 + r_111_100;
            double b_200_1 = AmBx*b_100_1 + r_100_100_1;
            double r_100_200_1 = AmBx*r_100_100_1 + r_200_100_1;
            double r_010_200_1 = AmBx*r_010_100_1 + r_110_100_1;
            double r_001_200_1 = AmBx*r_001_100_1 + r_101_100_1;
            double r_200_200_1 = AmBx*r_200_100_1 + r_300_100_1;
            double r_020_200_1 = AmBx*r_020_100_1 + r_120_100_1;
            double r_002_200_1 = AmBx*r_002_100_1 + r_102_100_1;
            double r_110_200_1 = AmBx*r_110_100_1 + r_210_100_1;
            double r_101_200_1 = AmBx*r_101_100_1 + r_201_100_1;
            double r_011_200_1 = AmBx*r_011_100_1 + r_111_100_1;
            double r_300_200_1 = AmBx*r_300_100_1 + r_400_100_1;
            double r_030_200_1 = AmBx*r_030_100_1 + r_130_100_1;
            double r_003_200_1 = AmBx*r_003_100_1 + r_103_100_1;
            double r_120_200_1 = AmBx*r_120_100_1 + r_220_100_1;
            double r_102_200_1 = AmBx*r_102_100_1 + r_202_100_1;
            double r_210_200_1 = AmBx*r_210_100_1 + r_310_100_1;
            double r_012_200_1 = AmBx*r_012_100_1 + r_112_100_1;
            double r_201_200_1 = AmBx*r_201_100_1 + r_301_100_1;
            double r_021_200_1 = AmBx*r_021_100_1 + r_121_100_1;
            double r_111_200_1 = AmBx*r_111_100_1 + r_211_100_1;
            double r_400_200_1 = AmBx*r_400_100_1 + r_500_100_1;
            double r_310_200_1 = AmBx*r_310_100_1 + r_410_100_1;
            double r_130_200_1 = AmBx*r_130_100_1 + r_230_100_1;
            double r_301_200_1 = AmBx*r_301_100_1 + r_401_100_1;
            double r_103_200_1 = AmBx*r_103_100_1 + r_203_100_1;
            double r_220_200_1 = AmBx*r_220_100_1 + r_320_100_1;
            double r_202_200_1 = AmBx*r_202_100_1 + r_302_100_1;
            double r_112_200_1 = AmBx*r_112_100_1 + r_212_100_1;
            double r_121_200_1 = AmBx*r_121_100_1 + r_221_100_1;
            double r_211_200_1 = AmBx*r_211_100_1 + r_311_100_1;
            double b_020 = AmBy*b_010 + r_010_010;
            double r_100_020 = AmBy*r_100_010 + r_110_010;
            double r_010_020 = AmBy*r_010_010 + r_020_010;
            double r_001_020 = AmBy*r_001_010 + r_011_010;
            double r_200_020 = AmBy*r_200_010 + r_210_010;
            double r_020_020 = AmBy*r_020_010 + r_030_010;
            double r_110_020 = AmBy*r_110_010 + r_120_010;
            double r_101_020 = AmBy*r_101_010 + r_111_010;
            double r_011_020 = AmBy*r_011_010 + r_021_010;
            double b_020_1 = AmBy*b_010_1 + r_010_010_1;
            double r_100_020_1 = AmBy*r_100_010_1 + r_110_010_1;
            double r_010_020_1 = AmBy*r_010_010_1 + r_020_010_1;
            double r_001_020_1 = AmBy*r_001_010_1 + r_011_010_1;
            double r_200_020_1 = AmBy*r_200_010_1 + r_210_010_1;
            double r_020_020_1 = AmBy*r_020_010_1 + r_030_010_1;
            double r_002_020_1 = AmBy*r_002_010_1 + r_012_010_1;
            double r_110_020_1 = AmBy*r_110_010_1 + r_120_010_1;
            double r_101_020_1 = AmBy*r_101_010_1 + r_111_010_1;
            double r_011_020_1 = AmBy*r_011_010_1 + r_021_010_1;
            double r_030_020_1 = AmBy*r_030_010_1 + r_040_010_1;
            double r_003_020_1 = AmBy*r_003_010_1 + r_013_010_1;
            double r_120_020_1 = AmBy*r_120_010_1 + r_130_010_1;
            double r_102_020_1 = AmBy*r_102_010_1 + r_112_010_1;
            double r_210_020_1 = AmBy*r_210_010_1 + r_220_010_1;
            double r_012_020_1 = AmBy*r_012_010_1 + r_022_010_1;
            double r_201_020_1 = AmBy*r_201_010_1 + r_211_010_1;
            double r_021_020_1 = AmBy*r_021_010_1 + r_031_010_1;
            double r_111_020_1 = AmBy*r_111_010_1 + r_121_010_1;
            double r_040_020_1 = AmBy*r_040_010_1 + r_050_010_1;
            double r_130_020_1 = AmBy*r_130_010_1 + r_140_010_1;
            double r_031_020_1 = AmBy*r_031_010_1 + r_041_010_1;
            double r_013_020_1 = AmBy*r_013_010_1 + r_023_010_1;
            double r_220_020_1 = AmBy*r_220_010_1 + r_230_010_1;
            double r_022_020_1 = AmBy*r_022_010_1 + r_032_010_1;
            double r_112_020_1 = AmBy*r_112_010_1 + r_122_010_1;
            double r_121_020_1 = AmBy*r_121_010_1 + r_131_010_1;
            double r_211_020_1 = AmBy*r_211_010_1 + r_221_010_1;
            double b_002 = AmBz*b_001 + r_001_001;
            double r_100_002 = AmBz*r_100_001 + r_101_001;
            double r_010_002 = AmBz*r_010_001 + r_011_001;
            double r_001_002 = AmBz*r_001_001 + r_002_001;
            double r_200_002 = AmBz*r_200_001 + r_201_001;
            double r_020_002 = AmBz*r_020_001 + r_021_001;
            double r_002_002 = AmBz*r_002_001 + r_003_001;
            double r_110_002 = AmBz*r_110_001 + r_111_001;
            double r_101_002 = AmBz*r_101_001 + r_102_001;
            double r_011_002 = AmBz*r_011_001 + r_012_001;
            double b_002_1 = AmBz*b_001_1 + r_001_001_1;
            double r_100_002_1 = AmBz*r_100_001_1 + r_101_001_1;
            double r_010_002_1 = AmBz*r_010_001_1 + r_011_001_1;
            double r_001_002_1 = AmBz*r_001_001_1 + r_002_001_1;
            double r_200_002_1 = AmBz*r_200_001_1 + r_201_001_1;
            double r_020_002_1 = AmBz*r_020_001_1 + r_021_001_1;
            double r_002_002_1 = AmBz*r_002_001_1 + r_003_001_1;
            double r_110_002_1 = AmBz*r_110_001_1 + r_111_001_1;
            double r_101_002_1 = AmBz*r_101_001_1 + r_102_001_1;
            double r_011_002_1 = AmBz*r_011_001_1 + r_012_001_1;
            double r_003_002_1 = AmBz*r_003_001_1 + r_004_001_1;
            double r_120_002_1 = AmBz*r_120_001_1 + r_121_001_1;
            double r_102_002_1 = AmBz*r_102_001_1 + r_103_001_1;
            double r_210_002_1 = AmBz*r_210_001_1 + r_211_001_1;
            double r_012_002_1 = AmBz*r_012_001_1 + r_013_001_1;
            double r_201_002_1 = AmBz*r_201_001_1 + r_202_001_1;
            double r_021_002_1 = AmBz*r_021_001_1 + r_022_001_1;
            double r_111_002_1 = AmBz*r_111_001_1 + r_112_001_1;
            double r_004_002_1 = AmBz*r_004_001_1 + r_005_001_1;
            double r_103_002_1 = AmBz*r_103_001_1 + r_104_001_1;
            double r_013_002_1 = AmBz*r_013_001_1 + r_014_001_1;
            double r_220_002_1 = AmBz*r_220_001_1 + r_221_001_1;
            double r_202_002_1 = AmBz*r_202_001_1 + r_203_001_1;
            double r_022_002_1 = AmBz*r_022_001_1 + r_023_001_1;
            double r_112_002_1 = AmBz*r_112_001_1 + r_113_001_1;
            double r_121_002_1 = AmBz*r_121_001_1 + r_122_001_1;
            double r_211_002_1 = AmBz*r_211_001_1 + r_212_001_1;
            double b_300 = AmBx*b_200 + r_100_200;
            double r_100_300 = AmBx*r_100_200 + r_200_200;
            double r_010_300 = AmBx*r_010_200 + r_110_200;
            double r_001_300 = AmBx*r_001_200 + r_101_200;
            double b_300_1 = AmBx*b_200_1 + r_100_200_1;
            double r_100_300_1 = AmBx*r_100_200_1 + r_200_200_1;
            double r_010_300_1 = AmBx*r_010_200_1 + r_110_200_1;
            double r_001_300_1 = AmBx*r_001_200_1 + r_101_200_1;
            double r_200_300_1 = AmBx*r_200_200_1 + r_300_200_1;
            double r_020_300_1 = AmBx*r_020_200_1 + r_120_200_1;
            double r_002_300_1 = AmBx*r_002_200_1 + r_102_200_1;
            double r_110_300_1 = AmBx*r_110_200_1 + r_210_200_1;
            double r_101_300_1 = AmBx*r_101_200_1 + r_201_200_1;
            double r_011_300_1 = AmBx*r_011_200_1 + r_111_200_1;
            double r_300_300_1 = AmBx*r_300_200_1 + r_400_200_1;
            double r_030_300_1 = AmBx*r_030_200_1 + r_130_200_1;
            double r_003_300_1 = AmBx*r_003_200_1 + r_103_200_1;
            double r_120_300_1 = AmBx*r_120_200_1 + r_220_200_1;
            double r_102_300_1 = AmBx*r_102_200_1 + r_202_200_1;
            double r_210_300_1 = AmBx*r_210_200_1 + r_310_200_1;
            double r_012_300_1 = AmBx*r_012_200_1 + r_112_200_1;
            double r_201_300_1 = AmBx*r_201_200_1 + r_301_200_1;
            double r_021_300_1 = AmBx*r_021_200_1 + r_121_200_1;
            double r_111_300_1 = AmBx*r_111_200_1 + r_211_200_1;
            double b_030 = AmBy*b_020 + r_010_020;
            double r_100_030 = AmBy*r_100_020 + r_110_020;
            double r_010_030 = AmBy*r_010_020 + r_020_020;
            double r_001_030 = AmBy*r_001_020 + r_011_020;
            double b_030_1 = AmBy*b_020_1 + r_010_020_1;
            double r_100_030_1 = AmBy*r_100_020_1 + r_110_020_1;
            double r_010_030_1 = AmBy*r_010_020_1 + r_020_020_1;
            double r_001_030_1 = AmBy*r_001_020_1 + r_011_020_1;
            double r_200_030_1 = AmBy*r_200_020_1 + r_210_020_1;
            double r_020_030_1 = AmBy*r_020_020_1 + r_030_020_1;
            double r_002_030_1 = AmBy*r_002_020_1 + r_012_020_1;
            double r_110_030_1 = AmBy*r_110_020_1 + r_120_020_1;
            double r_101_030_1 = AmBy*r_101_020_1 + r_111_020_1;
            double r_011_030_1 = AmBy*r_011_020_1 + r_021_020_1;
            double r_030_030_1 = AmBy*r_030_020_1 + r_040_020_1;
            double r_003_030_1 = AmBy*r_003_020_1 + r_013_020_1;
            double r_120_030_1 = AmBy*r_120_020_1 + r_130_020_1;
            double r_102_030_1 = AmBy*r_102_020_1 + r_112_020_1;
            double r_210_030_1 = AmBy*r_210_020_1 + r_220_020_1;
            double r_012_030_1 = AmBy*r_012_020_1 + r_022_020_1;
            double r_201_030_1 = AmBy*r_201_020_1 + r_211_020_1;
            double r_021_030_1 = AmBy*r_021_020_1 + r_031_020_1;
            double r_111_030_1 = AmBy*r_111_020_1 + r_121_020_1;
            double b_003 = AmBz*b_002 + r_001_002;
            double r_100_003 = AmBz*r_100_002 + r_101_002;
            double r_010_003 = AmBz*r_010_002 + r_011_002;
            double r_001_003 = AmBz*r_001_002 + r_002_002;
            double b_003_1 = AmBz*b_002_1 + r_001_002_1;
            double r_100_003_1 = AmBz*r_100_002_1 + r_101_002_1;
            double r_010_003_1 = AmBz*r_010_002_1 + r_011_002_1;
            double r_001_003_1 = AmBz*r_001_002_1 + r_002_002_1;
            double r_200_003_1 = AmBz*r_200_002_1 + r_201_002_1;
            double r_020_003_1 = AmBz*r_020_002_1 + r_021_002_1;
            double r_002_003_1 = AmBz*r_002_002_1 + r_003_002_1;
            double r_110_003_1 = AmBz*r_110_002_1 + r_111_002_1;
            double r_101_003_1 = AmBz*r_101_002_1 + r_102_002_1;
            double r_011_003_1 = AmBz*r_011_002_1 + r_012_002_1;
            double r_003_003_1 = AmBz*r_003_002_1 + r_004_002_1;
            double r_120_003_1 = AmBz*r_120_002_1 + r_121_002_1;
            double r_102_003_1 = AmBz*r_102_002_1 + r_103_002_1;
            double r_210_003_1 = AmBz*r_210_002_1 + r_211_002_1;
            double r_012_003_1 = AmBz*r_012_002_1 + r_013_002_1;
            double r_201_003_1 = AmBz*r_201_002_1 + r_202_002_1;
            double r_021_003_1 = AmBz*r_021_002_1 + r_022_002_1;
            double r_111_003_1 = AmBz*r_111_002_1 + r_112_002_1;
            double b_120 = AmBx*b_020 + r_100_020;
            double r_100_120 = AmBx*r_100_020 + r_200_020;
            double r_001_120 = AmBx*r_001_020 + r_101_020;
            double b_102 = AmBx*b_002 + r_100_002;
            double r_100_102 = AmBx*r_100_002 + r_200_002;
            double r_010_102 = AmBx*r_010_002 + r_110_002;
            double b_210 = AmBy*b_200 + r_010_200;
            double r_001_210 = AmBy*r_001_200 + r_011_200;
            double b_012 = AmBy*b_002 + r_010_002;
            double r_010_012 = AmBy*r_010_002 + r_020_002;
            double b_012_1 = AmBy*b_002_1 + r_010_002_1;
            double r_100_012_1 = AmBy*r_100_002_1 + r_110_002_1;
            double r_010_012_1 = AmBy*r_010_002_1 + r_020_002_1;
            double r_200_012_1 = AmBy*r_200_002_1 + r_210_002_1;
            double r_110_012_1 = AmBy*r_110_002_1 + r_120_002_1;
            double r_210_012_1 = AmBy*r_210_002_1 + r_220_002_1;
            double b_400 = AmBx*b_300 + r_100_300;
            double b_400_1 = AmBx*b_300_1 + r_100_300_1;
            double r_100_400_1 = AmBx*r_100_300_1 + r_200_300_1;
            double r_010_400_1 = AmBx*r_010_300_1 + r_110_300_1;
            double r_001_400_1 = AmBx*r_001_300_1 + r_101_300_1;
            double r_200_400_1 = AmBx*r_200_300_1 + r_300_300_1;
            double r_020_400_1 = AmBx*r_020_300_1 + r_120_300_1;
            double r_002_400_1 = AmBx*r_002_300_1 + r_102_300_1;
            double r_110_400_1 = AmBx*r_110_300_1 + r_210_300_1;
            double r_101_400_1 = AmBx*r_101_300_1 + r_201_300_1;
            double r_011_400_1 = AmBx*r_011_300_1 + r_111_300_1;
            double b_040 = AmBy*b_030 + r_010_030;
            double b_040_1 = AmBy*b_030_1 + r_010_030_1;
            double r_100_040_1 = AmBy*r_100_030_1 + r_110_030_1;
            double r_010_040_1 = AmBy*r_010_030_1 + r_020_030_1;
            double r_001_040_1 = AmBy*r_001_030_1 + r_011_030_1;
            double r_200_040_1 = AmBy*r_200_030_1 + r_210_030_1;
            double r_020_040_1 = AmBy*r_020_030_1 + r_030_030_1;
            double r_002_040_1 = AmBy*r_002_030_1 + r_012_030_1;
            double r_110_040_1 = AmBy*r_110_030_1 + r_120_030_1;
            double r_101_040_1 = AmBy*r_101_030_1 + r_111_030_1;
            double r_011_040_1 = AmBy*r_011_030_1 + r_021_030_1;
            double b_004 = AmBz*b_003 + r_001_003;
            double b_004_1 = AmBz*b_003_1 + r_001_003_1;
            double r_100_004_1 = AmBz*r_100_003_1 + r_101_003_1;
            double r_010_004_1 = AmBz*r_010_003_1 + r_011_003_1;
            double r_001_004_1 = AmBz*r_001_003_1 + r_002_003_1;
            double r_200_004_1 = AmBz*r_200_003_1 + r_201_003_1;
            double r_020_004_1 = AmBz*r_020_003_1 + r_021_003_1;
            double r_002_004_1 = AmBz*r_002_003_1 + r_003_003_1;
            double r_110_004_1 = AmBz*r_110_003_1 + r_111_003_1;
            double r_101_004_1 = AmBz*r_101_003_1 + r_102_003_1;
            double r_011_004_1 = AmBz*r_011_003_1 + r_012_003_1;
            double b_310 = AmBy*b_300 + r_010_300;
            double b_310_1 = AmBy*b_300_1 + r_010_300_1;
            double r_010_310_1 = AmBy*r_010_300_1 + r_020_300_1;
            double r_001_310_1 = AmBy*r_001_300_1 + r_011_300_1;
            double r_020_310_1 = AmBy*r_020_300_1 + r_030_300_1;
            double r_011_310_1 = AmBy*r_011_300_1 + r_021_300_1;
            double b_130 = AmBx*b_030 + r_100_030;
            double b_130_1 = AmBx*b_030_1 + r_100_030_1;
            double r_100_130_1 = AmBx*r_100_030_1 + r_200_030_1;
            double r_001_130_1 = AmBx*r_001_030_1 + r_101_030_1;
            double r_101_130_1 = AmBx*r_101_030_1 + r_201_030_1;
            double b_301 = AmBz*b_300 + r_001_300;
            double b_301_1 = AmBz*b_300_1 + r_001_300_1;
            double r_010_301_1 = AmBz*r_010_300_1 + r_011_300_1;
            double r_001_301_1 = AmBz*r_001_300_1 + r_002_300_1;
            double r_002_301_1 = AmBz*r_002_300_1 + r_003_300_1;
            double r_011_301_1 = AmBz*r_011_300_1 + r_012_300_1;
            double b_103 = AmBx*b_003 + r_100_003;
            double b_103_1 = AmBx*b_003_1 + r_100_003_1;
            double r_100_103_1 = AmBx*r_100_003_1 + r_200_003_1;
            double r_010_103_1 = AmBx*r_010_003_1 + r_110_003_1;
            double r_110_103_1 = AmBx*r_110_003_1 + r_210_003_1;
            double b_031 = AmBz*b_030 + r_001_030;
            double b_031_1 = AmBz*b_030_1 + r_001_030_1;
            double r_100_031_1 = AmBz*r_100_030_1 + r_101_030_1;
            double r_001_031_1 = AmBz*r_001_030_1 + r_002_030_1;
            double r_002_031_1 = AmBz*r_002_030_1 + r_003_030_1;
            double r_101_031_1 = AmBz*r_101_030_1 + r_102_030_1;
            double b_013 = AmBy*b_003 + r_010_003;
            double b_013_1 = AmBy*b_003_1 + r_010_003_1;
            double r_100_013_1 = AmBy*r_100_003_1 + r_110_003_1;
            double r_010_013_1 = AmBy*r_010_003_1 + r_020_003_1;
            double r_110_013_1 = AmBy*r_110_003_1 + r_120_003_1;
            double b_220 = AmBx*b_120 + r_100_120;
            double b_202 = AmBx*b_102 + r_100_102;
            double b_022 = AmBy*b_012 + r_010_012;
            double b_022_1 = AmBy*b_012_1 + r_010_012_1;
            double r_100_022_1 = AmBy*r_100_012_1 + r_110_012_1;
            double r_200_022_1 = AmBy*r_200_012_1 + r_210_012_1;
            double b_112 = AmBy*b_102 + r_010_102;
            double b_121 = AmBz*b_120 + r_001_120;
            double b_211 = AmBz*b_210 + r_001_210;
            double b_500_1 = AmBx*b_400_1 + r_100_400_1;
            double r_100_500_1 = AmBx*r_100_400_1 + r_200_400_1;
            double r_010_500_1 = AmBx*r_010_400_1 + r_110_400_1;
            double r_001_500_1 = AmBx*r_001_400_1 + r_101_400_1;
            double b_050_1 = AmBy*b_040_1 + r_010_040_1;
            double r_100_050_1 = AmBy*r_100_040_1 + r_110_040_1;
            double r_010_050_1 = AmBy*r_010_040_1 + r_020_040_1;
            double r_001_050_1 = AmBy*r_001_040_1 + r_011_040_1;
            double b_005_1 = AmBz*b_004_1 + r_001_004_1;
            double r_100_005_1 = AmBz*r_100_004_1 + r_101_004_1;
            double r_010_005_1 = AmBz*r_010_004_1 + r_011_004_1;
            double r_001_005_1 = AmBz*r_001_004_1 + r_002_004_1;
            double b_140_1 = AmBx*b_040_1 + r_100_040_1;
            double r_100_140_1 = AmBx*r_100_040_1 + r_200_040_1;
            double r_001_140_1 = AmBx*r_001_040_1 + r_101_040_1;
            double b_104_1 = AmBx*b_004_1 + r_100_004_1;
            double r_100_104_1 = AmBx*r_100_004_1 + r_200_004_1;
            double r_010_104_1 = AmBx*r_010_004_1 + r_110_004_1;
            double b_410_1 = AmBy*b_400_1 + r_010_400_1;
            double r_010_410_1 = AmBy*r_010_400_1 + r_020_400_1;
            double r_001_410_1 = AmBy*r_001_400_1 + r_011_400_1;
            double b_014_1 = AmBy*b_004_1 + r_010_004_1;
            double r_010_014_1 = AmBy*r_010_004_1 + r_020_004_1;
            double b_401_1 = AmBz*b_400_1 + r_001_400_1;
            double r_001_401_1 = AmBz*r_001_400_1 + r_002_400_1;
            double b_041_1 = AmBz*b_040_1 + r_001_040_1;
            double r_001_041_1 = AmBz*r_001_040_1 + r_002_040_1;
            double b_320_1 = AmBy*b_310_1 + r_010_310_1;
            double r_010_320_1 = AmBy*r_010_310_1 + r_020_310_1;
            double r_001_320_1 = AmBy*r_001_310_1 + r_011_310_1;
            double b_302_1 = AmBz*b_301_1 + r_001_301_1;
            double r_010_302_1 = AmBz*r_010_301_1 + r_011_301_1;
            double r_001_302_1 = AmBz*r_001_301_1 + r_002_301_1;
            double b_230_1 = AmBx*b_130_1 + r_100_130_1;
            double r_001_230_1 = AmBx*r_001_130_1 + r_101_130_1;
            double b_032_1 = AmBz*b_031_1 + r_001_031_1;
            double r_100_032_1 = AmBz*r_100_031_1 + r_101_031_1;
            double r_001_032_1 = AmBz*r_001_031_1 + r_002_031_1;
            double b_203_1 = AmBx*b_103_1 + r_100_103_1;
            double r_010_203_1 = AmBx*r_010_103_1 + r_110_103_1;
            double b_023_1 = AmBy*b_013_1 + r_010_013_1;
            double r_100_023_1 = AmBy*r_100_013_1 + r_110_013_1;
            double b_122_1 = AmBx*b_022_1 + r_100_022_1;
            double r_100_122_1 = AmBx*r_100_022_1 + r_200_022_1;
            double b_600_1 = AmBx*b_500_1 + r_100_500_1;
            double b_060_1 = AmBy*b_050_1 + r_010_050_1;
            double b_006_1 = AmBz*b_005_1 + r_001_005_1;
            double b_510_1 = AmBy*b_500_1 + r_010_500_1;
            double b_150_1 = AmBx*b_050_1 + r_100_050_1;
            double b_501_1 = AmBz*b_500_1 + r_001_500_1;
            double b_105_1 = AmBx*b_005_1 + r_100_005_1;
            double b_051_1 = AmBz*b_050_1 + r_001_050_1;
            double b_015_1 = AmBy*b_005_1 + r_010_005_1;
            double b_420_1 = AmBy*b_410_1 + r_010_410_1;
            double b_402_1 = AmBz*b_401_1 + r_001_401_1;
            double b_240_1 = AmBx*b_140_1 + r_100_140_1;
            double b_204_1 = AmBx*b_104_1 + r_100_104_1;
            double b_042_1 = AmBz*b_041_1 + r_001_041_1;
            double b_024_1 = AmBy*b_014_1 + r_010_014_1;
            double b_330_1 = AmBy*b_320_1 + r_010_320_1;
            double b_303_1 = AmBz*b_302_1 + r_001_302_1;
            double b_033_1 = AmBz*b_032_1 + r_001_032_1;
            double b_114_1 = AmBy*b_104_1 + r_010_104_1;
            double b_141_1 = AmBz*b_140_1 + r_001_140_1;
            double b_411_1 = AmBz*b_410_1 + r_001_410_1;
            double b_312_1 = AmBy*b_302_1 + r_010_302_1;
            double b_132_1 = AmBx*b_032_1 + r_100_032_1;
            double b_321_1 = AmBz*b_320_1 + r_001_320_1;
            double b_123_1 = AmBx*b_023_1 + r_100_023_1;
            double b_231_1 = AmBz*b_230_1 + r_001_230_1;
            double b_213_1 = AmBy*b_203_1 + r_010_203_1;
            double b_222_1 = AmBx*b_122_1 + r_100_122_1;
            double bx_500 = -5*b_400 + b_600_1;
            double bx_050 = b_150_1;
            double bx_005 = b_105_1;
            double bx_140 = -b_040 + b_240_1;
            double bx_104 = -b_004 + b_204_1;
            double bx_410 = -4*b_310 + b_510_1;
            double bx_014 = b_114_1;
            double bx_401 = -4*b_301 + b_501_1;
            double bx_041 = b_141_1;
            double bx_320 = -3*b_220 + b_420_1;
            double bx_302 = -3*b_202 + b_402_1;
            double bx_230 = -2*b_130 + b_330_1;
            double bx_032 = b_132_1;
            double bx_203 = -2*b_103 + b_303_1;
            double bx_023 = b_123_1;
            double bx_311 = -3*b_211 + b_411_1;
            double bx_131 = -b_031 + b_231_1;
            double bx_113 = -b_013 + b_213_1;
            double bx_122 = -b_022 + b_222_1;
            double bx_212 = -2*b_112 + b_312_1;
            double bx_221 = -2*b_121 + b_321_1;
            double by_500 = b_510_1;
            double by_050 = -5*b_040 + b_060_1;
            double by_005 = b_015_1;
            double by_140 = -4*b_130 + b_150_1;
            double by_104 = b_114_1;
            double by_410 = -b_400 + b_420_1;
            double by_014 = -b_004 + b_024_1;
            double by_401 = b_411_1;
            double by_041 = -4*b_031 + b_051_1;
            double by_320 = -2*b_310 + b_330_1;
            double by_302 = b_312_1;
            double by_230 = -3*b_220 + b_240_1;
            double by_032 = -3*b_022 + b_042_1;
            double by_203 = b_213_1;
            double by_023 = -2*b_013 + b_033_1;
            double by_311 = -b_301 + b_321_1;
            double by_131 = -3*b_121 + b_141_1;
            double by_113 = -b_103 + b_123_1;
            double by_122 = -2*b_112 + b_132_1;
            double by_212 = -b_202 + b_222_1;
            double by_221 = -2*b_211 + b_231_1;
            double bz_500 = b_501_1;
            double bz_050 = b_051_1;
            double bz_005 = -5*b_004 + b_006_1;
            double bz_140 = b_141_1;
            double bz_104 = -4*b_103 + b_105_1;
            double bz_410 = b_411_1;
            double bz_014 = -4*b_013 + b_015_1;
            double bz_401 = -b_400 + b_402_1;
            double bz_041 = -b_040 + b_042_1;
            double bz_320 = b_321_1;
            double bz_302 = -2*b_301 + b_303_1;
            double bz_230 = b_231_1;
            double bz_032 = -2*b_031 + b_033_1;
            double bz_203 = -3*b_202 + b_204_1;
            double bz_023 = -3*b_022 + b_024_1;
            double bz_311 = -b_310 + b_312_1;
            double bz_131 = -b_130 + b_132_1;
            double bz_113 = -3*b_112 + b_114_1;
            double bz_122 = -2*b_121 + b_123_1;
            double bz_212 = -2*b_211 + b_213_1;
            double bz_221 = -b_220 + b_222_1;
            // 8.92 steps per component, 4.39 kb stack
            pOut_[sb*0 + sd*0] = bx_104*sd8 - bx_122*sd19 + bx_140*sd17 - bx_302*sd19 + bx_320*sd18 + bx_500*sd17;
            pOut_[sb*0 + sd*1] = by_104*sd8 - by_122*sd19 + by_140*sd17 - by_302*sd19 + by_320*sd18 + by_500*sd17;
            pOut_[sb*0 + sd*2] = bz_104*sd8 - bz_122*sd19 + bz_140*sd17 - bz_302*sd19 + bz_320*sd18 + bz_500*sd17;
            pOut_[sb*1 + sd*0] = bx_014*sd8 - bx_032*sd19 + bx_050*sd17 - bx_212*sd19 + bx_230*sd18 + bx_410*sd17;
            pOut_[sb*1 + sd*1] = by_014*sd8 - by_032*sd19 + by_050*sd17 - by_212*sd19 + by_230*sd18 + by_410*sd17;
            pOut_[sb*1 + sd*2] = bz_014*sd8 - bz_032*sd19 + bz_050*sd17 - bz_212*sd19 + bz_230*sd18 + bz_410*sd17;
            pOut_[sb*10 + sd*0] = bx_113*sd2a - bx_131*sd1b - bx_311*sd1b;
            pOut_[sb*10 + sd*1] = by_113*sd2a - by_131*sd1b - by_311*sd1b;
            pOut_[sb*10 + sd*2] = bz_113*sd2a - bz_131*sd1b - bz_311*sd1b;
            pOut_[sb*2 + sd*0] = -bx_023*sd1b + bx_041*sd1a + bx_203*sd1b - bx_401*sd1a;
            pOut_[sb*2 + sd*1] = -by_023*sd1b + by_041*sd1a + by_203*sd1b - by_401*sd1a;
            pOut_[sb*2 + sd*2] = -bz_023*sd1b + bz_041*sd1a + bz_203*sd1b - bz_401*sd1a;
            pOut_[sb*3 + sd*0] = -bx_122*sd20 + bx_140*sd1f + bx_302*sd1e + bx_320*sd1d - bx_500*sd1c;
            pOut_[sb*3 + sd*1] = -by_122*sd20 + by_140*sd1f + by_302*sd1e + by_320*sd1d - by_500*sd1c;
            pOut_[sb*3 + sd*2] = -bz_122*sd20 + bz_140*sd1f + bz_302*sd1e + bz_320*sd1d - bz_500*sd1c;
            pOut_[sb*4 + sd*0] = -bx_131*sd21 + bx_311*sd21;
            pOut_[sb*4 + sd*1] = -by_131*sd21 + by_311*sd21;
            pOut_[sb*4 + sd*2] = -bz_131*sd21 + bz_311*sd21;
            pOut_[sb*5 + sd*0] = -bx_032*sd1e + bx_050*sd1c + bx_212*sd20 - bx_230*sd1d - bx_410*sd1f;
            pOut_[sb*5 + sd*1] = -by_032*sd1e + by_050*sd1c + by_212*sd20 - by_230*sd1d - by_410*sd1f;
            pOut_[sb*5 + sd*2] = -bz_032*sd1e + bz_050*sd1c + bz_212*sd20 - bz_230*sd1d - bz_410*sd1f;
            pOut_[sb*6 + sd*0] = bx_041*sd22 - bx_221*sd23 + bx_401*sd22;
            pOut_[sb*6 + sd*1] = by_041*sd22 - by_221*sd23 + by_401*sd22;
            pOut_[sb*6 + sd*2] = bz_041*sd22 - bz_221*sd23 + bz_401*sd22;
            pOut_[sb*7 + sd*0] = bx_050*sd26 - bx_230*sd25 + bx_410*sd24;
            pOut_[sb*7 + sd*1] = by_050*sd26 - by_230*sd25 + by_410*sd24;
            pOut_[sb*7 + sd*2] = bz_050*sd26 - bz_230*sd25 + bz_410*sd24;
            pOut_[sb*8 + sd*0] = bx_005 - bx_023*sd29 + bx_041*sd27 - bx_203*sd29 + bx_221*sd28 + bx_401*sd27;
            pOut_[sb*8 + sd*1] = by_005 - by_023*sd29 + by_041*sd27 - by_203*sd29 + by_221*sd28 + by_401*sd27;
            pOut_[sb*8 + sd*2] = bz_005 - bz_023*sd29 + bz_041*sd27 - bz_203*sd29 + bz_221*sd28 + bz_401*sd27;
            pOut_[sb*9 + sd*0] = bx_140*sd24 - bx_320*sd25 + bx_500*sd26;
            pOut_[sb*9 + sd*1] = by_140*sd24 - by_320*sd25 + by_500*sd26;
            pOut_[sb*9 + sd*2] = bz_140*sd24 - bz_320*sd25 + bz_500*sd26;
         }
         return;
      }
      case 6: {
         for (size_t ia = 0; ia < nCount; ++ ia) {
            double const * pAx0 = p0Z + 56 * ia;
            double const * pAx1 = p2Z + 120 * ia;
            double * pOut_ = pOut + sa * ia;
            double b_100 = AmBx*pAx0[0] + pAx0[1];
            double r_100_100 = AmBx*pAx0[1] + pAx0[4];
            double r_010_100 = AmBx*pAx0[2] + pAx0[7];
            double r_001_100 = AmBx*pAx0[3] + pAx0[8];
            double r_200_100 = AmBx*pAx0[4] + pAx0[10];
            double r_020_100 = AmBx*pAx0[5] + pAx0[13];
            double r_002_100 = AmBx*pAx0[6] + pAx0[14];
            double r_110_100 = AmBx*pAx0[7] + pAx0[15];
            double r_101_100 = AmBx*pAx0[8] + pAx0[17];
            double r_011_100 = AmBx*pAx0[9] + pAx0[19];
            double r_300_100 = AmBx*pAx0[10] + pAx0[20];
            double r_120_100 = AmBx*pAx0[13] + pAx0[29];
            double r_102_100 = AmBx*pAx0[14] + pAx0[30];
            double r_210_100 = AmBx*pAx0[15] + pAx0[23];
            double r_201_100 = AmBx*pAx0[17] + pAx0[25];
            double r_111_100 = AmBx*pAx0[19] + pAx0[34];
            double r_400_100 = AmBx*pAx0[20] + pAx0[35];
            double r_310_100 = AmBx*pAx0[23] + pAx0[40];
            double r_301_100 = AmBx*pAx0[25] + pAx0[42];
            double r_220_100 = AmBx*pAx0[29] + pAx0[44];
            double r_202_100 = AmBx*pAx0[30] + pAx0[45];
            double r_211_100 = AmBx*pAx0[34] + pAx0[50];
            double b_100_1 = AmBx*pAx1[0] + pAx1[1];
            double r_100_100_1 = AmBx*pAx1[1] + pAx1[4];
            double r_010_100_1 = AmBx*pAx1[2] + pAx1[7];
            double r_001_100_1 = AmBx*pAx1[3] + pAx1[8];
            double r_200_100_1 = AmBx*pAx1[4] + pAx1[10];
            double r_020_100_1 = AmBx*pAx1[5] + pAx1[13];
            double r_002_100_1 = AmBx*pAx1[6] + pAx1[14];
            double r_110_100_1 = AmBx*pAx1[7] + pAx1[15];
            double r_101_100_1 = AmBx*pAx1[8] + pAx1[17];
            double r_011_100_1 = AmBx*pAx1[9] + pAx1[19];
            double r_300_100_1 = AmBx*pAx1[10] + pAx1[20];
            double r_030_100_1 = AmBx*pAx1[11] + pAx1[24];
            double r_003_100_1 = AmBx*pAx1[12] + pAx1[26];
            double r_120_100_1 = AmBx*pAx1[13] + pAx1[29];
            double r_102_100_1 = AmBx*pAx1[14] + pAx1[30];
            double r_210_100_1 = AmBx*pAx1[15] + pAx1[23];
            double r_012_100_1 = AmBx*pAx1[16] + pAx1[32];
            double r_201_100_1 = AmBx*pAx1[17] + pAx1[25];
            double r_021_100_1 = AmBx*pAx1[18] + pAx1[33];
            double r_111_100_1 = AmBx*pAx1[19] + pAx1[34];
            double r_400_100_1 = AmBx*pAx1[20] + pAx1[35];
            double r_310_100_1 = AmBx*pAx1[23] + pAx1[40];
            double r_130_100_1 = AmBx*pAx1[24] + pAx1[46];
            double r_301_100_1 = AmBx*pAx1[25] + pAx1[42];
            double r_103_100_1 = AmBx*pAx1[26] + pAx1[48];
            double r_031_100_1 = AmBx*pAx1[27] + pAx1[51];
            double r_013_100_1 = AmBx*pAx1[28] + pAx1[52];
            double r_220_100_1 = AmBx*pAx1[29] + pAx1[44];
            double r_202_100_1 = AmBx*pAx1[30] + pAx1[45];
            double r_022_100_1 = AmBx*pAx1[31] + pAx1[53];
            double r_112_100_1 = AmBx*pAx1[32] + pAx1[54];
            double r_121_100_1 = AmBx*pAx1[33] + pAx1[55];
            double r_211_100_1 = AmBx*pAx1[34] + pAx1[50];
            double r_500_100_1 = AmBx*pAx1[35] + pAx1[56];
            double r_410_100_1 = AmBx*pAx1[40] + pAx1[59];
            double r_401_100_1 = AmBx*pAx1[42] + pAx1[61];
            double r_320_100_1 = AmBx*pAx1[44] + pAx1[65];
            double r_302_100_1 = AmBx*pAx1[45] + pAx1[66];
            double r_230_100_1 = AmBx*pAx1[46] + pAx1[71];
            double r_203_100_1 = AmBx*pAx1[48] + pAx1[72];
            double r_311_100_1 = AmBx*pAx1[50] + pAx1[76];
            double r_131_100_1 = AmBx*pAx1[51] + pAx1[81];
            double r_113_100_1 = AmBx*pAx1[52] + pAx1[82];
            double r_122_100_1 = AmBx*pAx1[53] + pAx1[83];
            double r_212_100_1 = AmBx*pAx1[54] + pAx1[77];
            double r_221_100_1 = AmBx*pAx1[55] + pAx1[79];
            double r_600_100_1 = AmBx*pAx1[56] + pAx1[84];
            double r_510_100_1 = AmBx*pAx1[59] + pAx1[89];
            double r_501_100_1 = AmBx*pAx1[61] + pAx1[91];
            double r_420_100_1 = AmBx*pAx1[65] + pAx1[93];
            double r_402_100_1 = AmBx*pAx1[66] + pAx1[94];
            double r_330_100_1 = AmBx*pAx1[71] + pAx1[101];
            double r_303_100_1 = AmBx*pAx1[72] + pAx1[103];
            double r_411_100_1 = AmBx*pAx1[76] + pAx1[105];
            double r_312_100_1 = AmBx*pAx1[77] + pAx1[110];
            double r_321_100_1 = AmBx*pAx1[79] + pAx1[112];
            double r_231_100_1 = AmBx*pAx1[81] + pAx1[114];
            double r_213_100_1 = AmBx*pAx1[82] + pAx1[115];
            double r_222_100_1 = AmBx*pAx1[83] + pAx1[117];
            double b_010 = AmBy*pAx0[0] + pAx0[2];
            double r_100_010 = AmBy*pAx0[1] + pAx0[7];
            double r_010_010 = AmBy*pAx0[2] + pAx0[5];
            double r_001_010 = AmBy*pAx0[3] + pAx0[9];
            double r_200_010 = AmBy*pAx0[4] + pAx0[15];
            double r_020_010 = AmBy*pAx0[5] + pAx0[11];
            double r_002_010 = AmBy*pAx0[6] + pAx0[16];
            double r_110_010 = AmBy*pAx0[7] + pAx0[13];
            double r_101_010 = AmBy*pAx0[8] + pAx0[19];
            double r_011_010 = AmBy*pAx0[9] + pAx0[18];
            double r_030_010 = AmBy*pAx0[11] + pAx0[21];
            double r_120_010 = AmBy*pAx0[13] + pAx0[24];
            double r_210_010 = AmBy*pAx0[15] + pAx0[29];
            double r_012_010 = AmBy*pAx0[16] + pAx0[31];
            double r_201_010 = AmBy*pAx0[17] + pAx0[34];
            double r_021_010 = AmBy*pAx0[18] + pAx0[27];
            double r_111_010 = AmBy*pAx0[19] + pAx0[33];
            double r_040_010 = AmBy*pAx0[21] + pAx0[36];
            double r_130_010 = AmBy*pAx0[24] + pAx0[38];
            double r_031_010 = AmBy*pAx0[27] + pAx0[43];
            double r_220_010 = AmBy*pAx0[29] + pAx0[46];
            double r_022_010 = AmBy*pAx0[31] + pAx0[47];
            double r_121_010 = AmBy*pAx0[33] + pAx0[51];
            double r_211_010 = AmBy*pAx0[34] + pAx0[55];
            double b_010_1 = AmBy*pAx1[0] + pAx1[2];
            double r_100_010_1 = AmBy*pAx1[1] + pAx1[7];
            double r_010_010_1 = AmBy*pAx1[2] + pAx1[5];
            double r_001_010_1 = AmBy*pAx1[3] + pAx1[9];
            double r_200_010_1 = AmBy*pAx1[4] + pAx1[15];
            double r_020_010_1 = AmBy*pAx1[5] + pAx1[11];
            double r_002_010_1 = AmBy*pAx1[6] + pAx1[16];
            double r_110_010_1 = AmBy*pAx1[7] + pAx1[13];
            double r_101_010_1 = AmBy*pAx1[8] + pAx1[19];
            double r_011_010_1 = AmBy*pAx1[9] + pAx1[18];
            double r_300_010_1 = AmBy*pAx1[10] + pAx1[23];
            double r_030_010_1 = AmBy*pAx1[11] + pAx1[21];
            double r_003_010_1 = AmBy*pAx1[12] + pAx1[28];
            double r_120_010_1 = AmBy*pAx1[13] + pAx1[24];
            double r_102_010_1 = AmBy*pAx1[14] + pAx1[32];
            double r_210_010_1 = AmBy*pAx1[15] + pAx1[29];
            double r_012_010_1 = AmBy*pAx1[16] + pAx1[31];
            double r_201_010_1 = AmBy*pAx1[17] + pAx1[34];
            double r_021_010_1 = AmBy*pAx1[18] + pAx1[27];
            double r_111_010_1 = AmBy*pAx1[19] + pAx1[33];
            double r_040_010_1 = AmBy*pAx1[21] + pAx1[36];
            double r_310_010_1 = AmBy*pAx1[23] + pAx1[44];
            double r_130_010_1 = AmBy*pAx1[24] + pAx1[38];
            double r_103_010_1 = AmBy*pAx1[26] + pAx1[52];
            double r_031_010_1 = AmBy*pAx1[27] + pAx1[43];
            double r_013_010_1 = AmBy*pAx1[28] + pAx1[49];
            double r_220_010_1 = AmBy*pAx1[29] + pAx1[46];
            double r_202_010_1 = AmBy*pAx1[30] + pAx1[54];
            double r_022_010_1 = AmBy*pAx1[31] + pAx1[47];
            double r_112_010_1 = AmBy*pAx1[32] + pAx1[53];
            double r_121_010_1 = AmBy*pAx1[33] + pAx1[51];
            double r_211_010_1 = AmBy*pAx1[34] + pAx1[55];
            double r_050_010_1 = AmBy*pAx1[36] + pAx1[57];
            double r_140_010_1 = AmBy*pAx1[38] + pAx1[60];
            double r_041_010_1 = AmBy*pAx1[43] + pAx1[63];
            double r_320_010_1 = AmBy*pAx1[44] + pAx1[71];
            double r_230_010_1 = AmBy*pAx1[46] + pAx1[67];
            double r_032_010_1 = AmBy*pAx1[47] + pAx1[69];
            double r_023_010_1 = AmBy*pAx1[49] + pAx1[73];
            double r_131_010_1 = AmBy*pAx1[51] + pAx1[75];
            double r_113_010_1 = AmBy*pAx1[52] + pAx1[80];
            double r_122_010_1 = AmBy*pAx1[53] + pAx1[78];
            double r_212_010_1 = AmBy*pAx1[54] + pAx1[83];
            double r_221_010_1 = AmBy*pAx1[55] + pAx1[81];
            double r_060_010_1 = AmBy*pAx1[57] + pAx1[85];
            double r_150_010_1 = AmBy*pAx1[60] + pAx1[87];
            double r_051_010_1 = AmBy*pAx1[63] + pAx1[92];
            double r_240_010_1 = AmBy*pAx1[67] + pAx1[95];
            double r_042_010_1 = AmBy*pAx1[69] + pAx1[96];
            double r_330_010_1 = AmBy*pAx1[71] + pAx1[99];
            double r_033_010_1 = AmBy*pAx1[73] + pAx1[104];
            double r_141_010_1 = AmBy*pAx1[75] + pAx1[106];
            double r_132_010_1 = AmBy*pAx1[78] + pAx1[108];
            double r_123_010_1 = AmBy*pAx1[80] + pAx1[116];
            double r_231_010_1 = AmBy*pAx1[81] + pAx1[113];
            double r_222_010_1 = AmBy*pAx1[83] + pAx1[118];
            double b_001 = AmBz*pAx0[0] + pAx0[3];
            double r_100_001 = AmBz*pAx0[1] + pAx0[8];
            double r_010_001 = AmBz*pAx0[2] + pAx0[9];
            double r_001_001 = AmBz*pAx0[3] + pAx0[6];
            double r_200_001 = AmBz*pAx0[4] + pAx0[17];
            double r_020_001 = AmBz*pAx0[5] + pAx0[18];
            double r_002_001 = AmBz*pAx0[6] + pAx0[12];
            double r_110_001 = AmBz*pAx0[7] + pAx0[19];
            double r_101_001 = AmBz*pAx0[8] + pAx0[14];
            double r_011_001 = AmBz*pAx0[9] + pAx0[16];
            double r_003_001 = AmBz*pAx0[12] + pAx0[22];
            double r_120_001 = AmBz*pAx0[13] + pAx0[33];
            double r_102_001 = AmBz*pAx0[14] + pAx0[26];
            double r_210_001 = AmBz*pAx0[15] + pAx0[34];
            double r_012_001 = AmBz*pAx0[16] + pAx0[28];
            double r_201_001 = AmBz*pAx0[17] + pAx0[30];
            double r_021_001 = AmBz*pAx0[18] + pAx0[31];
            double r_111_001 = AmBz*pAx0[19] + pAx0[32];
            double r_004_001 = AmBz*pAx0[22] + pAx0[37];
            double r_103_001 = AmBz*pAx0[26] + pAx0[39];
            double r_013_001 = AmBz*pAx0[28] + pAx0[41];
            double r_202_001 = AmBz*pAx0[30] + pAx0[48];
            double r_022_001 = AmBz*pAx0[31] + pAx0[49];
            double r_112_001 = AmBz*pAx0[32] + pAx0[52];
            double r_121_001 = AmBz*pAx0[33] + pAx0[53];
            double r_211_001 = AmBz*pAx0[34] + pAx0[54];
            double b_001_1 = AmBz*pAx1[0] + pAx1[3];
            double r_100_001_1 = AmBz*pAx1[1] + pAx1[8];
            double r_010_001_1 = AmBz*pAx1[2] + pAx1[9];
            double r_001_001_1 = AmBz*pAx1[3] + pAx1[6];
            double r_200_001_1 = AmBz*pAx1[4] + pAx1[17];
            double r_020_001_1 = AmBz*pAx1[5] + pAx1[18];
            double r_002_001_1 = AmBz*pAx1[6] + pAx1[12];
            double r_110_001_1 = AmBz*pAx1[7] + pAx1[19];
            double r_101_001_1 = AmBz*pAx1[8] + pAx1[14];
            double r_011_001_1 = AmBz*pAx1[9] + pAx1[16];
            double r_300_001_1 = AmBz*pAx1[10] + pAx1[25];
            double r_030_001_1 = AmBz*pAx1[11] + pAx1[27];
            double r_003_001_1 = AmBz*pAx1[12] + pAx1[22];
            double r_120_001_1 = AmBz*pAx1[13] + pAx1[33];
            double r_102_001_1 = AmBz*pAx1[14] + pAx1[26];
            double r_210_001_1 = AmBz*pAx1[15] + pAx1[34];
            double r_012_001_1 = AmBz*pAx1[16] + pAx1[28];
            double r_201_001_1 = AmBz*pAx1[17] + pAx1[30];
            double r_021_001_1 = AmBz*pAx1[18] + pAx1[31];
            double r_111_001_1 = AmBz*pAx1[19] + pAx1[32];
            double r_004_001_1 = AmBz*pAx1[22] + pAx1[37];
            double r_301_001_1 = AmBz*pAx1[25] + pAx1[45];
            double r_103_001_1 = AmBz*pAx1[26] + pAx1[39];
            double r_031_001_1 = AmBz*pAx1[27] + pAx1[47];
            double r_013_001_1 = AmBz*pAx1[28] + pAx1[41];
            double r_220_001_1 = AmBz*pAx1[29] + pAx1[55];
            double r_202_001_1 = AmBz*pAx1[30] + pAx1[48];
            double r_022_001_1 = AmBz*pAx1[31] + pAx1[49];
            double r_112_001_1 = AmBz*pAx1[32] + pAx1[52];
            double r_121_001_1 = AmBz*pAx1[33] + pAx1[53];
            double r_211_001_1 = AmBz*pAx1[34] + pAx1[54];
            double r_005_001_1 = AmBz*pAx1[37] + pAx1[58];
            double r_104_001_1 = AmBz*pAx1[39] + pAx1[62];
            double r_014_001_1 = AmBz*pAx1[41] + pAx1[64];
            double r_302_001_1 = AmBz*pAx1[45] + pAx1[72];
            double r_032_001_1 = AmBz*pAx1[47] + pAx1[73];
            double r_203_001_1 = AmBz*pAx1[48] + pAx1[68];
            double r_023_001_1 = AmBz*pAx1[49] + pAx1[70];
            double r_113_001_1 = AmBz*pAx1[52] + pAx1[74];
            double r_122_001_1 = AmBz*pAx1[53] + pAx1[80];
            double r_212_001_1 = AmBz*pAx1[54] + pAx1[82];
            double r_221_001_1 = AmBz*pAx1[55] + pAx1[83];
            double r_006_001_1 = AmBz*pAx1[58] + pAx1[86];
            double r_105_001_1 = AmBz*pAx1[62] + pAx1[88];
            double r_015_001_1 = AmBz*pAx1[64] + pAx1[90];
            double r_204_001_1 = AmBz*pAx1[68] + pAx1[97];
            double r_024_001_1 = AmBz*pAx1[70] + pAx1[98];
            double r_303_001_1 = AmBz*pAx1[72] + pAx1[100];
            double r_033_001_1 = AmBz*pAx1[73] + pAx1[102];
            double r_114_001_1 = AmBz*pAx1[74] + pAx1[107];
            double r_123_001_1 = AmBz*pAx1[80] + pAx1[109];
            double r_213_001_1 = AmBz*pAx1[82] + pAx1[111];
            double r_222_001_1 = AmBz*pAx1[83] + pAx1[119];
            double b_200 = AmBx*b_100 + r_100_100;
            double r_100_200 = AmBx*r_100_100 + r_200_100;
            double r_010_200 = AmBx*r_010_100 + r_110_100;
            double r_001_200 = AmBx*r_001_100 + r_101_100;
            double r_200_200 = AmBx*r_200_100 + r_300_100;
            double r_020_200 = AmBx*r_020_100 + r_120_100;
            double r_002_200 = AmBx*r_002_100 + r_102_100;
            double r_110_200 = AmBx*r_110_100 + r_210_100;
            double r_101_200 = AmBx*r_101_100 + r_201_100;
            double r_011_200 = AmBx*r_011_100 + r_111_100;
            double r_300_200 = AmBx*r_300_100 + r_400_100;
            double r_120_200 = AmBx*r_120_100 + r_220_100;
            double r_102_200 = AmBx*r_102_100 + r_202_100;
            double r_210_200 = AmBx*r_210_100 + r_310_100;
            double r_201_200 = AmBx*r_201_100 + r_301_100;
            double r_111_200 = AmBx*r_111_100 + r_211_100;
            double b_200_1 = AmBx*b_100_1 + r_100_100_1;
            double r_100_200_1 = AmBx*r_100_100_1 + r_200_100_1;
            double r_010_200_1 = AmBx*r_010_100_1 + r_110_100_1;
            double r_001_200_1 = AmBx*r_001_100_1 + r_101_100_1;
            double r_200_200_1 = AmBx*r_200_100_1 + r_300_100_1;
            double r_020_200_1 = AmBx*r_020_100_1 + r_120_100_1;
            double r_002_200_1 = AmBx*r_002_100_1 + r_102_100_1;
            double r_110_200_1 = AmBx*r_110_100_1 + r_210_100_1;
            double r_101_200_1 = AmBx*r_101_100_1 + r_201_100_1;
            double r_011_200_1 = AmBx*r_011_100_1 + r_111_100_1;
            double r_300_200_1 = AmBx*r_300_100_1 + r_400_100_1;
            double r_030_200_1 = AmBx*r_030_100_1 + r_130_100_1;
            double r_003_200_1 = AmBx*r_003_100_1 + r_103_100_1;
            double r_120_200_1 = AmBx*r_120_100_1 + r_220_100_1;
            double r_102_200_1 = AmBx*r_102_100_1 + r_202_100_1;
            double r_210_200_1 = AmBx*r_210_100_1 + r_310_100_1;
            double r_012_200_1 = AmBx*r_012_100_1 + r_112_100_1;
            double r_201_200_1 = AmBx*r_201_100_1 + r_301_100_1;
            double r_021_200_1 = AmBx*r_021_100_1 + r_121_100_1;
            double r_111_200_1 = AmBx*r_111_100_1 + r_211_100_1;
            double r_400_200_1 = AmBx*r_400_100_1 + r_500_100_1;
            double r_310_200_1 = AmBx*r_310_100_1 + r_410_100_1;
            double r_130_200_1 = AmBx*r_130_100_1 + r_230_100_1;
            double r_301_200_1 = AmBx*r_301_100_1 + r_401_100_1;
            double r_103_200_1 = AmBx*r_103_100_1 + r_203_100_1;
            double r_031_200_1 = AmBx*r_031_100_1 + r_131_100_1;
            double r_013_200_1 = AmBx*r_013_100_1 + r_113_100_1;
            double r_220_200_1 = AmBx*r_220_100_1 + r_320_100_1;
            double r_202_200_1 = AmBx*r_202_100_1 + r_302_100_1;
            double r_022_200_1 = AmBx*r_022_100_1 + r_122_100_1;
            double r_112_200_1 = AmBx*r_112_100_1 + r_212_100_1;
            double r_121_200_1 = AmBx*r_121_100_1 + r_221_100_1;
            double r_211_200_1 = AmBx*r_211_100_1 + r_311_100_1;
            double r_500_200_1 = AmBx*r_500_100_1 + r_600_100_1;
            double r_410_200_1 = AmBx*r_410_100_1 + r_510_100_1;
            double r_401_200_1 = AmBx*r_401_100_1 + r_501_100_1;
            double r_320_200_1 = AmBx*r_320_100_1 + r_420_100_1;
            double r_302_200_1 = AmBx*r_302_100_1 + r_402_100_1;
            double r_230_200_1 = AmBx*r_230_100_1 + r_330_100_1;
            double r_203_200_1 = AmBx*r_203_100_1 + r_303_100_1;
            double r_311_200_1 = AmBx*r_311_100_1 + r_411_100_1;
            double r_131_200_1 = AmBx*r_131_100_1 + r_231_100_1;
            double r_113_200_1 = AmBx*r_113_100_1 + r_213_100_1;
            double r_122_200_1 = AmBx*r_122_100_1 + r_222_100_1;
            double r_212_200_1 = AmBx*r_212_100_1 + r_312_100_1;
            double r_221_200_1 = AmBx*r_221_100_1 + r_321_100_1;
            double b_020 = AmBy*b_010 + r_010_010;
            double r_100_020 = AmBy*r_100_010 + r_110_010;
            double r_010_020 = AmBy*r_010_010 + r_020_010;
            double r_001_020 = AmBy*r_001_010 + r_011_010;
            double r_200_020 = AmBy*r_200_010 + r_210_010;
            double r_020_020 = AmBy*r_020_010 + r_030_010;
            double r_002_020 = AmBy*r_002_010 + r_012_010;
            double r_110_020 = AmBy*r_110_010 + r_120_010;
            double r_101_020 = AmBy*r_101_010 + r_111_010;
            double r_011_020 = AmBy*r_011_010 + r_021_010;
            double r_030_020 = AmBy*r_030_010 + r_040_010;
            double r_120_020 = AmBy*r_120_010 + r_130_010;
            double r_210_020 = AmBy*r_210_010 + r_220_010;
            double r_012_020 = AmBy*r_012_010 + r_022_010;
            double r_201_020 = AmBy*r_201_010 + r_211_010;
            double r_021_020 = AmBy*r_021_010 + r_031_010;
            double r_111_020 = AmBy*r_111_010 + r_121_010;
            double b_020_1 = AmBy*b_010_1 + r_010_010_1;
            double r_100_020_1 = AmBy*r_100_010_1 + r_110_010_1;
            double r_010_020_1 = AmBy*r_010_010_1 + r_020_010_1;
            double r_001_020_1 = AmBy*r_001_010_1 + r_011_010_1;
            double r_200_020_1 = AmBy*r_200_010_1 + r_210_010_1;
            double r_020_020_1 = AmBy*r_020_010_1 + r_030_010_1;
            double r_002_020_1 = AmBy*r_002_010_1 + r_012_010_1;
            double r_110_020_1 = AmBy*r_110_010_1 + r_120_010_1;
            double r_101_020_1 = AmBy*r_101_010_1 + r_111_010_1;
            double r_011_020_1 = AmBy*r_011_010_1 + r_021_010_1;
            double r_300_020_1 = AmBy*r_300_010_1 + r_310_010_1;
            double r_030_020_1 = AmBy*r_030_010_1 + r_040_010_1;
            double r_003_020_1 = AmBy*r_003_010_1 + r_013_010_1;
            double r_120_020_1 = AmBy*r_120_010_1 + r_130_010_1;
            double r_102_020_1 = AmBy*r_102_010_1 + r_112_010_1;
            double r_210_020_1 = AmBy*r_210_010_1 + r_220_010_1;
            double r_012_020_1 = AmBy*r_012_010_1 + r_022_010_1;
            double r_201_020_1 = AmBy*r_201_010_1 + r_211_010_1;
            double r_021_020_1 = AmBy*r_021_010_1 + r_031_010_1;
            double r_111_020_1 = AmBy*r_111_010_1 + r_121_010_1;
            double r_040_020_1 = AmBy*r_040_010_1 + r_050_010_1;
            double r_310_020_1 = AmBy*r_310_010_1 + r_320_010_1;
            double r_130_020_1 = AmBy*r_130_010_1 + r_140_010_1;
            double r_103_020_1 = AmBy*r_103_010_1 + r_113_010_1;
            double r_031_020_1 = AmBy*r_031_010_1 + r_041_010_1;
            double r_013_020_1 = AmBy*r_013_010_1 + r_023_010_1;
            double r_220_020_1 = AmBy*r_220_010_1 + r_230_010_1;
            double r_202_020_1 = AmBy*r_202_010_1 + r_212_010_1;
            double r_022_020_1 = AmBy*r_022_010_1 + r_032_010_1;
            double r_112_020_1 = AmBy*r_112_010_1 + r_122_010_1;
            double r_121_020_1 = AmBy*r_121_010_1 + r_131_010_1;
            double r_211_020_1 = AmBy*r_211_010_1 + r_221_010_1;
            double r_050_020_1 = AmBy*r_050_010_1 + r_060_010_1;
            double r_140_020_1 = AmBy*r_140_010_1 + r_150_010_1;
            double r_041_020_1 = AmBy*r_041_010_1 + r_051_010_1;
            double r_320_020_1 = AmBy*r_320_010_1 + r_330_010_1;
            double r_230_020_1 = AmBy*r_230_010_1 + r_240_010_1;
            double r_032_020_1 = AmBy*r_032_010_1 + r_042_010_1;
            double r_023_020_1 = AmBy*r_023_010_1 + r_033_010_1;
            double r_131_020_1 = AmBy*r_131_010_1 + r_141_010_1;
            double r_113_020_1 = AmBy*r_113_010_1 + r_123_010_1;
            double r_122_020_1 = AmBy*r_122_010_1 + r_132_010_1;
            double r_212_020_1 = AmBy*r_212_010_1 + r_222_010_1;
            double r_221_020_1 = AmBy*r_221_010_1 + r_231_010_1;
            double b_002 = AmBz*b_001 + r_001_001;
            double r_100_002 = AmBz*r_100_001 + r_101_001;
            double r_010_002 = AmBz*r_010_001 + r_011_001;
            double r_001_002 = AmBz*r_001_001 + r_002_001;
            double r_200_002 = AmBz*r_200_001 + r_201_001;
            double r_020_002 = AmBz*r_020_001 + r_021_001;
            double r_002_002 = AmBz*r_002_001 + r_003_001;
            double r_110_002 = AmBz*r_110_001 + r_111_001;
            double r_101_002 = AmBz*r_101_001 + r_102_001;
            double r_011_002 = AmBz*r_011_001 + r_012_001;
            double r_003_002 = AmBz*r_003_001 + r_004_001;
            double r_120_002 = AmBz*r_120_001 + r_121_001;
            double r_102_002 = AmBz*r_102_001 + r_103_001;
            double r_210_002 = AmBz*r_210_001 + r_211_001;
            double r_012_002 = AmBz*r_012_001 + r_013_001;
            double r_201_002 = AmBz*r_201_001 + r_202_001;
            double r_021_002 = AmBz*r_021_001 + r_022_001;
            double r_111_002 = AmBz*r_111_001 + r_112_001;
            double b_002_1 = AmBz*b_001_1 + r_001_001_1;
            double r_100_002_1 = AmBz*r_100_001_1 + r_101_001_1;
            double r_010_002_1 = AmBz*r_010_001_1 + r_011_001_1;
            double r_001_002_1 = AmBz*r_001_001_1 + r_002_001_1;
            double r_200_002_1 = AmBz*r_200_001_1 + r_201_001_1;
            double r_020_002_1 = AmBz*r_020_001_1 + r_021_001_1;
            double r_002_002_1 = AmBz*r_002_001_1 + r_003_001_1;
            double r_110_002_1 = AmBz*r_110_001_1 + r_111_001_1;
            double r_101_002_1 = AmBz*r_101_001_1 + r_102_001_1;
            double r_011_002_1 = AmBz*r_011_001_1 + r_012_001_1;
            double r_300_002_1 = AmBz*r_300_001_1 + r_301_001_1;
            double r_030_002_1 = AmBz*r_030_001_1 + r_031_001_1;
            double r_003_002_1 = AmBz*r_003_001_1 + r_004_001_1;
            double r_120_002_1 = AmBz*r_120_001_1 + r_121_001_1;
            double r_102_002_1 = AmBz*r_102_001_1 + r_103_001_1;
            double r_210_002_1 = AmBz*r_210_001_1 + r_211_001_1;
            double r_012_002_1 = AmBz*r_012_001_1 + r_013_001_1;
            double r_201_002_1 = AmBz*r_201_001_1 + r_202_001_1;
            double r_021_002_1 = AmBz*r_021_001_1 + r_022_001_1;
            double r_111_002_1 = AmBz*r_111_001_1 + r_112_001_1;
            double r_004_002_1 = AmBz*r_004_001_1 + r_005_001_1;
            double r_301_002_1 = AmBz*r_301_001_1 + r_302_001_1;
            double r_103_002_1 = AmBz*r_103_001_1 + r_104_001_1;
            double r_031_002_1 = AmBz*r_031_001_1 + r_032_001_1;
            double r_013_002_1 = AmBz*r_013_001_1 + r_014_001_1;
            double r_220_002_1 = AmBz*r_220_001_1 + r_221_001_1;
            double r_202_002_1 = AmBz*r_202_001_1 + r_203_001_1;
            double r_022_002_1 = AmBz*r_022_001_1 + r_023_001_1;
            double r_112_002_1 = AmBz*r_112_001_1 + r_113_001_1;
            double r_121_002_1 = AmBz*r_121_001_1 + r_122_001_1;
            double r_211_002_1 = AmBz*r_211_001_1 + r_212_001_1;
            double r_005_002_1 = AmBz*r_005_001_1 + r_006_001_1;
            double r_104_002_1 = AmBz*r_104_001_1 + r_105_001_1;
            double r_014_002_1 = AmBz*r_014_001_1 + r_015_001_1;
            double r_302_002_1 = AmBz*r_302_001_1 + r_303_001_1;
            double r_032_002_1 = AmBz*r_032_001_1 + r_033_001_1;
            double r_203_002_1 = AmBz*r_203_001_1 + r_204_001_1;
            double r_023_002_1 = AmBz*r_023_001_1 + r_024_001_1;
            double r_113_002_1 = AmBz*r_113_001_1 + r_114_001_1;
            double r_122_002_1 = AmBz*r_122_001_1 + r_123_001_1;
            double r_212_002_1 = AmBz*r_212_001_1 + r_213_001_1;
            double r_221_002_1 = AmBz*r_221_001_1 + r_222_001_1;
            double b_300 = AmBx*b_200 + r_100_200;
            double r_100_300 = AmBx*r_100_200 + r_200_200;
            double r_010_300 = AmBx*r_010_200 + r_110_200;
            double r_001_300 = AmBx*r_001_200 + r_101_200;
            double r_200_300 = AmBx*r_200_200 + r_300_200;
            double r_020_300 = AmBx*r_020_200 + r_120_200;
            double r_002_300 = AmBx*r_002_200 + r_102_200;
            double r_110_300 = AmBx*r_110_200 + r_210_200;
            double r_101_300 = AmBx*r_101_200 + r_201_200;
            double r_011_300 = AmBx*r_011_200 + r_111_200;
            double b_300_1 = AmBx*b_200_1 + r_100_200_1;
            double r_100_300_1 = AmBx*r_100_200_1 + r_200_200_1;
            double r_010_300_1 = AmBx*r_010_200_1 + r_110_200_1;
            double r_001_300_1 = AmBx*r_001_200_1 + r_101_200_1;
            double r_200_300_1 = AmBx*r_200_200_1 + r_300_200_1;
            double r_020_300_1 = AmBx*r_020_200_1 + r_120_200_1;
            double r_002_300_1 = AmBx*r_002_200_1 + r_102_200_1;
            double r_110_300_1 = AmBx*r_110_200_1 + r_210_200_1;
            double r_101_300_1 = AmBx*r_101_200_1 + r_201_200_1;
            double r_011_300_1 = AmBx*r_011_200_1 + r_111_200_1;
            double r_300_300_1 = AmBx*r_300_200_1 + r_400_200_1;
            double r_030_300_1 = AmBx*r_030_200_1 + r_130_200_1;
            double r_003_300_1 = AmBx*r_003_200_1 + r_103_200_1;
            double r_120_300_1 = AmBx*r_120_200_1 + r_220_200_1;
            double r_102_300_1 = AmBx*r_102_200_1 + r_202_200_1;
            double r_210_300_1 = AmBx*r_210_200_1 + r_310_200_1;
            double r_012_300_1 = AmBx*r_012_200_1 + r_112_200_1;
            double r_201_300_1 = AmBx*r_201_200_1 + r_301_200_1;
            double r_021_300_1 = AmBx*r_021_200_1 + r_121_200_1;
            double r_111_300_1 = AmBx*r_111_200_1 + r_211_200_1;
            double r_400_300_1 = AmBx*r_400_200_1 + r_500_200_1;
            double r_310_300_1 = AmBx*r_310_200_1 + r_410_200_1;
            double r_130_300_1 = AmBx*r_130_200_1 + r_230_200_1;
            double r_301_300_1 = AmBx*r_301_200_1 + r_401_200_1;
            double r_103_300_1 = AmBx*r_103_200_1 + r_203_200_1;
            double r_031_300_1 = AmBx*r_031_200_1 + r_131_200_1;
            double r_013_300_1 = AmBx*r_013_200_1 + r_113_200_1;
            double r_220_300_1 = AmBx*r_220_200_1 + r_320_200_1;
            double r_202_300_1 = AmBx*r_202_200_1 + r_302_200_1;
            double r_022_300_1 = AmBx*r_022_200_1 + r_122_200_1;
            double r_112_300_1 = AmBx*r_112_200_1 + r_212_200_1;
            double r_121_300_1 = AmBx*r_121_200_1 + r_221_200_1;
            double r_211_300_1 = AmBx*r_211_200_1 + r_311_200_1;
            double b_030 = AmBy*b_020 + r_010_020;
            double r_100_030 = AmBy*r_100_020 + r_110_020;
            double r_010_030 = AmBy*r_010_020 + r_020_020;
            double r_001_030 = AmBy*r_001_020 + r_011_020;
            double r_200_030 = AmBy*r_200_020 + r_210_020;
            double r_020_030 = AmBy*r_020_020 + r_030_020;
            double r_002_030 = AmBy*r_002_020 + r_012_020;
            double r_110_030 = AmBy*r_110_020 + r_120_020;
            double r_101_030 = AmBy*r_101_020 + r_111_020;
            double r_011_030 = AmBy*r_011_020 + r_021_020;
            double b_030_1 = AmBy*b_020_1 + r_010_020_1;
            double r_100_030_1 = AmBy*r_100_020_1 + r_110_020_1;
            double r_010_030_1 = AmBy*r_010_020_1 + r_020_020_1;
            double r_001_030_1 = AmBy*r_001_020_1 + r_011_020_1;
            double r_200_030_1 = AmBy*r_200_020_1 + r_210_020_1;
            double r_020_030_1 = AmBy*r_020_020_1 + r_030_020_1;
            double r_002_030_1 = AmBy*r_002_020_1 + r_012_020_1;
            double r_110_030_1 = AmBy*r_110_020_1 + r_120_020_1;
            double r_101_030_1 = AmBy*r_101_020_1 + r_111_020_1;
            double r_011_030_1 = AmBy*r_011_020_1 + r_021_020_1;
            double r_300_030_1 = AmBy*r_300_020_1 + r_310_020_1;
            double r_030_030_1 = AmBy*r_030_020_1 + r_040_020_1;
            double r_003_030_1 = AmBy*r_003_020_1 + r_013_020_1;
            double r_120_030_1 = AmBy*r_120_020_1 + r_130_020_1;
            double r_102_030_1 = AmBy*r_102_020_1 + r_112_020_1;
            double r_210_030_1 = AmBy*r_210_020_1 + r_220_020_1;
            double r_012_030_1 = AmBy*r_012_020_1 + r_022_020_1;
            double r_201_030_1 = AmBy*r_201_020_1 + r_211_020_1;
            double r_021_030_1 = AmBy*r_021_020_1 + r_031_020_1;
            double r_111_030_1 = AmBy*r_111_020_1 + r_121_020_1;
            double r_040_030_1 = AmBy*r_040_020_1 + r_050_020_1;
            double r_310_030_1 = AmBy*r_310_020_1 + r_320_020_1;
            double r_130_030_1 = AmBy*r_130_020_1 + r_140_020_1;
            double r_103_030_1 = AmBy*r_103_020_1 + r_113_020_1;
            double r_031_030_1 = AmBy*r_031_020_1 + r_041_020_1;
            double r_013_030_1 = AmBy*r_013_020_1 + r_023_020_1;
            double r_220_030_1 = AmBy*r_220_020_1 + r_230_020_1;
            double r_202_030_1 = AmBy*r_202_020_1 + r_212_020_1;
            double r_022_030_1 = AmBy*r_022_020_1 + r_032_020_1;
            double r_112_030_1 = AmBy*r_112_020_1 + r_122_020_1;
            double r_121_030_1 = AmBy*r_121_020_1 + r_131_020_1;
            double r_211_030_1 = AmBy*r_211_020_1 + r_221_020_1;
            double b_003 = AmBz*b_002 + r_001_002;
            double r_100_003 = AmBz*r_100_002 + r_101_002;
            double r_010_003 = AmBz*r_010_002 + r_011_002;
            double r_001_003 = AmBz*r_001_002 + r_002_002;
            double r_200_003 = AmBz*r_200_002 + r_201_002;
            double r_020_003 = AmBz*r_020_002 + r_021_002;
            double r_002_003 = AmBz*r_002_002 + r_003_002;
            double r_110_003 = AmBz*r_110_002 + r_111_002;
            double r_101_003 = AmBz*r_101_002 + r_102_002;
            double r_011_003 = AmBz*r_011_002 + r_012_002;
            double b_003_1 = AmBz*b_002_1 + r_001_002_1;
            double r_100_003_1 = AmBz*r_100_002_1 + r_101_002_1;
            double r_010_003_1 = AmBz*r_010_002_1 + r_011_002_1;
            double r_001_003_1 = AmBz*r_001_002_1 + r_002_002_1;
            double r_200_003_1 = AmBz*r_200_002_1 + r_201_002_1;
            double r_020_003_1 = AmBz*r_020_002_1 + r_021_002_1;
            double r_002_003_1 = AmBz*r_002_002_1 + r_003_002_1;
            double r_110_003_1 = AmBz*r_110_002_1 + r_111_002_1;
            double r_101_003_1 = AmBz*r_101_002_1 + r_102_002_1;
            double r_011_003_1 = AmBz*r_011_002_1 + r_012_002_1;
            double r_300_003_1 = AmBz*r_300_002_1 + r_301_002_1;
            double r_030_003_1 = AmBz*r_030_002_1 + r_031_002_1;
            double r_003_003_1 = AmBz*r_003_002_1 + r_004_002_1;
            double r_120_003_1 = AmBz*r_120_002_1 + r_121_002_1;
            double r_102_003_1 = AmBz*r_102_002_1 + r_103_002_1;
            double r_210_003_1 = AmBz*r_210_002_1 + r_211_002_1;
            double r_012_003_1 = AmBz*r_012_002_1 + r_013_002_1;
            double r_201_003_1 = AmBz*r_201_002_1 + r_202_002_1;
            double r_021_003_1 = AmBz*r_021_002_1 + r_022_002_1;
            double r_111_003_1 = AmBz*r_111_002_1 + r_112_002_1;
            double r_004_003_1 = AmBz*r_004_002_1 + r_005_002_1;
            double r_301_003_1 = AmBz*r_301_002_1 + r_302_002_1;
            double r_103_003_1 = AmBz*r_103_002_1 + r_104_002_1;
            double r_031_003_1 = AmBz*r_031_002_1 + r_032_002_1;
            double r_013_003_1 = AmBz*r_013_002_1 + r_014_002_1;
            double r_220_003_1 = AmBz*r_220_002_1 + r_221_002_1;
            double r_202_003_1 = AmBz*r_202_002_1 + r_203_002_1;
            double r_022_003_1 = AmBz*r_022_002_1 + r_023_002_1;
            double r_112_003_1 = AmBz*r_112_002_1 + r_113_002_1;
            double r_121_003_1 = AmBz*r_121_002_1 + r_122_002_1;
            double r_211_003_1 = AmBz*r_211_002_1 + r_212_002_1;
            double b_120 = AmBx*b_020 + r_100_020;
            double r_100_120 = AmBx*r_100_020 + r_200_020;
            double r_001_120 = AmBx*r_001_020 + r_101_020;
            double r_101_120 = AmBx*r_101_020 + r_201_020;
            double b_102 = AmBx*b_002 + r_100_002;
            double r_100_102 = AmBx*r_100_002 + r_200_002;
            double r_010_102 = AmBx*r_010_002 + r_110_002;
            double r_110_102 = AmBx*r_110_002 + r_210_002;
            double b_012 = AmBy*b_002 + r_010_002;
            double r_100_012 = AmBy*r_100_002 + r_110_002;
            double r_010_012 = AmBy*r_010_002 + r_020_002;
            double r_110_012 = AmBy*r_110_002 + r_120_002;
            double b_400 = AmBx*b_300 + r_100_300;
            double r_100_400 = AmBx*r_100_300 + r_200_300;
            double r_010_400 = AmBx*r_010_300 + r_110_300;
            double r_001_400 = AmBx*r_001_300 + r_101_300;
            double b_400_1 = AmBx*b_300_1 + r_100_300_1;
            double r_100_400_1 = AmBx*r_100_300_1 + r_200_300_1;
            double r_010_400_1 = AmBx*r_010_300_1 + r_110_300_1;
            double r_001_400_1 = AmBx*r_001_300_1 + r_101_300_1;
            double r_200_400_1 = AmBx*r_200_300_1 + r_300_300_1;
            double r_020_400_1 = AmBx*r_020_300_1 + r_120_300_1;
            double r_002_400_1 = AmBx*r_002_300_1 + r_102_300_1;
            double r_110_400_1 = AmBx*r_110_300_1 + r_210_300_1;
            double r_101_400_1 = AmBx*r_101_300_1 + r_201_300_1;
            double r_011_400_1 = AmBx*r_011_300_1 + r_111_300_1;
            double r_300_400_1 = AmBx*r_300_300_1 + r_400_300_1;
            double r_030_400_1 = AmBx*r_030_300_1 + r_130_300_1;
            double r_003_400_1 = AmBx*r_003_300_1 + r_103_300_1;
            double r_120_400_1 = AmBx*r_120_300_1 + r_220_300_1;
            double r_102_400_1 = AmBx*r_102_300_1 + r_202_300_1;
            double r_210_400_1 = AmBx*r_210_300_1 + r_310_300_1;
            double r_012_400_1 = AmBx*r_012_300_1 + r_112_300_1;
            double r_201_400_1 = AmBx*r_201_300_1 + r_301_300_1;
            double r_021_400_1 = AmBx*r_021_300_1 + r_121_300_1;
            double r_111_400_1 = AmBx*r_111_300_1 + r_211_300_1;
            double b_040 = AmBy*b_030 + r_010_030;
            double r_100_040 = AmBy*r_100_030 + r_110_030;
            double r_010_040 = AmBy*r_010_030 + r_020_030;
            double r_001_040 = AmBy*r_001_030 + r_011_030;
            double b_040_1 = AmBy*b_030_1 + r_010_030_1;
            double r_100_040_1 = AmBy*r_100_030_1 + r_110_030_1;
            double r_010_040_1 = AmBy*r_010_030_1 + r_020_030_1;
            double r_001_040_1 = AmBy*r_001_030_1 + r_011_030_1;
            double r_200_040_1 = AmBy*r_200_030_1 + r_210_030_1;
            double r_020_040_1 = AmBy*r_020_030_1 + r_030_030_1;
            double r_002_040_1 = AmBy*r_002_030_1 + r_012_030_1;
            double r_110_040_1 = AmBy*r_110_030_1 + r_120_030_1;
            double r_101_040_1 = AmBy*r_101_030_1 + r_111_030_1;
            double r_011_040_1 = AmBy*r_011_030_1 + r_021_030_1;
            double r_300_040_1 = AmBy*r_300_030_1 + r_310_030_1;
            double r_030_040_1 = AmBy*r_030_030_1 + r_040_030_1;
            double r_003_040_1 = AmBy*r_003_030_1 + r_013_030_1;
            double r_120_040_1 = AmBy*r_120_030_1 + r_130_030_1;
            double r_102_040_1 = AmBy*r_102_030_1 + r_112_030_1;
            double r_210_040_1 = AmBy*r_210_030_1 + r_220_030_1;
            double r_012_040_1 = AmBy*r_012_030_1 + r_022_030_1;
            double r_201_040_1 = AmBy*r_201_030_1 + r_211_030_1;
            double r_021_040_1 = AmBy*r_021_030_1 + r_031_030_1;
            double r_111_040_1 = AmBy*r_111_030_1 + r_121_030_1;
            double b_004 = AmBz*b_003 + r_001_003;
            double r_100_004 = AmBz*r_100_003 + r_101_003;
            double r_010_004 = AmBz*r_010_003 + r_011_003;
            double r_001_004 = AmBz*r_001_003 + r_002_003;
            double b_004_1 = AmBz*b_003_1 + r_001_003_1;
            double r_100_004_1 = AmBz*r_100_003_1 + r_101_003_1;
            double r_010_004_1 = AmBz*r_010_003_1 + r_011_003_1;
            double r_001_004_1 = AmBz*r_001_003_1 + r_002_003_1;
            double r_200_004_1 = AmBz*r_200_003_1 + r_201_003_1;
            double r_020_004_1 = AmBz*r_020_003_1 + r_021_003_1;
            double r_002_004_1 = AmBz*r_002_003_1 + r_003_003_1;
            double r_110_004_1 = AmBz*r_110_003_1 + r_111_003_1;
            double r_101_004_1 = AmBz*r_101_003_1 + r_102_003_1;
            double r_011_004_1 = AmBz*r_011_003_1 + r_012_003_1;
            double r_300_004_1 = AmBz*r_300_003_1 + r_301_003_1;
            double r_030_004_1 = AmBz*r_030_003_1 + r_031_003_1;
            double r_003_004_1 = AmBz*r_003_003_1 + r_004_003_1;
            double r_120_004_1 = AmBz*r_120_003_1 + r_121_003_1;
            double r_102_004_1 = AmBz*r_102_003_1 + r_103_003_1;
            double r_210_004_1 = AmBz*r_210_003_1 + r_211_003_1;
            double r_012_004_1 = AmBz*r_012_003_1 + r_013_003_1;
            double r_201_004_1 = AmBz*r_201_003_1 + r_202_003_1;
            double r_021_004_1 = AmBz*r_021_003_1 + r_022_003_1;
            double r_111_004_1 = AmBz*r_111_003_1 + r_112_003_1;
            double b_310 = AmBy*b_300 + r_010_300;
            double r_010_310 = AmBy*r_010_300 + r_020_300;
            double r_001_310 = AmBy*r_001_300 + r_011_300;
            double b_310_1 = AmBy*b_300_1 + r_010_300_1;
            double r_010_310_1 = AmBy*r_010_300_1 + r_020_300_1;
            double r_001_310_1 = AmBy*r_001_300_1 + r_011_300_1;
            double r_020_310_1 = AmBy*r_020_300_1 + r_030_300_1;
            double r_011_310_1 = AmBy*r_011_300_1 + r_021_300_1;
            double r_021_310_1 = AmBy*r_021_300_1 + r_031_300_1;
            double b_130 = AmBx*b_030 + r_100_030;
            double r_100_130 = AmBx*r_100_030 + r_200_030;
            double r_001_130 = AmBx*r_001_030 + r_101_030;
            double b_301 = AmBz*b_300 + r_001_300;
            double r_001_301 = AmBz*r_001_300 + r_002_300;
            double b_301_1 = AmBz*b_300_1 + r_001_300_1;
            double r_010_301_1 = AmBz*r_010_300_1 + r_011_300_1;
            double r_001_301_1 = AmBz*r_001_300_1 + r_002_300_1;
            double r_020_301_1 = AmBz*r_020_300_1 + r_021_300_1;
            double r_002_301_1 = AmBz*r_002_300_1 + r_003_300_1;
            double r_011_301_1 = AmBz*r_011_300_1 + r_012_300_1;
            double r_012_301_1 = AmBz*r_012_300_1 + r_013_300_1;
            double r_021_301_1 = AmBz*r_021_300_1 + r_022_300_1;
            double b_103 = AmBx*b_003 + r_100_003;
            double r_100_103 = AmBx*r_100_003 + r_200_003;
            double r_010_103 = AmBx*r_010_003 + r_110_003;
            double b_031 = AmBz*b_030 + r_001_030;
            double r_001_031 = AmBz*r_001_030 + r_002_030;
            double b_031_1 = AmBz*b_030_1 + r_001_030_1;
            double r_100_031_1 = AmBz*r_100_030_1 + r_101_030_1;
            double r_001_031_1 = AmBz*r_001_030_1 + r_002_030_1;
            double r_200_031_1 = AmBz*r_200_030_1 + r_201_030_1;
            double r_002_031_1 = AmBz*r_002_030_1 + r_003_030_1;
            double r_101_031_1 = AmBz*r_101_030_1 + r_102_030_1;
            double r_102_031_1 = AmBz*r_102_030_1 + r_103_030_1;
            double r_201_031_1 = AmBz*r_201_030_1 + r_202_030_1;
            double b_013 = AmBy*b_003 + r_010_003;
            double r_010_013 = AmBy*r_010_003 + r_020_003;
            double b_013_1 = AmBy*b_003_1 + r_010_003_1;
            double r_100_013_1 = AmBy*r_100_003_1 + r_110_003_1;
            double r_010_013_1 = AmBy*r_010_003_1 + r_020_003_1;
            double r_200_013_1 = AmBy*r_200_003_1 + r_210_003_1;
            double r_110_013_1 = AmBy*r_110_003_1 + r_120_003_1;
            double r_210_013_1 = AmBy*r_210_003_1 + r_220_003_1;
            double b_220 = AmBx*b_120 + r_100_120;
            double r_001_220 = AmBx*r_001_120 + r_101_120;
            double b_202 = AmBx*b_102 + r_100_102;
            double r_010_202 = AmBx*r_010_102 + r_110_102;
            double b_022 = AmBy*b_012 + r_010_012;
            double r_100_022 = AmBy*r_100_012 + r_110_012;
            double b_500 = AmBx*b_400 + r_100_400;
            double b_500_1 = AmBx*b_400_1 + r_100_400_1;
            double r_100_500_1 = AmBx*r_100_400_1 + r_200_400_1;
            double r_010_500_1 = AmBx*r_010_400_1 + r_110_400_1;
            double r_001_500_1 = AmBx*r_001_400_1 + r_101_400_1;
            double r_200_500_1 = AmBx*r_200_400_1 + r_300_400_1;
            double r_020_500_1 = AmBx*r_020_400_1 + r_120_400_1;
            double r_002_500_1 = AmBx*r_002_400_1 + r_102_400_1;
            double r_110_500_1 = AmBx*r_110_400_1 + r_210_400_1;
            double r_101_500_1 = AmBx*r_101_400_1 + r_201_400_1;
            double r_011_500_1 = AmBx*r_011_400_1 + r_111_400_1;
            double b_050 = AmBy*b_040 + r_010_040;
            double b_050_1 = AmBy*b_040_1 + r_010_040_1;
            double r_100_050_1 = AmBy*r_100_040_1 + r_110_040_1;
            double r_010_050_1 = AmBy*r_010_040_1 + r_020_040_1;
            double r_001_050_1 = AmBy*r_001_040_1 + r_011_040_1;
            double r_200_050_1 = AmBy*r_200_040_1 + r_210_040_1;
            double r_020_050_1 = AmBy*r_020_040_1 + r_030_040_1;
            double r_002_050_1 = AmBy*r_002_040_1 + r_012_040_1;
            double r_110_050_1 = AmBy*r_110_040_1 + r_120_040_1;
            double r_101_050_1 = AmBy*r_101_040_1 + r_111_040_1;
            double r_011_050_1 = AmBy*r_011_040_1 + r_021_040_1;
            double b_005 = AmBz*b_004 + r_001_004;
            double b_005_1 = AmBz*b_004_1 + r_001_004_1;
            double r_100_005_1 = AmBz*r_100_004_1 + r_101_004_1;
            double r_010_005_1 = AmBz*r_010_004_1 + r_011_004_1;
            double r_001_005_1 = AmBz*r_001_004_1 + r_002_004_1;
            double r_200_005_1 = AmBz*r_200_004_1 + r_201_004_1;
            double r_020_005_1 = AmBz*r_020_004_1 + r_021_004_1;
            double r_002_005_1 = AmBz*r_002_004_1 + r_003_004_1;
            double r_110_005_1 = AmBz*r_110_004_1 + r_111_004_1;
            double r_101_005_1 = AmBz*r_101_004_1 + r_102_004_1;
            double r_011_005_1 = AmBz*r_011_004_1 + r_012_004_1;
            double b_140 = AmBx*b_040 + r_100_040;
            double b_140_1 = AmBx*b_040_1 + r_100_040_1;
            double r_100_140_1 = AmBx*r_100_040_1 + r_200_040_1;
            double r_001_140_1 = AmBx*r_001_040_1 + r_101_040_1;
            double r_200_140_1 = AmBx*r_200_040_1 + r_300_040_1;
            double r_101_140_1 = AmBx*r_101_040_1 + r_201_040_1;
            double b_104 = AmBx*b_004 + r_100_004;
            double b_104_1 = AmBx*b_004_1 + r_100_004_1;
            double r_100_104_1 = AmBx*r_100_004_1 + r_200_004_1;
            double r_010_104_1 = AmBx*r_010_004_1 + r_110_004_1;
            double r_200_104_1 = AmBx*r_200_004_1 + r_300_004_1;
            double r_110_104_1 = AmBx*r_110_004_1 + r_210_004_1;
            double b_410 = AmBy*b_400 + r_010_400;
            double b_410_1 = AmBy*b_400_1 + r_010_400_1;
            double r_010_410_1 = AmBy*r_010_400_1 + r_020_400_1;
            double r_001_410_1 = AmBy*r_001_400_1 + r_011_400_1;
            double r_020_410_1 = AmBy*r_020_400_1 + r_030_400_1;
            double r_011_410_1 = AmBy*r_011_400_1 + r_021_400_1;
            double b_014 = AmBy*b_004 + r_010_004;
            double b_014_1 = AmBy*b_004_1 + r_010_004_1;
            double r_100_014_1 = AmBy*r_100_004_1 + r_110_004_1;
            double r_010_014_1 = AmBy*r_010_004_1 + r_020_004_1;
            double r_020_014_1 = AmBy*r_020_004_1 + r_030_004_1;
            double r_110_014_1 = AmBy*r_110_004_1 + r_120_004_1;
            double b_401 = AmBz*b_400 + r_001_400;
            double b_401_1 = AmBz*b_400_1 + r_001_400_1;
            double r_010_401_1 = AmBz*r_010_400_1 + r_011_400_1;
            double r_001_401_1 = AmBz*r_001_400_1 + r_002_400_1;
            double r_002_401_1 = AmBz*r_002_400_1 + r_003_400_1;
            double r_011_401_1 = AmBz*r_011_400_1 + r_012_400_1;
            double b_041 = AmBz*b_040 + r_001_040;
            double b_041_1 = AmBz*b_040_1 + r_001_040_1;
            double r_100_041_1 = AmBz*r_100_040_1 + r_101_040_1;
            double r_001_041_1 = AmBz*r_001_040_1 + r_002_040_1;
            double r_002_041_1 = AmBz*r_002_040_1 + r_003_040_1;
            double r_101_041_1 = AmBz*r_101_040_1 + r_102_040_1;
            double b_320 = AmBy*b_310 + r_010_310;
            double b_320_1 = AmBy*b_310_1 + r_010_310_1;
            double r_010_320_1 = AmBy*r_010_310_1 + r_020_310_1;
            double r_001_320_1 = AmBy*r_001_310_1 + r_011_310_1;
            double r_011_320_1 = AmBy*r_011_310_1 + r_021_310_1;
            double b_302 = AmBz*b_301 + r_001_301;
            double b_302_1 = AmBz*b_301_1 + r_001_301_1;
            double r_010_302_1 = AmBz*r_010_301_1 + r_011_301_1;
            double r_001_302_1 = AmBz*r_001_301_1 + r_002_301_1;
            double r_020_302_1 = AmBz*r_020_301_1 + r_021_301_1;
            double r_011_302_1 = AmBz*r_011_301_1 + r_012_301_1;
            double b_230 = AmBx*b_130 + r_100_130;
            double b_032 = AmBz*b_031 + r_001_031;
            double b_032_1 = AmBz*b_031_1 + r_001_031_1;
            double r_100_032_1 = AmBz*r_100_031_1 + r_101_031_1;
            double r_001_032_1 = AmBz*r_001_031_1 + r_002_031_1;
            double r_200_032_1 = AmBz*r_200_031_1 + r_201_031_1;
            double r_101_032_1 = AmBz*r_101_031_1 + r_102_031_1;
            double b_203 = AmBx*b_103 + r_100_103;
            double b_023 = AmBy*b_013 + r_010_013;
            double b_023_1 = AmBy*b_013_1 + r_010_013_1;
            double r_100_023_1 = AmBy*r_100_013_1 + r_110_013_1;
            double r_200_023_1 = AmBy*r_200_013_1 + r_210_013_1;
            double b_311 = AmBz*b_310 + r_001_310;
            double b_131 = AmBz*b_130 + r_001_130;
            double b_113 = AmBy*b_103 + r_010_103;
            double b_122 = AmBx*b_022 + r_100_022;
            double b_212 = AmBy*b_202 + r_010_202;
            double b_221 = AmBz*b_220 + r_001_220;
            double b_600_1 = AmBx*b_500_1 + r_100_500_1;
            double r_100_600_1 = AmBx*r_100_500_1 + r_200_500_1;
            double r_010_600_1 = AmBx*r_010_500_1 + r_110_500_1;
            double r_001_600_1 = AmBx*r_001_500_1 + r_101_500_1;
            double b_060_1 = AmBy*b_050_1 + r_010_050_1;
            double r_100_060_1 = AmBy*r_100_050_1 + r_110_050_1;
            double r_010_060_1 = AmBy*r_010_050_1 + r_020_050_1;
            double r_001_060_1 = AmBy*r_001_050_1 + r_011_050_1;
            double b_006_1 = AmBz*b_005_1 + r_001_005_1;
            double r_100_006_1 = AmBz*r_100_005_1 + r_101_005_1;
            double r_010_006_1 = AmBz*r_010_005_1 + r_011_005_1;
            double r_001_006_1 = AmBz*r_001_005_1 + r_002_005_1;
            double b_510_1 = AmBy*b_500_1 + r_010_500_1;
            double r_010_510_1 = AmBy*r_010_500_1 + r_020_500_1;
            double r_001_510_1 = AmBy*r_001_500_1 + r_011_500_1;
            double b_150_1 = AmBx*b_050_1 + r_100_050_1;
            double r_100_150_1 = AmBx*r_100_050_1 + r_200_050_1;
            double r_001_150_1 = AmBx*r_001_050_1 + r_101_050_1;
            double b_501_1 = AmBz*b_500_1 + r_001_500_1;
            double r_001_501_1 = AmBz*r_001_500_1 + r_002_500_1;
            double b_105_1 = AmBx*b_005_1 + r_100_005_1;
            double r_100_105_1 = AmBx*r_100_005_1 + r_200_005_1;
            double r_010_105_1 = AmBx*r_010_005_1 + r_110_005_1;
            double b_051_1 = AmBz*b_050_1 + r_001_050_1;
            double r_001_051_1 = AmBz*r_001_050_1 + r_002_050_1;
            double b_015_1 = AmBy*b_005_1 + r_010_005_1;
            double r_010_015_1 = AmBy*r_010_005_1 + r_020_005_1;
            double b_420_1 = AmBy*b_410_1 + r_010_410_1;
            double r_010_420_1 = AmBy*r_010_410_1 + r_020_410_1;
            double r_001_420_1 = AmBy*r_001_410_1 + r_011_410_1;
            double b_402_1 = AmBz*b_401_1 + r_001_401_1;
            double r_010_402_1 = AmBz*r_010_401_1 + r_011_401_1;
            double r_001_402_1 = AmBz*r_001_401_1 + r_002_401_1;
            double b_240_1 = AmBx*b_140_1 + r_100_140_1;
            double r_100_240_1 = AmBx*r_100_140_1 + r_200_140_1;
            double r_001_240_1 = AmBx*r_001_140_1 + r_101_140_1;
            double b_204_1 = AmBx*b_104_1 + r_100_104_1;
            double r_100_204_1 = AmBx*r_100_104_1 + r_200_104_1;
            double r_010_204_1 = AmBx*r_010_104_1 + r_110_104_1;
            double b_042_1 = AmBz*b_041_1 + r_001_041_1;
            double r_100_042_1 = AmBz*r_100_041_1 + r_101_041_1;
            double r_001_042_1 = AmBz*r_001_041_1 + r_002_041_1;
            double b_024_1 = AmBy*b_014_1 + r_010_014_1;
            double r_100_024_1 = AmBy*r_100_014_1 + r_110_014_1;
            double r_010_024_1 = AmBy*r_010_014_1 + r_020_014_1;
            double b_330_1 = AmBy*b_320_1 + r_010_320_1;
            double r_001_330_1 = AmBy*r_001_320_1 + r_011_320_1;
            double b_303_1 = AmBz*b_302_1 + r_001_302_1;
            double r_010_303_1 = AmBz*r_010_302_1 + r_011_302_1;
            double b_033_1 = AmBz*b_032_1 + r_001_032_1;
            double r_100_033_1 = AmBz*r_100_032_1 + r_101_032_1;
            double b_312_1 = AmBy*b_302_1 + r_010_302_1;
            double r_010_312_1 = AmBy*r_010_302_1 + r_020_302_1;
            double b_132_1 = AmBx*b_032_1 + r_100_032_1;
            double r_100_132_1 = AmBx*r_100_032_1 + r_200_032_1;
            double b_123_1 = AmBx*b_023_1 + r_100_023_1;
            double r_100_123_1 = AmBx*r_100_023_1 + r_200_023_1;
            double b_700_1 = AmBx*b_600_1 + r_100_600_1;
            double b_070_1 = AmBy*b_060_1 + r_010_060_1;
            double b_007_1 = AmBz*b_006_1 + r_001_006_1;
            double b_160_1 = AmBx*b_060_1 + r_100_060_1;
            double b_106_1 = AmBx*b_006_1 + r_100_006_1;
            double b_610_1 = AmBy*b_600_1 + r_010_600_1;
            double b_016_1 = AmBy*b_006_1 + r_010_006_1;
            double b_601_1 = AmBz*b_600_1 + r_001_600_1;
            double b_061_1 = AmBz*b_060_1 + r_001_060_1;
            double b_520_1 = AmBy*b_510_1 + r_010_510_1;
            double b_502_1 = AmBz*b_501_1 + r_001_501_1;
            double b_250_1 = AmBx*b_150_1 + r_100_150_1;
            double b_052_1 = AmBz*b_051_1 + r_001_051_1;
            double b_205_1 = AmBx*b_105_1 + r_100_105_1;
            double b_025_1 = AmBy*b_015_1 + r_010_015_1;
            double b_340_1 = AmBx*b_240_1 + r_100_240_1;
            double b_304_1 = AmBx*b_204_1 + r_100_204_1;
            double b_430_1 = AmBy*b_420_1 + r_010_420_1;
            double b_034_1 = AmBy*b_024_1 + r_010_024_1;
            double b_403_1 = AmBz*b_402_1 + r_001_402_1;
            double b_043_1 = AmBz*b_042_1 + r_001_042_1;
            double b_511_1 = AmBz*b_510_1 + r_001_510_1;
            double b_151_1 = AmBz*b_150_1 + r_001_150_1;
            double b_115_1 = AmBy*b_105_1 + r_010_105_1;
            double b_142_1 = AmBx*b_042_1 + r_100_042_1;
            double b_124_1 = AmBx*b_024_1 + r_100_024_1;
            double b_412_1 = AmBy*b_402_1 + r_010_402_1;
            double b_214_1 = AmBy*b_204_1 + r_010_204_1;
            double b_421_1 = AmBz*b_420_1 + r_001_420_1;
            double b_241_1 = AmBz*b_240_1 + r_001_240_1;
            double b_331_1 = AmBz*b_330_1 + r_001_330_1;
            double b_313_1 = AmBy*b_303_1 + r_010_303_1;
            double b_133_1 = AmBx*b_033_1 + r_100_033_1;
            double b_322_1 = AmBy*b_312_1 + r_010_312_1;
            double b_232_1 = AmBx*b_132_1 + r_100_132_1;
            double b_223_1 = AmBx*b_123_1 + r_100_123_1;
            double bx_600 = -6*b_500 + b_700_1;
            double bx_060 = b_160_1;
            double bx_006 = b_106_1;
            double bx_510 = -5*b_410 + b_610_1;
            double bx_150 = -b_050 + b_250_1;
            double bx_501 = -5*b_401 + b_601_1;
            double bx_105 = -b_005 + b_205_1;
            double bx_051 = b_151_1;
            double bx_015 = b_115_1;
            double bx_420 = -4*b_320 + b_520_1;
            double bx_402 = -4*b_302 + b_502_1;
            double bx_240 = -2*b_140 + b_340_1;
            double bx_204 = -2*b_104 + b_304_1;
            double bx_042 = b_142_1;
            double bx_024 = b_124_1;
            double bx_330 = -3*b_230 + b_430_1;
            double bx_303 = -3*b_203 + b_403_1;
            double bx_033 = b_133_1;
            double bx_114 = -b_014 + b_214_1;
            double bx_141 = -b_041 + b_241_1;
            double bx_411 = -4*b_311 + b_511_1;
            double bx_312 = -3*b_212 + b_412_1;
            double bx_132 = -b_032 + b_232_1;
            double bx_321 = -3*b_221 + b_421_1;
            double bx_123 = -b_023 + b_223_1;
            double bx_231 = -2*b_131 + b_331_1;
            double bx_213 = -2*b_113 + b_313_1;
            double bx_222 = -2*b_122 + b_322_1;
            double by_600 = b_610_1;
            double by_060 = -6*b_050 + b_070_1;
            double by_006 = b_016_1;
            double by_510 = -b_500 + b_520_1;
            double by_150 = -5*b_140 + b_160_1;
            double by_501 = b_511_1;
            double by_105 = b_115_1;
            double by_051 = -5*b_041 + b_061_1;
            double by_015 = -b_005 + b_025_1;
            double by_420 = -2*b_410 + b_430_1;
            double by_402 = b_412_1;
            double by_240 = -4*b_230 + b_250_1;
            double by_204 = b_214_1;
            double by_042 = -4*b_032 + b_052_1;
            double by_024 = -2*b_014 + b_034_1;
            double by_330 = -3*b_320 + b_340_1;
            double by_303 = b_313_1;
            double by_033 = -3*b_023 + b_043_1;
            double by_114 = -b_104 + b_124_1;
            double by_141 = -4*b_131 + b_151_1;
            double by_411 = -b_401 + b_421_1;
            double by_312 = -b_302 + b_322_1;
            double by_132 = -3*b_122 + b_142_1;
            double by_321 = -2*b_311 + b_331_1;
            double by_123 = -2*b_113 + b_133_1;
            double by_231 = -3*b_221 + b_241_1;
            double by_213 = -b_203 + b_223_1;
            double by_222 = -2*b_212 + b_232_1;
            double bz_600 = b_601_1;
            double bz_060 = b_061_1;
            double bz_006 = -6*b_005 + b_007_1;
            double bz_510 = b_511_1;
            double bz_150 = b_151_1;
            double bz_501 = -b_500 + b_502_1;
            double bz_105 = -5*b_104 + b_106_1;
            double bz_051 = -b_050 + b_052_1;
            double bz_015 = -5*b_014 + b_016_1;
            double bz_420 = b_421_1;
            double bz_402 = -2*b_401 + b_403_1;
            double bz_240 = b_241_1;
            double bz_204 = -4*b_203 + b_205_1;
            double bz_042 = -2*b_041 + b_043_1;
            double bz_024 = -4*b_023 + b_025_1;
            double bz_330 = b_331_1;
            double bz_303 = -3*b_302 + b_304_1;
            double bz_033 = -3*b_032 + b_034_1;
            double bz_114 = -4*b_113 + b_115_1;
            double bz_141 = -b_140 + b_142_1;
            double bz_411 = -b_410 + b_412_1;
            double bz_312 = -2*b_311 + b_313_1;
            double bz_132 = -2*b_131 + b_133_1;
            double bz_321 = -b_320 + b_322_1;
            double bz_123 = -3*b_122 + b_124_1;
            double bz_231 = -b_230 + b_232_1;
            double bz_213 = -3*b_212 + b_214_1;
            double bz_222 = -2*b_221 + b_223_1;
            // 11.39 steps per component, 7.48 kb stack
            pOut_[sb*0 + sd*0] = -bx_060*sd2b + bx_240*sd2c - bx_420*sd2c + bx_600*sd2b;
            pOut_[sb*0 + sd*1] = -by_060*sd2b + by_240*sd2c - by_420*sd2c + by_600*sd2b;
            pOut_[sb*0 + sd*2] = -bz_060*sd2b + bz_240*sd2c - bz_420*sd2c + bz_600*sd2b;
            pOut_[sb*1 + sd*0] = bx_114*sd2f - bx_132*sd2f + bx_150*sd2d - bx_312*sd2f + bx_330*sd2e + bx_510*sd2d;
            pOut_[sb*1 + sd*1] = by_114*sd2f - by_132*sd2f + by_150*sd2d - by_312*sd2f + by_330*sd2e + by_510*sd2d;
            pOut_[sb*1 + sd*2] = bz_114*sd2f - bz_132*sd2f + bz_150*sd2d - bz_312*sd2f + bz_330*sd2e + bz_510*sd2d;
            pOut_[sb*10 + sd*0] = -bx_033*sd38 + bx_051*sd3b + bx_213*sd3e - bx_231*sd3c - bx_411*sd3d;
            pOut_[sb*10 + sd*1] = -by_033*sd38 + by_051*sd3b + by_213*sd3e - by_231*sd3c - by_411*sd3d;
            pOut_[sb*10 + sd*2] = -bz_033*sd38 + bz_051*sd3b + bz_213*sd3e - bz_231*sd3c - bz_411*sd3d;
            pOut_[sb*11 + sd*0] = bx_015*sd49 - bx_033*sd48 + bx_051*sd46 - bx_213*sd48 + bx_231*sd47 + bx_411*sd46;
            pOut_[sb*11 + sd*1] = by_015*sd49 - by_033*sd48 + by_051*sd46 - by_213*sd48 + by_231*sd47 + by_411*sd46;
            pOut_[sb*11 + sd*2] = bz_015*sd49 - bz_033*sd48 + bz_051*sd46 - bz_213*sd48 + bz_231*sd47 + bz_411*sd46;
            pOut_[sb*12 + sd*0] = bx_105*sd49 - bx_123*sd48 + bx_141*sd46 - bx_303*sd48 + bx_321*sd47 + bx_501*sd46;
            pOut_[sb*12 + sd*1] = by_105*sd49 - by_123*sd48 + by_141*sd46 - by_303*sd48 + by_321*sd47 + by_501*sd46;
            pOut_[sb*12 + sd*2] = bz_105*sd49 - bz_123*sd48 + bz_141*sd46 - bz_303*sd48 + bz_321*sd47 + bz_501*sd46;
            pOut_[sb*2 + sd*0] = bx_141*sd32 - bx_321*sd31 + bx_501*sd30;
            pOut_[sb*2 + sd*1] = by_141*sd32 - by_321*sd31 + by_501*sd30;
            pOut_[sb*2 + sd*2] = bz_141*sd32 - bz_321*sd31 + bz_501*sd30;
            pOut_[sb*3 + sd*0] = bx_042*sd35 - bx_060*sd33 - bx_222*sd36 + bx_240*sd34 + bx_402*sd35 + bx_420*sd34 - bx_600*sd33;
            pOut_[sb*3 + sd*1] = by_042*sd35 - by_060*sd33 - by_222*sd36 + by_240*sd34 + by_402*sd35 + by_420*sd34 - by_600*sd33;
            pOut_[sb*3 + sd*2] = bz_042*sd35 - bz_060*sd33 - bz_222*sd36 + bz_240*sd34 + bz_402*sd35 + bz_420*sd34 - bz_600*sd33;
            pOut_[sb*4 + sd*0] = bx_051*sd30 - bx_231*sd31 + bx_411*sd32;
            pOut_[sb*4 + sd*1] = by_051*sd30 - by_231*sd31 + by_411*sd32;
            pOut_[sb*4 + sd*2] = bz_051*sd30 - bz_231*sd31 + bz_411*sd32;
            pOut_[sb*5 + sd*0] = -bx_024*sd38 + bx_042*sd38 - bx_060*sd37 + bx_204*sd38 - bx_240*sd37 - bx_402*sd38 + bx_420*sd37 + bx_600*sd37;
            pOut_[sb*5 + sd*1] = -by_024*sd38 + by_042*sd38 - by_060*sd37 + by_204*sd38 - by_240*sd37 - by_402*sd38 + by_420*sd37 + by_600*sd37;
            pOut_[sb*5 + sd*2] = -bz_024*sd38 + bz_042*sd38 - bz_060*sd37 + bz_204*sd38 - bz_240*sd37 - bz_402*sd38 + bz_420*sd37 + bz_600*sd37;
            pOut_[sb*6 + sd*0] = bx_150*sd39 - bx_330*sd3a + bx_510*sd39;
            pOut_[sb*6 + sd*1] = by_150*sd39 - by_330*sd3a + by_510*sd39;
            pOut_[sb*6 + sd*2] = bz_150*sd39 - bz_330*sd3a + bz_510*sd39;
            pOut_[sb*7 + sd*0] = -bx_123*sd3e + bx_141*sd3d + bx_303*sd38 + bx_321*sd3c - bx_501*sd3b;
            pOut_[sb*7 + sd*1] = -by_123*sd3e + by_141*sd3d + by_303*sd38 + by_321*sd3c - by_501*sd3b;
            pOut_[sb*7 + sd*2] = -bz_123*sd3e + bz_141*sd3d + bz_303*sd38 + bz_321*sd3c - bz_501*sd3b;
            pOut_[sb*8 + sd*0] = -bx_132*sd40 + bx_150*sd3f + bx_312*sd40 - bx_510*sd3f;
            pOut_[sb*8 + sd*1] = -by_132*sd40 + by_150*sd3f + by_312*sd40 - by_510*sd3f;
            pOut_[sb*8 + sd*2] = -bz_132*sd40 + bz_150*sd3f + bz_312*sd40 - bz_510*sd3f;
            pOut_[sb*9 + sd*0] = bx_006 - bx_024*sd45 + bx_042*sd43 - bx_060*sd41 - bx_204*sd45 + bx_222*sd44 - bx_240*sd42 + bx_402*sd43 - bx_420*sd42 - bx_600*sd41;
            pOut_[sb*9 + sd*1] = by_006 - by_024*sd45 + by_042*sd43 - by_060*sd41 - by_204*sd45 + by_222*sd44 - by_240*sd42 + by_402*sd43 - by_420*sd42 - by_600*sd41;
            pOut_[sb*9 + sd*2] = bz_006 - bz_024*sd45 + bz_042*sd43 - bz_060*sd41 - bz_204*sd45 + bz_222*sd44 - bz_240*sd42 + bz_402*sd43 - bz_420*sd42 - bz_600*sd41;
         }
         return;
      }
   }
   //assert(0);
}

// transform cartesians centered at A and multiplied by (2 ZetaB)^n, to 2nd derivative integrals with respect to B at center B.
// input p0Z: nCartX(lb-2) x nCount matrix of unscaled (a0| sets.
// input p2Z: nCartX(lb+0) x nCount matrix of (2 ZetaB)^1-scaled (a0| sets.
// input p4Z: nCartX(lb+2) x nCount matrix of (2 ZetaB)^2-scaled (a0| sets.
// output is (2lb+1) x 6 x nCount, with strides sb (for Slm(x-B)), sd (for derivatives xx yy zz xy xz yz), and sa (for nCount).
void OsrrC_dB2(double * pOut, size_t sa, size_t sb, size_t sd, double const * p0Z, double const * p2Z, double const * p4Z, double AmBx, double AmBy, double AmBz, unsigned lb, size_t nCount)
{
   switch(lb) {
      case 0: {
         for (size_t ia = 0; ia < nCount; ++ ia) {
            double const * pAx1 = p2Z + 1 * ia;
            double const * pAx2 = p4Z + 10 * ia;
            double * pOut_ = pOut + sa * ia;
            double b_100_2 = AmBx*pAx2[0] + pAx2[1];
            double r_100_100_2 = AmBx*pAx2[1] + pAx2[4];
            double r_010_100_2 = AmBx*pAx2[2] + pAx2[7];
            double r_001_100_2 = AmBx*pAx2[3] + pAx2[8];
            double b_010_2 = AmBy*pAx2[0] + pAx2[2];
            double r_010_010_2 = AmBy*pAx2[2] + pAx2[5];
            double r_001_010_2 = AmBy*pAx2[3] + pAx2[9];
            double b_001_2 = AmBz*pAx2[0] + pAx2[3];
            double r_001_001_2 = AmBz*pAx2[3] + pAx2[6];
            double b_200_2 = AmBx*b_100_2 + r_100_100_2;
            double b_020_2 = AmBy*b_010_2 + r_010_010_2;
            double b_002_2 = AmBz*b_001_2 + r_001_001_2;
            double b_110_2 = AmBy*b_100_2 + r_010_100_2;
            double b_101_2 = AmBz*b_100_2 + r_001_100_2;
            double b_011_2 = AmBz*b_010_2 + r_001_010_2;
            double bx_100_1 = b_200_2 - pAx1[0];
            double by_010_1 = b_020_2 - pAx1[0];
            double bz_001_1 = b_002_2 - pAx1[0];
            double bxx_000 = bx_100_1;
            double byy_000 = by_010_1;
            double bzz_000 = bz_001_1;
            double bxy_000 = b_110_2;
            double bxz_000 = b_101_2;
            double byz_000 = b_011_2;
            // 4.00 steps per component, 0.19 kb stack
            pOut_[sb*0 + sd*0] = bxx_000;
            pOut_[sb*0 + sd*1] = byy_000;
            pOut_[sb*0 + sd*2] = bzz_000;
            pOut_[sb*0 + sd*3] = bxy_000;
            pOut_[sb*0 + sd*4] = bxz_000;
            pOut_[sb*0 + sd*5] = byz_000;
         }
         return;
      }
      case 1: {
         for (size_t ia = 0; ia < nCount; ++ ia) {
            double const * pAx1 = p2Z + 4 * ia;
            double const * pAx2 = p4Z + 20 * ia;
            double * pOut_ = pOut + sa * ia;
            double b_100_1 = AmBx*pAx1[0] + pAx1[1];
            double b_100_2 = AmBx*pAx2[0] + pAx2[1];
            double r_100_100_2 = AmBx*pAx2[1] + pAx2[4];
            double r_010_100_2 = AmBx*pAx2[2] + pAx2[7];
            double r_001_100_2 = AmBx*pAx2[3] + pAx2[8];
            double r_200_100_2 = AmBx*pAx2[4] + pAx2[10];
            double r_110_100_2 = AmBx*pAx2[7] + pAx2[15];
            double r_101_100_2 = AmBx*pAx2[8] + pAx2[17];
            double r_011_100_2 = AmBx*pAx2[9] + pAx2[19];
            double b_010_1 = AmBy*pAx1[0] + pAx1[2];
            double b_010_2 = AmBy*pAx2[0] + pAx2[2];
            double r_100_010_2 = AmBy*pAx2[1] + pAx2[7];
            double r_010_010_2 = AmBy*pAx2[2] + pAx2[5];
            double r_001_010_2 = AmBy*pAx2[3] + pAx2[9];
            double r_020_010_2 = AmBy*pAx2[5] + pAx2[11];
            double r_110_010_2 = AmBy*pAx2[7] + pAx2[13];
            double r_011_010_2 = AmBy*pAx2[9] + pAx2[18];
            double b_001_1 = AmBz*pAx1[0] + pAx1[3];
            double b_001_2 = AmBz*pAx2[0] + pAx2[3];
            double r_100_001_2 = AmBz*pAx2[1] + pAx2[8];
            double r_010_001_2 = AmBz*pAx2[2] + pAx2[9];
            double r_001_001_2 = AmBz*pAx2[3] + pAx2[6];
            double r_002_001_2 = AmBz*pAx2[6] + pAx2[12];
            double r_101_001_2 = AmBz*pAx2[8] + pAx2[14];
            double r_011_001_2 = AmBz*pAx2[9] + pAx2[16];
            double b_200_2 = AmBx*b_100_2 + r_100_100_2;
            double r_100_200_2 = AmBx*r_100_100_2 + r_200_100_2;
            double r_010_200_2 = AmBx*r_010_100_2 + r_110_100_2;
            double r_001_200_2 = AmBx*r_001_100_2 + r_101_100_2;
            double b_020_2 = AmBy*b_010_2 + r_010_010_2;
            double r_100_020_2 = AmBy*r_100_010_2 + r_110_010_2;
            double r_010_020_2 = AmBy*r_010_010_2 + r_020_010_2;
            double r_001_020_2 = AmBy*r_001_010_2 + r_011_010_2;
            double b_002_2 = AmBz*b_001_2 + r_001_001_2;
            double r_100_002_2 = AmBz*r_100_001_2 + r_101_001_2;
            double r_010_002_2 = AmBz*r_010_001_2 + r_011_001_2;
            double r_001_002_2 = AmBz*r_001_001_2 + r_002_001_2;
            double b_110_2 = AmBy*b_100_2 + r_010_100_2;
            double r_001_110_2 = AmBy*r_001_100_2 + r_011_100_2;
            double b_300_2 = AmBx*b_200_2 + r_100_200_2;
            double b_030_2 = AmBy*b_020_2 + r_010_020_2;
            double b_003_2 = AmBz*b_002_2 + r_001_002_2;
            double b_120_2 = AmBx*b_020_2 + r_100_020_2;
            double b_102_2 = AmBx*b_002_2 + r_100_002_2;
            double b_210_2 = AmBy*b_200_2 + r_010_200_2;
            double b_012_2 = AmBy*b_002_2 + r_010_002_2;
            double b_201_2 = AmBz*b_200_2 + r_001_200_2;
            double b_021_2 = AmBz*b_020_2 + r_001_020_2;
            double b_111_2 = AmBz*b_110_2 + r_001_110_2;
            double bx_200_1 = -2*b_100_1 + b_300_2;
            double bx_110_1 = -b_010_1 + b_210_2;
            double bx_101_1 = -b_001_1 + b_201_2;
            double by_020_1 = -2*b_010_1 + b_030_2;
            double by_110_1 = -b_100_1 + b_120_2;
            double by_011_1 = -b_001_1 + b_021_2;
            double bz_002_1 = -2*b_001_1 + b_003_2;
            double bz_101_1 = -b_100_1 + b_102_2;
            double bz_011_1 = -b_010_1 + b_012_2;
            double bxx_100 = -b_100_1 + bx_200_1;
            double bxx_010 = bx_110_1;
            double bxx_001 = bx_101_1;
            double byy_100 = by_110_1;
            double byy_010 = -b_010_1 + by_020_1;
            double byy_001 = by_011_1;
            double bzz_100 = bz_101_1;
            double bzz_010 = bz_011_1;
            double bzz_001 = -b_001_1 + bz_002_1;
            double bxy_100 = bx_110_1;
            double bxy_010 = -b_100_1 + b_120_2;
            double bxy_001 = b_111_2;
            double bxz_100 = bx_101_1;
            double bxz_010 = b_111_2;
            double bxz_001 = -b_100_1 + b_102_2;
            double byz_100 = b_111_2;
            double byz_010 = by_011_1;
            double byz_001 = -b_010_1 + b_012_2;
            // 4.22 steps per component, 0.59 kb stack
            pOut_[sb*0 + sd*0] = bxx_100;
            pOut_[sb*0 + sd*1] = byy_100;
            pOut_[sb*0 + sd*2] = bzz_100;
            pOut_[sb*0 + sd*3] = bxy_100;
            pOut_[sb*0 + sd*4] = bxz_100;
            pOut_[sb*0 + sd*5] = byz_100;
            pOut_[sb*1 + sd*0] = bxx_010;
            pOut_[sb*1 + sd*1] = byy_010;
            pOut_[sb*1 + sd*2] = bzz_010;
            pOut_[sb*1 + sd*3] = bxy_010;
            pOut_[sb*1 + sd*4] = bxz_010;
            pOut_[sb*1 + sd*5] = byz_010;
            pOut_[sb*2 + sd*0] = bxx_001;
            pOut_[sb*2 + sd*1] = byy_001;
            pOut_[sb*2 + sd*2] = bzz_001;
            pOut_[sb*2 + sd*3] = bxy_001;
            pOut_[sb*2 + sd*4] = bxz_001;
            pOut_[sb*2 + sd*5] = byz_001;
         }
         return;
      }
      case 2: {
         for (size_t ia = 0; ia < nCount; ++ ia) {
            double const * pAx0 = p0Z + 1 * ia;
            double const * pAx1 = p2Z + 10 * ia;
            double const * pAx2 = p4Z + 35 * ia;
            double * pOut_ = pOut + sa * ia;
            double b_100_1 = AmBx*pAx1[0] + pAx1[1];
            double r_100_100_1 = AmBx*pAx1[1] + pAx1[4];
            double r_010_100_1 = AmBx*pAx1[2] + pAx1[7];
            double r_001_100_1 = AmBx*pAx1[3] + pAx1[8];
            double b_100_2 = AmBx*pAx2[0] + pAx2[1];
            double r_100_100_2 = AmBx*pAx2[1] + pAx2[4];
            double r_010_100_2 = AmBx*pAx2[2] + pAx2[7];
            double r_001_100_2 = AmBx*pAx2[3] + pAx2[8];
            double r_200_100_2 = AmBx*pAx2[4] + pAx2[10];
            double r_110_100_2 = AmBx*pAx2[7] + pAx2[15];
            double r_101_100_2 = AmBx*pAx2[8] + pAx2[17];
            double r_011_100_2 = AmBx*pAx2[9] + pAx2[19];
            double r_300_100_2 = AmBx*pAx2[10] + pAx2[20];
            double r_210_100_2 = AmBx*pAx2[15] + pAx2[23];
            double r_201_100_2 = AmBx*pAx2[17] + pAx2[25];
            double r_111_100_2 = AmBx*pAx2[19] + pAx2[34];
            double b_010_1 = AmBy*pAx1[0] + pAx1[2];
            double r_010_010_1 = AmBy*pAx1[2] + pAx1[5];
            double r_001_010_1 = AmBy*pAx1[3] + pAx1[9];
            double b_010_2 = AmBy*pAx2[0] + pAx2[2];
            double r_100_010_2 = AmBy*pAx2[1] + pAx2[7];
            double r_010_010_2 = AmBy*pAx2[2] + pAx2[5];
            double r_001_010_2 = AmBy*pAx2[3] + pAx2[9];
            double r_200_010_2 = AmBy*pAx2[4] + pAx2[15];
            double r_020_010_2 = AmBy*pAx2[5] + pAx2[11];
            double r_110_010_2 = AmBy*pAx2[7] + pAx2[13];
            double r_101_010_2 = AmBy*pAx2[8] + pAx2[19];
            double r_011_010_2 = AmBy*pAx2[9] + pAx2[18];
            double r_030_010_2 = AmBy*pAx2[11] + pAx2[21];
            double r_120_010_2 = AmBy*pAx2[13] + pAx2[24];
            double r_210_010_2 = AmBy*pAx2[15] + pAx2[29];
            double r_021_010_2 = AmBy*pAx2[18] + pAx2[27];
            double r_111_010_2 = AmBy*pAx2[19] + pAx2[33];
            double b_001_1 = AmBz*pAx1[0] + pAx1[3];
            double r_001_001_1 = AmBz*pAx1[3] + pAx1[6];
            double b_001_2 = AmBz*pAx2[0] + pAx2[3];
            double r_100_001_2 = AmBz*pAx2[1] + pAx2[8];
            double r_010_001_2 = AmBz*pAx2[2] + pAx2[9];
            double r_001_001_2 = AmBz*pAx2[3] + pAx2[6];
            double r_200_001_2 = AmBz*pAx2[4] + pAx2[17];
            double r_020_001_2 = AmBz*pAx2[5] + pAx2[18];
            double r_002_001_2 = AmBz*pAx2[6] + pAx2[12];
            double r_110_001_2 = AmBz*pAx2[7] + pAx2[19];
            double r_101_001_2 = AmBz*pAx2[8] + pAx2[14];
            double r_011_001_2 = AmBz*pAx2[9] + pAx2[16];
            double r_003_001_2 = AmBz*pAx2[12] + pAx2[22];
            double r_102_001_2 = AmBz*pAx2[14] + pAx2[26];
            double r_012_001_2 = AmBz*pAx2[16] + pAx2[28];
            double r_201_001_2 = AmBz*pAx2[17] + pAx2[30];
            double r_021_001_2 = AmBz*pAx2[18] + pAx2[31];
            double r_111_001_2 = AmBz*pAx2[19] + pAx2[32];
            double b_200_1 = AmBx*b_100_1 + r_100_100_1;
            double b_200_2 = AmBx*b_100_2 + r_100_100_2;
            double r_100_200_2 = AmBx*r_100_100_2 + r_200_100_2;
            double r_010_200_2 = AmBx*r_010_100_2 + r_110_100_2;
            double r_001_200_2 = AmBx*r_001_100_2 + r_101_100_2;
            double r_200_200_2 = AmBx*r_200_100_2 + r_300_100_2;
            double r_110_200_2 = AmBx*r_110_100_2 + r_210_100_2;
            double r_101_200_2 = AmBx*r_101_100_2 + r_201_100_2;
            double r_011_200_2 = AmBx*r_011_100_2 + r_111_100_2;
            double b_020_1 = AmBy*b_010_1 + r_010_010_1;
            double b_020_2 = AmBy*b_010_2 + r_010_010_2;
            double r_100_020_2 = AmBy*r_100_010_2 + r_110_010_2;
            double r_010_020_2 = AmBy*r_010_010_2 + r_020_010_2;
            double r_001_020_2 = AmBy*r_001_010_2 + r_011_010_2;
            double r_200_020_2 = AmBy*r_200_010_2 + r_210_010_2;
            double r_020_020_2 = AmBy*r_020_010_2 + r_030_010_2;
            double r_110_020_2 = AmBy*r_110_010_2 + r_120_010_2;
            double r_101_020_2 = AmBy*r_101_010_2 + r_111_010_2;
            double r_011_020_2 = AmBy*r_011_010_2 + r_021_010_2;
            double b_002_1 = AmBz*b_001_1 + r_001_001_1;
            double b_002_2 = AmBz*b_001_2 + r_001_001_2;
            double r_100_002_2 = AmBz*r_100_001_2 + r_101_001_2;
            double r_010_002_2 = AmBz*r_010_001_2 + r_011_001_2;
            double r_001_002_2 = AmBz*r_001_001_2 + r_002_001_2;
            double r_200_002_2 = AmBz*r_200_001_2 + r_201_001_2;
            double r_020_002_2 = AmBz*r_020_001_2 + r_021_001_2;
            double r_002_002_2 = AmBz*r_002_001_2 + r_003_001_2;
            double r_110_002_2 = AmBz*r_110_001_2 + r_111_001_2;
            double r_101_002_2 = AmBz*r_101_001_2 + r_102_001_2;
            double r_011_002_2 = AmBz*r_011_001_2 + r_012_001_2;
            double b_110_1 = AmBy*b_100_1 + r_010_100_1;
            double b_101_1 = AmBz*b_100_1 + r_001_100_1;
            double b_011_1 = AmBz*b_010_1 + r_001_010_1;
            double b_300_2 = AmBx*b_200_2 + r_100_200_2;
            double r_100_300_2 = AmBx*r_100_200_2 + r_200_200_2;
            double r_010_300_2 = AmBx*r_010_200_2 + r_110_200_2;
            double r_001_300_2 = AmBx*r_001_200_2 + r_101_200_2;
            double b_030_2 = AmBy*b_020_2 + r_010_020_2;
            double r_100_030_2 = AmBy*r_100_020_2 + r_110_020_2;
            double r_010_030_2 = AmBy*r_010_020_2 + r_020_020_2;
            double r_001_030_2 = AmBy*r_001_020_2 + r_011_020_2;
            double b_003_2 = AmBz*b_002_2 + r_001_002_2;
            double r_100_003_2 = AmBz*r_100_002_2 + r_101_002_2;
            double r_010_003_2 = AmBz*r_010_002_2 + r_011_002_2;
            double r_001_003_2 = AmBz*r_001_002_2 + r_002_002_2;
            double b_120_2 = AmBx*b_020_2 + r_100_020_2;
            double r_100_120_2 = AmBx*r_100_020_2 + r_200_020_2;
            double r_001_120_2 = AmBx*r_001_020_2 + r_101_020_2;
            double b_102_2 = AmBx*b_002_2 + r_100_002_2;
            double r_100_102_2 = AmBx*r_100_002_2 + r_200_002_2;
            double r_010_102_2 = AmBx*r_010_002_2 + r_110_002_2;
            double b_210_2 = AmBy*b_200_2 + r_010_200_2;
            double r_001_210_2 = AmBy*r_001_200_2 + r_011_200_2;
            double b_012_2 = AmBy*b_002_2 + r_010_002_2;
            double r_010_012_2 = AmBy*r_010_002_2 + r_020_002_2;
            double b_400_2 = AmBx*b_300_2 + r_100_300_2;
            double b_040_2 = AmBy*b_030_2 + r_010_030_2;
            double b_004_2 = AmBz*b_003_2 + r_001_003_2;
            double b_310_2 = AmBy*b_300_2 + r_010_300_2;
            double b_130_2 = AmBx*b_030_2 + r_100_030_2;
            double b_301_2 = AmBz*b_300_2 + r_001_300_2;
            double b_103_2 = AmBx*b_003_2 + r_100_003_2;
            double b_031_2 = AmBz*b_030_2 + r_001_030_2;
            double b_013_2 = AmBy*b_003_2 + r_010_003_2;
            double b_220_2 = AmBx*b_120_2 + r_100_120_2;
            double b_202_2 = AmBx*b_102_2 + r_100_102_2;
            double b_022_2 = AmBy*b_012_2 + r_010_012_2;
            double b_112_2 = AmBy*b_102_2 + r_010_102_2;
            double b_121_2 = AmBz*b_120_2 + r_001_120_2;
            double b_211_2 = AmBz*b_210_2 + r_001_210_2;
            double bx_100 = b_200_1 - pAx0[0];
            double bx_300_1 = -3*b_200_1 + b_400_2;
            double bx_120_1 = -b_020_1 + b_220_2;
            double bx_102_1 = -b_002_1 + b_202_2;
            double bx_210_1 = -2*b_110_1 + b_310_2;
            double bx_201_1 = -2*b_101_1 + b_301_2;
            double bx_111_1 = -b_011_1 + b_211_2;
            double by_010 = b_020_1 - pAx0[0];
            double by_030_1 = -3*b_020_1 + b_040_2;
            double by_120_1 = -2*b_110_1 + b_130_2;
            double by_210_1 = -b_200_1 + b_220_2;
            double by_012_1 = -b_002_1 + b_022_2;
            double by_021_1 = -2*b_011_1 + b_031_2;
            double by_111_1 = -b_101_1 + b_121_2;
            double bz_001 = b_002_1 - pAx0[0];
            double bz_003_1 = -3*b_002_1 + b_004_2;
            double bz_102_1 = -2*b_101_1 + b_103_2;
            double bz_012_1 = -2*b_011_1 + b_013_2;
            double bz_201_1 = -b_200_1 + b_202_2;
            double bz_021_1 = -b_020_1 + b_022_2;
            double bz_111_1 = -b_110_1 + b_112_2;
            double bxx_200 = -2*bx_100 + bx_300_1;
            double bxx_020 = bx_120_1;
            double bxx_002 = bx_102_1;
            double bxx_110 = -b_110_1 + bx_210_1;
            double bxx_101 = -b_101_1 + bx_201_1;
            double bxx_011 = bx_111_1;
            double byy_200 = by_210_1;
            double byy_020 = -2*by_010 + by_030_1;
            double byy_002 = by_012_1;
            double byy_110 = -b_110_1 + by_120_1;
            double byy_101 = by_111_1;
            double byy_011 = -b_011_1 + by_021_1;
            double bzz_200 = bz_201_1;
            double bzz_020 = bz_021_1;
            double bzz_002 = -2*bz_001 + bz_003_1;
            double bzz_110 = bz_111_1;
            double bzz_101 = -b_101_1 + bz_102_1;
            double bzz_011 = -b_011_1 + bz_012_1;
            double bxy_200 = bx_210_1;
            double bxy_020 = -2*b_110_1 + b_130_2;
            double bxy_002 = b_112_2;
            double bxy_110 = -bx_100 + bx_120_1;
            double bxy_101 = bx_111_1;
            double bxy_011 = -b_101_1 + b_121_2;
            double bxz_200 = bx_201_1;
            double bxz_020 = b_121_2;
            double bxz_002 = -2*b_101_1 + b_103_2;
            double bxz_110 = bx_111_1;
            double bxz_101 = -bx_100 + bx_102_1;
            double bxz_011 = -b_110_1 + b_112_2;
            double byz_200 = b_211_2;
            double byz_020 = by_021_1;
            double byz_002 = -2*b_011_1 + b_013_2;
            double byz_110 = by_111_1;
            double byz_101 = -b_110_1 + b_112_2;
            double byz_011 = -by_010 + by_012_1;
            // 4.94 steps per component, 1.39 kb stack
            pOut_[sb*0 + sd*0] = bxx_002 - bxx_020*sd0 - bxx_200*sd0;
            pOut_[sb*0 + sd*1] = byy_002 - byy_020*sd0 - byy_200*sd0;
            pOut_[sb*0 + sd*2] = bzz_002 - bzz_020*sd0 - bzz_200*sd0;
            pOut_[sb*0 + sd*3] = bxy_002 - bxy_020*sd0 - bxy_200*sd0;
            pOut_[sb*0 + sd*4] = bxz_002 - bxz_020*sd0 - bxz_200*sd0;
            pOut_[sb*0 + sd*5] = byz_002 - byz_020*sd0 - byz_200*sd0;
            pOut_[sb*1 + sd*0] = bxx_110*sd1;
            pOut_[sb*1 + sd*1] = byy_110*sd1;
            pOut_[sb*1 + sd*2] = bzz_110*sd1;
            pOut_[sb*1 + sd*3] = bxy_110*sd1;
            pOut_[sb*1 + sd*4] = bxz_110*sd1;
            pOut_[sb*1 + sd*5] = byz_110*sd1;
            pOut_[sb*2 + sd*0] = bxx_101*sd1;
            pOut_[sb*2 + sd*1] = byy_101*sd1;
            pOut_[sb*2 + sd*2] = bzz_101*sd1;
            pOut_[sb*2 + sd*3] = bxy_101*sd1;
            pOut_[sb*2 + sd*4] = bxz_101*sd1;
            pOut_[sb*2 + sd*5] = byz_101*sd1;
            pOut_[sb*3 + sd*0] = -bxx_020*sd2 + bxx_200*sd2;
            pOut_[sb*3 + sd*1] = -byy_020*sd2 + byy_200*sd2;
            pOut_[sb*3 + sd*2] = -bzz_020*sd2 + bzz_200*sd2;
            pOut_[sb*3 + sd*3] = -bxy_020*sd2 + bxy_200*sd2;
            pOut_[sb*3 + sd*4] = -bxz_020*sd2 + bxz_200*sd2;
            pOut_[sb*3 + sd*5] = -byz_020*sd2 + byz_200*sd2;
            pOut_[sb*4 + sd*0] = bxx_011*sd1;
            pOut_[sb*4 + sd*1] = byy_011*sd1;
            pOut_[sb*4 + sd*2] = bzz_011*sd1;
            pOut_[sb*4 + sd*3] = bxy_011*sd1;
            pOut_[sb*4 + sd*4] = bxz_011*sd1;
            pOut_[sb*4 + sd*5] = byz_011*sd1;
         }
         return;
      }
      case 3: {
         for (size_t ia = 0; ia < nCount; ++ ia) {
            double const * pAx0 = p0Z + 4 * ia;
            double const * pAx1 = p2Z + 20 * ia;
            double const * pAx2 = p4Z + 56 * ia;
            double * pOut_ = pOut + sa * ia;
            double b_100 = AmBx*pAx0[0] + pAx0[1];
            double b_100_1 = AmBx*pAx1[0] + pAx1[1];
            double r_100_100_1 = AmBx*pAx1[1] + pAx1[4];
            double r_010_100_1 = AmBx*pAx1[2] + pAx1[7];
            double r_001_100_1 = AmBx*pAx1[3] + pAx1[8];
            double r_200_100_1 = AmBx*pAx1[4] + pAx1[10];
            double r_110_100_1 = AmBx*pAx1[7] + pAx1[15];
            double r_101_100_1 = AmBx*pAx1[8] + pAx1[17];
            double r_011_100_1 = AmBx*pAx1[9] + pAx1[19];
            double b_100_2 = AmBx*pAx2[0] + pAx2[1];
            double r_100_100_2 = AmBx*pAx2[1] + pAx2[4];
            double r_010_100_2 = AmBx*pAx2[2] + pAx2[7];
            double r_001_100_2 = AmBx*pAx2[3] + pAx2[8];
            double r_200_100_2 = AmBx*pAx2[4] + pAx2[10];
            double r_020_100_2 = AmBx*pAx2[5] + pAx2[13];
            double r_002_100_2 = AmBx*pAx2[6] + pAx2[14];
            double r_110_100_2 = AmBx*pAx2[7] + pAx2[15];
            double r_101_100_2 = AmBx*pAx2[8] + pAx2[17];
            double r_011_100_2 = AmBx*pAx2[9] + pAx2[19];
            double r_300_100_2 = AmBx*pAx2[10] + pAx2[20];
            double r_120_100_2 = AmBx*pAx2[13] + pAx2[29];
            double r_102_100_2 = AmBx*pAx2[14] + pAx2[30];
            double r_210_100_2 = AmBx*pAx2[15] + pAx2[23];
            double r_201_100_2 = AmBx*pAx2[17] + pAx2[25];
            double r_111_100_2 = AmBx*pAx2[19] + pAx2[34];
            double r_400_100_2 = AmBx*pAx2[20] + pAx2[35];
            double r_310_100_2 = AmBx*pAx2[23] + pAx2[40];
            double r_301_100_2 = AmBx*pAx2[25] + pAx2[42];
            double r_220_100_2 = AmBx*pAx2[29] + pAx2[44];
            double r_202_100_2 = AmBx*pAx2[30] + pAx2[45];
            double r_211_100_2 = AmBx*pAx2[34] + pAx2[50];
            double b_010 = AmBy*pAx0[0] + pAx0[2];
            double b_010_1 = AmBy*pAx1[0] + pAx1[2];
            double r_100_010_1 = AmBy*pAx1[1] + pAx1[7];
            double r_010_010_1 = AmBy*pAx1[2] + pAx1[5];
            double r_001_010_1 = AmBy*pAx1[3] + pAx1[9];
            double r_020_010_1 = AmBy*pAx1[5] + pAx1[11];
            double r_110_010_1 = AmBy*pAx1[7] + pAx1[13];
            double r_011_010_1 = AmBy*pAx1[9] + pAx1[18];
            double b_010_2 = AmBy*pAx2[0] + pAx2[2];
            double r_100_010_2 = AmBy*pAx2[1] + pAx2[7];
            double r_010_010_2 = AmBy*pAx2[2] + pAx2[5];
            double r_001_010_2 = AmBy*pAx2[3] + pAx2[9];
            double r_200_010_2 = AmBy*pAx2[4] + pAx2[15];
            double r_020_010_2 = AmBy*pAx2[5] + pAx2[11];
            double r_002_010_2 = AmBy*pAx2[6] + pAx2[16];
            double r_110_010_2 = AmBy*pAx2[7] + pAx2[13];
            double r_101_010_2 = AmBy*pAx2[8] + pAx2[19];
            double r_011_010_2 = AmBy*pAx2[9] + pAx2[18];
            double r_030_010_2 = AmBy*pAx2[11] + pAx2[21];
            double r_120_010_2 = AmBy*pAx2[13] + pAx2[24];
            double r_210_010_2 = AmBy*pAx2[15] + pAx2[29];
            double r_012_010_2 = AmBy*pAx2[16] + pAx2[31];
            double r_201_010_2 = AmBy*pAx2[17] + pAx2[34];
            double r_021_010_2 = AmBy*pAx2[18] + pAx2[27];
            double r_111_010_2 = AmBy*pAx2[19] + pAx2[33];
            double r_040_010_2 = AmBy*pAx2[21] + pAx2[36];
            double r_130_010_2 = AmBy*pAx2[24] + pAx2[38];
            double r_031_010_2 = AmBy*pAx2[27] + pAx2[43];
            double r_220_010_2 = AmBy*pAx2[29] + pAx2[46];
            double r_022_010_2 = AmBy*pAx2[31] + pAx2[47];
            double r_121_010_2 = AmBy*pAx2[33] + pAx2[51];
            double r_211_010_2 = AmBy*pAx2[34] + pAx2[55];
            double b_001 = AmBz*pAx0[0] + pAx0[3];
            double b_001_1 = AmBz*pAx1[0] + pAx1[3];
            double r_100_001_1 = AmBz*pAx1[1] + pAx1[8];
            double r_010_001_1 = AmBz*pAx1[2] + pAx1[9];
            double r_001_001_1 = AmBz*pAx1[3] + pAx1[6];
            double r_002_001_1 = AmBz*pAx1[6] + pAx1[12];
            double r_101_001_1 = AmBz*pAx1[8] + pAx1[14];
            double r_011_001_1 = AmBz*pAx1[9] + pAx1[16];
            double b_001_2 = AmBz*pAx2[0] + pAx2[3];
            double r_100_001_2 = AmBz*pAx2[1] + pAx2[8];
            double r_010_001_2 = AmBz*pAx2[2] + pAx2[9];
            double r_001_001_2 = AmBz*pAx2[3] + pAx2[6];
            double r_200_001_2 = AmBz*pAx2[4] + pAx2[17];
            double r_020_001_2 = AmBz*pAx2[5] + pAx2[18];
            double r_002_001_2 = AmBz*pAx2[6] + pAx2[12];
            double r_110_001_2 = AmBz*pAx2[7] + pAx2[19];
            double r_101_001_2 = AmBz*pAx2[8] + pAx2[14];
            double r_011_001_2 = AmBz*pAx2[9] + pAx2[16];
            double r_003_001_2 = AmBz*pAx2[12] + pAx2[22];
            double r_120_001_2 = AmBz*pAx2[13] + pAx2[33];
            double r_102_001_2 = AmBz*pAx2[14] + pAx2[26];
            double r_210_001_2 = AmBz*pAx2[15] + pAx2[34];
            double r_012_001_2 = AmBz*pAx2[16] + pAx2[28];
            double r_201_001_2 = AmBz*pAx2[17] + pAx2[30];
            double r_021_001_2 = AmBz*pAx2[18] + pAx2[31];
            double r_111_001_2 = AmBz*pAx2[19] + pAx2[32];
            double r_004_001_2 = AmBz*pAx2[22] + pAx2[37];
            double r_103_001_2 = AmBz*pAx2[26] + pAx2[39];
            double r_013_001_2 = AmBz*pAx2[28] + pAx2[41];
            double r_202_001_2 = AmBz*pAx2[30] + pAx2[48];
            double r_022_001_2 = AmBz*pAx2[31] + pAx2[49];
            double r_112_001_2 = AmBz*pAx2[32] + pAx2[52];
            double r_121_001_2 = AmBz*pAx2[33] + pAx2[53];
            double r_211_001_2 = AmBz*pAx2[34] + pAx2[54];
            double b_200_1 = AmBx*b_100_1 + r_100_100_1;
            double r_100_200_1 = AmBx*r_100_100_1 + r_200_100_1;
            double r_010_200_1 = AmBx*r_010_100_1 + r_110_100_1;
            double r_001_200_1 = AmBx*r_001_100_1 + r_101_100_1;
            double b_200_2 = AmBx*b_100_2 + r_100_100_2;
            double r_100_200_2 = AmBx*r_100_100_2 + r_200_100_2;
            double r_010_200_2 = AmBx*r_010_100_2 + r_110_100_2;
            double r_001_200_2 = AmBx*r_001_100_2 + r_101_100_2;
            double r_200_200_2 = AmBx*r_200_100_2 + r_300_100_2;
            double r_020_200_2 = AmBx*r_020_100_2 + r_120_100_2;
            double r_002_200_2 = AmBx*r_002_100_2 + r_102_100_2;
            double r_110_200_2 = AmBx*r_110_100_2 + r_210_100_2;
            double r_101_200_2 = AmBx*r_101_100_2 + r_201_100_2;
            double r_011_200_2 = AmBx*r_011_100_2 + r_111_100_2;
            double r_300_200_2 = AmBx*r_300_100_2 + r_400_100_2;
            double r_120_200_2 = AmBx*r_120_100_2 + r_220_100_2;
            double r_102_200_2 = AmBx*r_102_100_2 + r_202_100_2;
            double r_210_200_2 = AmBx*r_210_100_2 + r_310_100_2;
            double r_201_200_2 = AmBx*r_201_100_2 + r_301_100_2;
            double r_111_200_2 = AmBx*r_111_100_2 + r_211_100_2;
            double b_020_1 = AmBy*b_010_1 + r_010_010_1;
            double r_100_020_1 = AmBy*r_100_010_1 + r_110_010_1;
            double r_010_020_1 = AmBy*r_010_010_1 + r_020_010_1;
            double r_001_020_1 = AmBy*r_001_010_1 + r_011_010_1;
            double b_020_2 = AmBy*b_010_2 + r_010_010_2;
            double r_100_020_2 = AmBy*r_100_010_2 + r_110_010_2;
            double r_010_020_2 = AmBy*r_010_010_2 + r_020_010_2;
            double r_001_020_2 = AmBy*r_001_010_2 + r_011_010_2;
            double r_200_020_2 = AmBy*r_200_010_2 + r_210_010_2;
            double r_020_020_2 = AmBy*r_020_010_2 + r_030_010_2;
            double r_002_020_2 = AmBy*r_002_010_2 + r_012_010_2;
            double r_110_020_2 = AmBy*r_110_010_2 + r_120_010_2;
            double r_101_020_2 = AmBy*r_101_010_2 + r_111_010_2;
            double r_011_020_2 = AmBy*r_011_010_2 + r_021_010_2;
            double r_030_020_2 = AmBy*r_030_010_2 + r_040_010_2;
            double r_120_020_2 = AmBy*r_120_010_2 + r_130_010_2;
            double r_210_020_2 = AmBy*r_210_010_2 + r_220_010_2;
            double r_012_020_2 = AmBy*r_012_010_2 + r_022_010_2;
            double r_201_020_2 = AmBy*r_201_010_2 + r_211_010_2;
            double r_021_020_2 = AmBy*r_021_010_2 + r_031_010_2;
            double r_111_020_2 = AmBy*r_111_010_2 + r_121_010_2;
            double b_002_1 = AmBz*b_001_1 + r_001_001_1;
            double r_100_002_1 = AmBz*r_100_001_1 + r_101_001_1;
            double r_010_002_1 = AmBz*r_010_001_1 + r_011_001_1;
            double r_001_002_1 = AmBz*r_001_001_1 + r_002_001_1;
            double b_002_2 = AmBz*b_001_2 + r_001_001_2;
            double r_100_002_2 = AmBz*r_100_001_2 + r_101_001_2;
            double r_010_002_2 = AmBz*r_010_001_2 + r_011_001_2;
            double r_001_002_2 = AmBz*r_001_001_2 + r_002_001_2;
            double r_200_002_2 = AmBz*r_200_001_2 + r_201_001_2;
            double r_020_002_2 = AmBz*r_020_001_2 + r_021_001_2;
            double r_002_002_2 = AmBz*r_002_001_2 + r_003_001_2;
            double r_110_002_2 = AmBz*r_110_001_2 + r_111_001_2;
            double r_101_002_2 = AmBz*r_101_001_2 + r_102_001_2;
            double r_011_002_2 = AmBz*r_011_001_2 + r_012_001_2;
            double r_003_002_2 = AmBz*r_003_001_2 + r_004_001_2;
            double r_120_002_2 = AmBz*r_120_001_2 + r_121_001_2;
            double r_102_002_2 = AmBz*r_102_001_2 + r_103_001_2;
            double r_210_002_2 = AmBz*r_210_001_2 + r_211_001_2;
            double r_012_002_2 = AmBz*r_012_001_2 + r_013_001_2;
            double r_201_002_2 = AmBz*r_201_001_2 + r_202_001_2;
            double r_021_002_2 = AmBz*r_021_001_2 + r_022_001_2;
            double r_111_002_2 = AmBz*r_111_001_2 + r_112_001_2;
            double b_110_1 = AmBy*b_100_1 + r_010_100_1;
            double r_001_110_1 = AmBy*r_001_100_1 + r_011_100_1;
            double b_300_1 = AmBx*b_200_1 + r_100_200_1;
            double b_300_2 = AmBx*b_200_2 + r_100_200_2;
            double r_100_300_2 = AmBx*r_100_200_2 + r_200_200_2;
            double r_010_300_2 = AmBx*r_010_200_2 + r_110_200_2;
            double r_001_300_2 = AmBx*r_001_200_2 + r_101_200_2;
            double r_200_300_2 = AmBx*r_200_200_2 + r_300_200_2;
            double r_020_300_2 = AmBx*r_020_200_2 + r_120_200_2;
            double r_002_300_2 = AmBx*r_002_200_2 + r_102_200_2;
            double r_110_300_2 = AmBx*r_110_200_2 + r_210_200_2;
            double r_101_300_2 = AmBx*r_101_200_2 + r_201_200_2;
            double r_011_300_2 = AmBx*r_011_200_2 + r_111_200_2;
            double b_030_1 = AmBy*b_020_1 + r_010_020_1;
            double b_030_2 = AmBy*b_020_2 + r_010_020_2;
            double r_100_030_2 = AmBy*r_100_020_2 + r_110_020_2;
            double r_010_030_2 = AmBy*r_010_020_2 + r_020_020_2;
            double r_001_030_2 = AmBy*r_001_020_2 + r_011_020_2;
            double r_200_030_2 = AmBy*r_200_020_2 + r_210_020_2;
            double r_020_030_2 = AmBy*r_020_020_2 + r_030_020_2;
            double r_002_030_2 = AmBy*r_002_020_2 + r_012_020_2;
            double r_110_030_2 = AmBy*r_110_020_2 + r_120_020_2;
            double r_101_030_2 = AmBy*r_101_020_2 + r_111_020_2;
            double r_011_030_2 = AmBy*r_011_020_2 + r_021_020_2;
            double b_003_1 = AmBz*b_002_1 + r_001_002_1;
            double b_003_2 = AmBz*b_002_2 + r_001_002_2;
            double r_100_003_2 = AmBz*r_100_002_2 + r_101_002_2;
            double r_010_003_2 = AmBz*r_010_002_2 + r_011_002_2;
            double r_001_003_2 = AmBz*r_001_002_2 + r_002_002_2;
            double r_200_003_2 = AmBz*r_200_002_2 + r_201_002_2;
            double r_020_003_2 = AmBz*r_020_002_2 + r_021_002_2;
            double r_002_003_2 = AmBz*r_002_002_2 + r_003_002_2;
            double r_110_003_2 = AmBz*r_110_002_2 + r_111_002_2;
            double r_101_003_2 = AmBz*r_101_002_2 + r_102_002_2;
            double r_011_003_2 = AmBz*r_011_002_2 + r_012_002_2;
            double b_120_1 = AmBx*b_020_1 + r_100_020_1;
            double b_120_2 = AmBx*b_020_2 + r_100_020_2;
            double r_100_120_2 = AmBx*r_100_020_2 + r_200_020_2;
            double r_001_120_2 = AmBx*r_001_020_2 + r_101_020_2;
            double r_101_120_2 = AmBx*r_101_020_2 + r_201_020_2;
            double b_102_1 = AmBx*b_002_1 + r_100_002_1;
            double b_102_2 = AmBx*b_002_2 + r_100_002_2;
            double r_100_102_2 = AmBx*r_100_002_2 + r_200_002_2;
            double r_010_102_2 = AmBx*r_010_002_2 + r_110_002_2;
            double r_110_102_2 = AmBx*r_110_002_2 + r_210_002_2;
            double b_210_1 = AmBy*b_200_1 + r_010_200_1;
            double b_012_1 = AmBy*b_002_1 + r_010_002_1;
            double b_012_2 = AmBy*b_002_2 + r_010_002_2;
            double r_100_012_2 = AmBy*r_100_002_2 + r_110_002_2;
            double r_010_012_2 = AmBy*r_010_002_2 + r_020_002_2;
            double r_110_012_2 = AmBy*r_110_002_2 + r_120_002_2;
            double b_201_1 = AmBz*b_200_1 + r_001_200_1;
            double b_021_1 = AmBz*b_020_1 + r_001_020_1;
            double b_111_1 = AmBz*b_110_1 + r_001_110_1;
            double b_400_2 = AmBx*b_300_2 + r_100_300_2;
            double r_100_400_2 = AmBx*r_100_300_2 + r_200_300_2;
            double r_010_400_2 = AmBx*r_010_300_2 + r_110_300_2;
            double r_001_400_2 = AmBx*r_001_300_2 + r_101_300_2;
            double b_040_2 = AmBy*b_030_2 + r_010_030_2;
            double r_100_040_2 = AmBy*r_100_030_2 + r_110_030_2;
            double r_010_040_2 = AmBy*r_010_030_2 + r_020_030_2;
            double r_001_040_2 = AmBy*r_001_030_2 + r_011_030_2;
            double b_004_2 = AmBz*b_003_2 + r_001_003_2;
            double r_100_004_2 = AmBz*r_100_003_2 + r_101_003_2;
            double r_010_004_2 = AmBz*r_010_003_2 + r_011_003_2;
            double r_001_004_2 = AmBz*r_001_003_2 + r_002_003_2;
            double b_310_2 = AmBy*b_300_2 + r_010_300_2;
            double r_010_310_2 = AmBy*r_010_300_2 + r_020_300_2;
            double r_001_310_2 = AmBy*r_001_300_2 + r_011_300_2;
            double b_130_2 = AmBx*b_030_2 + r_100_030_2;
            double r_100_130_2 = AmBx*r_100_030_2 + r_200_030_2;
            double r_001_130_2 = AmBx*r_001_030_2 + r_101_030_2;
            double b_301_2 = AmBz*b_300_2 + r_001_300_2;
            double r_001_301_2 = AmBz*r_001_300_2 + r_002_300_2;
            double b_103_2 = AmBx*b_003_2 + r_100_003_2;
            double r_100_103_2 = AmBx*r_100_003_2 + r_200_003_2;
            double r_010_103_2 = AmBx*r_010_003_2 + r_110_003_2;
            double b_031_2 = AmBz*b_030_2 + r_001_030_2;
            double r_001_031_2 = AmBz*r_001_030_2 + r_002_030_2;
            double b_013_2 = AmBy*b_003_2 + r_010_003_2;
            double r_010_013_2 = AmBy*r_010_003_2 + r_020_003_2;
            double b_220_2 = AmBx*b_120_2 + r_100_120_2;
            double r_001_220_2 = AmBx*r_001_120_2 + r_101_120_2;
            double b_202_2 = AmBx*b_102_2 + r_100_102_2;
            double r_010_202_2 = AmBx*r_010_102_2 + r_110_102_2;
            double b_022_2 = AmBy*b_012_2 + r_010_012_2;
            double r_100_022_2 = AmBy*r_100_012_2 + r_110_012_2;
            double b_500_2 = AmBx*b_400_2 + r_100_400_2;
            double b_050_2 = AmBy*b_040_2 + r_010_040_2;
            double b_005_2 = AmBz*b_004_2 + r_001_004_2;
            double b_140_2 = AmBx*b_040_2 + r_100_040_2;
            double b_104_2 = AmBx*b_004_2 + r_100_004_2;
            double b_410_2 = AmBy*b_400_2 + r_010_400_2;
            double b_014_2 = AmBy*b_004_2 + r_010_004_2;
            double b_401_2 = AmBz*b_400_2 + r_001_400_2;
            double b_041_2 = AmBz*b_040_2 + r_001_040_2;
            double b_320_2 = AmBy*b_310_2 + r_010_310_2;
            double b_302_2 = AmBz*b_301_2 + r_001_301_2;
            double b_230_2 = AmBx*b_130_2 + r_100_130_2;
            double b_032_2 = AmBz*b_031_2 + r_001_031_2;
            double b_203_2 = AmBx*b_103_2 + r_100_103_2;
            double b_023_2 = AmBy*b_013_2 + r_010_013_2;
            double b_311_2 = AmBz*b_310_2 + r_001_310_2;
            double b_131_2 = AmBz*b_130_2 + r_001_130_2;
            double b_113_2 = AmBy*b_103_2 + r_010_103_2;
            double b_122_2 = AmBx*b_022_2 + r_100_022_2;
            double b_212_2 = AmBy*b_202_2 + r_010_202_2;
            double b_221_2 = AmBz*b_220_2 + r_001_220_2;
            double bx_200 = -2*b_100 + b_300_1;
            double bx_110 = -b_010 + b_210_1;
            double bx_101 = -b_001 + b_201_1;
            double bx_400_1 = -4*b_300_1 + b_500_2;
            double bx_310_1 = -3*b_210_1 + b_410_2;
            double bx_130_1 = -b_030_1 + b_230_2;
            double bx_301_1 = -3*b_201_1 + b_401_2;
            double bx_103_1 = -b_003_1 + b_203_2;
            double bx_220_1 = -2*b_120_1 + b_320_2;
            double bx_202_1 = -2*b_102_1 + b_302_2;
            double bx_112_1 = -b_012_1 + b_212_2;
            double bx_121_1 = -b_021_1 + b_221_2;
            double bx_211_1 = -2*b_111_1 + b_311_2;
            double by_020 = -2*b_010 + b_030_1;
            double by_110 = -b_100 + b_120_1;
            double by_011 = -b_001 + b_021_1;
            double by_040_1 = -4*b_030_1 + b_050_2;
            double by_310_1 = -b_300_1 + b_320_2;
            double by_130_1 = -3*b_120_1 + b_140_2;
            double by_031_1 = -3*b_021_1 + b_041_2;
            double by_013_1 = -b_003_1 + b_023_2;
            double by_220_1 = -2*b_210_1 + b_230_2;
            double by_022_1 = -2*b_012_1 + b_032_2;
            double by_112_1 = -b_102_1 + b_122_2;
            double by_121_1 = -2*b_111_1 + b_131_2;
            double by_211_1 = -b_201_1 + b_221_2;
            double bz_002 = -2*b_001 + b_003_1;
            double bz_101 = -b_100 + b_102_1;
            double bz_011 = -b_010 + b_012_1;
            double bz_004_1 = -4*b_003_1 + b_005_2;
            double bz_301_1 = -b_300_1 + b_302_2;
            double bz_103_1 = -3*b_102_1 + b_104_2;
            double bz_031_1 = -b_030_1 + b_032_2;
            double bz_013_1 = -3*b_012_1 + b_014_2;
            double bz_202_1 = -2*b_201_1 + b_203_2;
            double bz_022_1 = -2*b_021_1 + b_023_2;
            double bz_112_1 = -2*b_111_1 + b_113_2;
            double bz_121_1 = -b_120_1 + b_122_2;
            double bz_211_1 = -b_210_1 + b_212_2;
            double bxx_300 = -3*bx_200 + bx_400_1;
            double bxx_030 = bx_130_1;
            double bxx_003 = bx_103_1;
            double bxx_120 = -b_120_1 + bx_220_1;
            double bxx_102 = -b_102_1 + bx_202_1;
            double bxx_210 = -2*bx_110 + bx_310_1;
            double bxx_012 = bx_112_1;
            double bxx_201 = -2*bx_101 + bx_301_1;
            double bxx_021 = bx_121_1;
            double bxx_111 = -b_111_1 + bx_211_1;
            double byy_300 = by_310_1;
            double byy_030 = -3*by_020 + by_040_1;
            double byy_003 = by_013_1;
            double byy_120 = -2*by_110 + by_130_1;
            double byy_102 = by_112_1;
            double byy_210 = -b_210_1 + by_220_1;
            double byy_012 = -b_012_1 + by_022_1;
            double byy_201 = by_211_1;
            double byy_021 = -2*by_011 + by_031_1;
            double byy_111 = -b_111_1 + by_121_1;
            double bzz_300 = bz_301_1;
            double bzz_030 = bz_031_1;
            double bzz_003 = -3*bz_002 + bz_004_1;
            double bzz_120 = bz_121_1;
            double bzz_102 = -2*bz_101 + bz_103_1;
            double bzz_210 = bz_211_1;
            double bzz_012 = -2*bz_011 + bz_013_1;
            double bzz_201 = -b_201_1 + bz_202_1;
            double bzz_021 = -b_021_1 + bz_022_1;
            double bzz_111 = -b_111_1 + bz_112_1;
            double bxy_300 = bx_310_1;
            double bxy_030 = -3*b_120_1 + b_140_2;
            double bxy_003 = b_113_2;
            double bxy_120 = -2*bx_110 + bx_130_1;
            double bxy_102 = bx_112_1;
            double bxy_210 = -bx_200 + bx_220_1;
            double bxy_012 = -b_102_1 + b_122_2;
            double bxy_201 = bx_211_1;
            double bxy_021 = -2*b_111_1 + b_131_2;
            double bxy_111 = -bx_101 + bx_121_1;
            double bxz_300 = bx_301_1;
            double bxz_030 = b_131_2;
            double bxz_003 = -3*b_102_1 + b_104_2;
            double bxz_120 = bx_121_1;
            double bxz_102 = -2*bx_101 + bx_103_1;
            double bxz_210 = bx_211_1;
            double bxz_012 = -2*b_111_1 + b_113_2;
            double bxz_201 = -bx_200 + bx_202_1;
            double bxz_021 = -b_120_1 + b_122_2;
            double bxz_111 = -bx_110 + bx_112_1;
            double byz_300 = b_311_2;
            double byz_030 = by_031_1;
            double byz_003 = -3*b_012_1 + b_014_2;
            double byz_120 = by_121_1;
            double byz_102 = -2*b_111_1 + b_113_2;
            double byz_210 = by_211_1;
            double byz_012 = -2*by_011 + by_013_1;
            double byz_201 = -b_210_1 + b_212_2;
            double byz_021 = -by_020 + by_022_1;
            double byz_111 = -by_110 + by_112_1;
            // 6.12 steps per component, 2.87 kb stack
            pOut_[sb*0 + sd*0] = bxx_102*sd4 - bxx_120*sd3 - bxx_300*sd3;
            pOut_[sb*0 + sd*1] = byy_102*sd4 - byy_120*sd3 - byy_300*sd3;
            pOut_[sb*0 + sd*2] = bzz_102*sd4 - bzz_120*sd3 - bzz_300*sd3;
            pOut_[sb*0 + sd*3] = bxy_102*sd4 - bxy_120*sd3 - bxy_300*sd3;
            pOut_[sb*0 + sd*4] = bxz_102*sd4 - bxz_120*sd3 - bxz_300*sd3;
            pOut_[sb*0 + sd*5] = byz_102*sd4 - byz_120*sd3 - byz_300*sd3;
            pOut_[sb*1 + sd*0] = bxx_012*sd4 - bxx_030*sd3 - bxx_210*sd3;
            pOut_[sb*1 + sd*1] = byy_012*sd4 - byy_030*sd3 - byy_210*sd3;
            pOut_[sb*1 + sd*2] = bzz_012*sd4 - bzz_030*sd3 - bzz_210*sd3;
            pOut_[sb*1 + sd*3] = bxy_012*sd4 - bxy_030*sd3 - bxy_210*sd3;
            pOut_[sb*1 + sd*4] = bxz_012*sd4 - bxz_030*sd3 - bxz_210*sd3;
            pOut_[sb*1 + sd*5] = byz_012*sd4 - byz_030*sd3 - byz_210*sd3;
            pOut_[sb*2 + sd*0] = bxx_003 - bxx_021*sd5 - bxx_201*sd5;
            pOut_[sb*2 + sd*1] = byy_003 - byy_021*sd5 - byy_201*sd5;
            pOut_[sb*2 + sd*2] = bzz_003 - bzz_021*sd5 - bzz_201*sd5;
            pOut_[sb*2 + sd*3] = bxy_003 - bxy_021*sd5 - bxy_201*sd5;
            pOut_[sb*2 + sd*4] = bxz_003 - bxz_021*sd5 - bxz_201*sd5;
            pOut_[sb*2 + sd*5] = byz_003 - byz_021*sd5 - byz_201*sd5;
            pOut_[sb*3 + sd*0] = -bxx_120*sd7 + bxx_300*sd6;
            pOut_[sb*3 + sd*1] = -byy_120*sd7 + byy_300*sd6;
            pOut_[sb*3 + sd*2] = -bzz_120*sd7 + bzz_300*sd6;
            pOut_[sb*3 + sd*3] = -bxy_120*sd7 + bxy_300*sd6;
            pOut_[sb*3 + sd*4] = -bxz_120*sd7 + bxz_300*sd6;
            pOut_[sb*3 + sd*5] = -byz_120*sd7 + byz_300*sd6;
            pOut_[sb*4 + sd*0] = bxx_111*sd8;
            pOut_[sb*4 + sd*1] = byy_111*sd8;
            pOut_[sb*4 + sd*2] = bzz_111*sd8;
            pOut_[sb*4 + sd*3] = bxy_111*sd8;
            pOut_[sb*4 + sd*4] = bxz_111*sd8;
            pOut_[sb*4 + sd*5] = byz_111*sd8;
            pOut_[sb*5 + sd*0] = -bxx_030*sd6 + bxx_210*sd7;
            pOut_[sb*5 + sd*1] = -byy_030*sd6 + byy_210*sd7;
            pOut_[sb*5 + sd*2] = -bzz_030*sd6 + bzz_210*sd7;
            pOut_[sb*5 + sd*3] = -bxy_030*sd6 + bxy_210*sd7;
            pOut_[sb*5 + sd*4] = -bxz_030*sd6 + bxz_210*sd7;
            pOut_[sb*5 + sd*5] = -byz_030*sd6 + byz_210*sd7;
            pOut_[sb*6 + sd*0] = -bxx_021*sd9 + bxx_201*sd9;
            pOut_[sb*6 + sd*1] = -byy_021*sd9 + byy_201*sd9;
            pOut_[sb*6 + sd*2] = -bzz_021*sd9 + bzz_201*sd9;
            pOut_[sb*6 + sd*3] = -bxy_021*sd9 + bxy_201*sd9;
            pOut_[sb*6 + sd*4] = -bxz_021*sd9 + bxz_201*sd9;
            pOut_[sb*6 + sd*5] = -byz_021*sd9 + byz_201*sd9;
         }
         return;
      }
      case 4: {
         for (size_t ia = 0; ia < nCount; ++ ia) {
            double const * pAx0 = p0Z + 10 * ia;
            double const * pAx1 = p2Z + 35 * ia;
            double const * pAx2 = p4Z + 84 * ia;
            double * pOut_ = pOut + sa * ia;
            double b_100 = AmBx*pAx0[0] + pAx0[1];
            double r_100_100 = AmBx*pAx0[1] + pAx0[4];
            double r_010_100 = AmBx*pAx0[2] + pAx0[7];
            double r_001_100 = AmBx*pAx0[3] + pAx0[8];
            double b_100_1 = AmBx*pAx1[0] + pAx1[1];
            double r_100_100_1 = AmBx*pAx1[1] + pAx1[4];
            double r_010_100_1 = AmBx*pAx1[2] + pAx1[7];
            double r_001_100_1 = AmBx*pAx1[3] + pAx1[8];
            double r_200_100_1 = AmBx*pAx1[4] + pAx1[10];
            double r_110_100_1 = AmBx*pAx1[7] + pAx1[15];
            double r_101_100_1 = AmBx*pAx1[8] + pAx1[17];
            double r_011_100_1 = AmBx*pAx1[9] + pAx1[19];
            double r_300_100_1 = AmBx*pAx1[10] + pAx1[20];
            double r_210_100_1 = AmBx*pAx1[15] + pAx1[23];
            double r_201_100_1 = AmBx*pAx1[17] + pAx1[25];
            double r_111_100_1 = AmBx*pAx1[19] + pAx1[34];
            double b_100_2 = AmBx*pAx2[0] + pAx2[1];
            double r_100_100_2 = AmBx*pAx2[1] + pAx2[4];
            double r_010_100_2 = AmBx*pAx2[2] + pAx2[7];
            double r_001_100_2 = AmBx*pAx2[3] + pAx2[8];
            double r_200_100_2 = AmBx*pAx2[4] + pAx2[10];
            double r_020_100_2 = AmBx*pAx2[5] + pAx2[13];
            double r_002_100_2 = AmBx*pAx2[6] + pAx2[14];
            double r_110_100_2 = AmBx*pAx2[7] + pAx2[15];
            double r_101_100_2 = AmBx*pAx2[8] + pAx2[17];
            double r_011_100_2 = AmBx*pAx2[9] + pAx2[19];
            double r_300_100_2 = AmBx*pAx2[10] + pAx2[20];
            double r_030_100_2 = AmBx*pAx2[11] + pAx2[24];
            double r_003_100_2 = AmBx*pAx2[12] + pAx2[26];
            double r_120_100_2 = AmBx*pAx2[13] + pAx2[29];
            double r_102_100_2 = AmBx*pAx2[14] + pAx2[30];
            double r_210_100_2 = AmBx*pAx2[15] + pAx2[23];
            double r_012_100_2 = AmBx*pAx2[16] + pAx2[32];
            double r_201_100_2 = AmBx*pAx2[17] + pAx2[25];
            double r_021_100_2 = AmBx*pAx2[18] + pAx2[33];
            double r_111_100_2 = AmBx*pAx2[19] + pAx2[34];
            double r_400_100_2 = AmBx*pAx2[20] + pAx2[35];
            double r_310_100_2 = AmBx*pAx2[23] + pAx2[40];
            double r_130_100_2 = AmBx*pAx2[24] + pAx2[46];
            double r_301_100_2 = AmBx*pAx2[25] + pAx2[42];
            double r_103_100_2 = AmBx*pAx2[26] + pAx2[48];
            double r_220_100_2 = AmBx*pAx2[29] + pAx2[44];
            double r_202_100_2 = AmBx*pAx2[30] + pAx2[45];
            double r_112_100_2 = AmBx*pAx2[32] + pAx2[54];
            double r_121_100_2 = AmBx*pAx2[33] + pAx2[55];
            double r_211_100_2 = AmBx*pAx2[34] + pAx2[50];
            double r_500_100_2 = AmBx*pAx2[35] + pAx2[56];
            double r_410_100_2 = AmBx*pAx2[40] + pAx2[59];
            double r_401_100_2 = AmBx*pAx2[42] + pAx2[61];
            double r_320_100_2 = AmBx*pAx2[44] + pAx2[65];
            double r_302_100_2 = AmBx*pAx2[45] + pAx2[66];
            double r_230_100_2 = AmBx*pAx2[46] + pAx2[71];
            double r_203_100_2 = AmBx*pAx2[48] + pAx2[72];
            double r_311_100_2 = AmBx*pAx2[50] + pAx2[76];
            double r_212_100_2 = AmBx*pAx2[54] + pAx2[77];
            double r_221_100_2 = AmBx*pAx2[55] + pAx2[79];
            double b_010 = AmBy*pAx0[0] + pAx0[2];
            double r_010_010 = AmBy*pAx0[2] + pAx0[5];
            double r_001_010 = AmBy*pAx0[3] + pAx0[9];
            double b_010_1 = AmBy*pAx1[0] + pAx1[2];
            double r_100_010_1 = AmBy*pAx1[1] + pAx1[7];
            double r_010_010_1 = AmBy*pAx1[2] + pAx1[5];
            double r_001_010_1 = AmBy*pAx1[3] + pAx1[9];
            double r_200_010_1 = AmBy*pAx1[4] + pAx1[15];
            double r_020_010_1 = AmBy*pAx1[5] + pAx1[11];
            double r_110_010_1 = AmBy*pAx1[7] + pAx1[13];
            double r_101_010_1 = AmBy*pAx1[8] + pAx1[19];
            double r_011_010_1 = AmBy*pAx1[9] + pAx1[18];
            double r_030_010_1 = AmBy*pAx1[11] + pAx1[21];
            double r_120_010_1 = AmBy*pAx1[13] + pAx1[24];
            double r_210_010_1 = AmBy*pAx1[15] + pAx1[29];
            double r_021_010_1 = AmBy*pAx1[18] + pAx1[27];
            double r_111_010_1 = AmBy*pAx1[19] + pAx1[33];
            double b_010_2 = AmBy*pAx2[0] + pAx2[2];
            double r_100_010_2 = AmBy*pAx2[1] + pAx2[7];
            double r_010_010_2 = AmBy*pAx2[2] + pAx2[5];
            double r_001_010_2 = AmBy*pAx2[3] + pAx2[9];
            double r_200_010_2 = AmBy*pAx2[4] + pAx2[15];
            double r_020_010_2 = AmBy*pAx2[5] + pAx2[11];
            double r_002_010_2 = AmBy*pAx2[6] + pAx2[16];
            double r_110_010_2 = AmBy*pAx2[7] + pAx2[13];
            double r_101_010_2 = AmBy*pAx2[8] + pAx2[19];
            double r_011_010_2 = AmBy*pAx2[9] + pAx2[18];
            double r_030_010_2 = AmBy*pAx2[11] + pAx2[21];
            double r_003_010_2 = AmBy*pAx2[12] + pAx2[28];
            double r_120_010_2 = AmBy*pAx2[13] + pAx2[24];
            double r_102_010_2 = AmBy*pAx2[14] + pAx2[32];
            double r_210_010_2 = AmBy*pAx2[15] + pAx2[29];
            double r_012_010_2 = AmBy*pAx2[16] + pAx2[31];
            double r_201_010_2 = AmBy*pAx2[17] + pAx2[34];
            double r_021_010_2 = AmBy*pAx2[18] + pAx2[27];
            double r_111_010_2 = AmBy*pAx2[19] + pAx2[33];
            double r_040_010_2 = AmBy*pAx2[21] + pAx2[36];
            double r_130_010_2 = AmBy*pAx2[24] + pAx2[38];
            double r_031_010_2 = AmBy*pAx2[27] + pAx2[43];
            double r_013_010_2 = AmBy*pAx2[28] + pAx2[49];
            double r_220_010_2 = AmBy*pAx2[29] + pAx2[46];
            double r_022_010_2 = AmBy*pAx2[31] + pAx2[47];
            double r_112_010_2 = AmBy*pAx2[32] + pAx2[53];
            double r_121_010_2 = AmBy*pAx2[33] + pAx2[51];
            double r_211_010_2 = AmBy*pAx2[34] + pAx2[55];
            double r_050_010_2 = AmBy*pAx2[36] + pAx2[57];
            double r_140_010_2 = AmBy*pAx2[38] + pAx2[60];
            double r_041_010_2 = AmBy*pAx2[43] + pAx2[63];
            double r_230_010_2 = AmBy*pAx2[46] + pAx2[67];
            double r_032_010_2 = AmBy*pAx2[47] + pAx2[69];
            double r_023_010_2 = AmBy*pAx2[49] + pAx2[73];
            double r_131_010_2 = AmBy*pAx2[51] + pAx2[75];
            double r_122_010_2 = AmBy*pAx2[53] + pAx2[78];
            double r_221_010_2 = AmBy*pAx2[55] + pAx2[81];
            double b_001 = AmBz*pAx0[0] + pAx0[3];
            double r_001_001 = AmBz*pAx0[3] + pAx0[6];
            double b_001_1 = AmBz*pAx1[0] + pAx1[3];
            double r_100_001_1 = AmBz*pAx1[1] + pAx1[8];
            double r_010_001_1 = AmBz*pAx1[2] + pAx1[9];
            double r_001_001_1 = AmBz*pAx1[3] + pAx1[6];
            double r_200_001_1 = AmBz*pAx1[4] + pAx1[17];
            double r_020_001_1 = AmBz*pAx1[5] + pAx1[18];
            double r_002_001_1 = AmBz*pAx1[6] + pAx1[12];
            double r_110_001_1 = AmBz*pAx1[7] + pAx1[19];
            double r_101_001_1 = AmBz*pAx1[8] + pAx1[14];
            double r_011_001_1 = AmBz*pAx1[9] + pAx1[16];
            double r_003_001_1 = AmBz*pAx1[12] + pAx1[22];
            double r_102_001_1 = AmBz*pAx1[14] + pAx1[26];
            double r_012_001_1 = AmBz*pAx1[16] + pAx1[28];
            double r_201_001_1 = AmBz*pAx1[17] + pAx1[30];
            double r_021_001_1 = AmBz*pAx1[18] + pAx1[31];
            double r_111_001_1 = AmBz*pAx1[19] + pAx1[32];
            double b_001_2 = AmBz*pAx2[0] + pAx2[3];
            double r_100_001_2 = AmBz*pAx2[1] + pAx2[8];
            double r_010_001_2 = AmBz*pAx2[2] + pAx2[9];
            double r_001_001_2 = AmBz*pAx2[3] + pAx2[6];
            double r_200_001_2 = AmBz*pAx2[4] + pAx2[17];
            double r_020_001_2 = AmBz*pAx2[5] + pAx2[18];
            double r_002_001_2 = AmBz*pAx2[6] + pAx2[12];
            double r_110_001_2 = AmBz*pAx2[7] + pAx2[19];
            double r_101_001_2 = AmBz*pAx2[8] + pAx2[14];
            double r_011_001_2 = AmBz*pAx2[9] + pAx2[16];
            double r_003_001_2 = AmBz*pAx2[12] + pAx2[22];
            double r_120_001_2 = AmBz*pAx2[13] + pAx2[33];
            double r_102_001_2 = AmBz*pAx2[14] + pAx2[26];
            double r_210_001_2 = AmBz*pAx2[15] + pAx2[34];
            double r_012_001_2 = AmBz*pAx2[16] + pAx2[28];
            double r_201_001_2 = AmBz*pAx2[17] + pAx2[30];
            double r_021_001_2 = AmBz*pAx2[18] + pAx2[31];
            double r_111_001_2 = AmBz*pAx2[19] + pAx2[32];
            double r_004_001_2 = AmBz*pAx2[22] + pAx2[37];
            double r_103_001_2 = AmBz*pAx2[26] + pAx2[39];
            double r_013_001_2 = AmBz*pAx2[28] + pAx2[41];
            double r_220_001_2 = AmBz*pAx2[29] + pAx2[55];
            double r_202_001_2 = AmBz*pAx2[30] + pAx2[48];
            double r_022_001_2 = AmBz*pAx2[31] + pAx2[49];
            double r_112_001_2 = AmBz*pAx2[32] + pAx2[52];
            double r_121_001_2 = AmBz*pAx2[33] + pAx2[53];
            double r_211_001_2 = AmBz*pAx2[34] + pAx2[54];
            double r_005_001_2 = AmBz*pAx2[37] + pAx2[58];
            double r_104_001_2 = AmBz*pAx2[39] + pAx2[62];
            double r_014_001_2 = AmBz*pAx2[41] + pAx2[64];
            double r_203_001_2 = AmBz*pAx2[48] + pAx2[68];
            double r_023_001_2 = AmBz*pAx2[49] + pAx2[70];
            double r_113_001_2 = AmBz*pAx2[52] + pAx2[74];
            double r_122_001_2 = AmBz*pAx2[53] + pAx2[80];
            double r_212_001_2 = AmBz*pAx2[54] + pAx2[82];
            double r_221_001_2 = AmBz*pAx2[55] + pAx2[83];
            double b_200 = AmBx*b_100 + r_100_100;
            double b_200_1 = AmBx*b_100_1 + r_100_100_1;
            double r_100_200_1 = AmBx*r_100_100_1 + r_200_100_1;
            double r_010_200_1 = AmBx*r_010_100_1 + r_110_100_1;
            double r_001_200_1 = AmBx*r_001_100_1 + r_101_100_1;
            double r_200_200_1 = AmBx*r_200_100_1 + r_300_100_1;
            double r_110_200_1 = AmBx*r_110_100_1 + r_210_100_1;
            double r_101_200_1 = AmBx*r_101_100_1 + r_201_100_1;
            double r_011_200_1 = AmBx*r_011_100_1 + r_111_100_1;
            double b_200_2 = AmBx*b_100_2 + r_100_100_2;
            double r_100_200_2 = AmBx*r_100_100_2 + r_200_100_2;
            double r_010_200_2 = AmBx*r_010_100_2 + r_110_100_2;
            double r_001_200_2 = AmBx*r_001_100_2 + r_101_100_2;
            double r_200_200_2 = AmBx*r_200_100_2 + r_300_100_2;
            double r_020_200_2 = AmBx*r_020_100_2 + r_120_100_2;
            double r_002_200_2 = AmBx*r_002_100_2 + r_102_100_2;
            double r_110_200_2 = AmBx*r_110_100_2 + r_210_100_2;
            double r_101_200_2 = AmBx*r_101_100_2 + r_201_100_2;
            double r_011_200_2 = AmBx*r_011_100_2 + r_111_100_2;
            double r_300_200_2 = AmBx*r_300_100_2 + r_400_100_2;
            double r_030_200_2 = AmBx*r_030_100_2 + r_130_100_2;
            double r_003_200_2 = AmBx*r_003_100_2 + r_103_100_2;
            double r_120_200_2 = AmBx*r_120_100_2 + r_220_100_2;
            double r_102_200_2 = AmBx*r_102_100_2 + r_202_100_2;
            double r_210_200_2 = AmBx*r_210_100_2 + r_310_100_2;
            double r_012_200_2 = AmBx*r_012_100_2 + r_112_100_2;
            double r_201_200_2 = AmBx*r_201_100_2 + r_301_100_2;
            double r_021_200_2 = AmBx*r_021_100_2 + r_121_100_2;
            double r_111_200_2 = AmBx*r_111_100_2 + r_211_100_2;
            double r_400_200_2 = AmBx*r_400_100_2 + r_500_100_2;
            double r_310_200_2 = AmBx*r_310_100_2 + r_410_100_2;
            double r_130_200_2 = AmBx*r_130_100_2 + r_230_100_2;
            double r_301_200_2 = AmBx*r_301_100_2 + r_401_100_2;
            double r_103_200_2 = AmBx*r_103_100_2 + r_203_100_2;
            double r_220_200_2 = AmBx*r_220_100_2 + r_320_100_2;
            double r_202_200_2 = AmBx*r_202_100_2 + r_302_100_2;
            double r_112_200_2 = AmBx*r_112_100_2 + r_212_100_2;
            double r_121_200_2 = AmBx*r_121_100_2 + r_221_100_2;
            double r_211_200_2 = AmBx*r_211_100_2 + r_311_100_2;
            double b_020 = AmBy*b_010 + r_010_010;
            double b_020_1 = AmBy*b_010_1 + r_010_010_1;
            double r_100_020_1 = AmBy*r_100_010_1 + r_110_010_1;
            double r_010_020_1 = AmBy*r_010_010_1 + r_020_010_1;
            double r_001_020_1 = AmBy*r_001_010_1 + r_011_010_1;
            double r_200_020_1 = AmBy*r_200_010_1 + r_210_010_1;
            double r_020_020_1 = AmBy*r_020_010_1 + r_030_010_1;
            double r_110_020_1 = AmBy*r_110_010_1 + r_120_010_1;
            double r_101_020_1 = AmBy*r_101_010_1 + r_111_010_1;
            double r_011_020_1 = AmBy*r_011_010_1 + r_021_010_1;
            double b_020_2 = AmBy*b_010_2 + r_010_010_2;
            double r_100_020_2 = AmBy*r_100_010_2 + r_110_010_2;
            double r_010_020_2 = AmBy*r_010_010_2 + r_020_010_2;
            double r_001_020_2 = AmBy*r_001_010_2 + r_011_010_2;
            double r_200_020_2 = AmBy*r_200_010_2 + r_210_010_2;
            double r_020_020_2 = AmBy*r_020_010_2 + r_030_010_2;
            double r_002_020_2 = AmBy*r_002_010_2 + r_012_010_2;
            double r_110_020_2 = AmBy*r_110_010_2 + r_120_010_2;
            double r_101_020_2 = AmBy*r_101_010_2 + r_111_010_2;
            double r_011_020_2 = AmBy*r_011_010_2 + r_021_010_2;
            double r_030_020_2 = AmBy*r_030_010_2 + r_040_010_2;
            double r_003_020_2 = AmBy*r_003_010_2 + r_013_010_2;
            double r_120_020_2 = AmBy*r_120_010_2 + r_130_010_2;
            double r_102_020_2 = AmBy*r_102_010_2 + r_112_010_2;
            double r_210_020_2 = AmBy*r_210_010_2 + r_220_010_2;
            double r_012_020_2 = AmBy*r_012_010_2 + r_022_010_2;
            double r_201_020_2 = AmBy*r_201_010_2 + r_211_010_2;
            double r_021_020_2 = AmBy*r_021_010_2 + r_031_010_2;
            double r_111_020_2 = AmBy*r_111_010_2 + r_121_010_2;
            double r_040_020_2 = AmBy*r_040_010_2 + r_050_010_2;
            double r_130_020_2 = AmBy*r_130_010_2 + r_140_010_2;
            double r_031_020_2 = AmBy*r_031_010_2 + r_041_010_2;
            double r_013_020_2 = AmBy*r_013_010_2 + r_023_010_2;
            double r_220_020_2 = AmBy*r_220_010_2 + r_230_010_2;
            double r_022_020_2 = AmBy*r_022_010_2 + r_032_010_2;
            double r_112_020_2 = AmBy*r_112_010_2 + r_122_010_2;
            double r_121_020_2 = AmBy*r_121_010_2 + r_131_010_2;
            double r_211_020_2 = AmBy*r_211_010_2 + r_221_010_2;
            double b_002 = AmBz*b_001 + r_001_001;
            double b_002_1 = AmBz*b_001_1 + r_001_001_1;
            double r_100_002_1 = AmBz*r_100_001_1 + r_101_001_1;
            double r_010_002_1 = AmBz*r_010_001_1 + r_011_001_1;
            double r_001_002_1 = AmBz*r_001_001_1 + r_002_001_1;
            double r_200_002_1 = AmBz*r_200_001_1 + r_201_001_1;
            double r_020_002_1 = AmBz*r_020_001_1 + r_021_001_1;
            double r_002_002_1 = AmBz*r_002_001_1 + r_003_001_1;
            double r_110_002_1 = AmBz*r_110_001_1 + r_111_001_1;
            double r_101_002_1 = AmBz*r_101_001_1 + r_102_001_1;
            double r_011_002_1 = AmBz*r_011_001_1 + r_012_001_1;
            double b_002_2 = AmBz*b_001_2 + r_001_001_2;
            double r_100_002_2 = AmBz*r_100_001_2 + r_101_001_2;
            double r_010_002_2 = AmBz*r_010_001_2 + r_011_001_2;
            double r_001_002_2 = AmBz*r_001_001_2 + r_002_001_2;
            double r_200_002_2 = AmBz*r_200_001_2 + r_201_001_2;
            double r_020_002_2 = AmBz*r_020_001_2 + r_021_001_2;
            double r_002_002_2 = AmBz*r_002_001_2 + r_003_001_2;
            double r_110_002_2 = AmBz*r_110_001_2 + r_111_001_2;
            double r_101_002_2 = AmBz*r_101_001_2 + r_102_001_2;
            double r_011_002_2 = AmBz*r_011_001_2 + r_012_001_2;
            double r_003_002_2 = AmBz*r_003_001_2 + r_004_001_2;
            double r_120_002_2 = AmBz*r_120_001_2 + r_121_001_2;
            double r_102_002_2 = AmBz*r_102_001_2 + r_103_001_2;
            double r_210_002_2 = AmBz*r_210_001_2 + r_211_001_2;
            double r_012_002_2 = AmBz*r_012_001_2 + r_013_001_2;
            double r_201_002_2 = AmBz*r_201_001_2 + r_202_001_2;
            double r_021_002_2 = AmBz*r_021_001_2 + r_022_001_2;
            double r_111_002_2 = AmBz*r_111_001_2 + r_112_001_2;
            double r_004_002_2 = AmBz*r_004_001_2 + r_005_001_2;
            double r_103_002_2 = AmBz*r_103_001_2 + r_104_001_2;
            double r_013_002_2 = AmBz*r_013_001_2 + r_014_001_2;
            double r_220_002_2 = AmBz*r_220_001_2 + r_221_001_2;
            double r_202_002_2 = AmBz*r_202_001_2 + r_203_001_2;
            double r_022_002_2 = AmBz*r_022_001_2 + r_023_001_2;
            double r_112_002_2 = AmBz*r_112_001_2 + r_113_001_2;
            double r_121_002_2 = AmBz*r_121_001_2 + r_122_001_2;
            double r_211_002_2 = AmBz*r_211_001_2 + r_212_001_2;
            double b_110 = AmBy*b_100 + r_010_100;
            double b_101 = AmBz*b_100 + r_001_100;
            double b_011 = AmBz*b_010 + r_001_010;
            double b_300_1 = AmBx*b_200_1 + r_100_200_1;
            double r_100_300_1 = AmBx*r_100_200_1 + r_200_200_1;
            double r_010_300_1 = AmBx*r_010_200_1 + r_110_200_1;
            double r_001_300_1 = AmBx*r_001_200_1 + r_101_200_1;
            double b_300_2 = AmBx*b_200_2 + r_100_200_2;
            double r_100_300_2 = AmBx*r_100_200_2 + r_200_200_2;
            double r_010_300_2 = AmBx*r_010_200_2 + r_110_200_2;
            double r_001_300_2 = AmBx*r_001_200_2 + r_101_200_2;
            double r_200_300_2 = AmBx*r_200_200_2 + r_300_200_2;
            double r_020_300_2 = AmBx*r_020_200_2 + r_120_200_2;
            double r_002_300_2 = AmBx*r_002_200_2 + r_102_200_2;
            double r_110_300_2 = AmBx*r_110_200_2 + r_210_200_2;
            double r_101_300_2 = AmBx*r_101_200_2 + r_201_200_2;
            double r_011_300_2 = AmBx*r_011_200_2 + r_111_200_2;
            double r_300_300_2 = AmBx*r_300_200_2 + r_400_200_2;
            double r_030_300_2 = AmBx*r_030_200_2 + r_130_200_2;
            double r_003_300_2 = AmBx*r_003_200_2 + r_103_200_2;
            double r_120_300_2 = AmBx*r_120_200_2 + r_220_200_2;
            double r_102_300_2 = AmBx*r_102_200_2 + r_202_200_2;
            double r_210_300_2 = AmBx*r_210_200_2 + r_310_200_2;
            double r_012_300_2 = AmBx*r_012_200_2 + r_112_200_2;
            double r_201_300_2 = AmBx*r_201_200_2 + r_301_200_2;
            double r_021_300_2 = AmBx*r_021_200_2 + r_121_200_2;
            double r_111_300_2 = AmBx*r_111_200_2 + r_211_200_2;
            double b_030_1 = AmBy*b_020_1 + r_010_020_1;
            double r_100_030_1 = AmBy*r_100_020_1 + r_110_020_1;
            double r_010_030_1 = AmBy*r_010_020_1 + r_020_020_1;
            double r_001_030_1 = AmBy*r_001_020_1 + r_011_020_1;
            double b_030_2 = AmBy*b_020_2 + r_010_020_2;
            double r_100_030_2 = AmBy*r_100_020_2 + r_110_020_2;
            double r_010_030_2 = AmBy*r_010_020_2 + r_020_020_2;
            double r_001_030_2 = AmBy*r_001_020_2 + r_011_020_2;
            double r_200_030_2 = AmBy*r_200_020_2 + r_210_020_2;
            double r_020_030_2 = AmBy*r_020_020_2 + r_030_020_2;
            double r_002_030_2 = AmBy*r_002_020_2 + r_012_020_2;
            double r_110_030_2 = AmBy*r_110_020_2 + r_120_020_2;
            double r_101_030_2 = AmBy*r_101_020_2 + r_111_020_2;
            double r_011_030_2 = AmBy*r_011_020_2 + r_021_020_2;
            double r_030_030_2 = AmBy*r_030_020_2 + r_040_020_2;
            double r_003_030_2 = AmBy*r_003_020_2 + r_013_020_2;
            double r_120_030_2 = AmBy*r_120_020_2 + r_130_020_2;
            double r_102_030_2 = AmBy*r_102_020_2 + r_112_020_2;
            double r_210_030_2 = AmBy*r_210_020_2 + r_220_020_2;
            double r_012_030_2 = AmBy*r_012_020_2 + r_022_020_2;
            double r_201_030_2 = AmBy*r_201_020_2 + r_211_020_2;
            double r_021_030_2 = AmBy*r_021_020_2 + r_031_020_2;
            double r_111_030_2 = AmBy*r_111_020_2 + r_121_020_2;
            double b_003_1 = AmBz*b_002_1 + r_001_002_1;
            double r_100_003_1 = AmBz*r_100_002_1 + r_101_002_1;
            double r_010_003_1 = AmBz*r_010_002_1 + r_011_002_1;
            double r_001_003_1 = AmBz*r_001_002_1 + r_002_002_1;
            double b_003_2 = AmBz*b_002_2 + r_001_002_2;
            double r_100_003_2 = AmBz*r_100_002_2 + r_101_002_2;
            double r_010_003_2 = AmBz*r_010_002_2 + r_011_002_2;
            double r_001_003_2 = AmBz*r_001_002_2 + r_002_002_2;
            double r_200_003_2 = AmBz*r_200_002_2 + r_201_002_2;
            double r_020_003_2 = AmBz*r_020_002_2 + r_021_002_2;
            double r_002_003_2 = AmBz*r_002_002_2 + r_003_002_2;
            double r_110_003_2 = AmBz*r_110_002_2 + r_111_002_2;
            double r_101_003_2 = AmBz*r_101_002_2 + r_102_002_2;
            double r_011_003_2 = AmBz*r_011_002_2 + r_012_002_2;
            double r_003_003_2 = AmBz*r_003_002_2 + r_004_002_2;
            double r_120_003_2 = AmBz*r_120_002_2 + r_121_002_2;
            double r_102_003_2 = AmBz*r_102_002_2 + r_103_002_2;
            double r_210_003_2 = AmBz*r_210_002_2 + r_211_002_2;
            double r_012_003_2 = AmBz*r_012_002_2 + r_013_002_2;
            double r_201_003_2 = AmBz*r_201_002_2 + r_202_002_2;
            double r_021_003_2 = AmBz*r_021_002_2 + r_022_002_2;
            double r_111_003_2 = AmBz*r_111_002_2 + r_112_002_2;
            double b_120_1 = AmBx*b_020_1 + r_100_020_1;
            double r_100_120_1 = AmBx*r_100_020_1 + r_200_020_1;
            double r_001_120_1 = AmBx*r_001_020_1 + r_101_020_1;
            double b_102_1 = AmBx*b_002_1 + r_100_002_1;
            double r_100_102_1 = AmBx*r_100_002_1 + r_200_002_1;
            double r_010_102_1 = AmBx*r_010_002_1 + r_110_002_1;
            double b_210_1 = AmBy*b_200_1 + r_010_200_1;
            double r_001_210_1 = AmBy*r_001_200_1 + r_011_200_1;
            double b_012_1 = AmBy*b_002_1 + r_010_002_1;
            double r_010_012_1 = AmBy*r_010_002_1 + r_020_002_1;
            double b_012_2 = AmBy*b_002_2 + r_010_002_2;
            double r_100_012_2 = AmBy*r_100_002_2 + r_110_002_2;
            double r_010_012_2 = AmBy*r_010_002_2 + r_020_002_2;
            double r_200_012_2 = AmBy*r_200_002_2 + r_210_002_2;
            double r_110_012_2 = AmBy*r_110_002_2 + r_120_002_2;
            double r_210_012_2 = AmBy*r_210_002_2 + r_220_002_2;
            double b_400_1 = AmBx*b_300_1 + r_100_300_1;
            double b_400_2 = AmBx*b_300_2 + r_100_300_2;
            double r_100_400_2 = AmBx*r_100_300_2 + r_200_300_2;
            double r_010_400_2 = AmBx*r_010_300_2 + r_110_300_2;
            double r_001_400_2 = AmBx*r_001_300_2 + r_101_300_2;
            double r_200_400_2 = AmBx*r_200_300_2 + r_300_300_2;
            double r_020_400_2 = AmBx*r_020_300_2 + r_120_300_2;
            double r_002_400_2 = AmBx*r_002_300_2 + r_102_300_2;
            double r_110_400_2 = AmBx*r_110_300_2 + r_210_300_2;
            double r_101_400_2 = AmBx*r_101_300_2 + r_201_300_2;
            double r_011_400_2 = AmBx*r_011_300_2 + r_111_300_2;
            double b_040_1 = AmBy*b_030_1 + r_010_030_1;
            double b_040_2 = AmBy*b_030_2 + r_010_030_2;
            double r_100_040_2 = AmBy*r_100_030_2 + r_110_030_2;
            double r_010_040_2 = AmBy*r_010_030_2 + r_020_030_2;
            double r_001_040_2 = AmBy*r_001_030_2 + r_011_030_2;
            double r_200_040_2 = AmBy*r_200_030_2 + r_210_030_2;
            double r_020_040_2 = AmBy*r_020_030_2 + r_030_030_2;
            double r_002_040_2 = AmBy*r_002_030_2 + r_012_030_2;
            double r_110_040_2 = AmBy*r_110_030_2 + r_120_030_2;
            double r_101_040_2 = AmBy*r_101_030_2 + r_111_030_2;
            double r_011_040_2 = AmBy*r_011_030_2 + r_021_030_2;
            double b_004_1 = AmBz*b_003_1 + r_001_003_1;
            double b_004_2 = AmBz*b_003_2 + r_001_003_2;
            double r_100_004_2 = AmBz*r_100_003_2 + r_101_003_2;
            double r_010_004_2 = AmBz*r_010_003_2 + r_011_003_2;
            double r_001_004_2 = AmBz*r_001_003_2 + r_002_003_2;
            double r_200_004_2 = AmBz*r_200_003_2 + r_201_003_2;
            double r_020_004_2 = AmBz*r_020_003_2 + r_021_003_2;
            double r_002_004_2 = AmBz*r_002_003_2 + r_003_003_2;
            double r_110_004_2 = AmBz*r_110_003_2 + r_111_003_2;
            double r_101_004_2 = AmBz*r_101_003_2 + r_102_003_2;
            double r_011_004_2 = AmBz*r_011_003_2 + r_012_003_2;
            double b_310_1 = AmBy*b_300_1 + r_010_300_1;
            double b_310_2 = AmBy*b_300_2 + r_010_300_2;
            double r_010_310_2 = AmBy*r_010_300_2 + r_020_300_2;
            double r_001_310_2 = AmBy*r_001_300_2 + r_011_300_2;
            double r_020_310_2 = AmBy*r_020_300_2 + r_030_300_2;
            double r_011_310_2 = AmBy*r_011_300_2 + r_021_300_2;
            double b_130_1 = AmBx*b_030_1 + r_100_030_1;
            double b_130_2 = AmBx*b_030_2 + r_100_030_2;
            double r_100_130_2 = AmBx*r_100_030_2 + r_200_030_2;
            double r_001_130_2 = AmBx*r_001_030_2 + r_101_030_2;
            double r_101_130_2 = AmBx*r_101_030_2 + r_201_030_2;
            double b_301_1 = AmBz*b_300_1 + r_001_300_1;
            double b_301_2 = AmBz*b_300_2 + r_001_300_2;
            double r_010_301_2 = AmBz*r_010_300_2 + r_011_300_2;
            double r_001_301_2 = AmBz*r_001_300_2 + r_002_300_2;
            double r_002_301_2 = AmBz*r_002_300_2 + r_003_300_2;
            double r_011_301_2 = AmBz*r_011_300_2 + r_012_300_2;
            double b_103_1 = AmBx*b_003_1 + r_100_003_1;
            double b_103_2 = AmBx*b_003_2 + r_100_003_2;
            double r_100_103_2 = AmBx*r_100_003_2 + r_200_003_2;
            double r_010_103_2 = AmBx*r_010_003_2 + r_110_003_2;
            double r_110_103_2 = AmBx*r_110_003_2 + r_210_003_2;
            double b_031_1 = AmBz*b_030_1 + r_001_030_1;
            double b_031_2 = AmBz*b_030_2 + r_001_030_2;
            double r_100_031_2 = AmBz*r_100_030_2 + r_101_030_2;
            double r_001_031_2 = AmBz*r_001_030_2 + r_002_030_2;
            double r_002_031_2 = AmBz*r_002_030_2 + r_003_030_2;
            double r_101_031_2 = AmBz*r_101_030_2 + r_102_030_2;
            double b_013_1 = AmBy*b_003_1 + r_010_003_1;
            double b_013_2 = AmBy*b_003_2 + r_010_003_2;
            double r_100_013_2 = AmBy*r_100_003_2 + r_110_003_2;
            double r_010_013_2 = AmBy*r_010_003_2 + r_020_003_2;
            double r_110_013_2 = AmBy*r_110_003_2 + r_120_003_2;
            double b_220_1 = AmBx*b_120_1 + r_100_120_1;
            double b_202_1 = AmBx*b_102_1 + r_100_102_1;
            double b_022_1 = AmBy*b_012_1 + r_010_012_1;
            double b_022_2 = AmBy*b_012_2 + r_010_012_2;
            double r_100_022_2 = AmBy*r_100_012_2 + r_110_012_2;
            double r_200_022_2 = AmBy*r_200_012_2 + r_210_012_2;
            double b_112_1 = AmBy*b_102_1 + r_010_102_1;
            double b_121_1 = AmBz*b_120_1 + r_001_120_1;
            double b_211_1 = AmBz*b_210_1 + r_001_210_1;
            double b_500_2 = AmBx*b_400_2 + r_100_400_2;
            double r_100_500_2 = AmBx*r_100_400_2 + r_200_400_2;
            double r_010_500_2 = AmBx*r_010_400_2 + r_110_400_2;
            double r_001_500_2 = AmBx*r_001_400_2 + r_101_400_2;
            double b_050_2 = AmBy*b_040_2 + r_010_040_2;
            double r_100_050_2 = AmBy*r_100_040_2 + r_110_040_2;
            double r_010_050_2 = AmBy*r_010_040_2 + r_020_040_2;
            double r_001_050_2 = AmBy*r_001_040_2 + r_011_040_2;
            double b_005_2 = AmBz*b_004_2 + r_001_004_2;
            double r_100_005_2 = AmBz*r_100_004_2 + r_101_004_2;
            double r_010_005_2 = AmBz*r_010_004_2 + r_011_004_2;
            double r_001_005_2 = AmBz*r_001_004_2 + r_002_004_2;
            double b_140_2 = AmBx*b_040_2 + r_100_040_2;
            double r_100_140_2 = AmBx*r_100_040_2 + r_200_040_2;
            double r_001_140_2 = AmBx*r_001_040_2 + r_101_040_2;
            double b_104_2 = AmBx*b_004_2 + r_100_004_2;
            double r_100_104_2 = AmBx*r_100_004_2 + r_200_004_2;
            double r_010_104_2 = AmBx*r_010_004_2 + r_110_004_2;
            double b_410_2 = AmBy*b_400_2 + r_010_400_2;
            double r_010_410_2 = AmBy*r_010_400_2 + r_020_400_2;
            double r_001_410_2 = AmBy*r_001_400_2 + r_011_400_2;
            double b_014_2 = AmBy*b_004_2 + r_010_004_2;
            double r_010_014_2 = AmBy*r_010_004_2 + r_020_004_2;
            double b_401_2 = AmBz*b_400_2 + r_001_400_2;
            double r_001_401_2 = AmBz*r_001_400_2 + r_002_400_2;
            double b_041_2 = AmBz*b_040_2 + r_001_040_2;
            double r_001_041_2 = AmBz*r_001_040_2 + r_002_040_2;
            double b_320_2 = AmBy*b_310_2 + r_010_310_2;
            double r_010_320_2 = AmBy*r_010_310_2 + r_020_310_2;
            double r_001_320_2 = AmBy*r_001_310_2 + r_011_310_2;
            double b_302_2 = AmBz*b_301_2 + r_001_301_2;
            double r_010_302_2 = AmBz*r_010_301_2 + r_011_301_2;
            double r_001_302_2 = AmBz*r_001_301_2 + r_002_301_2;
            double b_230_2 = AmBx*b_130_2 + r_100_130_2;
            double r_001_230_2 = AmBx*r_001_130_2 + r_101_130_2;
            double b_032_2 = AmBz*b_031_2 + r_001_031_2;
            double r_100_032_2 = AmBz*r_100_031_2 + r_101_031_2;
            double r_001_032_2 = AmBz*r_001_031_2 + r_002_031_2;
            double b_203_2 = AmBx*b_103_2 + r_100_103_2;
            double r_010_203_2 = AmBx*r_010_103_2 + r_110_103_2;
            double b_023_2 = AmBy*b_013_2 + r_010_013_2;
            double r_100_023_2 = AmBy*r_100_013_2 + r_110_013_2;
            double b_122_2 = AmBx*b_022_2 + r_100_022_2;
            double r_100_122_2 = AmBx*r_100_022_2 + r_200_022_2;
            double b_600_2 = AmBx*b_500_2 + r_100_500_2;
            double b_060_2 = AmBy*b_050_2 + r_010_050_2;
            double b_006_2 = AmBz*b_005_2 + r_001_005_2;
            double b_510_2 = AmBy*b_500_2 + r_010_500_2;
            double b_150_2 = AmBx*b_050_2 + r_100_050_2;
            double b_501_2 = AmBz*b_500_2 + r_001_500_2;
            double b_105_2 = AmBx*b_005_2 + r_100_005_2;
            double b_051_2 = AmBz*b_050_2 + r_001_050_2;
            double b_015_2 = AmBy*b_005_2 + r_010_005_2;
            double b_420_2 = AmBy*b_410_2 + r_010_410_2;
            double b_402_2 = AmBz*b_401_2 + r_001_401_2;
            double b_240_2 = AmBx*b_140_2 + r_100_140_2;
            double b_204_2 = AmBx*b_104_2 + r_100_104_2;
            double b_042_2 = AmBz*b_041_2 + r_001_041_2;
            double b_024_2 = AmBy*b_014_2 + r_010_014_2;
            double b_330_2 = AmBy*b_320_2 + r_010_320_2;
            double b_303_2 = AmBz*b_302_2 + r_001_302_2;
            double b_033_2 = AmBz*b_032_2 + r_001_032_2;
            double b_114_2 = AmBy*b_104_2 + r_010_104_2;
            double b_141_2 = AmBz*b_140_2 + r_001_140_2;
            double b_411_2 = AmBz*b_410_2 + r_001_410_2;
            double b_312_2 = AmBy*b_302_2 + r_010_302_2;
            double b_132_2 = AmBx*b_032_2 + r_100_032_2;
            double b_321_2 = AmBz*b_320_2 + r_001_320_2;
            double b_123_2 = AmBx*b_023_2 + r_100_023_2;
            double b_231_2 = AmBz*b_230_2 + r_001_230_2;
            double b_213_2 = AmBy*b_203_2 + r_010_203_2;
            double b_222_2 = AmBx*b_122_2 + r_100_122_2;
            double bx_300 = -3*b_200 + b_400_1;
            double bx_120 = -b_020 + b_220_1;
            double bx_102 = -b_002 + b_202_1;
            double bx_210 = -2*b_110 + b_310_1;
            double bx_201 = -2*b_101 + b_301_1;
            double bx_111 = -b_011 + b_211_1;
            double bx_500_1 = -5*b_400_1 + b_600_2;
            double bx_140_1 = -b_040_1 + b_240_2;
            double bx_104_1 = -b_004_1 + b_204_2;
            double bx_410_1 = -4*b_310_1 + b_510_2;
            double bx_401_1 = -4*b_301_1 + b_501_2;
            double bx_320_1 = -3*b_220_1 + b_420_2;
            double bx_302_1 = -3*b_202_1 + b_402_2;
            double bx_230_1 = -2*b_130_1 + b_330_2;
            double bx_203_1 = -2*b_103_1 + b_303_2;
            double bx_311_1 = -3*b_211_1 + b_411_2;
            double bx_131_1 = -b_031_1 + b_231_2;
            double bx_113_1 = -b_013_1 + b_213_2;
            double bx_122_1 = -b_022_1 + b_222_2;
            double bx_212_1 = -2*b_112_1 + b_312_2;
            double bx_221_1 = -2*b_121_1 + b_321_2;
            double by_030 = -3*b_020 + b_040_1;
            double by_120 = -2*b_110 + b_130_1;
            double by_210 = -b_200 + b_220_1;
            double by_012 = -b_002 + b_022_1;
            double by_021 = -2*b_011 + b_031_1;
            double by_111 = -b_101 + b_121_1;
            double by_050_1 = -5*b_040_1 + b_060_2;
            double by_140_1 = -4*b_130_1 + b_150_2;
            double by_410_1 = -b_400_1 + b_420_2;
            double by_014_1 = -b_004_1 + b_024_2;
            double by_041_1 = -4*b_031_1 + b_051_2;
            double by_320_1 = -2*b_310_1 + b_330_2;
            double by_230_1 = -3*b_220_1 + b_240_2;
            double by_032_1 = -3*b_022_1 + b_042_2;
            double by_023_1 = -2*b_013_1 + b_033_2;
            double by_311_1 = -b_301_1 + b_321_2;
            double by_131_1 = -3*b_121_1 + b_141_2;
            double by_113_1 = -b_103_1 + b_123_2;
            double by_122_1 = -2*b_112_1 + b_132_2;
            double by_212_1 = -b_202_1 + b_222_2;
            double by_221_1 = -2*b_211_1 + b_231_2;
            double bz_003 = -3*b_002 + b_004_1;
            double bz_102 = -2*b_101 + b_103_1;
            double bz_012 = -2*b_011 + b_013_1;
            double bz_201 = -b_200 + b_202_1;
            double bz_021 = -b_020 + b_022_1;
            double bz_111 = -b_110 + b_112_1;
            double bz_005_1 = -5*b_004_1 + b_006_2;
            double bz_104_1 = -4*b_103_1 + b_105_2;
            double bz_014_1 = -4*b_013_1 + b_015_2;
            double bz_401_1 = -b_400_1 + b_402_2;
            double bz_041_1 = -b_040_1 + b_042_2;
            double bz_302_1 = -2*b_301_1 + b_303_2;
            double bz_032_1 = -2*b_031_1 + b_033_2;
            double bz_203_1 = -3*b_202_1 + b_204_2;
            double bz_023_1 = -3*b_022_1 + b_024_2;
            double bz_311_1 = -b_310_1 + b_312_2;
            double bz_131_1 = -b_130_1 + b_132_2;
            double bz_113_1 = -3*b_112_1 + b_114_2;
            double bz_122_1 = -2*b_121_1 + b_123_2;
            double bz_212_1 = -2*b_211_1 + b_213_2;
            double bz_221_1 = -b_220_1 + b_222_2;
            double bxx_400 = -4*bx_300 + bx_500_1;
            double bxx_040 = bx_140_1;
            double bxx_004 = bx_104_1;
            double bxx_310 = -3*bx_210 + bx_410_1;
            double bxx_130 = -b_130_1 + bx_230_1;
            double bxx_301 = -3*bx_201 + bx_401_1;
            double bxx_103 = -b_103_1 + bx_203_1;
            double bxx_031 = bx_131_1;
            double bxx_013 = bx_113_1;
            double bxx_220 = -2*bx_120 + bx_320_1;
            double bxx_202 = -2*bx_102 + bx_302_1;
            double bxx_022 = bx_122_1;
            double bxx_112 = -b_112_1 + bx_212_1;
            double bxx_121 = -b_121_1 + bx_221_1;
            double bxx_211 = -2*bx_111 + bx_311_1;
            double byy_400 = by_410_1;
            double byy_040 = -4*by_030 + by_050_1;
            double byy_004 = by_014_1;
            double byy_310 = -b_310_1 + by_320_1;
            double byy_130 = -3*by_120 + by_140_1;
            double byy_301 = by_311_1;
            double byy_103 = by_113_1;
            double byy_031 = -3*by_021 + by_041_1;
            double byy_013 = -b_013_1 + by_023_1;
            double byy_220 = -2*by_210 + by_230_1;
            double byy_202 = by_212_1;
            double byy_022 = -2*by_012 + by_032_1;
            double byy_112 = -b_112_1 + by_122_1;
            double byy_121 = -2*by_111 + by_131_1;
            double byy_211 = -b_211_1 + by_221_1;
            double bzz_400 = bz_401_1;
            double bzz_040 = bz_041_1;
            double bzz_004 = -4*bz_003 + bz_005_1;
            double bzz_310 = bz_311_1;
            double bzz_130 = bz_131_1;
            double bzz_301 = -b_301_1 + bz_302_1;
            double bzz_103 = -3*bz_102 + bz_104_1;
            double bzz_031 = -b_031_1 + bz_032_1;
            double bzz_013 = -3*bz_012 + bz_014_1;
            double bzz_220 = bz_221_1;
            double bzz_202 = -2*bz_201 + bz_203_1;
            double bzz_022 = -2*bz_021 + bz_023_1;
            double bzz_112 = -2*bz_111 + bz_113_1;
            double bzz_121 = -b_121_1 + bz_122_1;
            double bzz_211 = -b_211_1 + bz_212_1;
            double bxy_400 = bx_410_1;
            double bxy_040 = -4*b_130_1 + b_150_2;
            double bxy_004 = b_114_2;
            double bxy_310 = -bx_300 + bx_320_1;
            double bxy_130 = -3*bx_120 + bx_140_1;
            double bxy_301 = bx_311_1;
            double bxy_103 = bx_113_1;
            double bxy_031 = -3*b_121_1 + b_141_2;
            double bxy_013 = -b_103_1 + b_123_2;
            double bxy_220 = -2*bx_210 + bx_230_1;
            double bxy_202 = bx_212_1;
            double bxy_022 = -2*b_112_1 + b_132_2;
            double bxy_112 = -bx_102 + bx_122_1;
            double bxy_121 = -2*bx_111 + bx_131_1;
            double bxy_211 = -bx_201 + bx_221_1;
            double bxz_400 = bx_401_1;
            double bxz_040 = b_141_2;
            double bxz_004 = -4*b_103_1 + b_105_2;
            double bxz_310 = bx_311_1;
            double bxz_130 = bx_131_1;
            double bxz_301 = -bx_300 + bx_302_1;
            double bxz_103 = -3*bx_102 + bx_104_1;
            double bxz_031 = -b_130_1 + b_132_2;
            double bxz_013 = -3*b_112_1 + b_114_2;
            double bxz_220 = bx_221_1;
            double bxz_202 = -2*bx_201 + bx_203_1;
            double bxz_022 = -2*b_121_1 + b_123_2;
            double bxz_112 = -2*bx_111 + bx_113_1;
            double bxz_121 = -bx_120 + bx_122_1;
            double bxz_211 = -bx_210 + bx_212_1;
            double byz_400 = b_411_2;
            double byz_040 = by_041_1;
            double byz_004 = -4*b_013_1 + b_015_2;
            double byz_310 = by_311_1;
            double byz_130 = by_131_1;
            double byz_301 = -b_310_1 + b_312_2;
            double byz_103 = -3*b_112_1 + b_114_2;
            double byz_031 = -by_030 + by_032_1;
            double byz_013 = -3*by_012 + by_014_1;
            double byz_220 = by_221_1;
            double byz_202 = -2*b_211_1 + b_213_2;
            double byz_022 = -2*by_021 + by_023_1;
            double byz_112 = -2*by_111 + by_113_1;
            double byz_121 = -by_120 + by_122_1;
            double byz_211 = -by_210 + by_212_1;
            // 7.41 steps per component, 5.21 kb stack
            pOut_[sb*0 + sd*0] = bxx_004 - bxx_022*sdc + bxx_040*sda - bxx_202*sdc + bxx_220*sdb + bxx_400*sda;
            pOut_[sb*0 + sd*1] = byy_004 - byy_022*sdc + byy_040*sda - byy_202*sdc + byy_220*sdb + byy_400*sda;
            pOut_[sb*0 + sd*2] = bzz_004 - bzz_022*sdc + bzz_040*sda - bzz_202*sdc + bzz_220*sdb + bzz_400*sda;
            pOut_[sb*0 + sd*3] = bxy_004 - bxy_022*sdc + bxy_040*sda - bxy_202*sdc + bxy_220*sdb + bxy_400*sda;
            pOut_[sb*0 + sd*4] = bxz_004 - bxz_022*sdc + bxz_040*sda - bxz_202*sdc + bxz_220*sdb + bxz_400*sda;
            pOut_[sb*0 + sd*5] = byz_004 - byz_022*sdc + byz_040*sda - byz_202*sdc + byz_220*sdb + byz_400*sda;
            pOut_[sb*1 + sd*0] = bxx_112*sde - bxx_130*sdd - bxx_310*sdd;
            pOut_[sb*1 + sd*1] = byy_112*sde - byy_130*sdd - byy_310*sdd;
            pOut_[sb*1 + sd*2] = bzz_112*sde - bzz_130*sdd - bzz_310*sdd;
            pOut_[sb*1 + sd*3] = bxy_112*sde - bxy_130*sdd - bxy_310*sdd;
            pOut_[sb*1 + sd*4] = bxz_112*sde - bxz_130*sdd - bxz_310*sdd;
            pOut_[sb*1 + sd*5] = byz_112*sde - byz_130*sdd - byz_310*sdd;
            pOut_[sb*2 + sd*0] = bxx_103*sdf - bxx_121*sd7 - bxx_301*sd7;
            pOut_[sb*2 + sd*1] = byy_103*sdf - byy_121*sd7 - byy_301*sd7;
            pOut_[sb*2 + sd*2] = bzz_103*sdf - bzz_121*sd7 - bzz_301*sd7;
            pOut_[sb*2 + sd*3] = bxy_103*sdf - bxy_121*sd7 - bxy_301*sd7;
            pOut_[sb*2 + sd*4] = bxz_103*sdf - bxz_121*sd7 - bxz_301*sd7;
            pOut_[sb*2 + sd*5] = byz_103*sdf - byz_121*sd7 - byz_301*sd7;
            pOut_[sb*3 + sd*0] = bxx_040*sd10 - bxx_220*sd11 + bxx_400*sd10;
            pOut_[sb*3 + sd*1] = byy_040*sd10 - byy_220*sd11 + byy_400*sd10;
            pOut_[sb*3 + sd*2] = bzz_040*sd10 - bzz_220*sd11 + bzz_400*sd10;
            pOut_[sb*3 + sd*3] = bxy_040*sd10 - bxy_220*sd11 + bxy_400*sd10;
            pOut_[sb*3 + sd*4] = bxz_040*sd10 - bxz_220*sd11 + bxz_400*sd10;
            pOut_[sb*3 + sd*5] = byz_040*sd10 - byz_220*sd11 + byz_400*sd10;
            pOut_[sb*4 + sd*0] = bxx_013*sdf - bxx_031*sd7 - bxx_211*sd7;
            pOut_[sb*4 + sd*1] = byy_013*sdf - byy_031*sd7 - byy_211*sd7;
            pOut_[sb*4 + sd*2] = bzz_013*sdf - bzz_031*sd7 - bzz_211*sd7;
            pOut_[sb*4 + sd*3] = bxy_013*sdf - bxy_031*sd7 - bxy_211*sd7;
            pOut_[sb*4 + sd*4] = bxz_013*sdf - bxz_031*sd7 - bxz_211*sd7;
            pOut_[sb*4 + sd*5] = byz_013*sdf - byz_031*sd7 - byz_211*sd7;
            pOut_[sb*5 + sd*0] = -bxx_022*sd13 + bxx_040*sd12 + bxx_202*sd13 - bxx_400*sd12;
            pOut_[sb*5 + sd*1] = -byy_022*sd13 + byy_040*sd12 + byy_202*sd13 - byy_400*sd12;
            pOut_[sb*5 + sd*2] = -bzz_022*sd13 + bzz_040*sd12 + bzz_202*sd13 - bzz_400*sd12;
            pOut_[sb*5 + sd*3] = -bxy_022*sd13 + bxy_040*sd12 + bxy_202*sd13 - bxy_400*sd12;
            pOut_[sb*5 + sd*4] = -bxz_022*sd13 + bxz_040*sd12 + bxz_202*sd13 - bxz_400*sd12;
            pOut_[sb*5 + sd*5] = -byz_022*sd13 + byz_040*sd12 + byz_202*sd13 - byz_400*sd12;
            pOut_[sb*6 + sd*0] = -bxx_130*sd14 + bxx_310*sd14;
            pOut_[sb*6 + sd*1] = -byy_130*sd14 + byy_310*sd14;
            pOut_[sb*6 + sd*2] = -bzz_130*sd14 + bzz_310*sd14;
            pOut_[sb*6 + sd*3] = -bxy_130*sd14 + bxy_310*sd14;
            pOut_[sb*6 + sd*4] = -bxz_130*sd14 + bxz_310*sd14;
            pOut_[sb*6 + sd*5] = -byz_130*sd14 + byz_310*sd14;
            pOut_[sb*7 + sd*0] = -bxx_121*sd16 + bxx_301*sd15;
            pOut_[sb*7 + sd*1] = -byy_121*sd16 + byy_301*sd15;
            pOut_[sb*7 + sd*2] = -bzz_121*sd16 + bzz_301*sd15;
            pOut_[sb*7 + sd*3] = -bxy_121*sd16 + bxy_301*sd15;
            pOut_[sb*7 + sd*4] = -bxz_121*sd16 + bxz_301*sd15;
            pOut_[sb*7 + sd*5] = -byz_121*sd16 + byz_301*sd15;
            pOut_[sb*8 + sd*0] = -bxx_031*sd15 + bxx_211*sd16;
            pOut_[sb*8 + sd*1] = -byy_031*sd15 + byy_211*sd16;
            pOut_[sb*8 + sd*2] = -bzz_031*sd15 + bzz_211*sd16;
            pOut_[sb*8 + sd*3] = -bxy_031*sd15 + bxy_211*sd16;
            pOut_[sb*8 + sd*4] = -bxz_031*sd15 + bxz_211*sd16;
            pOut_[sb*8 + sd*5] = -byz_031*sd15 + byz_211*sd16;
         }
         return;
      }
      case 5: {
         for (size_t ia = 0; ia < nCount; ++ ia) {
            double const * pAx0 = p0Z + 20 * ia;
            double const * pAx1 = p2Z + 56 * ia;
            double const * pAx2 = p4Z + 120 * ia;
            double * pOut_ = pOut + sa * ia;
            double b_100 = AmBx*pAx0[0] + pAx0[1];
            double r_100_100 = AmBx*pAx0[1] + pAx0[4];
            double r_010_100 = AmBx*pAx0[2] + pAx0[7];
            double r_001_100 = AmBx*pAx0[3] + pAx0[8];
            double r_200_100 = AmBx*pAx0[4] + pAx0[10];
            double r_110_100 = AmBx*pAx0[7] + pAx0[15];
            double r_101_100 = AmBx*pAx0[8] + pAx0[17];
            double r_011_100 = AmBx*pAx0[9] + pAx0[19];
            double b_100_1 = AmBx*pAx1[0] + pAx1[1];
            double r_100_100_1 = AmBx*pAx1[1] + pAx1[4];
            double r_010_100_1 = AmBx*pAx1[2] + pAx1[7];
            double r_001_100_1 = AmBx*pAx1[3] + pAx1[8];
            double r_200_100_1 = AmBx*pAx1[4] + pAx1[10];
            double r_020_100_1 = AmBx*pAx1[5] + pAx1[13];
            double r_002_100_1 = AmBx*pAx1[6] + pAx1[14];
            double r_110_100_1 = AmBx*pAx1[7] + pAx1[15];
            double r_101_100_1 = AmBx*pAx1[8] + pAx1[17];
            double r_011_100_1 = AmBx*pAx1[9] + pAx1[19];
            double r_300_100_1 = AmBx*pAx1[10] + pAx1[20];
            double r_120_100_1 = AmBx*pAx1[13] + pAx1[29];
            double r_102_100_1 = AmBx*pAx1[14] + pAx1[30];
            double r_210_100_1 = AmBx*pAx1[15] + pAx1[23];
            double r_201_100_1 = AmBx*pAx1[17] + pAx1[25];
            double r_111_100_1 = AmBx*pAx1[19] + pAx1[34];
            double r_400_100_1 = AmBx*pAx1[20] + pAx1[35];
            double r_310_100_1 = AmBx*pAx1[23] + pAx1[40];
            double r_301_100_1 = AmBx*pAx1[25] + pAx1[42];
            double r_220_100_1 = AmBx*pAx1[29] + pAx1[44];
            double r_202_100_1 = AmBx*pAx1[30] + pAx1[45];
            double r_211_100_1 = AmBx*pAx1[34] + pAx1[50];
            double b_100_2 = AmBx*pAx2[0] + pAx2[1];
            double r_100_100_2 = AmBx*pAx2[1] + pAx2[4];
            double r_010_100_2 = AmBx*pAx2[2] + pAx2[7];
            double r_001_100_2 = AmBx*pAx2[3] + pAx2[8];
            double r_200_100_2 = AmBx*pAx2[4] + pAx2[10];
            double r_020_100_2 = AmBx*pAx2[5] + pAx2[13];
            double r_002_100_2 = AmBx*pAx2[6] + pAx2[14];
            double r_110_100_2 = AmBx*pAx2[7] + pAx2[15];
            double r_101_100_2 = AmBx*pAx2[8] + pAx2[17];
            double r_011_100_2 = AmBx*pAx2[9] + pAx2[19];
            double r_300_100_2 = AmBx*pAx2[10] + pAx2[20];
            double r_030_100_2 = AmBx*pAx2[11] + pAx2[24];
            double r_003_100_2 = AmBx*pAx2[12] + pAx2[26];
            double r_120_100_2 = AmBx*pAx2[13] + pAx2[29];
            double r_102_100_2 = AmBx*pAx2[14] + pAx2[30];
            double r_210_100_2 = AmBx*pAx2[15] + pAx2[23];
            double r_012_100_2 = AmBx*pAx2[16] + pAx2[32];
            double r_201_100_2 = AmBx*pAx2[17] + pAx2[25];
            double r_021_100_2 = AmBx*pAx2[18] + pAx2[33];
            double r_111_100_2 = AmBx*pAx2[19] + pAx2[34];
            double r_400_100_2 = AmBx*pAx2[20] + pAx2[35];
            double r_310_100_2 = AmBx*pAx2[23] + pAx2[40];
            double r_130_100_2 = AmBx*pAx2[24] + pAx2[46];
            double r_301_100_2 = AmBx*pAx2[25] + pAx2[42];
            double r_103_100_2 = AmBx*pAx2[26] + pAx2[48];
            double r_031_100_2 = AmBx*pAx2[27] + pAx2[51];
            double r_013_100_2 = AmBx*pAx2[28] + pAx2[52];
            double r_220_100_2 = AmBx*pAx2[29] + pAx2[44];
            double r_202_100_2 = AmBx*pAx2[30] + pAx2[45];
            double r_022_100_2 = AmBx*pAx2[31] + pAx2[53];
            double r_112_100_2 = AmBx*pAx2[32] + pAx2[54];
            double r_121_100_2 = AmBx*pAx2[33] + pAx2[55];
            double r_211_100_2 = AmBx*pAx2[34] + pAx2[50];
            double r_500_100_2 = AmBx*pAx2[35] + pAx2[56];
            double r_410_100_2 = AmBx*pAx2[40] + pAx2[59];
            double r_401_100_2 = AmBx*pAx2[42] + pAx2[61];
            double r_320_100_2 = AmBx*pAx2[44] + pAx2[65];
            double r_302_100_2 = AmBx*pAx2[45] + pAx2[66];
            double r_230_100_2 = AmBx*pAx2[46] + pAx2[71];
            double r_203_100_2 = AmBx*pAx2[48] + pAx2[72];
            double r_311_100_2 = AmBx*pAx2[50] + pAx2[76];
            double r_131_100_2 = AmBx*pAx2[51] + pAx2[81];
            double r_113_100_2 = AmBx*pAx2[52] + pAx2[82];
            double r_122_100_2 = AmBx*pAx2[53] + pAx2[83];
            double r_212_100_2 = AmBx*pAx2[54] + pAx2[77];
            double r_221_100_2 = AmBx*pAx2[55] + pAx2[79];
            double r_600_100_2 = AmBx*pAx2[56] + pAx2[84];
            double r_510_100_2 = AmBx*pAx2[59] + pAx2[89];
            double r_501_100_2 = AmBx*pAx2[61] + pAx2[91];
            double r_420_100_2 = AmBx*pAx2[65] + pAx2[93];
            double r_402_100_2 = AmBx*pAx2[66] + pAx2[94];
            double r_330_100_2 = AmBx*pAx2[71] + pAx2[101];
            double r_303_100_2 = AmBx*pAx2[72] + pAx2[103];
            double r_411_100_2 = AmBx*pAx2[76] + pAx2[105];
            double r_312_100_2 = AmBx*pAx2[77] + pAx2[110];
            double r_321_100_2 = AmBx*pAx2[79] + pAx2[112];
            double r_231_100_2 = AmBx*pAx2[81] + pAx2[114];
            double r_213_100_2 = AmBx*pAx2[82] + pAx2[115];
            double r_222_100_2 = AmBx*pAx2[83] + pAx2[117];
            double b_010 = AmBy*pAx0[0] + pAx0[2];
            double r_100_010 = AmBy*pAx0[1] + pAx0[7];
            double r_010_010 = AmBy*pAx0[2] + pAx0[5];
            double r_001_010 = AmBy*pAx0[3] + pAx0[9];
            double r_020_010 = AmBy*pAx0[5] + pAx0[11];
            double r_110_010 = AmBy*pAx0[7] + pAx0[13];
            double r_011_010 = AmBy*pAx0[9] + pAx0[18];
            double b_010_1 = AmBy*pAx1[0] + pAx1[2];
            double r_100_010_1 = AmBy*pAx1[1] + pAx1[7];
            double r_010_010_1 = AmBy*pAx1[2] + pAx1[5];
            double r_001_010_1 = AmBy*pAx1[3] + pAx1[9];
            double r_200_010_1 = AmBy*pAx1[4] + pAx1[15];
            double r_020_010_1 = AmBy*pAx1[5] + pAx1[11];
            double r_002_010_1 = AmBy*pAx1[6] + pAx1[16];
            double r_110_010_1 = AmBy*pAx1[7] + pAx1[13];
            double r_101_010_1 = AmBy*pAx1[8] + pAx1[19];
            double r_011_010_1 = AmBy*pAx1[9] + pAx1[18];
            double r_030_010_1 = AmBy*pAx1[11] + pAx1[21];
            double r_120_010_1 = AmBy*pAx1[13] + pAx1[24];
            double r_210_010_1 = AmBy*pAx1[15] + pAx1[29];
            double r_012_010_1 = AmBy*pAx1[16] + pAx1[31];
            double r_201_010_1 = AmBy*pAx1[17] + pAx1[34];
            double r_021_010_1 = AmBy*pAx1[18] + pAx1[27];
            double r_111_010_1 = AmBy*pAx1[19] + pAx1[33];
            double r_040_010_1 = AmBy*pAx1[21] + pAx1[36];
            double r_130_010_1 = AmBy*pAx1[24] + pAx1[38];
            double r_031_010_1 = AmBy*pAx1[27] + pAx1[43];
            double r_220_010_1 = AmBy*pAx1[29] + pAx1[46];
            double r_022_010_1 = AmBy*pAx1[31] + pAx1[47];
            double r_121_010_1 = AmBy*pAx1[33] + pAx1[51];
            double r_211_010_1 = AmBy*pAx1[34] + pAx1[55];
            double b_010_2 = AmBy*pAx2[0] + pAx2[2];
            double r_100_010_2 = AmBy*pAx2[1] + pAx2[7];
            double r_010_010_2 = AmBy*pAx2[2] + pAx2[5];
            double r_001_010_2 = AmBy*pAx2[3] + pAx2[9];
            double r_200_010_2 = AmBy*pAx2[4] + pAx2[15];
            double r_020_010_2 = AmBy*pAx2[5] + pAx2[11];
            double r_002_010_2 = AmBy*pAx2[6] + pAx2[16];
            double r_110_010_2 = AmBy*pAx2[7] + pAx2[13];
            double r_101_010_2 = AmBy*pAx2[8] + pAx2[19];
            double r_011_010_2 = AmBy*pAx2[9] + pAx2[18];
            double r_300_010_2 = AmBy*pAx2[10] + pAx2[23];
            double r_030_010_2 = AmBy*pAx2[11] + pAx2[21];
            double r_003_010_2 = AmBy*pAx2[12] + pAx2[28];
            double r_120_010_2 = AmBy*pAx2[13] + pAx2[24];
            double r_102_010_2 = AmBy*pAx2[14] + pAx2[32];
            double r_210_010_2 = AmBy*pAx2[15] + pAx2[29];
            double r_012_010_2 = AmBy*pAx2[16] + pAx2[31];
            double r_201_010_2 = AmBy*pAx2[17] + pAx2[34];
            double r_021_010_2 = AmBy*pAx2[18] + pAx2[27];
            double r_111_010_2 = AmBy*pAx2[19] + pAx2[33];
            double r_040_010_2 = AmBy*pAx2[21] + pAx2[36];
            double r_310_010_2 = AmBy*pAx2[23] + pAx2[44];
            double r_130_010_2 = AmBy*pAx2[24] + pAx2[38];
            double r_103_010_2 = AmBy*pAx2[26] + pAx2[52];
            double r_031_010_2 = AmBy*pAx2[27] + pAx2[43];
            double r_013_010_2 = AmBy*pAx2[28] + pAx2[49];
            double r_220_010_2 = AmBy*pAx2[29] + pAx2[46];
            double r_202_010_2 = AmBy*pAx2[30] + pAx2[54];
            double r_022_010_2 = AmBy*pAx2[31] + pAx2[47];
            double r_112_010_2 = AmBy*pAx2[32] + pAx2[53];
            double r_121_010_2 = AmBy*pAx2[33] + pAx2[51];
            double r_211_010_2 = AmBy*pAx2[34] + pAx2[55];
            double r_050_010_2 = AmBy*pAx2[36] + pAx2[57];
            double r_140_010_2 = AmBy*pAx2[38] + pAx2[60];
            double r_041_010_2 = AmBy*pAx2[43] + pAx2[63];
            double r_320_010_2 = AmBy*pAx2[44] + pAx2[71];
            double r_230_010_2 = AmBy*pAx2[46] + pAx2[67];
            double r_032_010_2 = AmBy*pAx2[47] + pAx2[69];
            double r_023_010_2 = AmBy*pAx2[49] + pAx2[73];
            double r_131_010_2 = AmBy*pAx2[51] + pAx2[75];
            double r_113_010_2 = AmBy*pAx2[52] + pAx2[80];
            double r_122_010_2 = AmBy*pAx2[53] + pAx2[78];
            double r_212_010_2 = AmBy*pAx2[54] + pAx2[83];
            double r_221_010_2 = AmBy*pAx2[55] + pAx2[81];
            double r_060_010_2 = AmBy*pAx2[57] + pAx2[85];
            double r_150_010_2 = AmBy*pAx2[60] + pAx2[87];
            double r_051_010_2 = AmBy*pAx2[63] + pAx2[92];
            double r_240_010_2 = AmBy*pAx2[67] + pAx2[95];
            double r_042_010_2 = AmBy*pAx2[69] + pAx2[96];
            double r_330_010_2 = AmBy*pAx2[71] + pAx2[99];
            double r_033_010_2 = AmBy*pAx2[73] + pAx2[104];
            double r_141_010_2 = AmBy*pAx2[75] + pAx2[106];
            double r_132_010_2 = AmBy*pAx2[78] + pAx2[108];
            double r_123_010_2 = AmBy*pAx2[80] + pAx2[116];
            double r_231_010_2 = AmBy*pAx2[81] + pAx2[113];
            double r_222_010_2 = AmBy*pAx2[83] + pAx2[118];
            double b_001 = AmBz*pAx0[0] + pAx0[3];
            double r_100_001 = AmBz*pAx0[1] + pAx0[8];
            double r_010_001 = AmBz*pAx0[2] + pAx0[9];
            double r_001_001 = AmBz*pAx0[3] + pAx0[6];
            double r_002_001 = AmBz*pAx0[6] + pAx0[12];
            double r_101_001 = AmBz*pAx0[8] + pAx0[14];
            double r_011_001 = AmBz*pAx0[9] + pAx0[16];
            double b_001_1 = AmBz*pAx1[0] + pAx1[3];
            double r_100_001_1 = AmBz*pAx1[1] + pAx1[8];
            double r_010_001_1 = AmBz*pAx1[2] + pAx1[9];
            double r_001_001_1 = AmBz*pAx1[3] + pAx1[6];
            double r_200_001_1 = AmBz*pAx1[4] + pAx1[17];
            double r_020_001_1 = AmBz*pAx1[5] + pAx1[18];
            double r_002_001_1 = AmBz*pAx1[6] + pAx1[12];
            double r_110_001_1 = AmBz*pAx1[7] + pAx1[19];
            double r_101_001_1 = AmBz*pAx1[8] + pAx1[14];
            double r_011_001_1 = AmBz*pAx1[9] + pAx1[16];
            double r_003_001_1 = AmBz*pAx1[12] + pAx1[22];
            double r_120_001_1 = AmBz*pAx1[13] + pAx1[33];
            double r_102_001_1 = AmBz*pAx1[14] + pAx1[26];
            double r_210_001_1 = AmBz*pAx1[15] + pAx1[34];
            double r_012_001_1 = AmBz*pAx1[16] + pAx1[28];
            double r_201_001_1 = AmBz*pAx1[17] + pAx1[30];
            double r_021_001_1 = AmBz*pAx1[18] + pAx1[31];
            double r_111_001_1 = AmBz*pAx1[19] + pAx1[32];
            double r_004_001_1 = AmBz*pAx1[22] + pAx1[37];
            double r_103_001_1 = AmBz*pAx1[26] + pAx1[39];
            double r_013_001_1 = AmBz*pAx1[28] + pAx1[41];
            double r_202_001_1 = AmBz*pAx1[30] + pAx1[48];
            double r_022_001_1 = AmBz*pAx1[31] + pAx1[49];
            double r_112_001_1 = AmBz*pAx1[32] + pAx1[52];
            double r_121_001_1 = AmBz*pAx1[33] + pAx1[53];
            double r_211_001_1 = AmBz*pAx1[34] + pAx1[54];
            double b_001_2 = AmBz*pAx2[0] + pAx2[3];
            double r_100_001_2 = AmBz*pAx2[1] + pAx2[8];
            double r_010_001_2 = AmBz*pAx2[2] + pAx2[9];
            double r_001_001_2 = AmBz*pAx2[3] + pAx2[6];
            double r_200_001_2 = AmBz*pAx2[4] + pAx2[17];
            double r_020_001_2 = AmBz*pAx2[5] + pAx2[18];
            double r_002_001_2 = AmBz*pAx2[6] + pAx2[12];
            double r_110_001_2 = AmBz*pAx2[7] + pAx2[19];
            double r_101_001_2 = AmBz*pAx2[8] + pAx2[14];
            double r_011_001_2 = AmBz*pAx2[9] + pAx2[16];
            double r_300_001_2 = AmBz*pAx2[10] + pAx2[25];
            double r_030_001_2 = AmBz*pAx2[11] + pAx2[27];
            double r_003_001_2 = AmBz*pAx2[12] + pAx2[22];
            double r_120_001_2 = AmBz*pAx2[13] + pAx2[33];
            double r_102_001_2 = AmBz*pAx2[14] + pAx2[26];
            double r_210_001_2 = AmBz*pAx2[15] + pAx2[34];
            double r_012_001_2 = AmBz*pAx2[16] + pAx2[28];
            double r_201_001_2 = AmBz*pAx2[17] + pAx2[30];
            double r_021_001_2 = AmBz*pAx2[18] + pAx2[31];
            double r_111_001_2 = AmBz*pAx2[19] + pAx2[32];
            double r_004_001_2 = AmBz*pAx2[22] + pAx2[37];
            double r_301_001_2 = AmBz*pAx2[25] + pAx2[45];
            double r_103_001_2 = AmBz*pAx2[26] + pAx2[39];
            double r_031_001_2 = AmBz*pAx2[27] + pAx2[47];
            double r_013_001_2 = AmBz*pAx2[28] + pAx2[41];
            double r_220_001_2 = AmBz*pAx2[29] + pAx2[55];
            double r_202_001_2 = AmBz*pAx2[30] + pAx2[48];
            double r_022_001_2 = AmBz*pAx2[31] + pAx2[49];
            double r_112_001_2 = AmBz*pAx2[32] + pAx2[52];
            double r_121_001_2 = AmBz*pAx2[33] + pAx2[53];
            double r_211_001_2 = AmBz*pAx2[34] + pAx2[54];
            double r_005_001_2 = AmBz*pAx2[37] + pAx2[58];
            double r_104_001_2 = AmBz*pAx2[39] + pAx2[62];
            double r_014_001_2 = AmBz*pAx2[41] + pAx2[64];
            double r_302_001_2 = AmBz*pAx2[45] + pAx2[72];
            double r_032_001_2 = AmBz*pAx2[47] + pAx2[73];
            double r_203_001_2 = AmBz*pAx2[48] + pAx2[68];
            double r_023_001_2 = AmBz*pAx2[49] + pAx2[70];
            double r_113_001_2 = AmBz*pAx2[52] + pAx2[74];
            double r_122_001_2 = AmBz*pAx2[53] + pAx2[80];
            double r_212_001_2 = AmBz*pAx2[54] + pAx2[82];
            double r_221_001_2 = AmBz*pAx2[55] + pAx2[83];
            double r_006_001_2 = AmBz*pAx2[58] + pAx2[86];
            double r_105_001_2 = AmBz*pAx2[62] + pAx2[88];
            double r_015_001_2 = AmBz*pAx2[64] + pAx2[90];
            double r_204_001_2 = AmBz*pAx2[68] + pAx2[97];
            double r_024_001_2 = AmBz*pAx2[70] + pAx2[98];
            double r_303_001_2 = AmBz*pAx2[72] + pAx2[100];
            double r_033_001_2 = AmBz*pAx2[73] + pAx2[102];
            double r_114_001_2 = AmBz*pAx2[74] + pAx2[107];
            double r_123_001_2 = AmBz*pAx2[80] + pAx2[109];
            double r_213_001_2 = AmBz*pAx2[82] + pAx2[111];
            double r_222_001_2 = AmBz*pAx2[83] + pAx2[119];
            double b_200 = AmBx*b_100 + r_100_100;
            double r_100_200 = AmBx*r_100_100 + r_200_100;
            double r_010_200 = AmBx*r_010_100 + r_110_100;
            double r_001_200 = AmBx*r_001_100 + r_101_100;
            double b_200_1 = AmBx*b_100_1 + r_100_100_1;
            double r_100_200_1 = AmBx*r_100_100_1 + r_200_100_1;
            double r_010_200_1 = AmBx*r_010_100_1 + r_110_100_1;
            double r_001_200_1 = AmBx*r_001_100_1 + r_101_100_1;
            double r_200_200_1 = AmBx*r_200_100_1 + r_300_100_1;
            double r_020_200_1 = AmBx*r_020_100_1 + r_120_100_1;
            double r_002_200_1 = AmBx*r_002_100_1 + r_102_100_1;
            double r_110_200_1 = AmBx*r_110_100_1 + r_210_100_1;
            double r_101_200_1 = AmBx*r_101_100_1 + r_201_100_1;
            double r_011_200_1 = AmBx*r_011_100_1 + r_111_100_1;
            double r_300_200_1 = AmBx*r_300_100_1 + r_400_100_1;
            double r_120_200_1 = AmBx*r_120_100_1 + r_220_100_1;
            double r_102_200_1 = AmBx*r_102_100_1 + r_202_100_1;
            double r_210_200_1 = AmBx*r_210_100_1 + r_310_100_1;
            double r_201_200_1 = AmBx*r_201_100_1 + r_301_100_1;
            double r_111_200_1 = AmBx*r_111_100_1 + r_211_100_1;
            double b_200_2 = AmBx*b_100_2 + r_100_100_2;
            double r_100_200_2 = AmBx*r_100_100_2 + r_200_100_2;
            double r_010_200_2 = AmBx*r_010_100_2 + r_110_100_2;
            double r_001_200_2 = AmBx*r_001_100_2 + r_101_100_2;
            double r_200_200_2 = AmBx*r_200_100_2 + r_300_100_2;
            double r_020_200_2 = AmBx*r_020_100_2 + r_120_100_2;
            double r_002_200_2 = AmBx*r_002_100_2 + r_102_100_2;
            double r_110_200_2 = AmBx*r_110_100_2 + r_210_100_2;
            double r_101_200_2 = AmBx*r_101_100_2 + r_201_100_2;
            double r_011_200_2 = AmBx*r_011_100_2 + r_111_100_2;
            double r_300_200_2 = AmBx*r_300_100_2 + r_400_100_2;
            double r_030_200_2 = AmBx*r_030_100_2 + r_130_100_2;
            double r_003_200_2 = AmBx*r_003_100_2 + r_103_100_2;
            double r_120_200_2 = AmBx*r_120_100_2 + r_220_100_2;
            double r_102_200_2 = AmBx*r_102_100_2 + r_202_100_2;
            double r_210_200_2 = AmBx*r_210_100_2 + r_310_100_2;
            double r_012_200_2 = AmBx*r_012_100_2 + r_112_100_2;
            double r_201_200_2 = AmBx*r_201_100_2 + r_301_100_2;
            double r_021_200_2 = AmBx*r_021_100_2 + r_121_100_2;
            double r_111_200_2 = AmBx*r_111_100_2 + r_211_100_2;
            double r_400_200_2 = AmBx*r_400_100_2 + r_500_100_2;
            double r_310_200_2 = AmBx*r_310_100_2 + r_410_100_2;
            double r_130_200_2 = AmBx*r_130_100_2 + r_230_100_2;
            double r_301_200_2 = AmBx*r_301_100_2 + r_401_100_2;
            double r_103_200_2 = AmBx*r_103_100_2 + r_203_100_2;
            double r_031_200_2 = AmBx*r_031_100_2 + r_131_100_2;
            double r_013_200_2 = AmBx*r_013_100_2 + r_113_100_2;
            double r_220_200_2 = AmBx*r_220_100_2 + r_320_100_2;
            double r_202_200_2 = AmBx*r_202_100_2 + r_302_100_2;
            double r_022_200_2 = AmBx*r_022_100_2 + r_122_100_2;
            double r_112_200_2 = AmBx*r_112_100_2 + r_212_100_2;
            double r_121_200_2 = AmBx*r_121_100_2 + r_221_100_2;
            double r_211_200_2 = AmBx*r_211_100_2 + r_311_100_2;
            double r_500_200_2 = AmBx*r_500_100_2 + r_600_100_2;
            double r_410_200_2 = AmBx*r_410_100_2 + r_510_100_2;
            double r_401_200_2 = AmBx*r_401_100_2 + r_501_100_2;
            double r_320_200_2 = AmBx*r_320_100_2 + r_420_100_2;
            double r_302_200_2 = AmBx*r_302_100_2 + r_402_100_2;
            double r_230_200_2 = AmBx*r_230_100_2 + r_330_100_2;
            double r_203_200_2 = AmBx*r_203_100_2 + r_303_100_2;
            double r_311_200_2 = AmBx*r_311_100_2 + r_411_100_2;
            double r_131_200_2 = AmBx*r_131_100_2 + r_231_100_2;
            double r_113_200_2 = AmBx*r_113_100_2 + r_213_100_2;
            double r_122_200_2 = AmBx*r_122_100_2 + r_222_100_2;
            double r_212_200_2 = AmBx*r_212_100_2 + r_312_100_2;
            double r_221_200_2 = AmBx*r_221_100_2 + r_321_100_2;
            double b_020 = AmBy*b_010 + r_010_010;
            double r_100_020 = AmBy*r_100_010 + r_110_010;
            double r_010_020 = AmBy*r_010_010 + r_020_010;
            double r_001_020 = AmBy*r_001_010 + r_011_010;
            double b_020_1 = AmBy*b_010_1 + r_010_010_1;
            double r_100_020_1 = AmBy*r_100_010_1 + r_110_010_1;
            double r_010_020_1 = AmBy*r_010_010_1 + r_020_010_1;
            double r_001_020_1 = AmBy*r_001_010_1 + r_011_010_1;
            double r_200_020_1 = AmBy*r_200_010_1 + r_210_010_1;
            double r_020_020_1 = AmBy*r_020_010_1 + r_030_010_1;
            double r_002_020_1 = AmBy*r_002_010_1 + r_012_010_1;
            double r_110_020_1 = AmBy*r_110_010_1 + r_120_010_1;
            double r_101_020_1 = AmBy*r_101_010_1 + r_111_010_1;
            double r_011_020_1 = AmBy*r_011_010_1 + r_021_010_1;
            double r_030_020_1 = AmBy*r_030_010_1 + r_040_010_1;
            double r_120_020_1 = AmBy*r_120_010_1 + r_130_010_1;
            double r_210_020_1 = AmBy*r_210_010_1 + r_220_010_1;
            double r_012_020_1 = AmBy*r_012_010_1 + r_022_010_1;
            double r_201_020_1 = AmBy*r_201_010_1 + r_211_010_1;
            double r_021_020_1 = AmBy*r_021_010_1 + r_031_010_1;
            double r_111_020_1 = AmBy*r_111_010_1 + r_121_010_1;
            double b_020_2 = AmBy*b_010_2 + r_010_010_2;
            double r_100_020_2 = AmBy*r_100_010_2 + r_110_010_2;
            double r_010_020_2 = AmBy*r_010_010_2 + r_020_010_2;
            double r_001_020_2 = AmBy*r_001_010_2 + r_011_010_2;
            double r_200_020_2 = AmBy*r_200_010_2 + r_210_010_2;
            double r_020_020_2 = AmBy*r_020_010_2 + r_030_010_2;
            double r_002_020_2 = AmBy*r_002_010_2 + r_012_010_2;
            double r_110_020_2 = AmBy*r_110_010_2 + r_120_010_2;
            double r_101_020_2 = AmBy*r_101_010_2 + r_111_010_2;
            double r_011_020_2 = AmBy*r_011_010_2 + r_021_010_2;
            double r_300_020_2 = AmBy*r_300_010_2 + r_310_010_2;
            double r_030_020_2 = AmBy*r_030_010_2 + r_040_010_2;
            double r_003_020_2 = AmBy*r_003_010_2 + r_013_010_2;
            double r_120_020_2 = AmBy*r_120_010_2 + r_130_010_2;
            double r_102_020_2 = AmBy*r_102_010_2 + r_112_010_2;
            double r_210_020_2 = AmBy*r_210_010_2 + r_220_010_2;
            double r_012_020_2 = AmBy*r_012_010_2 + r_022_010_2;
            double r_201_020_2 = AmBy*r_201_010_2 + r_211_010_2;
            double r_021_020_2 = AmBy*r_021_010_2 + r_031_010_2;
            double r_111_020_2 = AmBy*r_111_010_2 + r_121_010_2;
            double r_040_020_2 = AmBy*r_040_010_2 + r_050_010_2;
            double r_310_020_2 = AmBy*r_310_010_2 + r_320_010_2;
            double r_130_020_2 = AmBy*r_130_010_2 + r_140_010_2;
            double r_103_020_2 = AmBy*r_103_010_2 + r_113_010_2;
            double r_031_020_2 = AmBy*r_031_010_2 + r_041_010_2;
            double r_013_020_2 = AmBy*r_013_010_2 + r_023_010_2;
            double r_220_020_2 = AmBy*r_220_010_2 + r_230_010_2;
            double r_202_020_2 = AmBy*r_202_010_2 + r_212_010_2;
            double r_022_020_2 = AmBy*r_022_010_2 + r_032_010_2;
            double r_112_020_2 = AmBy*r_112_010_2 + r_122_010_2;
            double r_121_020_2 = AmBy*r_121_010_2 + r_131_010_2;
            double r_211_020_2 = AmBy*r_211_010_2 + r_221_010_2;
            double r_050_020_2 = AmBy*r_050_010_2 + r_060_010_2;
            double r_140_020_2 = AmBy*r_140_010_2 + r_150_010_2;
            double r_041_020_2 = AmBy*r_041_010_2 + r_051_010_2;
            double r_320_020_2 = AmBy*r_320_010_2 + r_330_010_2;
            double r_230_020_2 = AmBy*r_230_010_2 + r_240_010_2;
            double r_032_020_2 = AmBy*r_032_010_2 + r_042_010_2;
            double r_023_020_2 = AmBy*r_023_010_2 + r_033_010_2;
            double r_131_020_2 = AmBy*r_131_010_2 + r_141_010_2;
            double r_113_020_2 = AmBy*r_113_010_2 + r_123_010_2;
            double r_122_020_2 = AmBy*r_122_010_2 + r_132_010_2;
            double r_212_020_2 = AmBy*r_212_010_2 + r_222_010_2;
            double r_221_020_2 = AmBy*r_221_010_2 + r_231_010_2;
            double b_002 = AmBz*b_001 + r_001_001;
            double r_100_002 = AmBz*r_100_001 + r_101_001;
            double r_010_002 = AmBz*r_010_001 + r_011_001;
            double r_001_002 = AmBz*r_001_001 + r_002_001;
            double b_002_1 = AmBz*b_001_1 + r_001_001_1;
            double r_100_002_1 = AmBz*r_100_001_1 + r_101_001_1;
            double r_010_002_1 = AmBz*r_010_001_1 + r_011_001_1;
            double r_001_002_1 = AmBz*r_001_001_1 + r_002_001_1;
            double r_200_002_1 = AmBz*r_200_001_1 + r_201_001_1;
            double r_020_002_1 = AmBz*r_020_001_1 + r_021_001_1;
            double r_002_002_1 = AmBz*r_002_001_1 + r_003_001_1;
            double r_110_002_1 = AmBz*r_110_001_1 + r_111_001_1;
            double r_101_002_1 = AmBz*r_101_001_1 + r_102_001_1;
            double r_011_002_1 = AmBz*r_011_001_1 + r_012_001_1;
            double r_003_002_1 = AmBz*r_003_001_1 + r_004_001_1;
            double r_120_002_1 = AmBz*r_120_001_1 + r_121_001_1;
            double r_102_002_1 = AmBz*r_102_001_1 + r_103_001_1;
            double r_210_002_1 = AmBz*r_210_001_1 + r_211_001_1;
            double r_012_002_1 = AmBz*r_012_001_1 + r_013_001_1;
            double r_201_002_1 = AmBz*r_201_001_1 + r_202_001_1;
            double r_021_002_1 = AmBz*r_021_001_1 + r_022_001_1;
            double r_111_002_1 = AmBz*r_111_001_1 + r_112_001_1;
            double b_002_2 = AmBz*b_001_2 + r_001_001_2;
            double r_100_002_2 = AmBz*r_100_001_2 + r_101_001_2;
            double r_010_002_2 = AmBz*r_010_001_2 + r_011_001_2;
            double r_001_002_2 = AmBz*r_001_001_2 + r_002_001_2;
            double r_200_002_2 = AmBz*r_200_001_2 + r_201_001_2;
            double r_020_002_2 = AmBz*r_020_001_2 + r_021_001_2;
            double r_002_002_2 = AmBz*r_002_001_2 + r_003_001_2;
            double r_110_002_2 = AmBz*r_110_001_2 + r_111_001_2;
            double r_101_002_2 = AmBz*r_101_001_2 + r_102_001_2;
            double r_011_002_2 = AmBz*r_011_001_2 + r_012_001_2;
            double r_300_002_2 = AmBz*r_300_001_2 + r_301_001_2;
            double r_030_002_2 = AmBz*r_030_001_2 + r_031_001_2;
            double r_003_002_2 = AmBz*r_003_001_2 + r_004_001_2;
            double r_120_002_2 = AmBz*r_120_001_2 + r_121_001_2;
            double r_102_002_2 = AmBz*r_102_001_2 + r_103_001_2;
            double r_210_002_2 = AmBz*r_210_001_2 + r_211_001_2;
            double r_012_002_2 = AmBz*r_012_001_2 + r_013_001_2;
            double r_201_002_2 = AmBz*r_201_001_2 + r_202_001_2;
            double r_021_002_2 = AmBz*r_021_001_2 + r_022_001_2;
            double r_111_002_2 = AmBz*r_111_001_2 + r_112_001_2;
            double r_004_002_2 = AmBz*r_004_001_2 + r_005_001_2;
            double r_301_002_2 = AmBz*r_301_001_2 + r_302_001_2;
            double r_103_002_2 = AmBz*r_103_001_2 + r_104_001_2;
            double r_031_002_2 = AmBz*r_031_001_2 + r_032_001_2;
            double r_013_002_2 = AmBz*r_013_001_2 + r_014_001_2;
            double r_220_002_2 = AmBz*r_220_001_2 + r_221_001_2;
            double r_202_002_2 = AmBz*r_202_001_2 + r_203_001_2;
            double r_022_002_2 = AmBz*r_022_001_2 + r_023_001_2;
            double r_112_002_2 = AmBz*r_112_001_2 + r_113_001_2;
            double r_121_002_2 = AmBz*r_121_001_2 + r_122_001_2;
            double r_211_002_2 = AmBz*r_211_001_2 + r_212_001_2;
            double r_005_002_2 = AmBz*r_005_001_2 + r_006_001_2;
            double r_104_002_2 = AmBz*r_104_001_2 + r_105_001_2;
            double r_014_002_2 = AmBz*r_014_001_2 + r_015_001_2;
            double r_302_002_2 = AmBz*r_302_001_2 + r_303_001_2;
            double r_032_002_2 = AmBz*r_032_001_2 + r_033_001_2;
            double r_203_002_2 = AmBz*r_203_001_2 + r_204_001_2;
            double r_023_002_2 = AmBz*r_023_001_2 + r_024_001_2;
            double r_113_002_2 = AmBz*r_113_001_2 + r_114_001_2;
            double r_122_002_2 = AmBz*r_122_001_2 + r_123_001_2;
            double r_212_002_2 = AmBz*r_212_001_2 + r_213_001_2;
            double r_221_002_2 = AmBz*r_221_001_2 + r_222_001_2;
            double b_110 = AmBy*b_100 + r_010_100;
            double r_001_110 = AmBy*r_001_100 + r_011_100;
            double b_300 = AmBx*b_200 + r_100_200;
            double b_300_1 = AmBx*b_200_1 + r_100_200_1;
            double r_100_300_1 = AmBx*r_100_200_1 + r_200_200_1;
            double r_010_300_1 = AmBx*r_010_200_1 + r_110_200_1;
            double r_001_300_1 = AmBx*r_001_200_1 + r_101_200_1;
            double r_200_300_1 = AmBx*r_200_200_1 + r_300_200_1;
            double r_020_300_1 = AmBx*r_020_200_1 + r_120_200_1;
            double r_002_300_1 = AmBx*r_002_200_1 + r_102_200_1;
            double r_110_300_1 = AmBx*r_110_200_1 + r_210_200_1;
            double r_101_300_1 = AmBx*r_101_200_1 + r_201_200_1;
            double r_011_300_1 = AmBx*r_011_200_1 + r_111_200_1;
            double b_300_2 = AmBx*b_200_2 + r_100_200_2;
            double r_100_300_2 = AmBx*r_100_200_2 + r_200_200_2;
            double r_010_300_2 = AmBx*r_010_200_2 + r_110_200_2;
            double r_001_300_2 = AmBx*r_001_200_2 + r_101_200_2;
            double r_200_300_2 = AmBx*r_200_200_2 + r_300_200_2;
            double r_020_300_2 = AmBx*r_020_200_2 + r_120_200_2;
            double r_002_300_2 = AmBx*r_002_200_2 + r_102_200_2;
            double r_110_300_2 = AmBx*r_110_200_2 + r_210_200_2;
            double r_101_300_2 = AmBx*r_101_200_2 + r_201_200_2;
            double r_011_300_2 = AmBx*r_011_200_2 + r_111_200_2;
            double r_300_300_2 = AmBx*r_300_200_2 + r_400_200_2;
            double r_030_300_2 = AmBx*r_030_200_2 + r_130_200_2;
            double r_003_300_2 = AmBx*r_003_200_2 + r_103_200_2;
            double r_120_300_2 = AmBx*r_120_200_2 + r_220_200_2;
            double r_102_300_2 = AmBx*r_102_200_2 + r_202_200_2;
            double r_210_300_2 = AmBx*r_210_200_2 + r_310_200_2;
            double r_012_300_2 = AmBx*r_012_200_2 + r_112_200_2;
            double r_201_300_2 = AmBx*r_201_200_2 + r_301_200_2;
            double r_021_300_2 = AmBx*r_021_200_2 + r_121_200_2;
            double r_111_300_2 = AmBx*r_111_200_2 + r_211_200_2;
            double r_400_300_2 = AmBx*r_400_200_2 + r_500_200_2;
            double r_310_300_2 = AmBx*r_310_200_2 + r_410_200_2;
            double r_130_300_2 = AmBx*r_130_200_2 + r_230_200_2;
            double r_301_300_2 = AmBx*r_301_200_2 + r_401_200_2;
            double r_103_300_2 = AmBx*r_103_200_2 + r_203_200_2;
            double r_031_300_2 = AmBx*r_031_200_2 + r_131_200_2;
            double r_013_300_2 = AmBx*r_013_200_2 + r_113_200_2;
            double r_220_300_2 = AmBx*r_220_200_2 + r_320_200_2;
            double r_202_300_2 = AmBx*r_202_200_2 + r_302_200_2;
            double r_022_300_2 = AmBx*r_022_200_2 + r_122_200_2;
            double r_112_300_2 = AmBx*r_112_200_2 + r_212_200_2;
            double r_121_300_2 = AmBx*r_121_200_2 + r_221_200_2;
            double r_211_300_2 = AmBx*r_211_200_2 + r_311_200_2;
            double b_030 = AmBy*b_020 + r_010_020;
            double b_030_1 = AmBy*b_020_1 + r_010_020_1;
            double r_100_030_1 = AmBy*r_100_020_1 + r_110_020_1;
            double r_010_030_1 = AmBy*r_010_020_1 + r_020_020_1;
            double r_001_030_1 = AmBy*r_001_020_1 + r_011_020_1;
            double r_200_030_1 = AmBy*r_200_020_1 + r_210_020_1;
            double r_020_030_1 = AmBy*r_020_020_1 + r_030_020_1;
            double r_002_030_1 = AmBy*r_002_020_1 + r_012_020_1;
            double r_110_030_1 = AmBy*r_110_020_1 + r_120_020_1;
            double r_101_030_1 = AmBy*r_101_020_1 + r_111_020_1;
            double r_011_030_1 = AmBy*r_011_020_1 + r_021_020_1;
            double b_030_2 = AmBy*b_020_2 + r_010_020_2;
            double r_100_030_2 = AmBy*r_100_020_2 + r_110_020_2;
            double r_010_030_2 = AmBy*r_010_020_2 + r_020_020_2;
            double r_001_030_2 = AmBy*r_001_020_2 + r_011_020_2;
            double r_200_030_2 = AmBy*r_200_020_2 + r_210_020_2;
            double r_020_030_2 = AmBy*r_020_020_2 + r_030_020_2;
            double r_002_030_2 = AmBy*r_002_020_2 + r_012_020_2;
            double r_110_030_2 = AmBy*r_110_020_2 + r_120_020_2;
            double r_101_030_2 = AmBy*r_101_020_2 + r_111_020_2;
            double r_011_030_2 = AmBy*r_011_020_2 + r_021_020_2;
            double r_300_030_2 = AmBy*r_300_020_2 + r_310_020_2;
            double r_030_030_2 = AmBy*r_030_020_2 + r_040_020_2;
            double r_003_030_2 = AmBy*r_003_020_2 + r_013_020_2;
            double r_120_030_2 = AmBy*r_120_020_2 + r_130_020_2;
            double r_102_030_2 = AmBy*r_102_020_2 + r_112_020_2;
            double r_210_030_2 = AmBy*r_210_020_2 + r_220_020_2;
            double r_012_030_2 = AmBy*r_012_020_2 + r_022_020_2;
            double r_201_030_2 = AmBy*r_201_020_2 + r_211_020_2;
            double r_021_030_2 = AmBy*r_021_020_2 + r_031_020_2;
            double r_111_030_2 = AmBy*r_111_020_2 + r_121_020_2;
            double r_040_030_2 = AmBy*r_040_020_2 + r_050_020_2;
            double r_310_030_2 = AmBy*r_310_020_2 + r_320_020_2;
            double r_130_030_2 = AmBy*r_130_020_2 + r_140_020_2;
            double r_103_030_2 = AmBy*r_103_020_2 + r_113_020_2;
            double r_031_030_2 = AmBy*r_031_020_2 + r_041_020_2;
            double r_013_030_2 = AmBy*r_013_020_2 + r_023_020_2;
            double r_220_030_2 = AmBy*r_220_020_2 + r_230_020_2;
            double r_202_030_2 = AmBy*r_202_020_2 + r_212_020_2;
            double r_022_030_2 = AmBy*r_022_020_2 + r_032_020_2;
            double r_112_030_2 = AmBy*r_112_020_2 + r_122_020_2;
            double r_121_030_2 = AmBy*r_121_020_2 + r_131_020_2;
            double r_211_030_2 = AmBy*r_211_020_2 + r_221_020_2;
            double b_003 = AmBz*b_002 + r_001_002;
            double b_003_1 = AmBz*b_002_1 + r_001_002_1;
            double r_100_003_1 = AmBz*r_100_002_1 + r_101_002_1;
            double r_010_003_1 = AmBz*r_010_002_1 + r_011_002_1;
            double r_001_003_1 = AmBz*r_001_002_1 + r_002_002_1;
            double r_200_003_1 = AmBz*r_200_002_1 + r_201_002_1;
            double r_020_003_1 = AmBz*r_020_002_1 + r_021_002_1;
            double r_002_003_1 = AmBz*r_002_002_1 + r_003_002_1;
            double r_110_003_1 = AmBz*r_110_002_1 + r_111_002_1;
            double r_101_003_1 = AmBz*r_101_002_1 + r_102_002_1;
            double r_011_003_1 = AmBz*r_011_002_1 + r_012_002_1;
            double b_003_2 = AmBz*b_002_2 + r_001_002_2;
            double r_100_003_2 = AmBz*r_100_002_2 + r_101_002_2;
            double r_010_003_2 = AmBz*r_010_002_2 + r_011_002_2;
            double r_001_003_2 = AmBz*r_001_002_2 + r_002_002_2;
            double r_200_003_2 = AmBz*r_200_002_2 + r_201_002_2;
            double r_020_003_2 = AmBz*r_020_002_2 + r_021_002_2;
            double r_002_003_2 = AmBz*r_002_002_2 + r_003_002_2;
            double r_110_003_2 = AmBz*r_110_002_2 + r_111_002_2;
            double r_101_003_2 = AmBz*r_101_002_2 + r_102_002_2;
            double r_011_003_2 = AmBz*r_011_002_2 + r_012_002_2;
            double r_300_003_2 = AmBz*r_300_002_2 + r_301_002_2;
            double r_030_003_2 = AmBz*r_030_002_2 + r_031_002_2;
            double r_003_003_2 = AmBz*r_003_002_2 + r_004_002_2;
            double r_120_003_2 = AmBz*r_120_002_2 + r_121_002_2;
            double r_102_003_2 = AmBz*r_102_002_2 + r_103_002_2;
            double r_210_003_2 = AmBz*r_210_002_2 + r_211_002_2;
            double r_012_003_2 = AmBz*r_012_002_2 + r_013_002_2;
            double r_201_003_2 = AmBz*r_201_002_2 + r_202_002_2;
            double r_021_003_2 = AmBz*r_021_002_2 + r_022_002_2;
            double r_111_003_2 = AmBz*r_111_002_2 + r_112_002_2;
            double r_004_003_2 = AmBz*r_004_002_2 + r_005_002_2;
            double r_301_003_2 = AmBz*r_301_002_2 + r_302_002_2;
            double r_103_003_2 = AmBz*r_103_002_2 + r_104_002_2;
            double r_031_003_2 = AmBz*r_031_002_2 + r_032_002_2;
            double r_013_003_2 = AmBz*r_013_002_2 + r_014_002_2;
            double r_220_003_2 = AmBz*r_220_002_2 + r_221_002_2;
            double r_202_003_2 = AmBz*r_202_002_2 + r_203_002_2;
            double r_022_003_2 = AmBz*r_022_002_2 + r_023_002_2;
            double r_112_003_2 = AmBz*r_112_002_2 + r_113_002_2;
            double r_121_003_2 = AmBz*r_121_002_2 + r_122_002_2;
            double r_211_003_2 = AmBz*r_211_002_2 + r_212_002_2;
            double b_120 = AmBx*b_020 + r_100_020;
            double b_120_1 = AmBx*b_020_1 + r_100_020_1;
            double r_100_120_1 = AmBx*r_100_020_1 + r_200_020_1;
            double r_001_120_1 = AmBx*r_001_020_1 + r_101_020_1;
            double r_101_120_1 = AmBx*r_101_020_1 + r_201_020_1;
            double b_102 = AmBx*b_002 + r_100_002;
            double b_102_1 = AmBx*b_002_1 + r_100_002_1;
            double r_100_102_1 = AmBx*r_100_002_1 + r_200_002_1;
            double r_010_102_1 = AmBx*r_010_002_1 + r_110_002_1;
            double r_110_102_1 = AmBx*r_110_002_1 + r_210_002_1;
            double b_210 = AmBy*b_200 + r_010_200;
            double b_012 = AmBy*b_002 + r_010_002;
            double b_012_1 = AmBy*b_002_1 + r_010_002_1;
            double r_100_012_1 = AmBy*r_100_002_1 + r_110_002_1;
            double r_010_012_1 = AmBy*r_010_002_1 + r_020_002_1;
            double r_110_012_1 = AmBy*r_110_002_1 + r_120_002_1;
            double b_201 = AmBz*b_200 + r_001_200;
            double b_021 = AmBz*b_020 + r_001_020;
            double b_111 = AmBz*b_110 + r_001_110;
            double b_400_1 = AmBx*b_300_1 + r_100_300_1;
            double r_100_400_1 = AmBx*r_100_300_1 + r_200_300_1;
            double r_010_400_1 = AmBx*r_010_300_1 + r_110_300_1;
            double r_001_400_1 = AmBx*r_001_300_1 + r_101_300_1;
            double b_400_2 = AmBx*b_300_2 + r_100_300_2;
            double r_100_400_2 = AmBx*r_100_300_2 + r_200_300_2;
            double r_010_400_2 = AmBx*r_010_300_2 + r_110_300_2;
            double r_001_400_2 = AmBx*r_001_300_2 + r_101_300_2;
            double r_200_400_2 = AmBx*r_200_300_2 + r_300_300_2;
            double r_020_400_2 = AmBx*r_020_300_2 + r_120_300_2;
            double r_002_400_2 = AmBx*r_002_300_2 + r_102_300_2;
            double r_110_400_2 = AmBx*r_110_300_2 + r_210_300_2;
            double r_101_400_2 = AmBx*r_101_300_2 + r_201_300_2;
            double r_011_400_2 = AmBx*r_011_300_2 + r_111_300_2;
            double r_300_400_2 = AmBx*r_300_300_2 + r_400_300_2;
            double r_030_400_2 = AmBx*r_030_300_2 + r_130_300_2;
            double r_003_400_2 = AmBx*r_003_300_2 + r_103_300_2;
            double r_120_400_2 = AmBx*r_120_300_2 + r_220_300_2;
            double r_102_400_2 = AmBx*r_102_300_2 + r_202_300_2;
            double r_210_400_2 = AmBx*r_210_300_2 + r_310_300_2;
            double r_012_400_2 = AmBx*r_012_300_2 + r_112_300_2;
            double r_201_400_2 = AmBx*r_201_300_2 + r_301_300_2;
            double r_021_400_2 = AmBx*r_021_300_2 + r_121_300_2;
            double r_111_400_2 = AmBx*r_111_300_2 + r_211_300_2;
            double b_040_1 = AmBy*b_030_1 + r_010_030_1;
            double r_100_040_1 = AmBy*r_100_030_1 + r_110_030_1;
            double r_010_040_1 = AmBy*r_010_030_1 + r_020_030_1;
            double r_001_040_1 = AmBy*r_001_030_1 + r_011_030_1;
            double b_040_2 = AmBy*b_030_2 + r_010_030_2;
            double r_100_040_2 = AmBy*r_100_030_2 + r_110_030_2;
            double r_010_040_2 = AmBy*r_010_030_2 + r_020_030_2;
            double r_001_040_2 = AmBy*r_001_030_2 + r_011_030_2;
            double r_200_040_2 = AmBy*r_200_030_2 + r_210_030_2;
            double r_020_040_2 = AmBy*r_020_030_2 + r_030_030_2;
            double r_002_040_2 = AmBy*r_002_030_2 + r_012_030_2;
            double r_110_040_2 = AmBy*r_110_030_2 + r_120_030_2;
            double r_101_040_2 = AmBy*r_101_030_2 + r_111_030_2;
            double r_011_040_2 = AmBy*r_011_030_2 + r_021_030_2;
            double r_300_040_2 = AmBy*r_300_030_2 + r_310_030_2;
            double r_030_040_2 = AmBy*r_030_030_2 + r_040_030_2;
            double r_003_040_2 = AmBy*r_003_030_2 + r_013_030_2;
            double r_120_040_2 = AmBy*r_120_030_2 + r_130_030_2;
            double r_102_040_2 = AmBy*r_102_030_2 + r_112_030_2;
            double r_210_040_2 = AmBy*r_210_030_2 + r_220_030_2;
            double r_012_040_2 = AmBy*r_012_030_2 + r_022_030_2;
            double r_201_040_2 = AmBy*r_201_030_2 + r_211_030_2;
            double r_021_040_2 = AmBy*r_021_030_2 + r_031_030_2;
            double r_111_040_2 = AmBy*r_111_030_2 + r_121_030_2;
            double b_004_1 = AmBz*b_003_1 + r_001_003_1;
            double r_100_004_1 = AmBz*r_100_003_1 + r_101_003_1;
            double r_010_004_1 = AmBz*r_010_003_1 + r_011_003_1;
            double r_001_004_1 = AmBz*r_001_003_1 + r_002_003_1;
            double b_004_2 = AmBz*b_003_2 + r_001_003_2;
            double r_100_004_2 = AmBz*r_100_003_2 + r_101_003_2;
            double r_010_004_2 = AmBz*r_010_003_2 + r_011_003_2;
            double r_001_004_2 = AmBz*r_001_003_2 + r_002_003_2;
            double r_200_004_2 = AmBz*r_200_003_2 + r_201_003_2;
            double r_020_004_2 = AmBz*r_020_003_2 + r_021_003_2;
            double r_002_004_2 = AmBz*r_002_003_2 + r_003_003_2;
            double r_110_004_2 = AmBz*r_110_003_2 + r_111_003_2;
            double r_101_004_2 = AmBz*r_101_003_2 + r_102_003_2;
            double r_011_004_2 = AmBz*r_011_003_2 + r_012_003_2;
            double r_300_004_2 = AmBz*r_300_003_2 + r_301_003_2;
            double r_030_004_2 = AmBz*r_030_003_2 + r_031_003_2;
            double r_003_004_2 = AmBz*r_003_003_2 + r_004_003_2;
            double r_120_004_2 = AmBz*r_120_003_2 + r_121_003_2;
            double r_102_004_2 = AmBz*r_102_003_2 + r_103_003_2;
            double r_210_004_2 = AmBz*r_210_003_2 + r_211_003_2;
            double r_012_004_2 = AmBz*r_012_003_2 + r_013_003_2;
            double r_201_004_2 = AmBz*r_201_003_2 + r_202_003_2;
            double r_021_004_2 = AmBz*r_021_003_2 + r_022_003_2;
            double r_111_004_2 = AmBz*r_111_003_2 + r_112_003_2;
            double b_310_1 = AmBy*b_300_1 + r_010_300_1;
            double r_010_310_1 = AmBy*r_010_300_1 + r_020_300_1;
            double r_001_310_1 = AmBy*r_001_300_1 + r_011_300_1;
            double b_310_2 = AmBy*b_300_2 + r_010_300_2;
            double r_010_310_2 = AmBy*r_010_300_2 + r_020_300_2;
            double r_001_310_2 = AmBy*r_001_300_2 + r_011_300_2;
            double r_020_310_2 = AmBy*r_020_300_2 + r_030_300_2;
            double r_011_310_2 = AmBy*r_011_300_2 + r_021_300_2;
            double r_021_310_2 = AmBy*r_021_300_2 + r_031_300_2;
            double b_130_1 = AmBx*b_030_1 + r_100_030_1;
            double r_100_130_1 = AmBx*r_100_030_1 + r_200_030_1;
            double r_001_130_1 = AmBx*r_001_030_1 + r_101_030_1;
            double b_301_1 = AmBz*b_300_1 + r_001_300_1;
            double r_001_301_1 = AmBz*r_001_300_1 + r_002_300_1;
            double b_301_2 = AmBz*b_300_2 + r_001_300_2;
            double r_010_301_2 = AmBz*r_010_300_2 + r_011_300_2;
            double r_001_301_2 = AmBz*r_001_300_2 + r_002_300_2;
            double r_020_301_2 = AmBz*r_020_300_2 + r_021_300_2;
            double r_002_301_2 = AmBz*r_002_300_2 + r_003_300_2;
            double r_011_301_2 = AmBz*r_011_300_2 + r_012_300_2;
            double r_012_301_2 = AmBz*r_012_300_2 + r_013_300_2;
            double r_021_301_2 = AmBz*r_021_300_2 + r_022_300_2;
            double b_103_1 = AmBx*b_003_1 + r_100_003_1;
            double r_100_103_1 = AmBx*r_100_003_1 + r_200_003_1;
            double r_010_103_1 = AmBx*r_010_003_1 + r_110_003_1;
            double b_031_1 = AmBz*b_030_1 + r_001_030_1;
            double r_001_031_1 = AmBz*r_001_030_1 + r_002_030_1;
            double b_031_2 = AmBz*b_030_2 + r_001_030_2;
            double r_100_031_2 = AmBz*r_100_030_2 + r_101_030_2;
            double r_001_031_2 = AmBz*r_001_030_2 + r_002_030_2;
            double r_200_031_2 = AmBz*r_200_030_2 + r_201_030_2;
            double r_002_031_2 = AmBz*r_002_030_2 + r_003_030_2;
            double r_101_031_2 = AmBz*r_101_030_2 + r_102_030_2;
            double r_102_031_2 = AmBz*r_102_030_2 + r_103_030_2;
            double r_201_031_2 = AmBz*r_201_030_2 + r_202_030_2;
            double b_013_1 = AmBy*b_003_1 + r_010_003_1;
            double r_010_013_1 = AmBy*r_010_003_1 + r_020_003_1;
            double b_013_2 = AmBy*b_003_2 + r_010_003_2;
            double r_100_013_2 = AmBy*r_100_003_2 + r_110_003_2;
            double r_010_013_2 = AmBy*r_010_003_2 + r_020_003_2;
            double r_200_013_2 = AmBy*r_200_003_2 + r_210_003_2;
            double r_110_013_2 = AmBy*r_110_003_2 + r_120_003_2;
            double r_210_013_2 = AmBy*r_210_003_2 + r_220_003_2;
            double b_220_1 = AmBx*b_120_1 + r_100_120_1;
            double r_001_220_1 = AmBx*r_001_120_1 + r_101_120_1;
            double b_202_1 = AmBx*b_102_1 + r_100_102_1;
            double r_010_202_1 = AmBx*r_010_102_1 + r_110_102_1;
            double b_022_1 = AmBy*b_012_1 + r_010_012_1;
            double r_100_022_1 = AmBy*r_100_012_1 + r_110_012_1;
            double b_500_1 = AmBx*b_400_1 + r_100_400_1;
            double b_500_2 = AmBx*b_400_2 + r_100_400_2;
            double r_100_500_2 = AmBx*r_100_400_2 + r_200_400_2;
            double r_010_500_2 = AmBx*r_010_400_2 + r_110_400_2;
            double r_001_500_2 = AmBx*r_001_400_2 + r_101_400_2;
            double r_200_500_2 = AmBx*r_200_400_2 + r_300_400_2;
            double r_020_500_2 = AmBx*r_020_400_2 + r_120_400_2;
            double r_002_500_2 = AmBx*r_002_400_2 + r_102_400_2;
            double r_110_500_2 = AmBx*r_110_400_2 + r_210_400_2;
            double r_101_500_2 = AmBx*r_101_400_2 + r_201_400_2;
            double r_011_500_2 = AmBx*r_011_400_2 + r_111_400_2;
            double b_050_1 = AmBy*b_040_1 + r_010_040_1;
            double b_050_2 = AmBy*b_040_2 + r_010_040_2;
            double r_100_050_2 = AmBy*r_100_040_2 + r_110_040_2;
            double r_010_050_2 = AmBy*r_010_040_2 + r_020_040_2;
            double r_001_050_2 = AmBy*r_001_040_2 + r_011_040_2;
            double r_200_050_2 = AmBy*r_200_040_2 + r_210_040_2;
            double r_020_050_2 = AmBy*r_020_040_2 + r_030_040_2;
            double r_002_050_2 = AmBy*r_002_040_2 + r_012_040_2;
            double r_110_050_2 = AmBy*r_110_040_2 + r_120_040_2;
            double r_101_050_2 = AmBy*r_101_040_2 + r_111_040_2;
            double r_011_050_2 = AmBy*r_011_040_2 + r_021_040_2;
            double b_005_1 = AmBz*b_004_1 + r_001_004_1;
            double b_005_2 = AmBz*b_004_2 + r_001_004_2;
            double r_100_005_2 = AmBz*r_100_004_2 + r_101_004_2;
            double r_010_005_2 = AmBz*r_010_004_2 + r_011_004_2;
            double r_001_005_2 = AmBz*r_001_004_2 + r_002_004_2;
            double r_200_005_2 = AmBz*r_200_004_2 + r_201_004_2;
            double r_020_005_2 = AmBz*r_020_004_2 + r_021_004_2;
            double r_002_005_2 = AmBz*r_002_004_2 + r_003_004_2;
            double r_110_005_2 = AmBz*r_110_004_2 + r_111_004_2;
            double r_101_005_2 = AmBz*r_101_004_2 + r_102_004_2;
            double r_011_005_2 = AmBz*r_011_004_2 + r_012_004_2;
            double b_140_1 = AmBx*b_040_1 + r_100_040_1;
            double b_140_2 = AmBx*b_040_2 + r_100_040_2;
            double r_100_140_2 = AmBx*r_100_040_2 + r_200_040_2;
            double r_001_140_2 = AmBx*r_001_040_2 + r_101_040_2;
            double r_200_140_2 = AmBx*r_200_040_2 + r_300_040_2;
            double r_101_140_2 = AmBx*r_101_040_2 + r_201_040_2;
            double b_104_1 = AmBx*b_004_1 + r_100_004_1;
            double b_104_2 = AmBx*b_004_2 + r_100_004_2;
            double r_100_104_2 = AmBx*r_100_004_2 + r_200_004_2;
            double r_010_104_2 = AmBx*r_010_004_2 + r_110_004_2;
            double r_200_104_2 = AmBx*r_200_004_2 + r_300_004_2;
            double r_110_104_2 = AmBx*r_110_004_2 + r_210_004_2;
            double b_410_1 = AmBy*b_400_1 + r_010_400_1;
            double b_410_2 = AmBy*b_400_2 + r_010_400_2;
            double r_010_410_2 = AmBy*r_010_400_2 + r_020_400_2;
            double r_001_410_2 = AmBy*r_001_400_2 + r_011_400_2;
            double r_020_410_2 = AmBy*r_020_400_2 + r_030_400_2;
            double r_011_410_2 = AmBy*r_011_400_2 + r_021_400_2;
            double b_014_1 = AmBy*b_004_1 + r_010_004_1;
            double b_014_2 = AmBy*b_004_2 + r_010_004_2;
            double r_100_014_2 = AmBy*r_100_004_2 + r_110_004_2;
            double r_010_014_2 = AmBy*r_010_004_2 + r_020_004_2;
            double r_020_014_2 = AmBy*r_020_004_2 + r_030_004_2;
            double r_110_014_2 = AmBy*r_110_004_2 + r_120_004_2;
            double b_401_1 = AmBz*b_400_1 + r_001_400_1;
            double b_401_2 = AmBz*b_400_2 + r_001_400_2;
            double r_010_401_2 = AmBz*r_010_400_2 + r_011_400_2;
            double r_001_401_2 = AmBz*r_001_400_2 + r_002_400_2;
            double r_002_401_2 = AmBz*r_002_400_2 + r_003_400_2;
            double r_011_401_2 = AmBz*r_011_400_2 + r_012_400_2;
            double b_041_1 = AmBz*b_040_1 + r_001_040_1;
            double b_041_2 = AmBz*b_040_2 + r_001_040_2;
            double r_100_041_2 = AmBz*r_100_040_2 + r_101_040_2;
            double r_001_041_2 = AmBz*r_001_040_2 + r_002_040_2;
            double r_002_041_2 = AmBz*r_002_040_2 + r_003_040_2;
            double r_101_041_2 = AmBz*r_101_040_2 + r_102_040_2;
            double b_320_1 = AmBy*b_310_1 + r_010_310_1;
            double b_320_2 = AmBy*b_310_2 + r_010_310_2;
            double r_010_320_2 = AmBy*r_010_310_2 + r_020_310_2;
            double r_001_320_2 = AmBy*r_001_310_2 + r_011_310_2;
            double r_011_320_2 = AmBy*r_011_310_2 + r_021_310_2;
            double b_302_1 = AmBz*b_301_1 + r_001_301_1;
            double b_302_2 = AmBz*b_301_2 + r_001_301_2;
            double r_010_302_2 = AmBz*r_010_301_2 + r_011_301_2;
            double r_001_302_2 = AmBz*r_001_301_2 + r_002_301_2;
            double r_020_302_2 = AmBz*r_020_301_2 + r_021_301_2;
            double r_011_302_2 = AmBz*r_011_301_2 + r_012_301_2;
            double b_230_1 = AmBx*b_130_1 + r_100_130_1;
            double b_032_1 = AmBz*b_031_1 + r_001_031_1;
            double b_032_2 = AmBz*b_031_2 + r_001_031_2;
            double r_100_032_2 = AmBz*r_100_031_2 + r_101_031_2;
            double r_001_032_2 = AmBz*r_001_031_2 + r_002_031_2;
            double r_200_032_2 = AmBz*r_200_031_2 + r_201_031_2;
            double r_101_032_2 = AmBz*r_101_031_2 + r_102_031_2;
            double b_203_1 = AmBx*b_103_1 + r_100_103_1;
            double b_023_1 = AmBy*b_013_1 + r_010_013_1;
            double b_023_2 = AmBy*b_013_2 + r_010_013_2;
            double r_100_023_2 = AmBy*r_100_013_2 + r_110_013_2;
            double r_200_023_2 = AmBy*r_200_013_2 + r_210_013_2;
            double b_311_1 = AmBz*b_310_1 + r_001_310_1;
            double b_131_1 = AmBz*b_130_1 + r_001_130_1;
            double b_113_1 = AmBy*b_103_1 + r_010_103_1;
            double b_122_1 = AmBx*b_022_1 + r_100_022_1;
            double b_212_1 = AmBy*b_202_1 + r_010_202_1;
            double b_221_1 = AmBz*b_220_1 + r_001_220_1;
            double b_600_2 = AmBx*b_500_2 + r_100_500_2;
            double r_100_600_2 = AmBx*r_100_500_2 + r_200_500_2;
            double r_010_600_2 = AmBx*r_010_500_2 + r_110_500_2;
            double r_001_600_2 = AmBx*r_001_500_2 + r_101_500_2;
            double b_060_2 = AmBy*b_050_2 + r_010_050_2;
            double r_100_060_2 = AmBy*r_100_050_2 + r_110_050_2;
            double r_010_060_2 = AmBy*r_010_050_2 + r_020_050_2;
            double r_001_060_2 = AmBy*r_001_050_2 + r_011_050_2;
            double b_006_2 = AmBz*b_005_2 + r_001_005_2;
            double r_100_006_2 = AmBz*r_100_005_2 + r_101_005_2;
            double r_010_006_2 = AmBz*r_010_005_2 + r_011_005_2;
            double r_001_006_2 = AmBz*r_001_005_2 + r_002_005_2;
            double b_510_2 = AmBy*b_500_2 + r_010_500_2;
            double r_010_510_2 = AmBy*r_010_500_2 + r_020_500_2;
            double r_001_510_2 = AmBy*r_001_500_2 + r_011_500_2;
            double b_150_2 = AmBx*b_050_2 + r_100_050_2;
            double r_100_150_2 = AmBx*r_100_050_2 + r_200_050_2;
            double r_001_150_2 = AmBx*r_001_050_2 + r_101_050_2;
            double b_501_2 = AmBz*b_500_2 + r_001_500_2;
            double r_001_501_2 = AmBz*r_001_500_2 + r_002_500_2;
            double b_105_2 = AmBx*b_005_2 + r_100_005_2;
            double r_100_105_2 = AmBx*r_100_005_2 + r_200_005_2;
            double r_010_105_2 = AmBx*r_010_005_2 + r_110_005_2;
            double b_051_2 = AmBz*b_050_2 + r_001_050_2;
            double r_001_051_2 = AmBz*r_001_050_2 + r_002_050_2;
            double b_015_2 = AmBy*b_005_2 + r_010_005_2;
            double r_010_015_2 = AmBy*r_010_005_2 + r_020_005_2;
            double b_420_2 = AmBy*b_410_2 + r_010_410_2;
            double r_010_420_2 = AmBy*r_010_410_2 + r_020_410_2;
            double r_001_420_2 = AmBy*r_001_410_2 + r_011_410_2;
            double b_402_2 = AmBz*b_401_2 + r_001_401_2;
            double r_010_402_2 = AmBz*r_010_401_2 + r_011_401_2;
            double r_001_402_2 = AmBz*r_001_401_2 + r_002_401_2;
            double b_240_2 = AmBx*b_140_2 + r_100_140_2;
            double r_100_240_2 = AmBx*r_100_140_2 + r_200_140_2;
            double r_001_240_2 = AmBx*r_001_140_2 + r_101_140_2;
            double b_204_2 = AmBx*b_104_2 + r_100_104_2;
            double r_100_204_2 = AmBx*r_100_104_2 + r_200_104_2;
            double r_010_204_2 = AmBx*r_010_104_2 + r_110_104_2;
            double b_042_2 = AmBz*b_041_2 + r_001_041_2;
            double r_100_042_2 = AmBz*r_100_041_2 + r_101_041_2;
            double r_001_042_2 = AmBz*r_001_041_2 + r_002_041_2;
            double b_024_2 = AmBy*b_014_2 + r_010_014_2;
            double r_100_024_2 = AmBy*r_100_014_2 + r_110_014_2;
            double r_010_024_2 = AmBy*r_010_014_2 + r_020_014_2;
            double b_330_2 = AmBy*b_320_2 + r_010_320_2;
            double r_001_330_2 = AmBy*r_001_320_2 + r_011_320_2;
            double b_303_2 = AmBz*b_302_2 + r_001_302_2;
            double r_010_303_2 = AmBz*r_010_302_2 + r_011_302_2;
            double b_033_2 = AmBz*b_032_2 + r_001_032_2;
            double r_100_033_2 = AmBz*r_100_032_2 + r_101_032_2;
            double b_312_2 = AmBy*b_302_2 + r_010_302_2;
            double r_010_312_2 = AmBy*r_010_302_2 + r_020_302_2;
            double b_132_2 = AmBx*b_032_2 + r_100_032_2;
            double r_100_132_2 = AmBx*r_100_032_2 + r_200_032_2;
            double b_123_2 = AmBx*b_023_2 + r_100_023_2;
            double r_100_123_2 = AmBx*r_100_023_2 + r_200_023_2;
            double b_700_2 = AmBx*b_600_2 + r_100_600_2;
            double b_070_2 = AmBy*b_060_2 + r_010_060_2;
            double b_007_2 = AmBz*b_006_2 + r_001_006_2;
            double b_160_2 = AmBx*b_060_2 + r_100_060_2;
            double b_106_2 = AmBx*b_006_2 + r_100_006_2;
            double b_610_2 = AmBy*b_600_2 + r_010_600_2;
            double b_016_2 = AmBy*b_006_2 + r_010_006_2;
            double b_601_2 = AmBz*b_600_2 + r_001_600_2;
            double b_061_2 = AmBz*b_060_2 + r_001_060_2;
            double b_520_2 = AmBy*b_510_2 + r_010_510_2;
            double b_502_2 = AmBz*b_501_2 + r_001_501_2;
            double b_250_2 = AmBx*b_150_2 + r_100_150_2;
            double b_052_2 = AmBz*b_051_2 + r_001_051_2;
            double b_205_2 = AmBx*b_105_2 + r_100_105_2;
            double b_025_2 = AmBy*b_015_2 + r_010_015_2;
            double b_340_2 = AmBx*b_240_2 + r_100_240_2;
            double b_304_2 = AmBx*b_204_2 + r_100_204_2;
            double b_430_2 = AmBy*b_420_2 + r_010_420_2;
            double b_034_2 = AmBy*b_024_2 + r_010_024_2;
            double b_403_2 = AmBz*b_402_2 + r_001_402_2;
            double b_043_2 = AmBz*b_042_2 + r_001_042_2;
            double b_511_2 = AmBz*b_510_2 + r_001_510_2;
            double b_151_2 = AmBz*b_150_2 + r_001_150_2;
            double b_115_2 = AmBy*b_105_2 + r_010_105_2;
            double b_142_2 = AmBx*b_042_2 + r_100_042_2;
            double b_124_2 = AmBx*b_024_2 + r_100_024_2;
            double b_412_2 = AmBy*b_402_2 + r_010_402_2;
            double b_214_2 = AmBy*b_204_2 + r_010_204_2;
            double b_421_2 = AmBz*b_420_2 + r_001_420_2;
            double b_241_2 = AmBz*b_240_2 + r_001_240_2;
            double b_331_2 = AmBz*b_330_2 + r_001_330_2;
            double b_313_2 = AmBy*b_303_2 + r_010_303_2;
            double b_133_2 = AmBx*b_033_2 + r_100_033_2;
            double b_322_2 = AmBy*b_312_2 + r_010_312_2;
            double b_232_2 = AmBx*b_132_2 + r_100_132_2;
            double b_223_2 = AmBx*b_123_2 + r_100_123_2;
            double bx_400 = -4*b_300 + b_500_1;
            double bx_310 = -3*b_210 + b_410_1;
            double bx_130 = -b_030 + b_230_1;
            double bx_301 = -3*b_201 + b_401_1;
            double bx_103 = -b_003 + b_203_1;
            double bx_220 = -2*b_120 + b_320_1;
            double bx_202 = -2*b_102 + b_302_1;
            double bx_112 = -b_012 + b_212_1;
            double bx_121 = -b_021 + b_221_1;
            double bx_211 = -2*b_111 + b_311_1;
            double bx_600_1 = -6*b_500_1 + b_700_2;
            double bx_510_1 = -5*b_410_1 + b_610_2;
            double bx_150_1 = -b_050_1 + b_250_2;
            double bx_501_1 = -5*b_401_1 + b_601_2;
            double bx_105_1 = -b_005_1 + b_205_2;
            double bx_420_1 = -4*b_320_1 + b_520_2;
            double bx_402_1 = -4*b_302_1 + b_502_2;
            double bx_240_1 = -2*b_140_1 + b_340_2;
            double bx_204_1 = -2*b_104_1 + b_304_2;
            double bx_330_1 = -3*b_230_1 + b_430_2;
            double bx_303_1 = -3*b_203_1 + b_403_2;
            double bx_114_1 = -b_014_1 + b_214_2;
            double bx_141_1 = -b_041_1 + b_241_2;
            double bx_411_1 = -4*b_311_1 + b_511_2;
            double bx_312_1 = -3*b_212_1 + b_412_2;
            double bx_132_1 = -b_032_1 + b_232_2;
            double bx_321_1 = -3*b_221_1 + b_421_2;
            double bx_123_1 = -b_023_1 + b_223_2;
            double bx_231_1 = -2*b_131_1 + b_331_2;
            double bx_213_1 = -2*b_113_1 + b_313_2;
            double bx_222_1 = -2*b_122_1 + b_322_2;
            double by_040 = -4*b_030 + b_050_1;
            double by_310 = -b_300 + b_320_1;
            double by_130 = -3*b_120 + b_140_1;
            double by_031 = -3*b_021 + b_041_1;
            double by_013 = -b_003 + b_023_1;
            double by_220 = -2*b_210 + b_230_1;
            double by_022 = -2*b_012 + b_032_1;
            double by_112 = -b_102 + b_122_1;
            double by_121 = -2*b_111 + b_131_1;
            double by_211 = -b_201 + b_221_1;
            double by_060_1 = -6*b_050_1 + b_070_2;
            double by_510_1 = -b_500_1 + b_520_2;
            double by_150_1 = -5*b_140_1 + b_160_2;
            double by_051_1 = -5*b_041_1 + b_061_2;
            double by_015_1 = -b_005_1 + b_025_2;
            double by_420_1 = -2*b_410_1 + b_430_2;
            double by_240_1 = -4*b_230_1 + b_250_2;
            double by_042_1 = -4*b_032_1 + b_052_2;
            double by_024_1 = -2*b_014_1 + b_034_2;
            double by_330_1 = -3*b_320_1 + b_340_2;
            double by_033_1 = -3*b_023_1 + b_043_2;
            double by_114_1 = -b_104_1 + b_124_2;
            double by_141_1 = -4*b_131_1 + b_151_2;
            double by_411_1 = -b_401_1 + b_421_2;
            double by_312_1 = -b_302_1 + b_322_2;
            double by_132_1 = -3*b_122_1 + b_142_2;
            double by_321_1 = -2*b_311_1 + b_331_2;
            double by_123_1 = -2*b_113_1 + b_133_2;
            double by_231_1 = -3*b_221_1 + b_241_2;
            double by_213_1 = -b_203_1 + b_223_2;
            double by_222_1 = -2*b_212_1 + b_232_2;
            double bz_004 = -4*b_003 + b_005_1;
            double bz_301 = -b_300 + b_302_1;
            double bz_103 = -3*b_102 + b_104_1;
            double bz_031 = -b_030 + b_032_1;
            double bz_013 = -3*b_012 + b_014_1;
            double bz_202 = -2*b_201 + b_203_1;
            double bz_022 = -2*b_021 + b_023_1;
            double bz_112 = -2*b_111 + b_113_1;
            double bz_121 = -b_120 + b_122_1;
            double bz_211 = -b_210 + b_212_1;
            double bz_006_1 = -6*b_005_1 + b_007_2;
            double bz_501_1 = -b_500_1 + b_502_2;
            double bz_105_1 = -5*b_104_1 + b_106_2;
            double bz_051_1 = -b_050_1 + b_052_2;
            double bz_015_1 = -5*b_014_1 + b_016_2;
            double bz_402_1 = -2*b_401_1 + b_403_2;
            double bz_204_1 = -4*b_203_1 + b_205_2;
            double bz_042_1 = -2*b_041_1 + b_043_2;
            double bz_024_1 = -4*b_023_1 + b_025_2;
            double bz_303_1 = -3*b_302_1 + b_304_2;
            double bz_033_1 = -3*b_032_1 + b_034_2;
            double bz_114_1 = -4*b_113_1 + b_115_2;
            double bz_141_1 = -b_140_1 + b_142_2;
            double bz_411_1 = -b_410_1 + b_412_2;
            double bz_312_1 = -2*b_311_1 + b_313_2;
            double bz_132_1 = -2*b_131_1 + b_133_2;
            double bz_321_1 = -b_320_1 + b_322_2;
            double bz_123_1 = -3*b_122_1 + b_124_2;
            double bz_231_1 = -b_230_1 + b_232_2;
            double bz_213_1 = -3*b_212_1 + b_214_2;
            double bz_222_1 = -2*b_221_1 + b_223_2;
            double bxx_500 = -5*bx_400 + bx_600_1;
            double bxx_050 = bx_150_1;
            double bxx_005 = bx_105_1;
            double bxx_140 = -b_140_1 + bx_240_1;
            double bxx_104 = -b_104_1 + bx_204_1;
            double bxx_410 = -4*bx_310 + bx_510_1;
            double bxx_014 = bx_114_1;
            double bxx_401 = -4*bx_301 + bx_501_1;
            double bxx_041 = bx_141_1;
            double bxx_320 = -3*bx_220 + bx_420_1;
            double bxx_302 = -3*bx_202 + bx_402_1;
            double bxx_230 = -2*bx_130 + bx_330_1;
            double bxx_032 = bx_132_1;
            double bxx_203 = -2*bx_103 + bx_303_1;
            double bxx_023 = bx_123_1;
            double bxx_311 = -3*bx_211 + bx_411_1;
            double bxx_131 = -b_131_1 + bx_231_1;
            double bxx_113 = -b_113_1 + bx_213_1;
            double bxx_122 = -b_122_1 + bx_222_1;
            double bxx_212 = -2*bx_112 + bx_312_1;
            double bxx_221 = -2*bx_121 + bx_321_1;
            double byy_500 = by_510_1;
            double byy_050 = -5*by_040 + by_060_1;
            double byy_005 = by_015_1;
            double byy_140 = -4*by_130 + by_150_1;
            double byy_104 = by_114_1;
            double byy_410 = -b_410_1 + by_420_1;
            double byy_014 = -b_014_1 + by_024_1;
            double byy_401 = by_411_1;
            double byy_041 = -4*by_031 + by_051_1;
            double byy_320 = -2*by_310 + by_330_1;
            double byy_302 = by_312_1;
            double byy_230 = -3*by_220 + by_240_1;
            double byy_032 = -3*by_022 + by_042_1;
            double byy_203 = by_213_1;
            double byy_023 = -2*by_013 + by_033_1;
            double byy_311 = -b_311_1 + by_321_1;
            double byy_131 = -3*by_121 + by_141_1;
            double byy_113 = -b_113_1 + by_123_1;
            double byy_122 = -2*by_112 + by_132_1;
            double byy_212 = -b_212_1 + by_222_1;
            double byy_221 = -2*by_211 + by_231_1;
            double bzz_500 = bz_501_1;
            double bzz_050 = bz_051_1;
            double bzz_005 = -5*bz_004 + bz_006_1;
            double bzz_140 = bz_141_1;
            double bzz_104 = -4*bz_103 + bz_105_1;
            double bzz_410 = bz_411_1;
            double bzz_014 = -4*bz_013 + bz_015_1;
            double bzz_401 = -b_401_1 + bz_402_1;
            double bzz_041 = -b_041_1 + bz_042_1;
            double bzz_320 = bz_321_1;
            double bzz_302 = -2*bz_301 + bz_303_1;
            double bzz_230 = bz_231_1;
            double bzz_032 = -2*bz_031 + bz_033_1;
            double bzz_203 = -3*bz_202 + bz_204_1;
            double bzz_023 = -3*bz_022 + bz_024_1;
            double bzz_311 = -b_311_1 + bz_312_1;
            double bzz_131 = -b_131_1 + bz_132_1;
            double bzz_113 = -3*bz_112 + bz_114_1;
            double bzz_122 = -2*bz_121 + bz_123_1;
            double bzz_212 = -2*bz_211 + bz_213_1;
            double bzz_221 = -b_221_1 + bz_222_1;
            double bxy_500 = bx_510_1;
            double bxy_050 = -5*b_140_1 + b_160_2;
            double bxy_005 = b_115_2;
            double bxy_140 = -4*bx_130 + bx_150_1;
            double bxy_104 = bx_114_1;
            double bxy_410 = -bx_400 + bx_420_1;
            double bxy_014 = -b_104_1 + b_124_2;
            double bxy_401 = bx_411_1;
            double bxy_041 = -4*b_131_1 + b_151_2;
            double bxy_320 = -2*bx_310 + bx_330_1;
            double bxy_302 = bx_312_1;
            double bxy_230 = -3*bx_220 + bx_240_1;
            double bxy_032 = -3*b_122_1 + b_142_2;
            double bxy_203 = bx_213_1;
            double bxy_023 = -2*b_113_1 + b_133_2;
            double bxy_311 = -bx_301 + bx_321_1;
            double bxy_131 = -3*bx_121 + bx_141_1;
            double bxy_113 = -bx_103 + bx_123_1;
            double bxy_122 = -2*bx_112 + bx_132_1;
            double bxy_212 = -bx_202 + bx_222_1;
            double bxy_221 = -2*bx_211 + bx_231_1;
            double bxz_500 = bx_501_1;
            double bxz_050 = b_151_2;
            double bxz_005 = -5*b_104_1 + b_106_2;
            double bxz_140 = bx_141_1;
            double bxz_104 = -4*bx_103 + bx_105_1;
            double bxz_410 = bx_411_1;
            double bxz_014 = -4*b_113_1 + b_115_2;
            double bxz_401 = -bx_400 + bx_402_1;
            double bxz_041 = -b_140_1 + b_142_2;
            double bxz_320 = bx_321_1;
            double bxz_302 = -2*bx_301 + bx_303_1;
            double bxz_230 = bx_231_1;
            double bxz_032 = -2*b_131_1 + b_133_2;
            double bxz_203 = -3*bx_202 + bx_204_1;
            double bxz_023 = -3*b_122_1 + b_124_2;
            double bxz_311 = -bx_310 + bx_312_1;
            double bxz_131 = -bx_130 + bx_132_1;
            double bxz_113 = -3*bx_112 + bx_114_1;
            double bxz_122 = -2*bx_121 + bx_123_1;
            double bxz_212 = -2*bx_211 + bx_213_1;
            double bxz_221 = -bx_220 + bx_222_1;
            double byz_500 = b_511_2;
            double byz_050 = by_051_1;
            double byz_005 = -5*b_014_1 + b_016_2;
            double byz_140 = by_141_1;
            double byz_104 = -4*b_113_1 + b_115_2;
            double byz_410 = by_411_1;
            double byz_014 = -4*by_013 + by_015_1;
            double byz_401 = -b_410_1 + b_412_2;
            double byz_041 = -by_040 + by_042_1;
            double byz_320 = by_321_1;
            double byz_302 = -2*b_311_1 + b_313_2;
            double byz_230 = by_231_1;
            double byz_032 = -2*by_031 + by_033_1;
            double byz_203 = -3*b_212_1 + b_214_2;
            double byz_023 = -3*by_022 + by_024_1;
            double byz_311 = -by_310 + by_312_1;
            double byz_131 = -by_130 + by_132_1;
            double byz_113 = -3*by_112 + by_114_1;
            double byz_122 = -2*by_121 + by_123_1;
            double byz_212 = -2*by_211 + by_213_1;
            double byz_221 = -by_220 + by_222_1;
            // 9.03 steps per component, 8.89 kb stack
            pOut_[sb*0 + sd*0] = bxx_104*sd8 - bxx_122*sd19 + bxx_140*sd17 - bxx_302*sd19 + bxx_320*sd18 + bxx_500*sd17;
            pOut_[sb*0 + sd*1] = byy_104*sd8 - byy_122*sd19 + byy_140*sd17 - byy_302*sd19 + byy_320*sd18 + byy_500*sd17;
            pOut_[sb*0 + sd*2] = bzz_104*sd8 - bzz_122*sd19 + bzz_140*sd17 - bzz_302*sd19 + bzz_320*sd18 + bzz_500*sd17;
            pOut_[sb*0 + sd*3] = bxy_104*sd8 - bxy_122*sd19 + bxy_140*sd17 - bxy_302*sd19 + bxy_320*sd18 + bxy_500*sd17;
            pOut_[sb*0 + sd*4] = bxz_104*sd8 - bxz_122*sd19 + bxz_140*sd17 - bxz_302*sd19 + bxz_320*sd18 + bxz_500*sd17;
            pOut_[sb*0 + sd*5] = byz_104*sd8 - byz_122*sd19 + byz_140*sd17 - byz_302*sd19 + byz_320*sd18 + byz_500*sd17;
            pOut_[sb*1 + sd*0] = bxx_014*sd8 - bxx_032*sd19 + bxx_050*sd17 - bxx_212*sd19 + bxx_230*sd18 + bxx_410*sd17;
            pOut_[sb*1 + sd*1] = byy_014*sd8 - byy_032*sd19 + byy_050*sd17 - byy_212*sd19 + byy_230*sd18 + byy_410*sd17;
            pOut_[sb*1 + sd*2] = bzz_014*sd8 - bzz_032*sd19 + bzz_050*sd17 - bzz_212*sd19 + bzz_230*sd18 + bzz_410*sd17;
            pOut_[sb*1 + sd*3] = bxy_014*sd8 - bxy_032*sd19 + bxy_050*sd17 - bxy_212*sd19 + bxy_230*sd18 + bxy_410*sd17;
            pOut_[sb*1 + sd*4] = bxz_014*sd8 - bxz_032*sd19 + bxz_050*sd17 - bxz_212*sd19 + bxz_230*sd18 + bxz_410*sd17;
            pOut_[sb*1 + sd*5] = byz_014*sd8 - byz_032*sd19 + byz_050*sd17 - byz_212*sd19 + byz_230*sd18 + byz_410*sd17;
            pOut_[sb*10 + sd*0] = bxx_113*sd2a - bxx_131*sd1b - bxx_311*sd1b;
            pOut_[sb*10 + sd*1] = byy_113*sd2a - byy_131*sd1b - byy_311*sd1b;
            pOut_[sb*10 + sd*2] = bzz_113*sd2a - bzz_131*sd1b - bzz_311*sd1b;
            pOut_[sb*10 + sd*3] = bxy_113*sd2a - bxy_131*sd1b - bxy_311*sd1b;
            pOut_[sb*10 + sd*4] = bxz_113*sd2a - bxz_131*sd1b - bxz_311*sd1b;
            pOut_[sb*10 + sd*5] = byz_113*sd2a - byz_131*sd1b - byz_311*sd1b;
            pOut_[sb*2 + sd*0] = -bxx_023*sd1b + bxx_041*sd1a + bxx_203*sd1b - bxx_401*sd1a;
            pOut_[sb*2 + sd*1] = -byy_023*sd1b + byy_041*sd1a + byy_203*sd1b - byy_401*sd1a;
            pOut_[sb*2 + sd*2] = -bzz_023*sd1b + bzz_041*sd1a + bzz_203*sd1b - bzz_401*sd1a;
            pOut_[sb*2 + sd*3] = -bxy_023*sd1b + bxy_041*sd1a + bxy_203*sd1b - bxy_401*sd1a;
            pOut_[sb*2 + sd*4] = -bxz_023*sd1b + bxz_041*sd1a + bxz_203*sd1b - bxz_401*sd1a;
            pOut_[sb*2 + sd*5] = -byz_023*sd1b + byz_041*sd1a + byz_203*sd1b - byz_401*sd1a;
            pOut_[sb*3 + sd*0] = -bxx_122*sd20 + bxx_140*sd1f + bxx_302*sd1e + bxx_320*sd1d - bxx_500*sd1c;
            pOut_[sb*3 + sd*1] = -byy_122*sd20 + byy_140*sd1f + byy_302*sd1e + byy_320*sd1d - byy_500*sd1c;
            pOut_[sb*3 + sd*2] = -bzz_122*sd20 + bzz_140*sd1f + bzz_302*sd1e + bzz_320*sd1d - bzz_500*sd1c;
            pOut_[sb*3 + sd*3] = -bxy_122*sd20 + bxy_140*sd1f + bxy_302*sd1e + bxy_320*sd1d - bxy_500*sd1c;
            pOut_[sb*3 + sd*4] = -bxz_122*sd20 + bxz_140*sd1f + bxz_302*sd1e + bxz_320*sd1d - bxz_500*sd1c;
            pOut_[sb*3 + sd*5] = -byz_122*sd20 + byz_140*sd1f + byz_302*sd1e + byz_320*sd1d - byz_500*sd1c;
            pOut_[sb*4 + sd*0] = -bxx_131*sd21 + bxx_311*sd21;
            pOut_[sb*4 + sd*1] = -byy_131*sd21 + byy_311*sd21;
            pOut_[sb*4 + sd*2] = -bzz_131*sd21 + bzz_311*sd21;
            pOut_[sb*4 + sd*3] = -bxy_131*sd21 + bxy_311*sd21;
            pOut_[sb*4 + sd*4] = -bxz_131*sd21 + bxz_311*sd21;
            pOut_[sb*4 + sd*5] = -byz_131*sd21 + byz_311*sd21;
            pOut_[sb*5 + sd*0] = -bxx_032*sd1e + bxx_050*sd1c + bxx_212*sd20 - bxx_230*sd1d - bxx_410*sd1f;
            pOut_[sb*5 + sd*1] = -byy_032*sd1e + byy_050*sd1c + byy_212*sd20 - byy_230*sd1d - byy_410*sd1f;
            pOut_[sb*5 + sd*2] = -bzz_032*sd1e + bzz_050*sd1c + bzz_212*sd20 - bzz_230*sd1d - bzz_410*sd1f;
            pOut_[sb*5 + sd*3] = -bxy_032*sd1e + bxy_050*sd1c + bxy_212*sd20 - bxy_230*sd1d - bxy_410*sd1f;
            pOut_[sb*5 + sd*4] = -bxz_032*sd1e + bxz_050*sd1c + bxz_212*sd20 - bxz_230*sd1d - bxz_410*sd1f;
            pOut_[sb*5 + sd*5] = -byz_032*sd1e + byz_050*sd1c + byz_212*sd20 - byz_230*sd1d - byz_410*sd1f;
            pOut_[sb*6 + sd*0] = bxx_041*sd22 - bxx_221*sd23 + bxx_401*sd22;
            pOut_[sb*6 + sd*1] = byy_041*sd22 - byy_221*sd23 + byy_401*sd22;
            pOut_[sb*6 + sd*2] = bzz_041*sd22 - bzz_221*sd23 + bzz_401*sd22;
            pOut_[sb*6 + sd*3] = bxy_041*sd22 - bxy_221*sd23 + bxy_401*sd22;
            pOut_[sb*6 + sd*4] = bxz_041*sd22 - bxz_221*sd23 + bxz_401*sd22;
            pOut_[sb*6 + sd*5] = byz_041*sd22 - byz_221*sd23 + byz_401*sd22;
            pOut_[sb*7 + sd*0] = bxx_050*sd26 - bxx_230*sd25 + bxx_410*sd24;
            pOut_[sb*7 + sd*1] = byy_050*sd26 - byy_230*sd25 + byy_410*sd24;
            pOut_[sb*7 + sd*2] = bzz_050*sd26 - bzz_230*sd25 + bzz_410*sd24;
            pOut_[sb*7 + sd*3] = bxy_050*sd26 - bxy_230*sd25 + bxy_410*sd24;
            pOut_[sb*7 + sd*4] = bxz_050*sd26 - bxz_230*sd25 + bxz_410*sd24;
            pOut_[sb*7 + sd*5] = byz_050*sd26 - byz_230*sd25 + byz_410*sd24;
            pOut_[sb*8 + sd*0] = bxx_005 - bxx_023*sd29 + bxx_041*sd27 - bxx_203*sd29 + bxx_221*sd28 + bxx_401*sd27;
            pOut_[sb*8 + sd*1] = byy_005 - byy_023*sd29 + byy_041*sd27 - byy_203*sd29 + byy_221*sd28 + byy_401*sd27;
            pOut_[sb*8 + sd*2] = bzz_005 - bzz_023*sd29 + bzz_041*sd27 - bzz_203*sd29 + bzz_221*sd28 + bzz_401*sd27;
            pOut_[sb*8 + sd*3] = bxy_005 - bxy_023*sd29 + bxy_041*sd27 - bxy_203*sd29 + bxy_221*sd28 + bxy_401*sd27;
            pOut_[sb*8 + sd*4] = bxz_005 - bxz_023*sd29 + bxz_041*sd27 - bxz_203*sd29 + bxz_221*sd28 + bxz_401*sd27;
            pOut_[sb*8 + sd*5] = byz_005 - byz_023*sd29 + byz_041*sd27 - byz_203*sd29 + byz_221*sd28 + byz_401*sd27;
            pOut_[sb*9 + sd*0] = bxx_140*sd24 - bxx_320*sd25 + bxx_500*sd26;
            pOut_[sb*9 + sd*1] = byy_140*sd24 - byy_320*sd25 + byy_500*sd26;
            pOut_[sb*9 + sd*2] = bzz_140*sd24 - bzz_320*sd25 + bzz_500*sd26;
            pOut_[sb*9 + sd*3] = bxy_140*sd24 - bxy_320*sd25 + bxy_500*sd26;
            pOut_[sb*9 + sd*4] = bxz_140*sd24 - bxz_320*sd25 + bxz_500*sd26;
            pOut_[sb*9 + sd*5] = byz_140*sd24 - byz_320*sd25 + byz_500*sd26;
         }
         return;
      }
      case 6: {
         for (size_t ia = 0; ia < nCount; ++ ia) {
            double const * pAx0 = p0Z + 35 * ia;
            double const * pAx1 = p2Z + 84 * ia;
            double const * pAx2 = p4Z + 165 * ia;
            double * pOut_ = pOut + sa * ia;
            double b_100 = AmBx*pAx0[0] + pAx0[1];
            double r_100_100 = AmBx*pAx0[1] + pAx0[4];
            double r_010_100 = AmBx*pAx0[2] + pAx0[7];
            double r_001_100 = AmBx*pAx0[3] + pAx0[8];
            double r_200_100 = AmBx*pAx0[4] + pAx0[10];
            double r_110_100 = AmBx*pAx0[7] + pAx0[15];
            double r_101_100 = AmBx*pAx0[8] + pAx0[17];
            double r_011_100 = AmBx*pAx0[9] + pAx0[19];
            double r_300_100 = AmBx*pAx0[10] + pAx0[20];
            double r_210_100 = AmBx*pAx0[15] + pAx0[23];
            double r_201_100 = AmBx*pAx0[17] + pAx0[25];
            double r_111_100 = AmBx*pAx0[19] + pAx0[34];
            double b_100_1 = AmBx*pAx1[0] + pAx1[1];
            double r_100_100_1 = AmBx*pAx1[1] + pAx1[4];
            double r_010_100_1 = AmBx*pAx1[2] + pAx1[7];
            double r_001_100_1 = AmBx*pAx1[3] + pAx1[8];
            double r_200_100_1 = AmBx*pAx1[4] + pAx1[10];
            double r_020_100_1 = AmBx*pAx1[5] + pAx1[13];
            double r_002_100_1 = AmBx*pAx1[6] + pAx1[14];
            double r_110_100_1 = AmBx*pAx1[7] + pAx1[15];
            double r_101_100_1 = AmBx*pAx1[8] + pAx1[17];
            double r_011_100_1 = AmBx*pAx1[9] + pAx1[19];
            double r_300_100_1 = AmBx*pAx1[10] + pAx1[20];
            double r_030_100_1 = AmBx*pAx1[11] + pAx1[24];
            double r_003_100_1 = AmBx*pAx1[12] + pAx1[26];
            double r_120_100_1 = AmBx*pAx1[13] + pAx1[29];
            double r_102_100_1 = AmBx*pAx1[14] + pAx1[30];
            double r_210_100_1 = AmBx*pAx1[15] + pAx1[23];
            double r_012_100_1 = AmBx*pAx1[16] + pAx1[32];
            double r_201_100_1 = AmBx*pAx1[17] + pAx1[25];
            double r_021_100_1 = AmBx*pAx1[18] + pAx1[33];
            double r_111_100_1 = AmBx*pAx1[19] + pAx1[34];
            double r_400_100_1 = AmBx*pAx1[20] + pAx1[35];
            double r_310_100_1 = AmBx*pAx1[23] + pAx1[40];
            double r_130_100_1 = AmBx*pAx1[24] + pAx1[46];
            double r_301_100_1 = AmBx*pAx1[25] + pAx1[42];
            double r_103_100_1 = AmBx*pAx1[26] + pAx1[48];
            double r_220_100_1 = AmBx*pAx1[29] + pAx1[44];
            double r_202_100_1 = AmBx*pAx1[30] + pAx1[45];
            double r_112_100_1 = AmBx*pAx1[32] + pAx1[54];
            double r_121_100_1 = AmBx*pAx1[33] + pAx1[55];
            double r_211_100_1 = AmBx*pAx1[34] + pAx1[50];
            double r_500_100_1 = AmBx*pAx1[35] + pAx1[56];
            double r_410_100_1 = AmBx*pAx1[40] + pAx1[59];
            double r_401_100_1 = AmBx*pAx1[42] + pAx1[61];
            double r_320_100_1 = AmBx*pAx1[44] + pAx1[65];
            double r_302_100_1 = AmBx*pAx1[45] + pAx1[66];
            double r_230_100_1 = AmBx*pAx1[46] + pAx1[71];
            double r_203_100_1 = AmBx*pAx1[48] + pAx1[72];
            double r_311_100_1 = AmBx*pAx1[50] + pAx1[76];
            double r_212_100_1 = AmBx*pAx1[54] + pAx1[77];
            double r_221_100_1 = AmBx*pAx1[55] + pAx1[79];
            double b_100_2 = AmBx*pAx2[0] + pAx2[1];
            double r_100_100_2 = AmBx*pAx2[1] + pAx2[4];
            double r_010_100_2 = AmBx*pAx2[2] + pAx2[7];
            double r_001_100_2 = AmBx*pAx2[3] + pAx2[8];
            double r_200_100_2 = AmBx*pAx2[4] + pAx2[10];
            double r_020_100_2 = AmBx*pAx2[5] + pAx2[13];
            double r_002_100_2 = AmBx*pAx2[6] + pAx2[14];
            double r_110_100_2 = AmBx*pAx2[7] + pAx2[15];
            double r_101_100_2 = AmBx*pAx2[8] + pAx2[17];
            double r_011_100_2 = AmBx*pAx2[9] + pAx2[19];
            double r_300_100_2 = AmBx*pAx2[10] + pAx2[20];
            double r_030_100_2 = AmBx*pAx2[11] + pAx2[24];
            double r_003_100_2 = AmBx*pAx2[12] + pAx2[26];
            double r_120_100_2 = AmBx*pAx2[13] + pAx2[29];
            double r_102_100_2 = AmBx*pAx2[14] + pAx2[30];
            double r_210_100_2 = AmBx*pAx2[15] + pAx2[23];
            double r_012_100_2 = AmBx*pAx2[16] + pAx2[32];
            double r_201_100_2 = AmBx*pAx2[17] + pAx2[25];
            double r_021_100_2 = AmBx*pAx2[18] + pAx2[33];
            double r_111_100_2 = AmBx*pAx2[19] + pAx2[34];
            double r_400_100_2 = AmBx*pAx2[20] + pAx2[35];
            double r_310_100_2 = AmBx*pAx2[23] + pAx2[40];
            double r_130_100_2 = AmBx*pAx2[24] + pAx2[46];
            double r_301_100_2 = AmBx*pAx2[25] + pAx2[42];
            double r_103_100_2 = AmBx*pAx2[26] + pAx2[48];
            double r_031_100_2 = AmBx*pAx2[27] + pAx2[51];
            double r_013_100_2 = AmBx*pAx2[28] + pAx2[52];
            double r_220_100_2 = AmBx*pAx2[29] + pAx2[44];
            double r_202_100_2 = AmBx*pAx2[30] + pAx2[45];
            double r_022_100_2 = AmBx*pAx2[31] + pAx2[53];
            double r_112_100_2 = AmBx*pAx2[32] + pAx2[54];
            double r_121_100_2 = AmBx*pAx2[33] + pAx2[55];
            double r_211_100_2 = AmBx*pAx2[34] + pAx2[50];
            double r_500_100_2 = AmBx*pAx2[35] + pAx2[56];
            double r_410_100_2 = AmBx*pAx2[40] + pAx2[59];
            double r_401_100_2 = AmBx*pAx2[42] + pAx2[61];
            double r_320_100_2 = AmBx*pAx2[44] + pAx2[65];
            double r_302_100_2 = AmBx*pAx2[45] + pAx2[66];
            double r_230_100_2 = AmBx*pAx2[46] + pAx2[71];
            double r_032_100_2 = AmBx*pAx2[47] + pAx2[78];
            double r_203_100_2 = AmBx*pAx2[48] + pAx2[72];
            double r_023_100_2 = AmBx*pAx2[49] + pAx2[80];
            double r_311_100_2 = AmBx*pAx2[50] + pAx2[76];
            double r_131_100_2 = AmBx*pAx2[51] + pAx2[81];
            double r_113_100_2 = AmBx*pAx2[52] + pAx2[82];
            double r_122_100_2 = AmBx*pAx2[53] + pAx2[83];
            double r_212_100_2 = AmBx*pAx2[54] + pAx2[77];
            double r_221_100_2 = AmBx*pAx2[55] + pAx2[79];
            double r_600_100_2 = AmBx*pAx2[56] + pAx2[84];
            double r_510_100_2 = AmBx*pAx2[59] + pAx2[89];
            double r_501_100_2 = AmBx*pAx2[61] + pAx2[91];
            double r_420_100_2 = AmBx*pAx2[65] + pAx2[93];
            double r_402_100_2 = AmBx*pAx2[66] + pAx2[94];
            double r_330_100_2 = AmBx*pAx2[71] + pAx2[101];
            double r_303_100_2 = AmBx*pAx2[72] + pAx2[103];
            double r_411_100_2 = AmBx*pAx2[76] + pAx2[105];
            double r_312_100_2 = AmBx*pAx2[77] + pAx2[110];
            double r_132_100_2 = AmBx*pAx2[78] + pAx2[118];
            double r_321_100_2 = AmBx*pAx2[79] + pAx2[112];
            double r_123_100_2 = AmBx*pAx2[80] + pAx2[119];
            double r_231_100_2 = AmBx*pAx2[81] + pAx2[114];
            double r_213_100_2 = AmBx*pAx2[82] + pAx2[115];
            double r_222_100_2 = AmBx*pAx2[83] + pAx2[117];
            double r_700_100_2 = AmBx*pAx2[84] + pAx2[120];
            double r_610_100_2 = AmBx*pAx2[89] + pAx2[123];
            double r_601_100_2 = AmBx*pAx2[91] + pAx2[125];
            double r_520_100_2 = AmBx*pAx2[93] + pAx2[129];
            double r_502_100_2 = AmBx*pAx2[94] + pAx2[130];
            double r_430_100_2 = AmBx*pAx2[101] + pAx2[135];
            double r_403_100_2 = AmBx*pAx2[103] + pAx2[137];
            double r_511_100_2 = AmBx*pAx2[105] + pAx2[146];
            double r_412_100_2 = AmBx*pAx2[110] + pAx2[147];
            double r_421_100_2 = AmBx*pAx2[112] + pAx2[149];
            double r_331_100_2 = AmBx*pAx2[114] + pAx2[157];
            double r_313_100_2 = AmBx*pAx2[115] + pAx2[158];
            double r_322_100_2 = AmBx*pAx2[117] + pAx2[159];
            double r_232_100_2 = AmBx*pAx2[118] + pAx2[162];
            double r_223_100_2 = AmBx*pAx2[119] + pAx2[163];
            double b_010 = AmBy*pAx0[0] + pAx0[2];
            double r_100_010 = AmBy*pAx0[1] + pAx0[7];
            double r_010_010 = AmBy*pAx0[2] + pAx0[5];
            double r_001_010 = AmBy*pAx0[3] + pAx0[9];
            double r_200_010 = AmBy*pAx0[4] + pAx0[15];
            double r_020_010 = AmBy*pAx0[5] + pAx0[11];
            double r_110_010 = AmBy*pAx0[7] + pAx0[13];
            double r_101_010 = AmBy*pAx0[8] + pAx0[19];
            double r_011_010 = AmBy*pAx0[9] + pAx0[18];
            double r_030_010 = AmBy*pAx0[11] + pAx0[21];
            double r_120_010 = AmBy*pAx0[13] + pAx0[24];
            double r_210_010 = AmBy*pAx0[15] + pAx0[29];
            double r_021_010 = AmBy*pAx0[18] + pAx0[27];
            double r_111_010 = AmBy*pAx0[19] + pAx0[33];
            double b_010_1 = AmBy*pAx1[0] + pAx1[2];
            double r_100_010_1 = AmBy*pAx1[1] + pAx1[7];
            double r_010_010_1 = AmBy*pAx1[2] + pAx1[5];
            double r_001_010_1 = AmBy*pAx1[3] + pAx1[9];
            double r_200_010_1 = AmBy*pAx1[4] + pAx1[15];
            double r_020_010_1 = AmBy*pAx1[5] + pAx1[11];
            double r_002_010_1 = AmBy*pAx1[6] + pAx1[16];
            double r_110_010_1 = AmBy*pAx1[7] + pAx1[13];
            double r_101_010_1 = AmBy*pAx1[8] + pAx1[19];
            double r_011_010_1 = AmBy*pAx1[9] + pAx1[18];
            double r_030_010_1 = AmBy*pAx1[11] + pAx1[21];
            double r_003_010_1 = AmBy*pAx1[12] + pAx1[28];
            double r_120_010_1 = AmBy*pAx1[13] + pAx1[24];
            double r_102_010_1 = AmBy*pAx1[14] + pAx1[32];
            double r_210_010_1 = AmBy*pAx1[15] + pAx1[29];
            double r_012_010_1 = AmBy*pAx1[16] + pAx1[31];
            double r_201_010_1 = AmBy*pAx1[17] + pAx1[34];
            double r_021_010_1 = AmBy*pAx1[18] + pAx1[27];
            double r_111_010_1 = AmBy*pAx1[19] + pAx1[33];
            double r_040_010_1 = AmBy*pAx1[21] + pAx1[36];
            double r_130_010_1 = AmBy*pAx1[24] + pAx1[38];
            double r_031_010_1 = AmBy*pAx1[27] + pAx1[43];
            double r_013_010_1 = AmBy*pAx1[28] + pAx1[49];
            double r_220_010_1 = AmBy*pAx1[29] + pAx1[46];
            double r_022_010_1 = AmBy*pAx1[31] + pAx1[47];
            double r_112_010_1 = AmBy*pAx1[32] + pAx1[53];
            double r_121_010_1 = AmBy*pAx1[33] + pAx1[51];
            double r_211_010_1 = AmBy*pAx1[34] + pAx1[55];
            double r_050_010_1 = AmBy*pAx1[36] + pAx1[57];
            double r_140_010_1 = AmBy*pAx1[38] + pAx1[60];
            double r_041_010_1 = AmBy*pAx1[43] + pAx1[63];
            double r_230_010_1 = AmBy*pAx1[46] + pAx1[67];
            double r_032_010_1 = AmBy*pAx1[47] + pAx1[69];
            double r_023_010_1 = AmBy*pAx1[49] + pAx1[73];
            double r_131_010_1 = AmBy*pAx1[51] + pAx1[75];
            double r_122_010_1 = AmBy*pAx1[53] + pAx1[78];
            double r_221_010_1 = AmBy*pAx1[55] + pAx1[81];
            double b_010_2 = AmBy*pAx2[0] + pAx2[2];
            double r_100_010_2 = AmBy*pAx2[1] + pAx2[7];
            double r_010_010_2 = AmBy*pAx2[2] + pAx2[5];
            double r_001_010_2 = AmBy*pAx2[3] + pAx2[9];
            double r_200_010_2 = AmBy*pAx2[4] + pAx2[15];
            double r_020_010_2 = AmBy*pAx2[5] + pAx2[11];
            double r_002_010_2 = AmBy*pAx2[6] + pAx2[16];
            double r_110_010_2 = AmBy*pAx2[7] + pAx2[13];
            double r_101_010_2 = AmBy*pAx2[8] + pAx2[19];
            double r_011_010_2 = AmBy*pAx2[9] + pAx2[18];
            double r_300_010_2 = AmBy*pAx2[10] + pAx2[23];
            double r_030_010_2 = AmBy*pAx2[11] + pAx2[21];
            double r_003_010_2 = AmBy*pAx2[12] + pAx2[28];
            double r_120_010_2 = AmBy*pAx2[13] + pAx2[24];
            double r_102_010_2 = AmBy*pAx2[14] + pAx2[32];
            double r_210_010_2 = AmBy*pAx2[15] + pAx2[29];
            double r_012_010_2 = AmBy*pAx2[16] + pAx2[31];
            double r_201_010_2 = AmBy*pAx2[17] + pAx2[34];
            double r_021_010_2 = AmBy*pAx2[18] + pAx2[27];
            double r_111_010_2 = AmBy*pAx2[19] + pAx2[33];
            double r_400_010_2 = AmBy*pAx2[20] + pAx2[40];
            double r_040_010_2 = AmBy*pAx2[21] + pAx2[36];
            double r_310_010_2 = AmBy*pAx2[23] + pAx2[44];
            double r_130_010_2 = AmBy*pAx2[24] + pAx2[38];
            double r_301_010_2 = AmBy*pAx2[25] + pAx2[50];
            double r_103_010_2 = AmBy*pAx2[26] + pAx2[52];
            double r_031_010_2 = AmBy*pAx2[27] + pAx2[43];
            double r_013_010_2 = AmBy*pAx2[28] + pAx2[49];
            double r_220_010_2 = AmBy*pAx2[29] + pAx2[46];
            double r_202_010_2 = AmBy*pAx2[30] + pAx2[54];
            double r_022_010_2 = AmBy*pAx2[31] + pAx2[47];
            double r_112_010_2 = AmBy*pAx2[32] + pAx2[53];
            double r_121_010_2 = AmBy*pAx2[33] + pAx2[51];
            double r_211_010_2 = AmBy*pAx2[34] + pAx2[55];
            double r_050_010_2 = AmBy*pAx2[36] + pAx2[57];
            double r_140_010_2 = AmBy*pAx2[38] + pAx2[60];
            double r_410_010_2 = AmBy*pAx2[40] + pAx2[65];
            double r_041_010_2 = AmBy*pAx2[43] + pAx2[63];
            double r_320_010_2 = AmBy*pAx2[44] + pAx2[71];
            double r_230_010_2 = AmBy*pAx2[46] + pAx2[67];
            double r_032_010_2 = AmBy*pAx2[47] + pAx2[69];
            double r_203_010_2 = AmBy*pAx2[48] + pAx2[82];
            double r_023_010_2 = AmBy*pAx2[49] + pAx2[73];
            double r_311_010_2 = AmBy*pAx2[50] + pAx2[79];
            double r_131_010_2 = AmBy*pAx2[51] + pAx2[75];
            double r_113_010_2 = AmBy*pAx2[52] + pAx2[80];
            double r_122_010_2 = AmBy*pAx2[53] + pAx2[78];
            double r_212_010_2 = AmBy*pAx2[54] + pAx2[83];
            double r_221_010_2 = AmBy*pAx2[55] + pAx2[81];
            double r_060_010_2 = AmBy*pAx2[57] + pAx2[85];
            double r_150_010_2 = AmBy*pAx2[60] + pAx2[87];
            double r_051_010_2 = AmBy*pAx2[63] + pAx2[92];
            double r_420_010_2 = AmBy*pAx2[65] + pAx2[101];
            double r_240_010_2 = AmBy*pAx2[67] + pAx2[95];
            double r_042_010_2 = AmBy*pAx2[69] + pAx2[96];
            double r_330_010_2 = AmBy*pAx2[71] + pAx2[99];
            double r_033_010_2 = AmBy*pAx2[73] + pAx2[104];
            double r_141_010_2 = AmBy*pAx2[75] + pAx2[106];
            double r_132_010_2 = AmBy*pAx2[78] + pAx2[108];
            double r_321_010_2 = AmBy*pAx2[79] + pAx2[114];
            double r_123_010_2 = AmBy*pAx2[80] + pAx2[116];
            double r_231_010_2 = AmBy*pAx2[81] + pAx2[113];
            double r_213_010_2 = AmBy*pAx2[82] + pAx2[119];
            double r_222_010_2 = AmBy*pAx2[83] + pAx2[118];
            double r_070_010_2 = AmBy*pAx2[85] + pAx2[121];
            double r_160_010_2 = AmBy*pAx2[87] + pAx2[124];
            double r_061_010_2 = AmBy*pAx2[92] + pAx2[127];
            double r_250_010_2 = AmBy*pAx2[95] + pAx2[131];
            double r_052_010_2 = AmBy*pAx2[96] + pAx2[133];
            double r_340_010_2 = AmBy*pAx2[99] + pAx2[136];
            double r_430_010_2 = AmBy*pAx2[101] + pAx2[141];
            double r_043_010_2 = AmBy*pAx2[104] + pAx2[139];
            double r_151_010_2 = AmBy*pAx2[106] + pAx2[145];
            double r_142_010_2 = AmBy*pAx2[108] + pAx2[148];
            double r_241_010_2 = AmBy*pAx2[113] + pAx2[151];
            double r_331_010_2 = AmBy*pAx2[114] + pAx2[155];
            double r_133_010_2 = AmBy*pAx2[116] + pAx2[156];
            double r_232_010_2 = AmBy*pAx2[118] + pAx2[160];
            double r_223_010_2 = AmBy*pAx2[119] + pAx2[164];
            double b_001 = AmBz*pAx0[0] + pAx0[3];
            double r_100_001 = AmBz*pAx0[1] + pAx0[8];
            double r_010_001 = AmBz*pAx0[2] + pAx0[9];
            double r_001_001 = AmBz*pAx0[3] + pAx0[6];
            double r_200_001 = AmBz*pAx0[4] + pAx0[17];
            double r_020_001 = AmBz*pAx0[5] + pAx0[18];
            double r_002_001 = AmBz*pAx0[6] + pAx0[12];
            double r_110_001 = AmBz*pAx0[7] + pAx0[19];
            double r_101_001 = AmBz*pAx0[8] + pAx0[14];
            double r_011_001 = AmBz*pAx0[9] + pAx0[16];
            double r_003_001 = AmBz*pAx0[12] + pAx0[22];
            double r_102_001 = AmBz*pAx0[14] + pAx0[26];
            double r_012_001 = AmBz*pAx0[16] + pAx0[28];
            double r_201_001 = AmBz*pAx0[17] + pAx0[30];
            double r_021_001 = AmBz*pAx0[18] + pAx0[31];
            double r_111_001 = AmBz*pAx0[19] + pAx0[32];
            double b_001_1 = AmBz*pAx1[0] + pAx1[3];
            double r_100_001_1 = AmBz*pAx1[1] + pAx1[8];
            double r_010_001_1 = AmBz*pAx1[2] + pAx1[9];
            double r_001_001_1 = AmBz*pAx1[3] + pAx1[6];
            double r_200_001_1 = AmBz*pAx1[4] + pAx1[17];
            double r_020_001_1 = AmBz*pAx1[5] + pAx1[18];
            double r_002_001_1 = AmBz*pAx1[6] + pAx1[12];
            double r_110_001_1 = AmBz*pAx1[7] + pAx1[19];
            double r_101_001_1 = AmBz*pAx1[8] + pAx1[14];
            double r_011_001_1 = AmBz*pAx1[9] + pAx1[16];
            double r_003_001_1 = AmBz*pAx1[12] + pAx1[22];
            double r_120_001_1 = AmBz*pAx1[13] + pAx1[33];
            double r_102_001_1 = AmBz*pAx1[14] + pAx1[26];
            double r_210_001_1 = AmBz*pAx1[15] + pAx1[34];
            double r_012_001_1 = AmBz*pAx1[16] + pAx1[28];
            double r_201_001_1 = AmBz*pAx1[17] + pAx1[30];
            double r_021_001_1 = AmBz*pAx1[18] + pAx1[31];
            double r_111_001_1 = AmBz*pAx1[19] + pAx1[32];
            double r_004_001_1 = AmBz*pAx1[22] + pAx1[37];
            double r_103_001_1 = AmBz*pAx1[26] + pAx1[39];
            double r_013_001_1 = AmBz*pAx1[28] + pAx1[41];
            double r_220_001_1 = AmBz*pAx1[29] + pAx1[55];
            double r_202_001_1 = AmBz*pAx1[30] + pAx1[48];
            double r_022_001_1 = AmBz*pAx1[31] + pAx1[49];
            double r_112_001_1 = AmBz*pAx1[32] + pAx1[52];
            double r_121_001_1 = AmBz*pAx1[33] + pAx1[53];
            double r_211_001_1 = AmBz*pAx1[34] + pAx1[54];
            double r_005_001_1 = AmBz*pAx1[37] + pAx1[58];
            double r_104_001_1 = AmBz*pAx1[39] + pAx1[62];
            double r_014_001_1 = AmBz*pAx1[41] + pAx1[64];
            double r_203_001_1 = AmBz*pAx1[48] + pAx1[68];
            double r_023_001_1 = AmBz*pAx1[49] + pAx1[70];
            double r_113_001_1 = AmBz*pAx1[52] + pAx1[74];
            double r_122_001_1 = AmBz*pAx1[53] + pAx1[80];
            double r_212_001_1 = AmBz*pAx1[54] + pAx1[82];
            double r_221_001_1 = AmBz*pAx1[55] + pAx1[83];
            double b_001_2 = AmBz*pAx2[0] + pAx2[3];
            double r_100_001_2 = AmBz*pAx2[1] + pAx2[8];
            double r_010_001_2 = AmBz*pAx2[2] + pAx2[9];
            double r_001_001_2 = AmBz*pAx2[3] + pAx2[6];
            double r_200_001_2 = AmBz*pAx2[4] + pAx2[17];
            double r_020_001_2 = AmBz*pAx2[5] + pAx2[18];
            double r_002_001_2 = AmBz*pAx2[6] + pAx2[12];
            double r_110_001_2 = AmBz*pAx2[7] + pAx2[19];
            double r_101_001_2 = AmBz*pAx2[8] + pAx2[14];
            double r_011_001_2 = AmBz*pAx2[9] + pAx2[16];
            double r_300_001_2 = AmBz*pAx2[10] + pAx2[25];
            double r_030_001_2 = AmBz*pAx2[11] + pAx2[27];
            double r_003_001_2 = AmBz*pAx2[12] + pAx2[22];
            double r_120_001_2 = AmBz*pAx2[13] + pAx2[33];
            double r_102_001_2 = AmBz*pAx2[14] + pAx2[26];
            double r_210_001_2 = AmBz*pAx2[15] + pAx2[34];
            double r_012_001_2 = AmBz*pAx2[16] + pAx2[28];
            double r_201_001_2 = AmBz*pAx2[17] + pAx2[30];
            double r_021_001_2 = AmBz*pAx2[18] + pAx2[31];
            double r_111_001_2 = AmBz*pAx2[19] + pAx2[32];
            double r_400_001_2 = AmBz*pAx2[20] + pAx2[42];
            double r_040_001_2 = AmBz*pAx2[21] + pAx2[43];
            double r_004_001_2 = AmBz*pAx2[22] + pAx2[37];
            double r_310_001_2 = AmBz*pAx2[23] + pAx2[50];
            double r_130_001_2 = AmBz*pAx2[24] + pAx2[51];
            double r_301_001_2 = AmBz*pAx2[25] + pAx2[45];
            double r_103_001_2 = AmBz*pAx2[26] + pAx2[39];
            double r_031_001_2 = AmBz*pAx2[27] + pAx2[47];
            double r_013_001_2 = AmBz*pAx2[28] + pAx2[41];
            double r_220_001_2 = AmBz*pAx2[29] + pAx2[55];
            double r_202_001_2 = AmBz*pAx2[30] + pAx2[48];
            double r_022_001_2 = AmBz*pAx2[31] + pAx2[49];
            double r_112_001_2 = AmBz*pAx2[32] + pAx2[52];
            double r_121_001_2 = AmBz*pAx2[33] + pAx2[53];
            double r_211_001_2 = AmBz*pAx2[34] + pAx2[54];
            double r_005_001_2 = AmBz*pAx2[37] + pAx2[58];
            double r_104_001_2 = AmBz*pAx2[39] + pAx2[62];
            double r_014_001_2 = AmBz*pAx2[41] + pAx2[64];
            double r_401_001_2 = AmBz*pAx2[42] + pAx2[66];
            double r_041_001_2 = AmBz*pAx2[43] + pAx2[69];
            double r_302_001_2 = AmBz*pAx2[45] + pAx2[72];
            double r_032_001_2 = AmBz*pAx2[47] + pAx2[73];
            double r_203_001_2 = AmBz*pAx2[48] + pAx2[68];
            double r_023_001_2 = AmBz*pAx2[49] + pAx2[70];
            double r_311_001_2 = AmBz*pAx2[50] + pAx2[77];
            double r_131_001_2 = AmBz*pAx2[51] + pAx2[78];
            double r_113_001_2 = AmBz*pAx2[52] + pAx2[74];
            double r_122_001_2 = AmBz*pAx2[53] + pAx2[80];
            double r_212_001_2 = AmBz*pAx2[54] + pAx2[82];
            double r_221_001_2 = AmBz*pAx2[55] + pAx2[83];
            double r_006_001_2 = AmBz*pAx2[58] + pAx2[86];
            double r_105_001_2 = AmBz*pAx2[62] + pAx2[88];
            double r_015_001_2 = AmBz*pAx2[64] + pAx2[90];
            double r_402_001_2 = AmBz*pAx2[66] + pAx2[103];
            double r_204_001_2 = AmBz*pAx2[68] + pAx2[97];
            double r_042_001_2 = AmBz*pAx2[69] + pAx2[104];
            double r_024_001_2 = AmBz*pAx2[70] + pAx2[98];
            double r_303_001_2 = AmBz*pAx2[72] + pAx2[100];
            double r_033_001_2 = AmBz*pAx2[73] + pAx2[102];
            double r_114_001_2 = AmBz*pAx2[74] + pAx2[107];
            double r_312_001_2 = AmBz*pAx2[77] + pAx2[115];
            double r_132_001_2 = AmBz*pAx2[78] + pAx2[116];
            double r_123_001_2 = AmBz*pAx2[80] + pAx2[109];
            double r_213_001_2 = AmBz*pAx2[82] + pAx2[111];
            double r_222_001_2 = AmBz*pAx2[83] + pAx2[119];
            double r_007_001_2 = AmBz*pAx2[86] + pAx2[122];
            double r_106_001_2 = AmBz*pAx2[88] + pAx2[126];
            double r_016_001_2 = AmBz*pAx2[90] + pAx2[128];
            double r_205_001_2 = AmBz*pAx2[97] + pAx2[132];
            double r_025_001_2 = AmBz*pAx2[98] + pAx2[134];
            double r_304_001_2 = AmBz*pAx2[100] + pAx2[138];
            double r_034_001_2 = AmBz*pAx2[102] + pAx2[140];
            double r_403_001_2 = AmBz*pAx2[103] + pAx2[142];
            double r_043_001_2 = AmBz*pAx2[104] + pAx2[143];
            double r_115_001_2 = AmBz*pAx2[107] + pAx2[144];
            double r_124_001_2 = AmBz*pAx2[109] + pAx2[150];
            double r_214_001_2 = AmBz*pAx2[111] + pAx2[152];
            double r_313_001_2 = AmBz*pAx2[115] + pAx2[153];
            double r_133_001_2 = AmBz*pAx2[116] + pAx2[154];
            double r_223_001_2 = AmBz*pAx2[119] + pAx2[161];
            double b_200 = AmBx*b_100 + r_100_100;
            double r_100_200 = AmBx*r_100_100 + r_200_100;
            double r_010_200 = AmBx*r_010_100 + r_110_100;
            double r_001_200 = AmBx*r_001_100 + r_101_100;
            double r_200_200 = AmBx*r_200_100 + r_300_100;
            double r_110_200 = AmBx*r_110_100 + r_210_100;
            double r_101_200 = AmBx*r_101_100 + r_201_100;
            double r_011_200 = AmBx*r_011_100 + r_111_100;
            double b_200_1 = AmBx*b_100_1 + r_100_100_1;
            double r_100_200_1 = AmBx*r_100_100_1 + r_200_100_1;
            double r_010_200_1 = AmBx*r_010_100_1 + r_110_100_1;
            double r_001_200_1 = AmBx*r_001_100_1 + r_101_100_1;
            double r_200_200_1 = AmBx*r_200_100_1 + r_300_100_1;
            double r_020_200_1 = AmBx*r_020_100_1 + r_120_100_1;
            double r_002_200_1 = AmBx*r_002_100_1 + r_102_100_1;
            double r_110_200_1 = AmBx*r_110_100_1 + r_210_100_1;
            double r_101_200_1 = AmBx*r_101_100_1 + r_201_100_1;
            double r_011_200_1 = AmBx*r_011_100_1 + r_111_100_1;
            double r_300_200_1 = AmBx*r_300_100_1 + r_400_100_1;
            double r_030_200_1 = AmBx*r_030_100_1 + r_130_100_1;
            double r_003_200_1 = AmBx*r_003_100_1 + r_103_100_1;
            double r_120_200_1 = AmBx*r_120_100_1 + r_220_100_1;
            double r_102_200_1 = AmBx*r_102_100_1 + r_202_100_1;
            double r_210_200_1 = AmBx*r_210_100_1 + r_310_100_1;
            double r_012_200_1 = AmBx*r_012_100_1 + r_112_100_1;
            double r_201_200_1 = AmBx*r_201_100_1 + r_301_100_1;
            double r_021_200_1 = AmBx*r_021_100_1 + r_121_100_1;
            double r_111_200_1 = AmBx*r_111_100_1 + r_211_100_1;
            double r_400_200_1 = AmBx*r_400_100_1 + r_500_100_1;
            double r_310_200_1 = AmBx*r_310_100_1 + r_410_100_1;
            double r_130_200_1 = AmBx*r_130_100_1 + r_230_100_1;
            double r_301_200_1 = AmBx*r_301_100_1 + r_401_100_1;
            double r_103_200_1 = AmBx*r_103_100_1 + r_203_100_1;
            double r_220_200_1 = AmBx*r_220_100_1 + r_320_100_1;
            double r_202_200_1 = AmBx*r_202_100_1 + r_302_100_1;
            double r_112_200_1 = AmBx*r_112_100_1 + r_212_100_1;
            double r_121_200_1 = AmBx*r_121_100_1 + r_221_100_1;
            double r_211_200_1 = AmBx*r_211_100_1 + r_311_100_1;
            double b_200_2 = AmBx*b_100_2 + r_100_100_2;
            double r_100_200_2 = AmBx*r_100_100_2 + r_200_100_2;
            double r_010_200_2 = AmBx*r_010_100_2 + r_110_100_2;
            double r_001_200_2 = AmBx*r_001_100_2 + r_101_100_2;
            double r_200_200_2 = AmBx*r_200_100_2 + r_300_100_2;
            double r_020_200_2 = AmBx*r_020_100_2 + r_120_100_2;
            double r_002_200_2 = AmBx*r_002_100_2 + r_102_100_2;
            double r_110_200_2 = AmBx*r_110_100_2 + r_210_100_2;
            double r_101_200_2 = AmBx*r_101_100_2 + r_201_100_2;
            double r_011_200_2 = AmBx*r_011_100_2 + r_111_100_2;
            double r_300_200_2 = AmBx*r_300_100_2 + r_400_100_2;
            double r_030_200_2 = AmBx*r_030_100_2 + r_130_100_2;
            double r_003_200_2 = AmBx*r_003_100_2 + r_103_100_2;
            double r_120_200_2 = AmBx*r_120_100_2 + r_220_100_2;
            double r_102_200_2 = AmBx*r_102_100_2 + r_202_100_2;
            double r_210_200_2 = AmBx*r_210_100_2 + r_310_100_2;
            double r_012_200_2 = AmBx*r_012_100_2 + r_112_100_2;
            double r_201_200_2 = AmBx*r_201_100_2 + r_301_100_2;
            double r_021_200_2 = AmBx*r_021_100_2 + r_121_100_2;
            double r_111_200_2 = AmBx*r_111_100_2 + r_211_100_2;
            double r_400_200_2 = AmBx*r_400_100_2 + r_500_100_2;
            double r_310_200_2 = AmBx*r_310_100_2 + r_410_100_2;
            double r_130_200_2 = AmBx*r_130_100_2 + r_230_100_2;
            double r_301_200_2 = AmBx*r_301_100_2 + r_401_100_2;
            double r_103_200_2 = AmBx*r_103_100_2 + r_203_100_2;
            double r_031_200_2 = AmBx*r_031_100_2 + r_131_100_2;
            double r_013_200_2 = AmBx*r_013_100_2 + r_113_100_2;
            double r_220_200_2 = AmBx*r_220_100_2 + r_320_100_2;
            double r_202_200_2 = AmBx*r_202_100_2 + r_302_100_2;
            double r_022_200_2 = AmBx*r_022_100_2 + r_122_100_2;
            double r_112_200_2 = AmBx*r_112_100_2 + r_212_100_2;
            double r_121_200_2 = AmBx*r_121_100_2 + r_221_100_2;
            double r_211_200_2 = AmBx*r_211_100_2 + r_311_100_2;
            double r_500_200_2 = AmBx*r_500_100_2 + r_600_100_2;
            double r_410_200_2 = AmBx*r_410_100_2 + r_510_100_2;
            double r_401_200_2 = AmBx*r_401_100_2 + r_501_100_2;
            double r_320_200_2 = AmBx*r_320_100_2 + r_420_100_2;
            double r_302_200_2 = AmBx*r_302_100_2 + r_402_100_2;
            double r_230_200_2 = AmBx*r_230_100_2 + r_330_100_2;
            double r_032_200_2 = AmBx*r_032_100_2 + r_132_100_2;
            double r_203_200_2 = AmBx*r_203_100_2 + r_303_100_2;
            double r_023_200_2 = AmBx*r_023_100_2 + r_123_100_2;
            double r_311_200_2 = AmBx*r_311_100_2 + r_411_100_2;
            double r_131_200_2 = AmBx*r_131_100_2 + r_231_100_2;
            double r_113_200_2 = AmBx*r_113_100_2 + r_213_100_2;
            double r_122_200_2 = AmBx*r_122_100_2 + r_222_100_2;
            double r_212_200_2 = AmBx*r_212_100_2 + r_312_100_2;
            double r_221_200_2 = AmBx*r_221_100_2 + r_321_100_2;
            double r_600_200_2 = AmBx*r_600_100_2 + r_700_100_2;
            double r_510_200_2 = AmBx*r_510_100_2 + r_610_100_2;
            double r_501_200_2 = AmBx*r_501_100_2 + r_601_100_2;
            double r_420_200_2 = AmBx*r_420_100_2 + r_520_100_2;
            double r_402_200_2 = AmBx*r_402_100_2 + r_502_100_2;
            double r_330_200_2 = AmBx*r_330_100_2 + r_430_100_2;
            double r_303_200_2 = AmBx*r_303_100_2 + r_403_100_2;
            double r_411_200_2 = AmBx*r_411_100_2 + r_511_100_2;
            double r_312_200_2 = AmBx*r_312_100_2 + r_412_100_2;
            double r_132_200_2 = AmBx*r_132_100_2 + r_232_100_2;
            double r_321_200_2 = AmBx*r_321_100_2 + r_421_100_2;
            double r_123_200_2 = AmBx*r_123_100_2 + r_223_100_2;
            double r_231_200_2 = AmBx*r_231_100_2 + r_331_100_2;
            double r_213_200_2 = AmBx*r_213_100_2 + r_313_100_2;
            double r_222_200_2 = AmBx*r_222_100_2 + r_322_100_2;
            double b_020 = AmBy*b_010 + r_010_010;
            double r_100_020 = AmBy*r_100_010 + r_110_010;
            double r_010_020 = AmBy*r_010_010 + r_020_010;
            double r_001_020 = AmBy*r_001_010 + r_011_010;
            double r_200_020 = AmBy*r_200_010 + r_210_010;
            double r_020_020 = AmBy*r_020_010 + r_030_010;
            double r_110_020 = AmBy*r_110_010 + r_120_010;
            double r_101_020 = AmBy*r_101_010 + r_111_010;
            double r_011_020 = AmBy*r_011_010 + r_021_010;
            double b_020_1 = AmBy*b_010_1 + r_010_010_1;
            double r_100_020_1 = AmBy*r_100_010_1 + r_110_010_1;
            double r_010_020_1 = AmBy*r_010_010_1 + r_020_010_1;
            double r_001_020_1 = AmBy*r_001_010_1 + r_011_010_1;
            double r_200_020_1 = AmBy*r_200_010_1 + r_210_010_1;
            double r_020_020_1 = AmBy*r_020_010_1 + r_030_010_1;
            double r_002_020_1 = AmBy*r_002_010_1 + r_012_010_1;
            double r_110_020_1 = AmBy*r_110_010_1 + r_120_010_1;
            double r_101_020_1 = AmBy*r_101_010_1 + r_111_010_1;
            double r_011_020_1 = AmBy*r_011_010_1 + r_021_010_1;
            double r_030_020_1 = AmBy*r_030_010_1 + r_040_010_1;
            double r_003_020_1 = AmBy*r_003_010_1 + r_013_010_1;
            double r_120_020_1 = AmBy*r_120_010_1 + r_130_010_1;
            double r_102_020_1 = AmBy*r_102_010_1 + r_112_010_1;
            double r_210_020_1 = AmBy*r_210_010_1 + r_220_010_1;
            double r_012_020_1 = AmBy*r_012_010_1 + r_022_010_1;
            double r_201_020_1 = AmBy*r_201_010_1 + r_211_010_1;
            double r_021_020_1 = AmBy*r_021_010_1 + r_031_010_1;
            double r_111_020_1 = AmBy*r_111_010_1 + r_121_010_1;
            double r_040_020_1 = AmBy*r_040_010_1 + r_050_010_1;
            double r_130_020_1 = AmBy*r_130_010_1 + r_140_010_1;
            double r_031_020_1 = AmBy*r_031_010_1 + r_041_010_1;
            double r_013_020_1 = AmBy*r_013_010_1 + r_023_010_1;
            double r_220_020_1 = AmBy*r_220_010_1 + r_230_010_1;
            double r_022_020_1 = AmBy*r_022_010_1 + r_032_010_1;
            double r_112_020_1 = AmBy*r_112_010_1 + r_122_010_1;
            double r_121_020_1 = AmBy*r_121_010_1 + r_131_010_1;
            double r_211_020_1 = AmBy*r_211_010_1 + r_221_010_1;
            double b_020_2 = AmBy*b_010_2 + r_010_010_2;
            double r_100_020_2 = AmBy*r_100_010_2 + r_110_010_2;
            double r_010_020_2 = AmBy*r_010_010_2 + r_020_010_2;
            double r_001_020_2 = AmBy*r_001_010_2 + r_011_010_2;
            double r_200_020_2 = AmBy*r_200_010_2 + r_210_010_2;
            double r_020_020_2 = AmBy*r_020_010_2 + r_030_010_2;
            double r_002_020_2 = AmBy*r_002_010_2 + r_012_010_2;
            double r_110_020_2 = AmBy*r_110_010_2 + r_120_010_2;
            double r_101_020_2 = AmBy*r_101_010_2 + r_111_010_2;
            double r_011_020_2 = AmBy*r_011_010_2 + r_021_010_2;
            double r_300_020_2 = AmBy*r_300_010_2 + r_310_010_2;
            double r_030_020_2 = AmBy*r_030_010_2 + r_040_010_2;
            double r_003_020_2 = AmBy*r_003_010_2 + r_013_010_2;
            double r_120_020_2 = AmBy*r_120_010_2 + r_130_010_2;
            double r_102_020_2 = AmBy*r_102_010_2 + r_112_010_2;
            double r_210_020_2 = AmBy*r_210_010_2 + r_220_010_2;
            double r_012_020_2 = AmBy*r_012_010_2 + r_022_010_2;
            double r_201_020_2 = AmBy*r_201_010_2 + r_211_010_2;
            double r_021_020_2 = AmBy*r_021_010_2 + r_031_010_2;
            double r_111_020_2 = AmBy*r_111_010_2 + r_121_010_2;
            double r_400_020_2 = AmBy*r_400_010_2 + r_410_010_2;
            double r_040_020_2 = AmBy*r_040_010_2 + r_050_010_2;
            double r_310_020_2 = AmBy*r_310_010_2 + r_320_010_2;
            double r_130_020_2 = AmBy*r_130_010_2 + r_140_010_2;
            double r_301_020_2 = AmBy*r_301_010_2 + r_311_010_2;
            double r_103_020_2 = AmBy*r_103_010_2 + r_113_010_2;
            double r_031_020_2 = AmBy*r_031_010_2 + r_041_010_2;
            double r_013_020_2 = AmBy*r_013_010_2 + r_023_010_2;
            double r_220_020_2 = AmBy*r_220_010_2 + r_230_010_2;
            double r_202_020_2 = AmBy*r_202_010_2 + r_212_010_2;
            double r_022_020_2 = AmBy*r_022_010_2 + r_032_010_2;
            double r_112_020_2 = AmBy*r_112_010_2 + r_122_010_2;
            double r_121_020_2 = AmBy*r_121_010_2 + r_131_010_2;
            double r_211_020_2 = AmBy*r_211_010_2 + r_221_010_2;
            double r_050_020_2 = AmBy*r_050_010_2 + r_060_010_2;
            double r_140_020_2 = AmBy*r_140_010_2 + r_150_010_2;
            double r_410_020_2 = AmBy*r_410_010_2 + r_420_010_2;
            double r_041_020_2 = AmBy*r_041_010_2 + r_051_010_2;
            double r_320_020_2 = AmBy*r_320_010_2 + r_330_010_2;
            double r_230_020_2 = AmBy*r_230_010_2 + r_240_010_2;
            double r_032_020_2 = AmBy*r_032_010_2 + r_042_010_2;
            double r_203_020_2 = AmBy*r_203_010_2 + r_213_010_2;
            double r_023_020_2 = AmBy*r_023_010_2 + r_033_010_2;
            double r_311_020_2 = AmBy*r_311_010_2 + r_321_010_2;
            double r_131_020_2 = AmBy*r_131_010_2 + r_141_010_2;
            double r_113_020_2 = AmBy*r_113_010_2 + r_123_010_2;
            double r_122_020_2 = AmBy*r_122_010_2 + r_132_010_2;
            double r_212_020_2 = AmBy*r_212_010_2 + r_222_010_2;
            double r_221_020_2 = AmBy*r_221_010_2 + r_231_010_2;
            double r_060_020_2 = AmBy*r_060_010_2 + r_070_010_2;
            double r_150_020_2 = AmBy*r_150_010_2 + r_160_010_2;
            double r_051_020_2 = AmBy*r_051_010_2 + r_061_010_2;
            double r_420_020_2 = AmBy*r_420_010_2 + r_430_010_2;
            double r_240_020_2 = AmBy*r_240_010_2 + r_250_010_2;
            double r_042_020_2 = AmBy*r_042_010_2 + r_052_010_2;
            double r_330_020_2 = AmBy*r_330_010_2 + r_340_010_2;
            double r_033_020_2 = AmBy*r_033_010_2 + r_043_010_2;
            double r_141_020_2 = AmBy*r_141_010_2 + r_151_010_2;
            double r_132_020_2 = AmBy*r_132_010_2 + r_142_010_2;
            double r_321_020_2 = AmBy*r_321_010_2 + r_331_010_2;
            double r_123_020_2 = AmBy*r_123_010_2 + r_133_010_2;
            double r_231_020_2 = AmBy*r_231_010_2 + r_241_010_2;
            double r_213_020_2 = AmBy*r_213_010_2 + r_223_010_2;
            double r_222_020_2 = AmBy*r_222_010_2 + r_232_010_2;
            double b_002 = AmBz*b_001 + r_001_001;
            double r_100_002 = AmBz*r_100_001 + r_101_001;
            double r_010_002 = AmBz*r_010_001 + r_011_001;
            double r_001_002 = AmBz*r_001_001 + r_002_001;
            double r_200_002 = AmBz*r_200_001 + r_201_001;
            double r_020_002 = AmBz*r_020_001 + r_021_001;
            double r_002_002 = AmBz*r_002_001 + r_003_001;
            double r_110_002 = AmBz*r_110_001 + r_111_001;
            double r_101_002 = AmBz*r_101_001 + r_102_001;
            double r_011_002 = AmBz*r_011_001 + r_012_001;
            double b_002_1 = AmBz*b_001_1 + r_001_001_1;
            double r_100_002_1 = AmBz*r_100_001_1 + r_101_001_1;
            double r_010_002_1 = AmBz*r_010_001_1 + r_011_001_1;
            double r_001_002_1 = AmBz*r_001_001_1 + r_002_001_1;
            double r_200_002_1 = AmBz*r_200_001_1 + r_201_001_1;
            double r_020_002_1 = AmBz*r_020_001_1 + r_021_001_1;
            double r_002_002_1 = AmBz*r_002_001_1 + r_003_001_1;
            double r_110_002_1 = AmBz*r_110_001_1 + r_111_001_1;
            double r_101_002_1 = AmBz*r_101_001_1 + r_102_001_1;
            double r_011_002_1 = AmBz*r_011_001_1 + r_012_001_1;
            double r_003_002_1 = AmBz*r_003_001_1 + r_004_001_1;
            double r_120_002_1 = AmBz*r_120_001_1 + r_121_001_1;
            double r_102_002_1 = AmBz*r_102_001_1 + r_103_001_1;
            double r_210_002_1 = AmBz*r_210_001_1 + r_211_001_1;
            double r_012_002_1 = AmBz*r_012_001_1 + r_013_001_1;
            double r_201_002_1 = AmBz*r_201_001_1 + r_202_001_1;
            double r_021_002_1 = AmBz*r_021_001_1 + r_022_001_1;
            double r_111_002_1 = AmBz*r_111_001_1 + r_112_001_1;
            double r_004_002_1 = AmBz*r_004_001_1 + r_005_001_1;
            double r_103_002_1 = AmBz*r_103_001_1 + r_104_001_1;
            double r_013_002_1 = AmBz*r_013_001_1 + r_014_001_1;
            double r_220_002_1 = AmBz*r_220_001_1 + r_221_001_1;
            double r_202_002_1 = AmBz*r_202_001_1 + r_203_001_1;
            double r_022_002_1 = AmBz*r_022_001_1 + r_023_001_1;
            double r_112_002_1 = AmBz*r_112_001_1 + r_113_001_1;
            double r_121_002_1 = AmBz*r_121_001_1 + r_122_001_1;
            double r_211_002_1 = AmBz*r_211_001_1 + r_212_001_1;
            double b_002_2 = AmBz*b_001_2 + r_001_001_2;
            double r_100_002_2 = AmBz*r_100_001_2 + r_101_001_2;
            double r_010_002_2 = AmBz*r_010_001_2 + r_011_001_2;
            double r_001_002_2 = AmBz*r_001_001_2 + r_002_001_2;
            double r_200_002_2 = AmBz*r_200_001_2 + r_201_001_2;
            double r_020_002_2 = AmBz*r_020_001_2 + r_021_001_2;
            double r_002_002_2 = AmBz*r_002_001_2 + r_003_001_2;
            double r_110_002_2 = AmBz*r_110_001_2 + r_111_001_2;
            double r_101_002_2 = AmBz*r_101_001_2 + r_102_001_2;
            double r_011_002_2 = AmBz*r_011_001_2 + r_012_001_2;
            double r_300_002_2 = AmBz*r_300_001_2 + r_301_001_2;
            double r_030_002_2 = AmBz*r_030_001_2 + r_031_001_2;
            double r_003_002_2 = AmBz*r_003_001_2 + r_004_001_2;
            double r_120_002_2 = AmBz*r_120_001_2 + r_121_001_2;
            double r_102_002_2 = AmBz*r_102_001_2 + r_103_001_2;
            double r_210_002_2 = AmBz*r_210_001_2 + r_211_001_2;
            double r_012_002_2 = AmBz*r_012_001_2 + r_013_001_2;
            double r_201_002_2 = AmBz*r_201_001_2 + r_202_001_2;
            double r_021_002_2 = AmBz*r_021_001_2 + r_022_001_2;
            double r_111_002_2 = AmBz*r_111_001_2 + r_112_001_2;
            double r_400_002_2 = AmBz*r_400_001_2 + r_401_001_2;
            double r_040_002_2 = AmBz*r_040_001_2 + r_041_001_2;
            double r_004_002_2 = AmBz*r_004_001_2 + r_005_001_2;
            double r_310_002_2 = AmBz*r_310_001_2 + r_311_001_2;
            double r_130_002_2 = AmBz*r_130_001_2 + r_131_001_2;
            double r_301_002_2 = AmBz*r_301_001_2 + r_302_001_2;
            double r_103_002_2 = AmBz*r_103_001_2 + r_104_001_2;
            double r_031_002_2 = AmBz*r_031_001_2 + r_032_001_2;
            double r_013_002_2 = AmBz*r_013_001_2 + r_014_001_2;
            double r_220_002_2 = AmBz*r_220_001_2 + r_221_001_2;
            double r_202_002_2 = AmBz*r_202_001_2 + r_203_001_2;
            double r_022_002_2 = AmBz*r_022_001_2 + r_023_001_2;
            double r_112_002_2 = AmBz*r_112_001_2 + r_113_001_2;
            double r_121_002_2 = AmBz*r_121_001_2 + r_122_001_2;
            double r_211_002_2 = AmBz*r_211_001_2 + r_212_001_2;
            double r_005_002_2 = AmBz*r_005_001_2 + r_006_001_2;
            double r_104_002_2 = AmBz*r_104_001_2 + r_105_001_2;
            double r_014_002_2 = AmBz*r_014_001_2 + r_015_001_2;
            double r_401_002_2 = AmBz*r_401_001_2 + r_402_001_2;
            double r_041_002_2 = AmBz*r_041_001_2 + r_042_001_2;
            double r_302_002_2 = AmBz*r_302_001_2 + r_303_001_2;
            double r_032_002_2 = AmBz*r_032_001_2 + r_033_001_2;
            double r_203_002_2 = AmBz*r_203_001_2 + r_204_001_2;
            double r_023_002_2 = AmBz*r_023_001_2 + r_024_001_2;
            double r_311_002_2 = AmBz*r_311_001_2 + r_312_001_2;
            double r_131_002_2 = AmBz*r_131_001_2 + r_132_001_2;
            double r_113_002_2 = AmBz*r_113_001_2 + r_114_001_2;
            double r_122_002_2 = AmBz*r_122_001_2 + r_123_001_2;
            double r_212_002_2 = AmBz*r_212_001_2 + r_213_001_2;
            double r_221_002_2 = AmBz*r_221_001_2 + r_222_001_2;
            double r_006_002_2 = AmBz*r_006_001_2 + r_007_001_2;
            double r_105_002_2 = AmBz*r_105_001_2 + r_106_001_2;
            double r_015_002_2 = AmBz*r_015_001_2 + r_016_001_2;
            double r_402_002_2 = AmBz*r_402_001_2 + r_403_001_2;
            double r_204_002_2 = AmBz*r_204_001_2 + r_205_001_2;
            double r_042_002_2 = AmBz*r_042_001_2 + r_043_001_2;
            double r_024_002_2 = AmBz*r_024_001_2 + r_025_001_2;
            double r_303_002_2 = AmBz*r_303_001_2 + r_304_001_2;
            double r_033_002_2 = AmBz*r_033_001_2 + r_034_001_2;
            double r_114_002_2 = AmBz*r_114_001_2 + r_115_001_2;
            double r_312_002_2 = AmBz*r_312_001_2 + r_313_001_2;
            double r_132_002_2 = AmBz*r_132_001_2 + r_133_001_2;
            double r_123_002_2 = AmBz*r_123_001_2 + r_124_001_2;
            double r_213_002_2 = AmBz*r_213_001_2 + r_214_001_2;
            double r_222_002_2 = AmBz*r_222_001_2 + r_223_001_2;
            double b_300 = AmBx*b_200 + r_100_200;
            double r_100_300 = AmBx*r_100_200 + r_200_200;
            double r_010_300 = AmBx*r_010_200 + r_110_200;
            double r_001_300 = AmBx*r_001_200 + r_101_200;
            double b_300_1 = AmBx*b_200_1 + r_100_200_1;
            double r_100_300_1 = AmBx*r_100_200_1 + r_200_200_1;
            double r_010_300_1 = AmBx*r_010_200_1 + r_110_200_1;
            double r_001_300_1 = AmBx*r_001_200_1 + r_101_200_1;
            double r_200_300_1 = AmBx*r_200_200_1 + r_300_200_1;
            double r_020_300_1 = AmBx*r_020_200_1 + r_120_200_1;
            double r_002_300_1 = AmBx*r_002_200_1 + r_102_200_1;
            double r_110_300_1 = AmBx*r_110_200_1 + r_210_200_1;
            double r_101_300_1 = AmBx*r_101_200_1 + r_201_200_1;
            double r_011_300_1 = AmBx*r_011_200_1 + r_111_200_1;
            double r_300_300_1 = AmBx*r_300_200_1 + r_400_200_1;
            double r_030_300_1 = AmBx*r_030_200_1 + r_130_200_1;
            double r_003_300_1 = AmBx*r_003_200_1 + r_103_200_1;
            double r_120_300_1 = AmBx*r_120_200_1 + r_220_200_1;
            double r_102_300_1 = AmBx*r_102_200_1 + r_202_200_1;
            double r_210_300_1 = AmBx*r_210_200_1 + r_310_200_1;
            double r_012_300_1 = AmBx*r_012_200_1 + r_112_200_1;
            double r_201_300_1 = AmBx*r_201_200_1 + r_301_200_1;
            double r_021_300_1 = AmBx*r_021_200_1 + r_121_200_1;
            double r_111_300_1 = AmBx*r_111_200_1 + r_211_200_1;
            double b_300_2 = AmBx*b_200_2 + r_100_200_2;
            double r_100_300_2 = AmBx*r_100_200_2 + r_200_200_2;
            double r_010_300_2 = AmBx*r_010_200_2 + r_110_200_2;
            double r_001_300_2 = AmBx*r_001_200_2 + r_101_200_2;
            double r_200_300_2 = AmBx*r_200_200_2 + r_300_200_2;
            double r_020_300_2 = AmBx*r_020_200_2 + r_120_200_2;
            double r_002_300_2 = AmBx*r_002_200_2 + r_102_200_2;
            double r_110_300_2 = AmBx*r_110_200_2 + r_210_200_2;
            double r_101_300_2 = AmBx*r_101_200_2 + r_201_200_2;
            double r_011_300_2 = AmBx*r_011_200_2 + r_111_200_2;
            double r_300_300_2 = AmBx*r_300_200_2 + r_400_200_2;
            double r_030_300_2 = AmBx*r_030_200_2 + r_130_200_2;
            double r_003_300_2 = AmBx*r_003_200_2 + r_103_200_2;
            double r_120_300_2 = AmBx*r_120_200_2 + r_220_200_2;
            double r_102_300_2 = AmBx*r_102_200_2 + r_202_200_2;
            double r_210_300_2 = AmBx*r_210_200_2 + r_310_200_2;
            double r_012_300_2 = AmBx*r_012_200_2 + r_112_200_2;
            double r_201_300_2 = AmBx*r_201_200_2 + r_301_200_2;
            double r_021_300_2 = AmBx*r_021_200_2 + r_121_200_2;
            double r_111_300_2 = AmBx*r_111_200_2 + r_211_200_2;
            double r_400_300_2 = AmBx*r_400_200_2 + r_500_200_2;
            double r_310_300_2 = AmBx*r_310_200_2 + r_410_200_2;
            double r_130_300_2 = AmBx*r_130_200_2 + r_230_200_2;
            double r_301_300_2 = AmBx*r_301_200_2 + r_401_200_2;
            double r_103_300_2 = AmBx*r_103_200_2 + r_203_200_2;
            double r_031_300_2 = AmBx*r_031_200_2 + r_131_200_2;
            double r_013_300_2 = AmBx*r_013_200_2 + r_113_200_2;
            double r_220_300_2 = AmBx*r_220_200_2 + r_320_200_2;
            double r_202_300_2 = AmBx*r_202_200_2 + r_302_200_2;
            double r_022_300_2 = AmBx*r_022_200_2 + r_122_200_2;
            double r_112_300_2 = AmBx*r_112_200_2 + r_212_200_2;
            double r_121_300_2 = AmBx*r_121_200_2 + r_221_200_2;
            double r_211_300_2 = AmBx*r_211_200_2 + r_311_200_2;
            double r_500_300_2 = AmBx*r_500_200_2 + r_600_200_2;
            double r_410_300_2 = AmBx*r_410_200_2 + r_510_200_2;
            double r_401_300_2 = AmBx*r_401_200_2 + r_501_200_2;
            double r_320_300_2 = AmBx*r_320_200_2 + r_420_200_2;
            double r_302_300_2 = AmBx*r_302_200_2 + r_402_200_2;
            double r_230_300_2 = AmBx*r_230_200_2 + r_330_200_2;
            double r_032_300_2 = AmBx*r_032_200_2 + r_132_200_2;
            double r_203_300_2 = AmBx*r_203_200_2 + r_303_200_2;
            double r_023_300_2 = AmBx*r_023_200_2 + r_123_200_2;
            double r_311_300_2 = AmBx*r_311_200_2 + r_411_200_2;
            double r_131_300_2 = AmBx*r_131_200_2 + r_231_200_2;
            double r_113_300_2 = AmBx*r_113_200_2 + r_213_200_2;
            double r_122_300_2 = AmBx*r_122_200_2 + r_222_200_2;
            double r_212_300_2 = AmBx*r_212_200_2 + r_312_200_2;
            double r_221_300_2 = AmBx*r_221_200_2 + r_321_200_2;
            double b_030 = AmBy*b_020 + r_010_020;
            double r_100_030 = AmBy*r_100_020 + r_110_020;
            double r_010_030 = AmBy*r_010_020 + r_020_020;
            double r_001_030 = AmBy*r_001_020 + r_011_020;
            double b_030_1 = AmBy*b_020_1 + r_010_020_1;
            double r_100_030_1 = AmBy*r_100_020_1 + r_110_020_1;
            double r_010_030_1 = AmBy*r_010_020_1 + r_020_020_1;
            double r_001_030_1 = AmBy*r_001_020_1 + r_011_020_1;
            double r_200_030_1 = AmBy*r_200_020_1 + r_210_020_1;
            double r_020_030_1 = AmBy*r_020_020_1 + r_030_020_1;
            double r_002_030_1 = AmBy*r_002_020_1 + r_012_020_1;
            double r_110_030_1 = AmBy*r_110_020_1 + r_120_020_1;
            double r_101_030_1 = AmBy*r_101_020_1 + r_111_020_1;
            double r_011_030_1 = AmBy*r_011_020_1 + r_021_020_1;
            double r_030_030_1 = AmBy*r_030_020_1 + r_040_020_1;
            double r_003_030_1 = AmBy*r_003_020_1 + r_013_020_1;
            double r_120_030_1 = AmBy*r_120_020_1 + r_130_020_1;
            double r_102_030_1 = AmBy*r_102_020_1 + r_112_020_1;
            double r_210_030_1 = AmBy*r_210_020_1 + r_220_020_1;
            double r_012_030_1 = AmBy*r_012_020_1 + r_022_020_1;
            double r_201_030_1 = AmBy*r_201_020_1 + r_211_020_1;
            double r_021_030_1 = AmBy*r_021_020_1 + r_031_020_1;
            double r_111_030_1 = AmBy*r_111_020_1 + r_121_020_1;
            double b_030_2 = AmBy*b_020_2 + r_010_020_2;
            double r_100_030_2 = AmBy*r_100_020_2 + r_110_020_2;
            double r_010_030_2 = AmBy*r_010_020_2 + r_020_020_2;
            double r_001_030_2 = AmBy*r_001_020_2 + r_011_020_2;
            double r_200_030_2 = AmBy*r_200_020_2 + r_210_020_2;
            double r_020_030_2 = AmBy*r_020_020_2 + r_030_020_2;
            double r_002_030_2 = AmBy*r_002_020_2 + r_012_020_2;
            double r_110_030_2 = AmBy*r_110_020_2 + r_120_020_2;
            double r_101_030_2 = AmBy*r_101_020_2 + r_111_020_2;
            double r_011_030_2 = AmBy*r_011_020_2 + r_021_020_2;
            double r_300_030_2 = AmBy*r_300_020_2 + r_310_020_2;
            double r_030_030_2 = AmBy*r_030_020_2 + r_040_020_2;
            double r_003_030_2 = AmBy*r_003_020_2 + r_013_020_2;
            double r_120_030_2 = AmBy*r_120_020_2 + r_130_020_2;
            double r_102_030_2 = AmBy*r_102_020_2 + r_112_020_2;
            double r_210_030_2 = AmBy*r_210_020_2 + r_220_020_2;
            double r_012_030_2 = AmBy*r_012_020_2 + r_022_020_2;
            double r_201_030_2 = AmBy*r_201_020_2 + r_211_020_2;
            double r_021_030_2 = AmBy*r_021_020_2 + r_031_020_2;
            double r_111_030_2 = AmBy*r_111_020_2 + r_121_020_2;
            double r_400_030_2 = AmBy*r_400_020_2 + r_410_020_2;
            double r_040_030_2 = AmBy*r_040_020_2 + r_050_020_2;
            double r_310_030_2 = AmBy*r_310_020_2 + r_320_020_2;
            double r_130_030_2 = AmBy*r_130_020_2 + r_140_020_2;
            double r_301_030_2 = AmBy*r_301_020_2 + r_311_020_2;
            double r_103_030_2 = AmBy*r_103_020_2 + r_113_020_2;
            double r_031_030_2 = AmBy*r_031_020_2 + r_041_020_2;
            double r_013_030_2 = AmBy*r_013_020_2 + r_023_020_2;
            double r_220_030_2 = AmBy*r_220_020_2 + r_230_020_2;
            double r_202_030_2 = AmBy*r_202_020_2 + r_212_020_2;
            double r_022_030_2 = AmBy*r_022_020_2 + r_032_020_2;
            double r_112_030_2 = AmBy*r_112_020_2 + r_122_020_2;
            double r_121_030_2 = AmBy*r_121_020_2 + r_131_020_2;
            double r_211_030_2 = AmBy*r_211_020_2 + r_221_020_2;
            double r_050_030_2 = AmBy*r_050_020_2 + r_060_020_2;
            double r_140_030_2 = AmBy*r_140_020_2 + r_150_020_2;
            double r_410_030_2 = AmBy*r_410_020_2 + r_420_020_2;
            double r_041_030_2 = AmBy*r_041_020_2 + r_051_020_2;
            double r_320_030_2 = AmBy*r_320_020_2 + r_330_020_2;
            double r_230_030_2 = AmBy*r_230_020_2 + r_240_020_2;
            double r_032_030_2 = AmBy*r_032_020_2 + r_042_020_2;
            double r_203_030_2 = AmBy*r_203_020_2 + r_213_020_2;
            double r_023_030_2 = AmBy*r_023_020_2 + r_033_020_2;
            double r_311_030_2 = AmBy*r_311_020_2 + r_321_020_2;
            double r_131_030_2 = AmBy*r_131_020_2 + r_141_020_2;
            double r_113_030_2 = AmBy*r_113_020_2 + r_123_020_2;
            double r_122_030_2 = AmBy*r_122_020_2 + r_132_020_2;
            double r_212_030_2 = AmBy*r_212_020_2 + r_222_020_2;
            double r_221_030_2 = AmBy*r_221_020_2 + r_231_020_2;
            double b_003 = AmBz*b_002 + r_001_002;
            double r_100_003 = AmBz*r_100_002 + r_101_002;
            double r_010_003 = AmBz*r_010_002 + r_011_002;
            double r_001_003 = AmBz*r_001_002 + r_002_002;
            double b_003_1 = AmBz*b_002_1 + r_001_002_1;
            double r_100_003_1 = AmBz*r_100_002_1 + r_101_002_1;
            double r_010_003_1 = AmBz*r_010_002_1 + r_011_002_1;
            double r_001_003_1 = AmBz*r_001_002_1 + r_002_002_1;
            double r_200_003_1 = AmBz*r_200_002_1 + r_201_002_1;
            double r_020_003_1 = AmBz*r_020_002_1 + r_021_002_1;
            double r_002_003_1 = AmBz*r_002_002_1 + r_003_002_1;
            double r_110_003_1 = AmBz*r_110_002_1 + r_111_002_1;
            double r_101_003_1 = AmBz*r_101_002_1 + r_102_002_1;
            double r_011_003_1 = AmBz*r_011_002_1 + r_012_002_1;
            double r_003_003_1 = AmBz*r_003_002_1 + r_004_002_1;
            double r_120_003_1 = AmBz*r_120_002_1 + r_121_002_1;
            double r_102_003_1 = AmBz*r_102_002_1 + r_103_002_1;
            double r_210_003_1 = AmBz*r_210_002_1 + r_211_002_1;
            double r_012_003_1 = AmBz*r_012_002_1 + r_013_002_1;
            double r_201_003_1 = AmBz*r_201_002_1 + r_202_002_1;
            double r_021_003_1 = AmBz*r_021_002_1 + r_022_002_1;
            double r_111_003_1 = AmBz*r_111_002_1 + r_112_002_1;
            double b_003_2 = AmBz*b_002_2 + r_001_002_2;
            double r_100_003_2 = AmBz*r_100_002_2 + r_101_002_2;
            double r_010_003_2 = AmBz*r_010_002_2 + r_011_002_2;
            double r_001_003_2 = AmBz*r_001_002_2 + r_002_002_2;
            double r_200_003_2 = AmBz*r_200_002_2 + r_201_002_2;
            double r_020_003_2 = AmBz*r_020_002_2 + r_021_002_2;
            double r_002_003_2 = AmBz*r_002_002_2 + r_003_002_2;
            double r_110_003_2 = AmBz*r_110_002_2 + r_111_002_2;
            double r_101_003_2 = AmBz*r_101_002_2 + r_102_002_2;
            double r_011_003_2 = AmBz*r_011_002_2 + r_012_002_2;
            double r_300_003_2 = AmBz*r_300_002_2 + r_301_002_2;
            double r_030_003_2 = AmBz*r_030_002_2 + r_031_002_2;
            double r_003_003_2 = AmBz*r_003_002_2 + r_004_002_2;
            double r_120_003_2 = AmBz*r_120_002_2 + r_121_002_2;
            double r_102_003_2 = AmBz*r_102_002_2 + r_103_002_2;
            double r_210_003_2 = AmBz*r_210_002_2 + r_211_002_2;
            double r_012_003_2 = AmBz*r_012_002_2 + r_013_002_2;
            double r_201_003_2 = AmBz*r_201_002_2 + r_202_002_2;
            double r_021_003_2 = AmBz*r_021_002_2 + r_022_002_2;
            double r_111_003_2 = AmBz*r_111_002_2 + r_112_002_2;
            double r_400_003_2 = AmBz*r_400_002_2 + r_401_002_2;
            double r_040_003_2 = AmBz*r_040_002_2 + r_041_002_2;
            double r_004_003_2 = AmBz*r_004_002_2 + r_005_002_2;
            double r_310_003_2 = AmBz*r_310_002_2 + r_311_002_2;
            double r_130_003_2 = AmBz*r_130_002_2 + r_131_002_2;
            double r_301_003_2 = AmBz*r_301_002_2 + r_302_002_2;
            double r_103_003_2 = AmBz*r_103_002_2 + r_104_002_2;
            double r_031_003_2 = AmBz*r_031_002_2 + r_032_002_2;
            double r_013_003_2 = AmBz*r_013_002_2 + r_014_002_2;
            double r_220_003_2 = AmBz*r_220_002_2 + r_221_002_2;
            double r_202_003_2 = AmBz*r_202_002_2 + r_203_002_2;
            double r_022_003_2 = AmBz*r_022_002_2 + r_023_002_2;
            double r_112_003_2 = AmBz*r_112_002_2 + r_113_002_2;
            double r_121_003_2 = AmBz*r_121_002_2 + r_122_002_2;
            double r_211_003_2 = AmBz*r_211_002_2 + r_212_002_2;
            double r_005_003_2 = AmBz*r_005_002_2 + r_006_002_2;
            double r_104_003_2 = AmBz*r_104_002_2 + r_105_002_2;
            double r_014_003_2 = AmBz*r_014_002_2 + r_015_002_2;
            double r_401_003_2 = AmBz*r_401_002_2 + r_402_002_2;
            double r_041_003_2 = AmBz*r_041_002_2 + r_042_002_2;
            double r_302_003_2 = AmBz*r_302_002_2 + r_303_002_2;
            double r_032_003_2 = AmBz*r_032_002_2 + r_033_002_2;
            double r_203_003_2 = AmBz*r_203_002_2 + r_204_002_2;
            double r_023_003_2 = AmBz*r_023_002_2 + r_024_002_2;
            double r_311_003_2 = AmBz*r_311_002_2 + r_312_002_2;
            double r_131_003_2 = AmBz*r_131_002_2 + r_132_002_2;
            double r_113_003_2 = AmBz*r_113_002_2 + r_114_002_2;
            double r_122_003_2 = AmBz*r_122_002_2 + r_123_002_2;
            double r_212_003_2 = AmBz*r_212_002_2 + r_213_002_2;
            double r_221_003_2 = AmBz*r_221_002_2 + r_222_002_2;
            double b_120 = AmBx*b_020 + r_100_020;
            double r_100_120 = AmBx*r_100_020 + r_200_020;
            double r_001_120 = AmBx*r_001_020 + r_101_020;
            double b_102 = AmBx*b_002 + r_100_002;
            double r_100_102 = AmBx*r_100_002 + r_200_002;
            double r_010_102 = AmBx*r_010_002 + r_110_002;
            double b_210 = AmBy*b_200 + r_010_200;
            double r_001_210 = AmBy*r_001_200 + r_011_200;
            double b_012 = AmBy*b_002 + r_010_002;
            double r_010_012 = AmBy*r_010_002 + r_020_002;
            double b_012_1 = AmBy*b_002_1 + r_010_002_1;
            double r_100_012_1 = AmBy*r_100_002_1 + r_110_002_1;
            double r_010_012_1 = AmBy*r_010_002_1 + r_020_002_1;
            double r_200_012_1 = AmBy*r_200_002_1 + r_210_002_1;
            double r_110_012_1 = AmBy*r_110_002_1 + r_120_002_1;
            double r_210_012_1 = AmBy*r_210_002_1 + r_220_002_1;
            double b_400 = AmBx*b_300 + r_100_300;
            double b_400_1 = AmBx*b_300_1 + r_100_300_1;
            double r_100_400_1 = AmBx*r_100_300_1 + r_200_300_1;
            double r_010_400_1 = AmBx*r_010_300_1 + r_110_300_1;
            double r_001_400_1 = AmBx*r_001_300_1 + r_101_300_1;
            double r_200_400_1 = AmBx*r_200_300_1 + r_300_300_1;
            double r_020_400_1 = AmBx*r_020_300_1 + r_120_300_1;
            double r_002_400_1 = AmBx*r_002_300_1 + r_102_300_1;
            double r_110_400_1 = AmBx*r_110_300_1 + r_210_300_1;
            double r_101_400_1 = AmBx*r_101_300_1 + r_201_300_1;
            double r_011_400_1 = AmBx*r_011_300_1 + r_111_300_1;
            double b_400_2 = AmBx*b_300_2 + r_100_300_2;
            double r_100_400_2 = AmBx*r_100_300_2 + r_200_300_2;
            double r_010_400_2 = AmBx*r_010_300_2 + r_110_300_2;
            double r_001_400_2 = AmBx*r_001_300_2 + r_101_300_2;
            double r_200_400_2 = AmBx*r_200_300_2 + r_300_300_2;
            double r_020_400_2 = AmBx*r_020_300_2 + r_120_300_2;
            double r_002_400_2 = AmBx*r_002_300_2 + r_102_300_2;
            double r_110_400_2 = AmBx*r_110_300_2 + r_210_300_2;
            double r_101_400_2 = AmBx*r_101_300_2 + r_201_300_2;
            double r_011_400_2 = AmBx*r_011_300_2 + r_111_300_2;
            double r_300_400_2 = AmBx*r_300_300_2 + r_400_300_2;
            double r_030_400_2 = AmBx*r_030_300_2 + r_130_300_2;
            double r_003_400_2 = AmBx*r_003_300_2 + r_103_300_2;
            double r_120_400_2 = AmBx*r_120_300_2 + r_220_300_2;
            double r_102_400_2 = AmBx*r_102_300_2 + r_202_300_2;
            double r_210_400_2 = AmBx*r_210_300_2 + r_310_300_2;
            double r_012_400_2 = AmBx*r_012_300_2 + r_112_300_2;
            double r_201_400_2 = AmBx*r_201_300_2 + r_301_300_2;
            double r_021_400_2 = AmBx*r_021_300_2 + r_121_300_2;
            double r_111_400_2 = AmBx*r_111_300_2 + r_211_300_2;
            double r_400_400_2 = AmBx*r_400_300_2 + r_500_300_2;
            double r_310_400_2 = AmBx*r_310_300_2 + r_410_300_2;
            double r_130_400_2 = AmBx*r_130_300_2 + r_230_300_2;
            double r_301_400_2 = AmBx*r_301_300_2 + r_401_300_2;
            double r_103_400_2 = AmBx*r_103_300_2 + r_203_300_2;
            double r_031_400_2 = AmBx*r_031_300_2 + r_131_300_2;
            double r_013_400_2 = AmBx*r_013_300_2 + r_113_300_2;
            double r_220_400_2 = AmBx*r_220_300_2 + r_320_300_2;
            double r_202_400_2 = AmBx*r_202_300_2 + r_302_300_2;
            double r_022_400_2 = AmBx*r_022_300_2 + r_122_300_2;
            double r_112_400_2 = AmBx*r_112_300_2 + r_212_300_2;
            double r_121_400_2 = AmBx*r_121_300_2 + r_221_300_2;
            double r_211_400_2 = AmBx*r_211_300_2 + r_311_300_2;
            double b_040 = AmBy*b_030 + r_010_030;
            double b_040_1 = AmBy*b_030_1 + r_010_030_1;
            double r_100_040_1 = AmBy*r_100_030_1 + r_110_030_1;
            double r_010_040_1 = AmBy*r_010_030_1 + r_020_030_1;
            double r_001_040_1 = AmBy*r_001_030_1 + r_011_030_1;
            double r_200_040_1 = AmBy*r_200_030_1 + r_210_030_1;
            double r_020_040_1 = AmBy*r_020_030_1 + r_030_030_1;
            double r_002_040_1 = AmBy*r_002_030_1 + r_012_030_1;
            double r_110_040_1 = AmBy*r_110_030_1 + r_120_030_1;
            double r_101_040_1 = AmBy*r_101_030_1 + r_111_030_1;
            double r_011_040_1 = AmBy*r_011_030_1 + r_021_030_1;
            double b_040_2 = AmBy*b_030_2 + r_010_030_2;
            double r_100_040_2 = AmBy*r_100_030_2 + r_110_030_2;
            double r_010_040_2 = AmBy*r_010_030_2 + r_020_030_2;
            double r_001_040_2 = AmBy*r_001_030_2 + r_011_030_2;
            double r_200_040_2 = AmBy*r_200_030_2 + r_210_030_2;
            double r_020_040_2 = AmBy*r_020_030_2 + r_030_030_2;
            double r_002_040_2 = AmBy*r_002_030_2 + r_012_030_2;
            double r_110_040_2 = AmBy*r_110_030_2 + r_120_030_2;
            double r_101_040_2 = AmBy*r_101_030_2 + r_111_030_2;
            double r_011_040_2 = AmBy*r_011_030_2 + r_021_030_2;
            double r_300_040_2 = AmBy*r_300_030_2 + r_310_030_2;
            double r_030_040_2 = AmBy*r_030_030_2 + r_040_030_2;
            double r_003_040_2 = AmBy*r_003_030_2 + r_013_030_2;
            double r_120_040_2 = AmBy*r_120_030_2 + r_130_030_2;
            double r_102_040_2 = AmBy*r_102_030_2 + r_112_030_2;
            double r_210_040_2 = AmBy*r_210_030_2 + r_220_030_2;
            double r_012_040_2 = AmBy*r_012_030_2 + r_022_030_2;
            double r_201_040_2 = AmBy*r_201_030_2 + r_211_030_2;
            double r_021_040_2 = AmBy*r_021_030_2 + r_031_030_2;
            double r_111_040_2 = AmBy*r_111_030_2 + r_121_030_2;
            double r_400_040_2 = AmBy*r_400_030_2 + r_410_030_2;
            double r_040_040_2 = AmBy*r_040_030_2 + r_050_030_2;
            double r_310_040_2 = AmBy*r_310_030_2 + r_320_030_2;
            double r_130_040_2 = AmBy*r_130_030_2 + r_140_030_2;
            double r_301_040_2 = AmBy*r_301_030_2 + r_311_030_2;
            double r_103_040_2 = AmBy*r_103_030_2 + r_113_030_2;
            double r_031_040_2 = AmBy*r_031_030_2 + r_041_030_2;
            double r_013_040_2 = AmBy*r_013_030_2 + r_023_030_2;
            double r_220_040_2 = AmBy*r_220_030_2 + r_230_030_2;
            double r_202_040_2 = AmBy*r_202_030_2 + r_212_030_2;
            double r_022_040_2 = AmBy*r_022_030_2 + r_032_030_2;
            double r_112_040_2 = AmBy*r_112_030_2 + r_122_030_2;
            double r_121_040_2 = AmBy*r_121_030_2 + r_131_030_2;
            double r_211_040_2 = AmBy*r_211_030_2 + r_221_030_2;
            double b_004 = AmBz*b_003 + r_001_003;
            double b_004_1 = AmBz*b_003_1 + r_001_003_1;
            double r_100_004_1 = AmBz*r_100_003_1 + r_101_003_1;
            double r_010_004_1 = AmBz*r_010_003_1 + r_011_003_1;
            double r_001_004_1 = AmBz*r_001_003_1 + r_002_003_1;
            double r_200_004_1 = AmBz*r_200_003_1 + r_201_003_1;
            double r_020_004_1 = AmBz*r_020_003_1 + r_021_003_1;
            double r_002_004_1 = AmBz*r_002_003_1 + r_003_003_1;
            double r_110_004_1 = AmBz*r_110_003_1 + r_111_003_1;
            double r_101_004_1 = AmBz*r_101_003_1 + r_102_003_1;
            double r_011_004_1 = AmBz*r_011_003_1 + r_012_003_1;
            double b_004_2 = AmBz*b_003_2 + r_001_003_2;
            double r_100_004_2 = AmBz*r_100_003_2 + r_101_003_2;
            double r_010_004_2 = AmBz*r_010_003_2 + r_011_003_2;
            double r_001_004_2 = AmBz*r_001_003_2 + r_002_003_2;
            double r_200_004_2 = AmBz*r_200_003_2 + r_201_003_2;
            double r_020_004_2 = AmBz*r_020_003_2 + r_021_003_2;
            double r_002_004_2 = AmBz*r_002_003_2 + r_003_003_2;
            double r_110_004_2 = AmBz*r_110_003_2 + r_111_003_2;
            double r_101_004_2 = AmBz*r_101_003_2 + r_102_003_2;
            double r_011_004_2 = AmBz*r_011_003_2 + r_012_003_2;
            double r_300_004_2 = AmBz*r_300_003_2 + r_301_003_2;
            double r_030_004_2 = AmBz*r_030_003_2 + r_031_003_2;
            double r_003_004_2 = AmBz*r_003_003_2 + r_004_003_2;
            double r_120_004_2 = AmBz*r_120_003_2 + r_121_003_2;
            double r_102_004_2 = AmBz*r_102_003_2 + r_103_003_2;
            double r_210_004_2 = AmBz*r_210_003_2 + r_211_003_2;
            double r_012_004_2 = AmBz*r_012_003_2 + r_013_003_2;
            double r_201_004_2 = AmBz*r_201_003_2 + r_202_003_2;
            double r_021_004_2 = AmBz*r_021_003_2 + r_022_003_2;
            double r_111_004_2 = AmBz*r_111_003_2 + r_112_003_2;
            double r_400_004_2 = AmBz*r_400_003_2 + r_401_003_2;
            double r_040_004_2 = AmBz*r_040_003_2 + r_041_003_2;
            double r_004_004_2 = AmBz*r_004_003_2 + r_005_003_2;
            double r_310_004_2 = AmBz*r_310_003_2 + r_311_003_2;
            double r_130_004_2 = AmBz*r_130_003_2 + r_131_003_2;
            double r_301_004_2 = AmBz*r_301_003_2 + r_302_003_2;
            double r_103_004_2 = AmBz*r_103_003_2 + r_104_003_2;
            double r_031_004_2 = AmBz*r_031_003_2 + r_032_003_2;
            double r_013_004_2 = AmBz*r_013_003_2 + r_014_003_2;
            double r_220_004_2 = AmBz*r_220_003_2 + r_221_003_2;
            double r_202_004_2 = AmBz*r_202_003_2 + r_203_003_2;
            double r_022_004_2 = AmBz*r_022_003_2 + r_023_003_2;
            double r_112_004_2 = AmBz*r_112_003_2 + r_113_003_2;
            double r_121_004_2 = AmBz*r_121_003_2 + r_122_003_2;
            double r_211_004_2 = AmBz*r_211_003_2 + r_212_003_2;
            double b_310 = AmBy*b_300 + r_010_300;
            double b_310_1 = AmBy*b_300_1 + r_010_300_1;
            double r_010_310_1 = AmBy*r_010_300_1 + r_020_300_1;
            double r_001_310_1 = AmBy*r_001_300_1 + r_011_300_1;
            double r_020_310_1 = AmBy*r_020_300_1 + r_030_300_1;
            double r_011_310_1 = AmBy*r_011_300_1 + r_021_300_1;
            double b_310_2 = AmBy*b_300_2 + r_010_300_2;
            double r_010_310_2 = AmBy*r_010_300_2 + r_020_300_2;
            double r_001_310_2 = AmBy*r_001_300_2 + r_011_300_2;
            double r_020_310_2 = AmBy*r_020_300_2 + r_030_300_2;
            double r_002_310_2 = AmBy*r_002_300_2 + r_012_300_2;
            double r_011_310_2 = AmBy*r_011_300_2 + r_021_300_2;
            double r_012_310_2 = AmBy*r_012_300_2 + r_022_300_2;
            double r_021_310_2 = AmBy*r_021_300_2 + r_031_300_2;
            double r_022_310_2 = AmBy*r_022_300_2 + r_032_300_2;
            double b_130 = AmBx*b_030 + r_100_030;
            double b_130_1 = AmBx*b_030_1 + r_100_030_1;
            double r_100_130_1 = AmBx*r_100_030_1 + r_200_030_1;
            double r_001_130_1 = AmBx*r_001_030_1 + r_101_030_1;
            double r_101_130_1 = AmBx*r_101_030_1 + r_201_030_1;
            double b_301 = AmBz*b_300 + r_001_300;
            double b_301_1 = AmBz*b_300_1 + r_001_300_1;
            double r_010_301_1 = AmBz*r_010_300_1 + r_011_300_1;
            double r_001_301_1 = AmBz*r_001_300_1 + r_002_300_1;
            double r_002_301_1 = AmBz*r_002_300_1 + r_003_300_1;
            double r_011_301_1 = AmBz*r_011_300_1 + r_012_300_1;
            double b_301_2 = AmBz*b_300_2 + r_001_300_2;
            double r_010_301_2 = AmBz*r_010_300_2 + r_011_300_2;
            double r_001_301_2 = AmBz*r_001_300_2 + r_002_300_2;
            double r_020_301_2 = AmBz*r_020_300_2 + r_021_300_2;
            double r_002_301_2 = AmBz*r_002_300_2 + r_003_300_2;
            double r_011_301_2 = AmBz*r_011_300_2 + r_012_300_2;
            double r_012_301_2 = AmBz*r_012_300_2 + r_013_300_2;
            double r_021_301_2 = AmBz*r_021_300_2 + r_022_300_2;
            double r_022_301_2 = AmBz*r_022_300_2 + r_023_300_2;
            double b_103 = AmBx*b_003 + r_100_003;
            double b_103_1 = AmBx*b_003_1 + r_100_003_1;
            double r_100_103_1 = AmBx*r_100_003_1 + r_200_003_1;
            double r_010_103_1 = AmBx*r_010_003_1 + r_110_003_1;
            double r_110_103_1 = AmBx*r_110_003_1 + r_210_003_1;
            double b_031 = AmBz*b_030 + r_001_030;
            double b_031_1 = AmBz*b_030_1 + r_001_030_1;
            double r_100_031_1 = AmBz*r_100_030_1 + r_101_030_1;
            double r_001_031_1 = AmBz*r_001_030_1 + r_002_030_1;
            double r_002_031_1 = AmBz*r_002_030_1 + r_003_030_1;
            double r_101_031_1 = AmBz*r_101_030_1 + r_102_030_1;
            double b_031_2 = AmBz*b_030_2 + r_001_030_2;
            double r_100_031_2 = AmBz*r_100_030_2 + r_101_030_2;
            double r_001_031_2 = AmBz*r_001_030_2 + r_002_030_2;
            double r_200_031_2 = AmBz*r_200_030_2 + r_201_030_2;
            double r_002_031_2 = AmBz*r_002_030_2 + r_003_030_2;
            double r_101_031_2 = AmBz*r_101_030_2 + r_102_030_2;
            double r_102_031_2 = AmBz*r_102_030_2 + r_103_030_2;
            double r_201_031_2 = AmBz*r_201_030_2 + r_202_030_2;
            double r_202_031_2 = AmBz*r_202_030_2 + r_203_030_2;
            double b_013 = AmBy*b_003 + r_010_003;
            double b_013_1 = AmBy*b_003_1 + r_010_003_1;
            double r_100_013_1 = AmBy*r_100_003_1 + r_110_003_1;
            double r_010_013_1 = AmBy*r_010_003_1 + r_020_003_1;
            double r_110_013_1 = AmBy*r_110_003_1 + r_120_003_1;
            double b_220 = AmBx*b_120 + r_100_120;
            double b_202 = AmBx*b_102 + r_100_102;
            double b_022 = AmBy*b_012 + r_010_012;
            double b_022_1 = AmBy*b_012_1 + r_010_012_1;
            double r_100_022_1 = AmBy*r_100_012_1 + r_110_012_1;
            double r_200_022_1 = AmBy*r_200_012_1 + r_210_012_1;
            double b_112 = AmBy*b_102 + r_010_102;
            double b_121 = AmBz*b_120 + r_001_120;
            double b_211 = AmBz*b_210 + r_001_210;
            double b_500_1 = AmBx*b_400_1 + r_100_400_1;
            double r_100_500_1 = AmBx*r_100_400_1 + r_200_400_1;
            double r_010_500_1 = AmBx*r_010_400_1 + r_110_400_1;
            double r_001_500_1 = AmBx*r_001_400_1 + r_101_400_1;
            double b_500_2 = AmBx*b_400_2 + r_100_400_2;
            double r_100_500_2 = AmBx*r_100_400_2 + r_200_400_2;
            double r_010_500_2 = AmBx*r_010_400_2 + r_110_400_2;
            double r_001_500_2 = AmBx*r_001_400_2 + r_101_400_2;
            double r_200_500_2 = AmBx*r_200_400_2 + r_300_400_2;
            double r_020_500_2 = AmBx*r_020_400_2 + r_120_400_2;
            double r_002_500_2 = AmBx*r_002_400_2 + r_102_400_2;
            double r_110_500_2 = AmBx*r_110_400_2 + r_210_400_2;
            double r_101_500_2 = AmBx*r_101_400_2 + r_201_400_2;
            double r_011_500_2 = AmBx*r_011_400_2 + r_111_400_2;
            double r_300_500_2 = AmBx*r_300_400_2 + r_400_400_2;
            double r_030_500_2 = AmBx*r_030_400_2 + r_130_400_2;
            double r_003_500_2 = AmBx*r_003_400_2 + r_103_400_2;
            double r_120_500_2 = AmBx*r_120_400_2 + r_220_400_2;
            double r_102_500_2 = AmBx*r_102_400_2 + r_202_400_2;
            double r_210_500_2 = AmBx*r_210_400_2 + r_310_400_2;
            double r_012_500_2 = AmBx*r_012_400_2 + r_112_400_2;
            double r_201_500_2 = AmBx*r_201_400_2 + r_301_400_2;
            double r_021_500_2 = AmBx*r_021_400_2 + r_121_400_2;
            double r_111_500_2 = AmBx*r_111_400_2 + r_211_400_2;
            double b_050_1 = AmBy*b_040_1 + r_010_040_1;
            double r_100_050_1 = AmBy*r_100_040_1 + r_110_040_1;
            double r_010_050_1 = AmBy*r_010_040_1 + r_020_040_1;
            double r_001_050_1 = AmBy*r_001_040_1 + r_011_040_1;
            double b_050_2 = AmBy*b_040_2 + r_010_040_2;
            double r_100_050_2 = AmBy*r_100_040_2 + r_110_040_2;
            double r_010_050_2 = AmBy*r_010_040_2 + r_020_040_2;
            double r_001_050_2 = AmBy*r_001_040_2 + r_011_040_2;
            double r_200_050_2 = AmBy*r_200_040_2 + r_210_040_2;
            double r_020_050_2 = AmBy*r_020_040_2 + r_030_040_2;
            double r_002_050_2 = AmBy*r_002_040_2 + r_012_040_2;
            double r_110_050_2 = AmBy*r_110_040_2 + r_120_040_2;
            double r_101_050_2 = AmBy*r_101_040_2 + r_111_040_2;
            double r_011_050_2 = AmBy*r_011_040_2 + r_021_040_2;
            double r_300_050_2 = AmBy*r_300_040_2 + r_310_040_2;
            double r_030_050_2 = AmBy*r_030_040_2 + r_040_040_2;
            double r_003_050_2 = AmBy*r_003_040_2 + r_013_040_2;
            double r_120_050_2 = AmBy*r_120_040_2 + r_130_040_2;
            double r_102_050_2 = AmBy*r_102_040_2 + r_112_040_2;
            double r_210_050_2 = AmBy*r_210_040_2 + r_220_040_2;
            double r_012_050_2 = AmBy*r_012_040_2 + r_022_040_2;
            double r_201_050_2 = AmBy*r_201_040_2 + r_211_040_2;
            double r_021_050_2 = AmBy*r_021_040_2 + r_031_040_2;
            double r_111_050_2 = AmBy*r_111_040_2 + r_121_040_2;
            double b_005_1 = AmBz*b_004_1 + r_001_004_1;
            double r_100_005_1 = AmBz*r_100_004_1 + r_101_004_1;
            double r_010_005_1 = AmBz*r_010_004_1 + r_011_004_1;
            double r_001_005_1 = AmBz*r_001_004_1 + r_002_004_1;
            double b_005_2 = AmBz*b_004_2 + r_001_004_2;
            double r_100_005_2 = AmBz*r_100_004_2 + r_101_004_2;
            double r_010_005_2 = AmBz*r_010_004_2 + r_011_004_2;
            double r_001_005_2 = AmBz*r_001_004_2 + r_002_004_2;
            double r_200_005_2 = AmBz*r_200_004_2 + r_201_004_2;
            double r_020_005_2 = AmBz*r_020_004_2 + r_021_004_2;
            double r_002_005_2 = AmBz*r_002_004_2 + r_003_004_2;
            double r_110_005_2 = AmBz*r_110_004_2 + r_111_004_2;
            double r_101_005_2 = AmBz*r_101_004_2 + r_102_004_2;
            double r_011_005_2 = AmBz*r_011_004_2 + r_012_004_2;
            double r_300_005_2 = AmBz*r_300_004_2 + r_301_004_2;
            double r_030_005_2 = AmBz*r_030_004_2 + r_031_004_2;
            double r_003_005_2 = AmBz*r_003_004_2 + r_004_004_2;
            double r_120_005_2 = AmBz*r_120_004_2 + r_121_004_2;
            double r_102_005_2 = AmBz*r_102_004_2 + r_103_004_2;
            double r_210_005_2 = AmBz*r_210_004_2 + r_211_004_2;
            double r_012_005_2 = AmBz*r_012_004_2 + r_013_004_2;
            double r_201_005_2 = AmBz*r_201_004_2 + r_202_004_2;
            double r_021_005_2 = AmBz*r_021_004_2 + r_022_004_2;
            double r_111_005_2 = AmBz*r_111_004_2 + r_112_004_2;
            double b_140_1 = AmBx*b_040_1 + r_100_040_1;
            double r_100_140_1 = AmBx*r_100_040_1 + r_200_040_1;
            double r_001_140_1 = AmBx*r_001_040_1 + r_101_040_1;
            double b_140_2 = AmBx*b_040_2 + r_100_040_2;
            double r_100_140_2 = AmBx*r_100_040_2 + r_200_040_2;
            double r_001_140_2 = AmBx*r_001_040_2 + r_101_040_2;
            double r_200_140_2 = AmBx*r_200_040_2 + r_300_040_2;
            double r_101_140_2 = AmBx*r_101_040_2 + r_201_040_2;
            double r_300_140_2 = AmBx*r_300_040_2 + r_400_040_2;
            double r_201_140_2 = AmBx*r_201_040_2 + r_301_040_2;
            double b_104_1 = AmBx*b_004_1 + r_100_004_1;
            double r_100_104_1 = AmBx*r_100_004_1 + r_200_004_1;
            double r_010_104_1 = AmBx*r_010_004_1 + r_110_004_1;
            double b_104_2 = AmBx*b_004_2 + r_100_004_2;
            double r_100_104_2 = AmBx*r_100_004_2 + r_200_004_2;
            double r_010_104_2 = AmBx*r_010_004_2 + r_110_004_2;
            double r_200_104_2 = AmBx*r_200_004_2 + r_300_004_2;
            double r_110_104_2 = AmBx*r_110_004_2 + r_210_004_2;
            double r_300_104_2 = AmBx*r_300_004_2 + r_400_004_2;
            double r_210_104_2 = AmBx*r_210_004_2 + r_310_004_2;
            double b_410_1 = AmBy*b_400_1 + r_010_400_1;
            double r_010_410_1 = AmBy*r_010_400_1 + r_020_400_1;
            double r_001_410_1 = AmBy*r_001_400_1 + r_011_400_1;
            double b_410_2 = AmBy*b_400_2 + r_010_400_2;
            double r_010_410_2 = AmBy*r_010_400_2 + r_020_400_2;
            double r_001_410_2 = AmBy*r_001_400_2 + r_011_400_2;
            double r_020_410_2 = AmBy*r_020_400_2 + r_030_400_2;
            double r_011_410_2 = AmBy*r_011_400_2 + r_021_400_2;
            double r_021_410_2 = AmBy*r_021_400_2 + r_031_400_2;
            double b_014_1 = AmBy*b_004_1 + r_010_004_1;
            double r_010_014_1 = AmBy*r_010_004_1 + r_020_004_1;
            double b_014_2 = AmBy*b_004_2 + r_010_004_2;
            double r_100_014_2 = AmBy*r_100_004_2 + r_110_004_2;
            double r_010_014_2 = AmBy*r_010_004_2 + r_020_004_2;
            double r_200_014_2 = AmBy*r_200_004_2 + r_210_004_2;
            double r_020_014_2 = AmBy*r_020_004_2 + r_030_004_2;
            double r_110_014_2 = AmBy*r_110_004_2 + r_120_004_2;
            double r_030_014_2 = AmBy*r_030_004_2 + r_040_004_2;
            double r_120_014_2 = AmBy*r_120_004_2 + r_130_004_2;
            double r_210_014_2 = AmBy*r_210_004_2 + r_220_004_2;
            double b_401_1 = AmBz*b_400_1 + r_001_400_1;
            double r_001_401_1 = AmBz*r_001_400_1 + r_002_400_1;
            double b_401_2 = AmBz*b_400_2 + r_001_400_2;
            double r_010_401_2 = AmBz*r_010_400_2 + r_011_400_2;
            double r_001_401_2 = AmBz*r_001_400_2 + r_002_400_2;
            double r_020_401_2 = AmBz*r_020_400_2 + r_021_400_2;
            double r_002_401_2 = AmBz*r_002_400_2 + r_003_400_2;
            double r_011_401_2 = AmBz*r_011_400_2 + r_012_400_2;
            double r_012_401_2 = AmBz*r_012_400_2 + r_013_400_2;
            double r_021_401_2 = AmBz*r_021_400_2 + r_022_400_2;
            double b_041_1 = AmBz*b_040_1 + r_001_040_1;
            double r_001_041_1 = AmBz*r_001_040_1 + r_002_040_1;
            double b_041_2 = AmBz*b_040_2 + r_001_040_2;
            double r_100_041_2 = AmBz*r_100_040_2 + r_101_040_2;
            double r_001_041_2 = AmBz*r_001_040_2 + r_002_040_2;
            double r_200_041_2 = AmBz*r_200_040_2 + r_201_040_2;
            double r_002_041_2 = AmBz*r_002_040_2 + r_003_040_2;
            double r_101_041_2 = AmBz*r_101_040_2 + r_102_040_2;
            double r_102_041_2 = AmBz*r_102_040_2 + r_103_040_2;
            double r_201_041_2 = AmBz*r_201_040_2 + r_202_040_2;
            double b_320_1 = AmBy*b_310_1 + r_010_310_1;
            double r_010_320_1 = AmBy*r_010_310_1 + r_020_310_1;
            double r_001_320_1 = AmBy*r_001_310_1 + r_011_310_1;
            double b_320_2 = AmBy*b_310_2 + r_010_310_2;
            double r_010_320_2 = AmBy*r_010_310_2 + r_020_310_2;
            double r_001_320_2 = AmBy*r_001_310_2 + r_011_310_2;
            double r_002_320_2 = AmBy*r_002_310_2 + r_012_310_2;
            double r_011_320_2 = AmBy*r_011_310_2 + r_021_310_2;
            double r_012_320_2 = AmBy*r_012_310_2 + r_022_310_2;
            double b_302_1 = AmBz*b_301_1 + r_001_301_1;
            double r_010_302_1 = AmBz*r_010_301_1 + r_011_301_1;
            double r_001_302_1 = AmBz*r_001_301_1 + r_002_301_1;
            double b_302_2 = AmBz*b_301_2 + r_001_301_2;
            double r_010_302_2 = AmBz*r_010_301_2 + r_011_301_2;
            double r_001_302_2 = AmBz*r_001_301_2 + r_002_301_2;
            double r_020_302_2 = AmBz*r_020_301_2 + r_021_301_2;
            double r_011_302_2 = AmBz*r_011_301_2 + r_012_301_2;
            double r_021_302_2 = AmBz*r_021_301_2 + r_022_301_2;
            double b_230_1 = AmBx*b_130_1 + r_100_130_1;
            double r_001_230_1 = AmBx*r_001_130_1 + r_101_130_1;
            double b_032_1 = AmBz*b_031_1 + r_001_031_1;
            double r_100_032_1 = AmBz*r_100_031_1 + r_101_031_1;
            double r_001_032_1 = AmBz*r_001_031_1 + r_002_031_1;
            double b_032_2 = AmBz*b_031_2 + r_001_031_2;
            double r_100_032_2 = AmBz*r_100_031_2 + r_101_031_2;
            double r_001_032_2 = AmBz*r_001_031_2 + r_002_031_2;
            double r_200_032_2 = AmBz*r_200_031_2 + r_201_031_2;
            double r_101_032_2 = AmBz*r_101_031_2 + r_102_031_2;
            double r_201_032_2 = AmBz*r_201_031_2 + r_202_031_2;
            double b_203_1 = AmBx*b_103_1 + r_100_103_1;
            double r_010_203_1 = AmBx*r_010_103_1 + r_110_103_1;
            double b_023_1 = AmBy*b_013_1 + r_010_013_1;
            double r_100_023_1 = AmBy*r_100_013_1 + r_110_013_1;
            double b_122_1 = AmBx*b_022_1 + r_100_022_1;
            double r_100_122_1 = AmBx*r_100_022_1 + r_200_022_1;
            double b_600_1 = AmBx*b_500_1 + r_100_500_1;
            double b_600_2 = AmBx*b_500_2 + r_100_500_2;
            double r_100_600_2 = AmBx*r_100_500_2 + r_200_500_2;
            double r_010_600_2 = AmBx*r_010_500_2 + r_110_500_2;
            double r_001_600_2 = AmBx*r_001_500_2 + r_101_500_2;
            double r_200_600_2 = AmBx*r_200_500_2 + r_300_500_2;
            double r_020_600_2 = AmBx*r_020_500_2 + r_120_500_2;
            double r_002_600_2 = AmBx*r_002_500_2 + r_102_500_2;
            double r_110_600_2 = AmBx*r_110_500_2 + r_210_500_2;
            double r_101_600_2 = AmBx*r_101_500_2 + r_201_500_2;
            double r_011_600_2 = AmBx*r_011_500_2 + r_111_500_2;
            double b_060_1 = AmBy*b_050_1 + r_010_050_1;
            double b_060_2 = AmBy*b_050_2 + r_010_050_2;
            double r_100_060_2 = AmBy*r_100_050_2 + r_110_050_2;
            double r_010_060_2 = AmBy*r_010_050_2 + r_020_050_2;
            double r_001_060_2 = AmBy*r_001_050_2 + r_011_050_2;
            double r_200_060_2 = AmBy*r_200_050_2 + r_210_050_2;
            double r_020_060_2 = AmBy*r_020_050_2 + r_030_050_2;
            double r_002_060_2 = AmBy*r_002_050_2 + r_012_050_2;
            double r_110_060_2 = AmBy*r_110_050_2 + r_120_050_2;
            double r_101_060_2 = AmBy*r_101_050_2 + r_111_050_2;
            double r_011_060_2 = AmBy*r_011_050_2 + r_021_050_2;
            double b_006_1 = AmBz*b_005_1 + r_001_005_1;
            double b_006_2 = AmBz*b_005_2 + r_001_005_2;
            double r_100_006_2 = AmBz*r_100_005_2 + r_101_005_2;
            double r_010_006_2 = AmBz*r_010_005_2 + r_011_005_2;
            double r_001_006_2 = AmBz*r_001_005_2 + r_002_005_2;
            double r_200_006_2 = AmBz*r_200_005_2 + r_201_005_2;
            double r_020_006_2 = AmBz*r_020_005_2 + r_021_005_2;
            double r_002_006_2 = AmBz*r_002_005_2 + r_003_005_2;
            double r_110_006_2 = AmBz*r_110_005_2 + r_111_005_2;
            double r_101_006_2 = AmBz*r_101_005_2 + r_102_005_2;
            double r_011_006_2 = AmBz*r_011_005_2 + r_012_005_2;
            double b_510_1 = AmBy*b_500_1 + r_010_500_1;
            double b_510_2 = AmBy*b_500_2 + r_010_500_2;
            double r_010_510_2 = AmBy*r_010_500_2 + r_020_500_2;
            double r_001_510_2 = AmBy*r_001_500_2 + r_011_500_2;
            double r_020_510_2 = AmBy*r_020_500_2 + r_030_500_2;
            double r_011_510_2 = AmBy*r_011_500_2 + r_021_500_2;
            double b_150_1 = AmBx*b_050_1 + r_100_050_1;
            double b_150_2 = AmBx*b_050_2 + r_100_050_2;
            double r_100_150_2 = AmBx*r_100_050_2 + r_200_050_2;
            double r_001_150_2 = AmBx*r_001_050_2 + r_101_050_2;
            double r_200_150_2 = AmBx*r_200_050_2 + r_300_050_2;
            double r_101_150_2 = AmBx*r_101_050_2 + r_201_050_2;
            double b_501_1 = AmBz*b_500_1 + r_001_500_1;
            double b_501_2 = AmBz*b_500_2 + r_001_500_2;
            double r_010_501_2 = AmBz*r_010_500_2 + r_011_500_2;
            double r_001_501_2 = AmBz*r_001_500_2 + r_002_500_2;
            double r_002_501_2 = AmBz*r_002_500_2 + r_003_500_2;
            double r_011_501_2 = AmBz*r_011_500_2 + r_012_500_2;
            double b_105_1 = AmBx*b_005_1 + r_100_005_1;
            double b_105_2 = AmBx*b_005_2 + r_100_005_2;
            double r_100_105_2 = AmBx*r_100_005_2 + r_200_005_2;
            double r_010_105_2 = AmBx*r_010_005_2 + r_110_005_2;
            double r_200_105_2 = AmBx*r_200_005_2 + r_300_005_2;
            double r_110_105_2 = AmBx*r_110_005_2 + r_210_005_2;
            double b_051_1 = AmBz*b_050_1 + r_001_050_1;
            double b_051_2 = AmBz*b_050_2 + r_001_050_2;
            double r_100_051_2 = AmBz*r_100_050_2 + r_101_050_2;
            double r_001_051_2 = AmBz*r_001_050_2 + r_002_050_2;
            double r_002_051_2 = AmBz*r_002_050_2 + r_003_050_2;
            double r_101_051_2 = AmBz*r_101_050_2 + r_102_050_2;
            double b_015_1 = AmBy*b_005_1 + r_010_005_1;
            double b_015_2 = AmBy*b_005_2 + r_010_005_2;
            double r_100_015_2 = AmBy*r_100_005_2 + r_110_005_2;
            double r_010_015_2 = AmBy*r_010_005_2 + r_020_005_2;
            double r_020_015_2 = AmBy*r_020_005_2 + r_030_005_2;
            double r_110_015_2 = AmBy*r_110_005_2 + r_120_005_2;
            double b_420_1 = AmBy*b_410_1 + r_010_410_1;
            double b_420_2 = AmBy*b_410_2 + r_010_410_2;
            double r_010_420_2 = AmBy*r_010_410_2 + r_020_410_2;
            double r_001_420_2 = AmBy*r_001_410_2 + r_011_410_2;
            double r_011_420_2 = AmBy*r_011_410_2 + r_021_410_2;
            double b_402_1 = AmBz*b_401_1 + r_001_401_1;
            double b_402_2 = AmBz*b_401_2 + r_001_401_2;
            double r_010_402_2 = AmBz*r_010_401_2 + r_011_401_2;
            double r_001_402_2 = AmBz*r_001_401_2 + r_002_401_2;
            double r_020_402_2 = AmBz*r_020_401_2 + r_021_401_2;
            double r_011_402_2 = AmBz*r_011_401_2 + r_012_401_2;
            double b_240_1 = AmBx*b_140_1 + r_100_140_1;
            double b_240_2 = AmBx*b_140_2 + r_100_140_2;
            double r_100_240_2 = AmBx*r_100_140_2 + r_200_140_2;
            double r_001_240_2 = AmBx*r_001_140_2 + r_101_140_2;
            double r_200_240_2 = AmBx*r_200_140_2 + r_300_140_2;
            double r_101_240_2 = AmBx*r_101_140_2 + r_201_140_2;
            double b_204_1 = AmBx*b_104_1 + r_100_104_1;
            double b_204_2 = AmBx*b_104_2 + r_100_104_2;
            double r_100_204_2 = AmBx*r_100_104_2 + r_200_104_2;
            double r_010_204_2 = AmBx*r_010_104_2 + r_110_104_2;
            double r_200_204_2 = AmBx*r_200_104_2 + r_300_104_2;
            double r_110_204_2 = AmBx*r_110_104_2 + r_210_104_2;
            double b_042_1 = AmBz*b_041_1 + r_001_041_1;
            double b_042_2 = AmBz*b_041_2 + r_001_041_2;
            double r_100_042_2 = AmBz*r_100_041_2 + r_101_041_2;
            double r_001_042_2 = AmBz*r_001_041_2 + r_002_041_2;
            double r_200_042_2 = AmBz*r_200_041_2 + r_201_041_2;
            double r_101_042_2 = AmBz*r_101_041_2 + r_102_041_2;
            double b_024_1 = AmBy*b_014_1 + r_010_014_1;
            double b_024_2 = AmBy*b_014_2 + r_010_014_2;
            double r_100_024_2 = AmBy*r_100_014_2 + r_110_014_2;
            double r_010_024_2 = AmBy*r_010_014_2 + r_020_014_2;
            double r_200_024_2 = AmBy*r_200_014_2 + r_210_014_2;
            double r_020_024_2 = AmBy*r_020_014_2 + r_030_014_2;
            double r_110_024_2 = AmBy*r_110_014_2 + r_120_014_2;
            double b_330_1 = AmBy*b_320_1 + r_010_320_1;
            double b_330_2 = AmBy*b_320_2 + r_010_320_2;
            double r_001_330_2 = AmBy*r_001_320_2 + r_011_320_2;
            double r_002_330_2 = AmBy*r_002_320_2 + r_012_320_2;
            double b_303_1 = AmBz*b_302_1 + r_001_302_1;
            double b_303_2 = AmBz*b_302_2 + r_001_302_2;
            double r_010_303_2 = AmBz*r_010_302_2 + r_011_302_2;
            double r_020_303_2 = AmBz*r_020_302_2 + r_021_302_2;
            double b_033_1 = AmBz*b_032_1 + r_001_032_1;
            double b_033_2 = AmBz*b_032_2 + r_001_032_2;
            double r_100_033_2 = AmBz*r_100_032_2 + r_101_032_2;
            double r_200_033_2 = AmBz*r_200_032_2 + r_201_032_2;
            double b_114_1 = AmBy*b_104_1 + r_010_104_1;
            double b_141_1 = AmBz*b_140_1 + r_001_140_1;
            double b_411_1 = AmBz*b_410_1 + r_001_410_1;
            double b_312_1 = AmBy*b_302_1 + r_010_302_1;
            double b_132_1 = AmBx*b_032_1 + r_100_032_1;
            double b_321_1 = AmBz*b_320_1 + r_001_320_1;
            double b_123_1 = AmBx*b_023_1 + r_100_023_1;
            double b_231_1 = AmBz*b_230_1 + r_001_230_1;
            double b_213_1 = AmBy*b_203_1 + r_010_203_1;
            double b_222_1 = AmBx*b_122_1 + r_100_122_1;
            double b_700_2 = AmBx*b_600_2 + r_100_600_2;
            double r_100_700_2 = AmBx*r_100_600_2 + r_200_600_2;
            double r_010_700_2 = AmBx*r_010_600_2 + r_110_600_2;
            double r_001_700_2 = AmBx*r_001_600_2 + r_101_600_2;
            double b_070_2 = AmBy*b_060_2 + r_010_060_2;
            double r_100_070_2 = AmBy*r_100_060_2 + r_110_060_2;
            double r_010_070_2 = AmBy*r_010_060_2 + r_020_060_2;
            double r_001_070_2 = AmBy*r_001_060_2 + r_011_060_2;
            double b_007_2 = AmBz*b_006_2 + r_001_006_2;
            double r_100_007_2 = AmBz*r_100_006_2 + r_101_006_2;
            double r_010_007_2 = AmBz*r_010_006_2 + r_011_006_2;
            double r_001_007_2 = AmBz*r_001_006_2 + r_002_006_2;
            double b_160_2 = AmBx*b_060_2 + r_100_060_2;
            double r_100_160_2 = AmBx*r_100_060_2 + r_200_060_2;
            double r_001_160_2 = AmBx*r_001_060_2 + r_101_060_2;
            double b_106_2 = AmBx*b_006_2 + r_100_006_2;
            double r_100_106_2 = AmBx*r_100_006_2 + r_200_006_2;
            double r_010_106_2 = AmBx*r_010_006_2 + r_110_006_2;
            double b_610_2 = AmBy*b_600_2 + r_010_600_2;
            double r_010_610_2 = AmBy*r_010_600_2 + r_020_600_2;
            double r_001_610_2 = AmBy*r_001_600_2 + r_011_600_2;
            double b_016_2 = AmBy*b_006_2 + r_010_006_2;
            double r_010_016_2 = AmBy*r_010_006_2 + r_020_006_2;
            double b_601_2 = AmBz*b_600_2 + r_001_600_2;
            double r_001_601_2 = AmBz*r_001_600_2 + r_002_600_2;
            double b_061_2 = AmBz*b_060_2 + r_001_060_2;
            double r_001_061_2 = AmBz*r_001_060_2 + r_002_060_2;
            double b_520_2 = AmBy*b_510_2 + r_010_510_2;
            double r_010_520_2 = AmBy*r_010_510_2 + r_020_510_2;
            double r_001_520_2 = AmBy*r_001_510_2 + r_011_510_2;
            double b_502_2 = AmBz*b_501_2 + r_001_501_2;
            double r_010_502_2 = AmBz*r_010_501_2 + r_011_501_2;
            double r_001_502_2 = AmBz*r_001_501_2 + r_002_501_2;
            double b_250_2 = AmBx*b_150_2 + r_100_150_2;
            double r_100_250_2 = AmBx*r_100_150_2 + r_200_150_2;
            double r_001_250_2 = AmBx*r_001_150_2 + r_101_150_2;
            double b_052_2 = AmBz*b_051_2 + r_001_051_2;
            double r_100_052_2 = AmBz*r_100_051_2 + r_101_051_2;
            double r_001_052_2 = AmBz*r_001_051_2 + r_002_051_2;
            double b_205_2 = AmBx*b_105_2 + r_100_105_2;
            double r_100_205_2 = AmBx*r_100_105_2 + r_200_105_2;
            double r_010_205_2 = AmBx*r_010_105_2 + r_110_105_2;
            double b_025_2 = AmBy*b_015_2 + r_010_015_2;
            double r_100_025_2 = AmBy*r_100_015_2 + r_110_015_2;
            double r_010_025_2 = AmBy*r_010_015_2 + r_020_015_2;
            double b_340_2 = AmBx*b_240_2 + r_100_240_2;
            double r_100_340_2 = AmBx*r_100_240_2 + r_200_240_2;
            double r_001_340_2 = AmBx*r_001_240_2 + r_101_240_2;
            double b_304_2 = AmBx*b_204_2 + r_100_204_2;
            double r_100_304_2 = AmBx*r_100_204_2 + r_200_204_2;
            double r_010_304_2 = AmBx*r_010_204_2 + r_110_204_2;
            double b_430_2 = AmBy*b_420_2 + r_010_420_2;
            double r_001_430_2 = AmBy*r_001_420_2 + r_011_420_2;
            double b_034_2 = AmBy*b_024_2 + r_010_024_2;
            double r_100_034_2 = AmBy*r_100_024_2 + r_110_024_2;
            double r_010_034_2 = AmBy*r_010_024_2 + r_020_024_2;
            double b_403_2 = AmBz*b_402_2 + r_001_402_2;
            double r_010_403_2 = AmBz*r_010_402_2 + r_011_402_2;
            double b_043_2 = AmBz*b_042_2 + r_001_042_2;
            double r_100_043_2 = AmBz*r_100_042_2 + r_101_042_2;
            double b_142_2 = AmBx*b_042_2 + r_100_042_2;
            double r_100_142_2 = AmBx*r_100_042_2 + r_200_042_2;
            double b_124_2 = AmBx*b_024_2 + r_100_024_2;
            double r_100_124_2 = AmBx*r_100_024_2 + r_200_024_2;
            double b_412_2 = AmBy*b_402_2 + r_010_402_2;
            double r_010_412_2 = AmBy*r_010_402_2 + r_020_402_2;
            double b_331_2 = AmBz*b_330_2 + r_001_330_2;
            double r_001_331_2 = AmBz*r_001_330_2 + r_002_330_2;
            double b_313_2 = AmBy*b_303_2 + r_010_303_2;
            double r_010_313_2 = AmBy*r_010_303_2 + r_020_303_2;
            double b_133_2 = AmBx*b_033_2 + r_100_033_2;
            double r_100_133_2 = AmBx*r_100_033_2 + r_200_033_2;
            double b_800_2 = AmBx*b_700_2 + r_100_700_2;
            double b_080_2 = AmBy*b_070_2 + r_010_070_2;
            double b_008_2 = AmBz*b_007_2 + r_001_007_2;
            double b_710_2 = AmBy*b_700_2 + r_010_700_2;
            double b_170_2 = AmBx*b_070_2 + r_100_070_2;
            double b_701_2 = AmBz*b_700_2 + r_001_700_2;
            double b_107_2 = AmBx*b_007_2 + r_100_007_2;
            double b_071_2 = AmBz*b_070_2 + r_001_070_2;
            double b_017_2 = AmBy*b_007_2 + r_010_007_2;
            double b_620_2 = AmBy*b_610_2 + r_010_610_2;
            double b_602_2 = AmBz*b_601_2 + r_001_601_2;
            double b_260_2 = AmBx*b_160_2 + r_100_160_2;
            double b_206_2 = AmBx*b_106_2 + r_100_106_2;
            double b_062_2 = AmBz*b_061_2 + r_001_061_2;
            double b_026_2 = AmBy*b_016_2 + r_010_016_2;
            double b_530_2 = AmBy*b_520_2 + r_010_520_2;
            double b_350_2 = AmBx*b_250_2 + r_100_250_2;
            double b_503_2 = AmBz*b_502_2 + r_001_502_2;
            double b_305_2 = AmBx*b_205_2 + r_100_205_2;
            double b_053_2 = AmBz*b_052_2 + r_001_052_2;
            double b_035_2 = AmBy*b_025_2 + r_010_025_2;
            double b_440_2 = AmBx*b_340_2 + r_100_340_2;
            double b_404_2 = AmBx*b_304_2 + r_100_304_2;
            double b_044_2 = AmBy*b_034_2 + r_010_034_2;
            double b_116_2 = AmBy*b_106_2 + r_010_106_2;
            double b_161_2 = AmBz*b_160_2 + r_001_160_2;
            double b_611_2 = AmBz*b_610_2 + r_001_610_2;
            double b_512_2 = AmBy*b_502_2 + r_010_502_2;
            double b_152_2 = AmBx*b_052_2 + r_100_052_2;
            double b_521_2 = AmBz*b_520_2 + r_001_520_2;
            double b_125_2 = AmBx*b_025_2 + r_100_025_2;
            double b_251_2 = AmBz*b_250_2 + r_001_250_2;
            double b_215_2 = AmBy*b_205_2 + r_010_205_2;
            double b_314_2 = AmBy*b_304_2 + r_010_304_2;
            double b_134_2 = AmBx*b_034_2 + r_100_034_2;
            double b_341_2 = AmBz*b_340_2 + r_001_340_2;
            double b_143_2 = AmBx*b_043_2 + r_100_043_2;
            double b_431_2 = AmBz*b_430_2 + r_001_430_2;
            double b_413_2 = AmBy*b_403_2 + r_010_403_2;
            double b_422_2 = AmBy*b_412_2 + r_010_412_2;
            double b_242_2 = AmBx*b_142_2 + r_100_142_2;
            double b_224_2 = AmBx*b_124_2 + r_100_124_2;
            double b_332_2 = AmBz*b_331_2 + r_001_331_2;
            double b_323_2 = AmBy*b_313_2 + r_010_313_2;
            double b_233_2 = AmBx*b_133_2 + r_100_133_2;
            double bx_500 = -5*b_400 + b_600_1;
            double bx_140 = -b_040 + b_240_1;
            double bx_104 = -b_004 + b_204_1;
            double bx_410 = -4*b_310 + b_510_1;
            double bx_401 = -4*b_301 + b_501_1;
            double bx_320 = -3*b_220 + b_420_1;
            double bx_302 = -3*b_202 + b_402_1;
            double bx_230 = -2*b_130 + b_330_1;
            double bx_203 = -2*b_103 + b_303_1;
            double bx_311 = -3*b_211 + b_411_1;
            double bx_131 = -b_031 + b_231_1;
            double bx_113 = -b_013 + b_213_1;
            double bx_122 = -b_022 + b_222_1;
            double bx_212 = -2*b_112 + b_312_1;
            double bx_221 = -2*b_121 + b_321_1;
            double bx_700_1 = -7*b_600_1 + b_800_2;
            double bx_160_1 = -b_060_1 + b_260_2;
            double bx_106_1 = -b_006_1 + b_206_2;
            double bx_610_1 = -6*b_510_1 + b_710_2;
            double bx_601_1 = -6*b_501_1 + b_701_2;
            double bx_520_1 = -5*b_420_1 + b_620_2;
            double bx_502_1 = -5*b_402_1 + b_602_2;
            double bx_250_1 = -2*b_150_1 + b_350_2;
            double bx_205_1 = -2*b_105_1 + b_305_2;
            double bx_340_1 = -3*b_240_1 + b_440_2;
            double bx_304_1 = -3*b_204_1 + b_404_2;
            double bx_430_1 = -4*b_330_1 + b_530_2;
            double bx_403_1 = -4*b_303_1 + b_503_2;
            double bx_511_1 = -5*b_411_1 + b_611_2;
            double bx_151_1 = -b_051_1 + b_251_2;
            double bx_115_1 = -b_015_1 + b_215_2;
            double bx_142_1 = -b_042_1 + b_242_2;
            double bx_124_1 = -b_024_1 + b_224_2;
            double bx_412_1 = -4*b_312_1 + b_512_2;
            double bx_214_1 = -2*b_114_1 + b_314_2;
            double bx_421_1 = -4*b_321_1 + b_521_2;
            double bx_241_1 = -2*b_141_1 + b_341_2;
            double bx_331_1 = -3*b_231_1 + b_431_2;
            double bx_313_1 = -3*b_213_1 + b_413_2;
            double bx_133_1 = -b_033_1 + b_233_2;
            double bx_322_1 = -3*b_222_1 + b_422_2;
            double bx_232_1 = -2*b_132_1 + b_332_2;
            double bx_223_1 = -2*b_123_1 + b_323_2;
            double by_050 = -5*b_040 + b_060_1;
            double by_140 = -4*b_130 + b_150_1;
            double by_410 = -b_400 + b_420_1;
            double by_014 = -b_004 + b_024_1;
            double by_041 = -4*b_031 + b_051_1;
            double by_320 = -2*b_310 + b_330_1;
            double by_230 = -3*b_220 + b_240_1;
            double by_032 = -3*b_022 + b_042_1;
            double by_023 = -2*b_013 + b_033_1;
            double by_311 = -b_301 + b_321_1;
            double by_131 = -3*b_121 + b_141_1;
            double by_113 = -b_103 + b_123_1;
            double by_122 = -2*b_112 + b_132_1;
            double by_212 = -b_202 + b_222_1;
            double by_221 = -2*b_211 + b_231_1;
            double by_070_1 = -7*b_060_1 + b_080_2;
            double by_160_1 = -6*b_150_1 + b_170_2;
            double by_610_1 = -b_600_1 + b_620_2;
            double by_016_1 = -b_006_1 + b_026_2;
            double by_061_1 = -6*b_051_1 + b_071_2;
            double by_520_1 = -2*b_510_1 + b_530_2;
            double by_250_1 = -5*b_240_1 + b_260_2;
            double by_052_1 = -5*b_042_1 + b_062_2;
            double by_025_1 = -2*b_015_1 + b_035_2;
            double by_340_1 = -4*b_330_1 + b_350_2;
            double by_430_1 = -3*b_420_1 + b_440_2;
            double by_034_1 = -3*b_024_1 + b_044_2;
            double by_043_1 = -4*b_033_1 + b_053_2;
            double by_511_1 = -b_501_1 + b_521_2;
            double by_151_1 = -5*b_141_1 + b_161_2;
            double by_115_1 = -b_105_1 + b_125_2;
            double by_142_1 = -4*b_132_1 + b_152_2;
            double by_124_1 = -2*b_114_1 + b_134_2;
            double by_412_1 = -b_402_1 + b_422_2;
            double by_214_1 = -b_204_1 + b_224_2;
            double by_421_1 = -2*b_411_1 + b_431_2;
            double by_241_1 = -4*b_231_1 + b_251_2;
            double by_331_1 = -3*b_321_1 + b_341_2;
            double by_313_1 = -b_303_1 + b_323_2;
            double by_133_1 = -3*b_123_1 + b_143_2;
            double by_322_1 = -2*b_312_1 + b_332_2;
            double by_232_1 = -3*b_222_1 + b_242_2;
            double by_223_1 = -2*b_213_1 + b_233_2;
            double bz_005 = -5*b_004 + b_006_1;
            double bz_104 = -4*b_103 + b_105_1;
            double bz_014 = -4*b_013 + b_015_1;
            double bz_401 = -b_400 + b_402_1;
            double bz_041 = -b_040 + b_042_1;
            double bz_302 = -2*b_301 + b_303_1;
            double bz_032 = -2*b_031 + b_033_1;
            double bz_203 = -3*b_202 + b_204_1;
            double bz_023 = -3*b_022 + b_024_1;
            double bz_311 = -b_310 + b_312_1;
            double bz_131 = -b_130 + b_132_1;
            double bz_113 = -3*b_112 + b_114_1;
            double bz_122 = -2*b_121 + b_123_1;
            double bz_212 = -2*b_211 + b_213_1;
            double bz_221 = -b_220 + b_222_1;
            double bz_007_1 = -7*b_006_1 + b_008_2;
            double bz_106_1 = -6*b_105_1 + b_107_2;
            double bz_016_1 = -6*b_015_1 + b_017_2;
            double bz_601_1 = -b_600_1 + b_602_2;
            double bz_061_1 = -b_060_1 + b_062_2;
            double bz_502_1 = -2*b_501_1 + b_503_2;
            double bz_052_1 = -2*b_051_1 + b_053_2;
            double bz_205_1 = -5*b_204_1 + b_206_2;
            double bz_025_1 = -5*b_024_1 + b_026_2;
            double bz_304_1 = -4*b_303_1 + b_305_2;
            double bz_034_1 = -4*b_033_1 + b_035_2;
            double bz_403_1 = -3*b_402_1 + b_404_2;
            double bz_043_1 = -3*b_042_1 + b_044_2;
            double bz_511_1 = -b_510_1 + b_512_2;
            double bz_151_1 = -b_150_1 + b_152_2;
            double bz_115_1 = -5*b_114_1 + b_116_2;
            double bz_142_1 = -2*b_141_1 + b_143_2;
            double bz_124_1 = -4*b_123_1 + b_125_2;
            double bz_412_1 = -2*b_411_1 + b_413_2;
            double bz_214_1 = -4*b_213_1 + b_215_2;
            double bz_421_1 = -b_420_1 + b_422_2;
            double bz_241_1 = -b_240_1 + b_242_2;
            double bz_331_1 = -b_330_1 + b_332_2;
            double bz_313_1 = -3*b_312_1 + b_314_2;
            double bz_133_1 = -3*b_132_1 + b_134_2;
            double bz_322_1 = -2*b_321_1 + b_323_2;
            double bz_232_1 = -2*b_231_1 + b_233_2;
            double bz_223_1 = -3*b_222_1 + b_224_2;
            double bxx_600 = -6*bx_500 + bx_700_1;
            double bxx_060 = bx_160_1;
            double bxx_006 = bx_106_1;
            double bxx_510 = -5*bx_410 + bx_610_1;
            double bxx_150 = -b_150_1 + bx_250_1;
            double bxx_501 = -5*bx_401 + bx_601_1;
            double bxx_105 = -b_105_1 + bx_205_1;
            double bxx_051 = bx_151_1;
            double bxx_015 = bx_115_1;
            double bxx_420 = -4*bx_320 + bx_520_1;
            double bxx_402 = -4*bx_302 + bx_502_1;
            double bxx_240 = -2*bx_140 + bx_340_1;
            double bxx_204 = -2*bx_104 + bx_304_1;
            double bxx_042 = bx_142_1;
            double bxx_024 = bx_124_1;
            double bxx_330 = -3*bx_230 + bx_430_1;
            double bxx_303 = -3*bx_203 + bx_403_1;
            double bxx_033 = bx_133_1;
            double bxx_114 = -b_114_1 + bx_214_1;
            double bxx_141 = -b_141_1 + bx_241_1;
            double bxx_411 = -4*bx_311 + bx_511_1;
            double bxx_312 = -3*bx_212 + bx_412_1;
            double bxx_132 = -b_132_1 + bx_232_1;
            double bxx_321 = -3*bx_221 + bx_421_1;
            double bxx_123 = -b_123_1 + bx_223_1;
            double bxx_231 = -2*bx_131 + bx_331_1;
            double bxx_213 = -2*bx_113 + bx_313_1;
            double bxx_222 = -2*bx_122 + bx_322_1;
            double byy_600 = by_610_1;
            double byy_060 = -6*by_050 + by_070_1;
            double byy_006 = by_016_1;
            double byy_510 = -b_510_1 + by_520_1;
            double byy_150 = -5*by_140 + by_160_1;
            double byy_501 = by_511_1;
            double byy_105 = by_115_1;
            double byy_051 = -5*by_041 + by_061_1;
            double byy_015 = -b_015_1 + by_025_1;
            double byy_420 = -2*by_410 + by_430_1;
            double byy_402 = by_412_1;
            double byy_240 = -4*by_230 + by_250_1;
            double byy_204 = by_214_1;
            double byy_042 = -4*by_032 + by_052_1;
            double byy_024 = -2*by_014 + by_034_1;
            double byy_330 = -3*by_320 + by_340_1;
            double byy_303 = by_313_1;
            double byy_033 = -3*by_023 + by_043_1;
            double byy_114 = -b_114_1 + by_124_1;
            double byy_141 = -4*by_131 + by_151_1;
            double byy_411 = -b_411_1 + by_421_1;
            double byy_312 = -b_312_1 + by_322_1;
            double byy_132 = -3*by_122 + by_142_1;
            double byy_321 = -2*by_311 + by_331_1;
            double byy_123 = -2*by_113 + by_133_1;
            double byy_231 = -3*by_221 + by_241_1;
            double byy_213 = -b_213_1 + by_223_1;
            double byy_222 = -2*by_212 + by_232_1;
            double bzz_600 = bz_601_1;
            double bzz_060 = bz_061_1;
            double bzz_006 = -6*bz_005 + bz_007_1;
            double bzz_510 = bz_511_1;
            double bzz_150 = bz_151_1;
            double bzz_501 = -b_501_1 + bz_502_1;
            double bzz_105 = -5*bz_104 + bz_106_1;
            double bzz_051 = -b_051_1 + bz_052_1;
            double bzz_015 = -5*bz_014 + bz_016_1;
            double bzz_420 = bz_421_1;
            double bzz_402 = -2*bz_401 + bz_403_1;
            double bzz_240 = bz_241_1;
            double bzz_204 = -4*bz_203 + bz_205_1;
            double bzz_042 = -2*bz_041 + bz_043_1;
            double bzz_024 = -4*bz_023 + bz_025_1;
            double bzz_330 = bz_331_1;
            double bzz_303 = -3*bz_302 + bz_304_1;
            double bzz_033 = -3*bz_032 + bz_034_1;
            double bzz_114 = -4*bz_113 + bz_115_1;
            double bzz_141 = -b_141_1 + bz_142_1;
            double bzz_411 = -b_411_1 + bz_412_1;
            double bzz_312 = -2*bz_311 + bz_313_1;
            double bzz_132 = -2*bz_131 + bz_133_1;
            double bzz_321 = -b_321_1 + bz_322_1;
            double bzz_123 = -3*bz_122 + bz_124_1;
            double bzz_231 = -b_231_1 + bz_232_1;
            double bzz_213 = -3*bz_212 + bz_214_1;
            double bzz_222 = -2*bz_221 + bz_223_1;
            double bxy_600 = bx_610_1;
            double bxy_060 = -6*b_150_1 + b_170_2;
            double bxy_006 = b_116_2;
            double bxy_510 = -bx_500 + bx_520_1;
            double bxy_150 = -5*bx_140 + bx_160_1;
            double bxy_501 = bx_511_1;
            double bxy_105 = bx_115_1;
            double bxy_051 = -5*b_141_1 + b_161_2;
            double bxy_015 = -b_105_1 + b_125_2;
            double bxy_420 = -2*bx_410 + bx_430_1;
            double bxy_402 = bx_412_1;
            double bxy_240 = -4*bx_230 + bx_250_1;
            double bxy_204 = bx_214_1;
            double bxy_042 = -4*b_132_1 + b_152_2;
            double bxy_024 = -2*b_114_1 + b_134_2;
            double bxy_330 = -3*bx_320 + bx_340_1;
            double bxy_303 = bx_313_1;
            double bxy_033 = -3*b_123_1 + b_143_2;
            double bxy_114 = -bx_104 + bx_124_1;
            double bxy_141 = -4*bx_131 + bx_151_1;
            double bxy_411 = -bx_401 + bx_421_1;
            double bxy_312 = -bx_302 + bx_322_1;
            double bxy_132 = -3*bx_122 + bx_142_1;
            double bxy_321 = -2*bx_311 + bx_331_1;
            double bxy_123 = -2*bx_113 + bx_133_1;
            double bxy_231 = -3*bx_221 + bx_241_1;
            double bxy_213 = -bx_203 + bx_223_1;
            double bxy_222 = -2*bx_212 + bx_232_1;
            double bxz_600 = bx_601_1;
            double bxz_060 = b_161_2;
            double bxz_006 = -6*b_105_1 + b_107_2;
            double bxz_510 = bx_511_1;
            double bxz_150 = bx_151_1;
            double bxz_501 = -bx_500 + bx_502_1;
            double bxz_105 = -5*bx_104 + bx_106_1;
            double bxz_051 = -b_150_1 + b_152_2;
            double bxz_015 = -5*b_114_1 + b_116_2;
            double bxz_420 = bx_421_1;
            double bxz_402 = -2*bx_401 + bx_403_1;
            double bxz_240 = bx_241_1;
            double bxz_204 = -4*bx_203 + bx_205_1;
            double bxz_042 = -2*b_141_1 + b_143_2;
            double bxz_024 = -4*b_123_1 + b_125_2;
            double bxz_330 = bx_331_1;
            double bxz_303 = -3*bx_302 + bx_304_1;
            double bxz_033 = -3*b_132_1 + b_134_2;
            double bxz_114 = -4*bx_113 + bx_115_1;
            double bxz_141 = -bx_140 + bx_142_1;
            double bxz_411 = -bx_410 + bx_412_1;
            double bxz_312 = -2*bx_311 + bx_313_1;
            double bxz_132 = -2*bx_131 + bx_133_1;
            double bxz_321 = -bx_320 + bx_322_1;
            double bxz_123 = -3*bx_122 + bx_124_1;
            double bxz_231 = -bx_230 + bx_232_1;
            double bxz_213 = -3*bx_212 + bx_214_1;
            double bxz_222 = -2*bx_221 + bx_223_1;
            double byz_600 = b_611_2;
            double byz_060 = by_061_1;
            double byz_006 = -6*b_015_1 + b_017_2;
            double byz_510 = by_511_1;
            double byz_150 = by_151_1;
            double byz_501 = -b_510_1 + b_512_2;
            double byz_105 = -5*b_114_1 + b_116_2;
            double byz_051 = -by_050 + by_052_1;
            double byz_015 = -5*by_014 + by_016_1;
            double byz_420 = by_421_1;
            double byz_402 = -2*b_411_1 + b_413_2;
            double byz_240 = by_241_1;
            double byz_204 = -4*b_213_1 + b_215_2;
            double byz_042 = -2*by_041 + by_043_1;
            double byz_024 = -4*by_023 + by_025_1;
            double byz_330 = by_331_1;
            double byz_303 = -3*b_312_1 + b_314_2;
            double byz_033 = -3*by_032 + by_034_1;
            double byz_114 = -4*by_113 + by_115_1;
            double byz_141 = -by_140 + by_142_1;
            double byz_411 = -by_410 + by_412_1;
            double byz_312 = -2*by_311 + by_313_1;
            double byz_132 = -2*by_131 + by_133_1;
            double byz_321 = -by_320 + by_322_1;
            double byz_123 = -3*by_122 + by_124_1;
            double byz_231 = -by_230 + by_232_1;
            double byz_213 = -3*by_212 + by_214_1;
            double byz_222 = -2*by_221 + by_223_1;
            // 10.95 steps per component, 14.38 kb stack
            pOut_[sb*0 + sd*0] = -bxx_060*sd2b + bxx_240*sd2c - bxx_420*sd2c + bxx_600*sd2b;
            pOut_[sb*0 + sd*1] = -byy_060*sd2b + byy_240*sd2c - byy_420*sd2c + byy_600*sd2b;
            pOut_[sb*0 + sd*2] = -bzz_060*sd2b + bzz_240*sd2c - bzz_420*sd2c + bzz_600*sd2b;
            pOut_[sb*0 + sd*3] = -bxy_060*sd2b + bxy_240*sd2c - bxy_420*sd2c + bxy_600*sd2b;
            pOut_[sb*0 + sd*4] = -bxz_060*sd2b + bxz_240*sd2c - bxz_420*sd2c + bxz_600*sd2b;
            pOut_[sb*0 + sd*5] = -byz_060*sd2b + byz_240*sd2c - byz_420*sd2c + byz_600*sd2b;
            pOut_[sb*1 + sd*0] = bxx_114*sd2f - bxx_132*sd2f + bxx_150*sd2d - bxx_312*sd2f + bxx_330*sd2e + bxx_510*sd2d;
            pOut_[sb*1 + sd*1] = byy_114*sd2f - byy_132*sd2f + byy_150*sd2d - byy_312*sd2f + byy_330*sd2e + byy_510*sd2d;
            pOut_[sb*1 + sd*2] = bzz_114*sd2f - bzz_132*sd2f + bzz_150*sd2d - bzz_312*sd2f + bzz_330*sd2e + bzz_510*sd2d;
            pOut_[sb*1 + sd*3] = bxy_114*sd2f - bxy_132*sd2f + bxy_150*sd2d - bxy_312*sd2f + bxy_330*sd2e + bxy_510*sd2d;
            pOut_[sb*1 + sd*4] = bxz_114*sd2f - bxz_132*sd2f + bxz_150*sd2d - bxz_312*sd2f + bxz_330*sd2e + bxz_510*sd2d;
            pOut_[sb*1 + sd*5] = byz_114*sd2f - byz_132*sd2f + byz_150*sd2d - byz_312*sd2f + byz_330*sd2e + byz_510*sd2d;
            pOut_[sb*10 + sd*0] = -bxx_033*sd38 + bxx_051*sd3b + bxx_213*sd3e - bxx_231*sd3c - bxx_411*sd3d;
            pOut_[sb*10 + sd*1] = -byy_033*sd38 + byy_051*sd3b + byy_213*sd3e - byy_231*sd3c - byy_411*sd3d;
            pOut_[sb*10 + sd*2] = -bzz_033*sd38 + bzz_051*sd3b + bzz_213*sd3e - bzz_231*sd3c - bzz_411*sd3d;
            pOut_[sb*10 + sd*3] = -bxy_033*sd38 + bxy_051*sd3b + bxy_213*sd3e - bxy_231*sd3c - bxy_411*sd3d;
            pOut_[sb*10 + sd*4] = -bxz_033*sd38 + bxz_051*sd3b + bxz_213*sd3e - bxz_231*sd3c - bxz_411*sd3d;
            pOut_[sb*10 + sd*5] = -byz_033*sd38 + byz_051*sd3b + byz_213*sd3e - byz_231*sd3c - byz_411*sd3d;
            pOut_[sb*11 + sd*0] = bxx_015*sd49 - bxx_033*sd48 + bxx_051*sd46 - bxx_213*sd48 + bxx_231*sd47 + bxx_411*sd46;
            pOut_[sb*11 + sd*1] = byy_015*sd49 - byy_033*sd48 + byy_051*sd46 - byy_213*sd48 + byy_231*sd47 + byy_411*sd46;
            pOut_[sb*11 + sd*2] = bzz_015*sd49 - bzz_033*sd48 + bzz_051*sd46 - bzz_213*sd48 + bzz_231*sd47 + bzz_411*sd46;
            pOut_[sb*11 + sd*3] = bxy_015*sd49 - bxy_033*sd48 + bxy_051*sd46 - bxy_213*sd48 + bxy_231*sd47 + bxy_411*sd46;
            pOut_[sb*11 + sd*4] = bxz_015*sd49 - bxz_033*sd48 + bxz_051*sd46 - bxz_213*sd48 + bxz_231*sd47 + bxz_411*sd46;
            pOut_[sb*11 + sd*5] = byz_015*sd49 - byz_033*sd48 + byz_051*sd46 - byz_213*sd48 + byz_231*sd47 + byz_411*sd46;
            pOut_[sb*12 + sd*0] = bxx_105*sd49 - bxx_123*sd48 + bxx_141*sd46 - bxx_303*sd48 + bxx_321*sd47 + bxx_501*sd46;
            pOut_[sb*12 + sd*1] = byy_105*sd49 - byy_123*sd48 + byy_141*sd46 - byy_303*sd48 + byy_321*sd47 + byy_501*sd46;
            pOut_[sb*12 + sd*2] = bzz_105*sd49 - bzz_123*sd48 + bzz_141*sd46 - bzz_303*sd48 + bzz_321*sd47 + bzz_501*sd46;
            pOut_[sb*12 + sd*3] = bxy_105*sd49 - bxy_123*sd48 + bxy_141*sd46 - bxy_303*sd48 + bxy_321*sd47 + bxy_501*sd46;
            pOut_[sb*12 + sd*4] = bxz_105*sd49 - bxz_123*sd48 + bxz_141*sd46 - bxz_303*sd48 + bxz_321*sd47 + bxz_501*sd46;
            pOut_[sb*12 + sd*5] = byz_105*sd49 - byz_123*sd48 + byz_141*sd46 - byz_303*sd48 + byz_321*sd47 + byz_501*sd46;
            pOut_[sb*2 + sd*0] = bxx_141*sd32 - bxx_321*sd31 + bxx_501*sd30;
            pOut_[sb*2 + sd*1] = byy_141*sd32 - byy_321*sd31 + byy_501*sd30;
            pOut_[sb*2 + sd*2] = bzz_141*sd32 - bzz_321*sd31 + bzz_501*sd30;
            pOut_[sb*2 + sd*3] = bxy_141*sd32 - bxy_321*sd31 + bxy_501*sd30;
            pOut_[sb*2 + sd*4] = bxz_141*sd32 - bxz_321*sd31 + bxz_501*sd30;
            pOut_[sb*2 + sd*5] = byz_141*sd32 - byz_321*sd31 + byz_501*sd30;
            pOut_[sb*3 + sd*0] = bxx_042*sd35 - bxx_060*sd33 - bxx_222*sd36 + bxx_240*sd34 + bxx_402*sd35 + bxx_420*sd34 - bxx_600*sd33;
            pOut_[sb*3 + sd*1] = byy_042*sd35 - byy_060*sd33 - byy_222*sd36 + byy_240*sd34 + byy_402*sd35 + byy_420*sd34 - byy_600*sd33;
            pOut_[sb*3 + sd*2] = bzz_042*sd35 - bzz_060*sd33 - bzz_222*sd36 + bzz_240*sd34 + bzz_402*sd35 + bzz_420*sd34 - bzz_600*sd33;
            pOut_[sb*3 + sd*3] = bxy_042*sd35 - bxy_060*sd33 - bxy_222*sd36 + bxy_240*sd34 + bxy_402*sd35 + bxy_420*sd34 - bxy_600*sd33;
            pOut_[sb*3 + sd*4] = bxz_042*sd35 - bxz_060*sd33 - bxz_222*sd36 + bxz_240*sd34 + bxz_402*sd35 + bxz_420*sd34 - bxz_600*sd33;
            pOut_[sb*3 + sd*5] = byz_042*sd35 - byz_060*sd33 - byz_222*sd36 + byz_240*sd34 + byz_402*sd35 + byz_420*sd34 - byz_600*sd33;
            pOut_[sb*4 + sd*0] = bxx_051*sd30 - bxx_231*sd31 + bxx_411*sd32;
            pOut_[sb*4 + sd*1] = byy_051*sd30 - byy_231*sd31 + byy_411*sd32;
            pOut_[sb*4 + sd*2] = bzz_051*sd30 - bzz_231*sd31 + bzz_411*sd32;
            pOut_[sb*4 + sd*3] = bxy_051*sd30 - bxy_231*sd31 + bxy_411*sd32;
            pOut_[sb*4 + sd*4] = bxz_051*sd30 - bxz_231*sd31 + bxz_411*sd32;
            pOut_[sb*4 + sd*5] = byz_051*sd30 - byz_231*sd31 + byz_411*sd32;
            pOut_[sb*5 + sd*0] = -bxx_024*sd38 + bxx_042*sd38 - bxx_060*sd37 + bxx_204*sd38 - bxx_240*sd37 - bxx_402*sd38 + bxx_420*sd37 + bxx_600*sd37;
            pOut_[sb*5 + sd*1] = -byy_024*sd38 + byy_042*sd38 - byy_060*sd37 + byy_204*sd38 - byy_240*sd37 - byy_402*sd38 + byy_420*sd37 + byy_600*sd37;
            pOut_[sb*5 + sd*2] = -bzz_024*sd38 + bzz_042*sd38 - bzz_060*sd37 + bzz_204*sd38 - bzz_240*sd37 - bzz_402*sd38 + bzz_420*sd37 + bzz_600*sd37;
            pOut_[sb*5 + sd*3] = -bxy_024*sd38 + bxy_042*sd38 - bxy_060*sd37 + bxy_204*sd38 - bxy_240*sd37 - bxy_402*sd38 + bxy_420*sd37 + bxy_600*sd37;
            pOut_[sb*5 + sd*4] = -bxz_024*sd38 + bxz_042*sd38 - bxz_060*sd37 + bxz_204*sd38 - bxz_240*sd37 - bxz_402*sd38 + bxz_420*sd37 + bxz_600*sd37;
            pOut_[sb*5 + sd*5] = -byz_024*sd38 + byz_042*sd38 - byz_060*sd37 + byz_204*sd38 - byz_240*sd37 - byz_402*sd38 + byz_420*sd37 + byz_600*sd37;
            pOut_[sb*6 + sd*0] = bxx_150*sd39 - bxx_330*sd3a + bxx_510*sd39;
            pOut_[sb*6 + sd*1] = byy_150*sd39 - byy_330*sd3a + byy_510*sd39;
            pOut_[sb*6 + sd*2] = bzz_150*sd39 - bzz_330*sd3a + bzz_510*sd39;
            pOut_[sb*6 + sd*3] = bxy_150*sd39 - bxy_330*sd3a + bxy_510*sd39;
            pOut_[sb*6 + sd*4] = bxz_150*sd39 - bxz_330*sd3a + bxz_510*sd39;
            pOut_[sb*6 + sd*5] = byz_150*sd39 - byz_330*sd3a + byz_510*sd39;
            pOut_[sb*7 + sd*0] = -bxx_123*sd3e + bxx_141*sd3d + bxx_303*sd38 + bxx_321*sd3c - bxx_501*sd3b;
            pOut_[sb*7 + sd*1] = -byy_123*sd3e + byy_141*sd3d + byy_303*sd38 + byy_321*sd3c - byy_501*sd3b;
            pOut_[sb*7 + sd*2] = -bzz_123*sd3e + bzz_141*sd3d + bzz_303*sd38 + bzz_321*sd3c - bzz_501*sd3b;
            pOut_[sb*7 + sd*3] = -bxy_123*sd3e + bxy_141*sd3d + bxy_303*sd38 + bxy_321*sd3c - bxy_501*sd3b;
            pOut_[sb*7 + sd*4] = -bxz_123*sd3e + bxz_141*sd3d + bxz_303*sd38 + bxz_321*sd3c - bxz_501*sd3b;
            pOut_[sb*7 + sd*5] = -byz_123*sd3e + byz_141*sd3d + byz_303*sd38 + byz_321*sd3c - byz_501*sd3b;
            pOut_[sb*8 + sd*0] = -bxx_132*sd40 + bxx_150*sd3f + bxx_312*sd40 - bxx_510*sd3f;
            pOut_[sb*8 + sd*1] = -byy_132*sd40 + byy_150*sd3f + byy_312*sd40 - byy_510*sd3f;
            pOut_[sb*8 + sd*2] = -bzz_132*sd40 + bzz_150*sd3f + bzz_312*sd40 - bzz_510*sd3f;
            pOut_[sb*8 + sd*3] = -bxy_132*sd40 + bxy_150*sd3f + bxy_312*sd40 - bxy_510*sd3f;
            pOut_[sb*8 + sd*4] = -bxz_132*sd40 + bxz_150*sd3f + bxz_312*sd40 - bxz_510*sd3f;
            pOut_[sb*8 + sd*5] = -byz_132*sd40 + byz_150*sd3f + byz_312*sd40 - byz_510*sd3f;
            pOut_[sb*9 + sd*0] = bxx_006 - bxx_024*sd45 + bxx_042*sd43 - bxx_060*sd41 - bxx_204*sd45 + bxx_222*sd44 - bxx_240*sd42 + bxx_402*sd43 - bxx_420*sd42 - bxx_600*sd41;
            pOut_[sb*9 + sd*1] = byy_006 - byy_024*sd45 + byy_042*sd43 - byy_060*sd41 - byy_204*sd45 + byy_222*sd44 - byy_240*sd42 + byy_402*sd43 - byy_420*sd42 - byy_600*sd41;
            pOut_[sb*9 + sd*2] = bzz_006 - bzz_024*sd45 + bzz_042*sd43 - bzz_060*sd41 - bzz_204*sd45 + bzz_222*sd44 - bzz_240*sd42 + bzz_402*sd43 - bzz_420*sd42 - bzz_600*sd41;
            pOut_[sb*9 + sd*3] = bxy_006 - bxy_024*sd45 + bxy_042*sd43 - bxy_060*sd41 - bxy_204*sd45 + bxy_222*sd44 - bxy_240*sd42 + bxy_402*sd43 - bxy_420*sd42 - bxy_600*sd41;
            pOut_[sb*9 + sd*4] = bxz_006 - bxz_024*sd45 + bxz_042*sd43 - bxz_060*sd41 - bxz_204*sd45 + bxz_222*sd44 - bxz_240*sd42 + bxz_402*sd43 - bxz_420*sd42 - bxz_600*sd41;
            pOut_[sb*9 + sd*5] = byz_006 - byz_024*sd45 + byz_042*sd43 - byz_060*sd41 - byz_204*sd45 + byz_222*sd44 - byz_240*sd42 + byz_402*sd43 - byz_420*sd42 - byz_600*sd41;
         }
         return;
      }
   }
   //assert(0);
}

// transform cartesians CartX[(x-A)^lb], centered at A, to solid harmoincs Slm(x-B), centered at B.
// Input is nCartX(lb) x nCount, output is (2l+1); sa indexes Count, sb indexes Slm(x-B).
void OsrrC_dB0L(double * pOut, size_t sa, size_t sb, double const * p2Z, double const * p4Z, double AmBx, double AmBy, double AmBz, unsigned lb, size_t nCount)
{
   // About the prefetches: Yes, I am aware of the fact that they should be pointless, especially the ones
   // on lb=0 and lb=1. But DOES make a difference. On my dual Xeon E5-2687W v3 they increase integration
   // speed by 25%(!!) if writing directly into large matrices/tensors.
   // The lb=0 and lb=1 cases help most, despite the proximity of the prefetch to the write. I have no idea
   // what is going on here. My i7 3820QM, on the other hand, doesn't care either way. So I just leave them in for the time being.
   switch(lb) {
      case 0: {
         for (size_t ia = 0; ia < nCount; ++ ia) {
            double const * pAx1 = p2Z + 1 * ia;
            double const * pAx2 = p4Z + 10 * ia;
            double * pOut_ = pOut + sa * ia;
            //IR_PREFETCH_W(&pOut_[sb*0]);
            double b_100_2 = AmBx*pAx2[0] + pAx2[1];
            double r_100_100_2 = AmBx*pAx2[1] + pAx2[4];
            double b_010_2 = AmBy*pAx2[0] + pAx2[2];
            double r_010_010_2 = AmBy*pAx2[2] + pAx2[5];
            double b_001_2 = AmBz*pAx2[0] + pAx2[3];
            double r_001_001_2 = AmBz*pAx2[3] + pAx2[6];
            double b_200_2 = AmBx*b_100_2 + r_100_100_2;
            double b_020_2 = AmBy*b_010_2 + r_010_010_2;
            double b_002_2 = AmBz*b_001_2 + r_001_001_2;
            double a_000_L1 = -b_002_2 - b_020_2 - b_200_2 + 3*pAx1[0];
            // 10.00 steps per component, 0.08 kb stack
            pOut_[sb*0] = a_000_L1;
         }
         return;
      }
      case 1: {
         for (size_t ia = 0; ia < nCount; ++ ia) {
            double const * pAx1 = p2Z + 4 * ia;
            double const * pAx2 = p4Z + 20 * ia;
            double * pOut_ = pOut + sa * ia;
            //IR_PREFETCH_W(&pOut_[sb*0]);
            //IR_PREFETCH_W(&pOut_[sb*1]);
            //IR_PREFETCH_W(&pOut_[sb*2]);
            double b_100_1 = AmBx*pAx1[0] + pAx1[1];
            double b_100_2 = AmBx*pAx2[0] + pAx2[1];
            double r_100_100_2 = AmBx*pAx2[1] + pAx2[4];
            double r_010_100_2 = AmBx*pAx2[2] + pAx2[7];
            double r_001_100_2 = AmBx*pAx2[3] + pAx2[8];
            double r_200_100_2 = AmBx*pAx2[4] + pAx2[10];
            double r_110_100_2 = AmBx*pAx2[7] + pAx2[15];
            double r_101_100_2 = AmBx*pAx2[8] + pAx2[17];
            double b_010_1 = AmBy*pAx1[0] + pAx1[2];
            double b_010_2 = AmBy*pAx2[0] + pAx2[2];
            double r_100_010_2 = AmBy*pAx2[1] + pAx2[7];
            double r_010_010_2 = AmBy*pAx2[2] + pAx2[5];
            double r_001_010_2 = AmBy*pAx2[3] + pAx2[9];
            double r_020_010_2 = AmBy*pAx2[5] + pAx2[11];
            double r_110_010_2 = AmBy*pAx2[7] + pAx2[13];
            double r_011_010_2 = AmBy*pAx2[9] + pAx2[18];
            double b_001_1 = AmBz*pAx1[0] + pAx1[3];
            double b_001_2 = AmBz*pAx2[0] + pAx2[3];
            double r_100_001_2 = AmBz*pAx2[1] + pAx2[8];
            double r_010_001_2 = AmBz*pAx2[2] + pAx2[9];
            double r_001_001_2 = AmBz*pAx2[3] + pAx2[6];
            double r_002_001_2 = AmBz*pAx2[6] + pAx2[12];
            double r_101_001_2 = AmBz*pAx2[8] + pAx2[14];
            double r_011_001_2 = AmBz*pAx2[9] + pAx2[16];
            double b_200_2 = AmBx*b_100_2 + r_100_100_2;
            double r_100_200_2 = AmBx*r_100_100_2 + r_200_100_2;
            double r_010_200_2 = AmBx*r_010_100_2 + r_110_100_2;
            double r_001_200_2 = AmBx*r_001_100_2 + r_101_100_2;
            double b_020_2 = AmBy*b_010_2 + r_010_010_2;
            double r_100_020_2 = AmBy*r_100_010_2 + r_110_010_2;
            double r_010_020_2 = AmBy*r_010_010_2 + r_020_010_2;
            double r_001_020_2 = AmBy*r_001_010_2 + r_011_010_2;
            double b_002_2 = AmBz*b_001_2 + r_001_001_2;
            double r_100_002_2 = AmBz*r_100_001_2 + r_101_001_2;
            double r_010_002_2 = AmBz*r_010_001_2 + r_011_001_2;
            double r_001_002_2 = AmBz*r_001_001_2 + r_002_001_2;
            double b_300_2 = AmBx*b_200_2 + r_100_200_2;
            double b_030_2 = AmBy*b_020_2 + r_010_020_2;
            double b_003_2 = AmBz*b_002_2 + r_001_002_2;
            double b_120_2 = AmBx*b_020_2 + r_100_020_2;
            double b_102_2 = AmBx*b_002_2 + r_100_002_2;
            double b_210_2 = AmBy*b_200_2 + r_010_200_2;
            double b_012_2 = AmBy*b_002_2 + r_010_002_2;
            double b_201_2 = AmBz*b_200_2 + r_001_200_2;
            double b_021_2 = AmBz*b_020_2 + r_001_020_2;
            double b_100_L1 = 5*b_100_1 - b_102_2 - b_120_2 - b_300_2;
            double b_010_L1 = 5*b_010_1 - b_012_2 - b_030_2 - b_210_2;
            double b_001_L1 = 5*b_001_1 - b_003_2 - b_021_2 - b_201_2;
            // 16.00 steps per component, 0.38 kb stack
            pOut_[sb*0] = b_100_L1;
            pOut_[sb*1] = b_010_L1;
            pOut_[sb*2] = b_001_L1;
         }
         return;
      }
      case 2: {
         for (size_t ia = 0; ia < nCount; ++ ia) {
            double const * pAx1 = p2Z + 10 * ia;
            double const * pAx2 = p4Z + 35 * ia;
            double * pOut_ = pOut + sa * ia;
            //IR_PREFETCH_W(&pOut_[sb*0]);
            //IR_PREFETCH_W(&pOut_[sb*1]);
            //IR_PREFETCH_W(&pOut_[sb*2]);
            //IR_PREFETCH_W(&pOut_[sb*3]);
            //IR_PREFETCH_W(&pOut_[sb*4]);
            double b_100_1 = AmBx*pAx1[0] + pAx1[1];
            double r_100_100_1 = AmBx*pAx1[1] + pAx1[4];
            double r_010_100_1 = AmBx*pAx1[2] + pAx1[7];
            double r_001_100_1 = AmBx*pAx1[3] + pAx1[8];
            double b_100_2 = AmBx*pAx2[0] + pAx2[1];
            double r_100_100_2 = AmBx*pAx2[1] + pAx2[4];
            double r_010_100_2 = AmBx*pAx2[2] + pAx2[7];
            double r_001_100_2 = AmBx*pAx2[3] + pAx2[8];
            double r_200_100_2 = AmBx*pAx2[4] + pAx2[10];
            double r_110_100_2 = AmBx*pAx2[7] + pAx2[15];
            double r_101_100_2 = AmBx*pAx2[8] + pAx2[17];
            double r_011_100_2 = AmBx*pAx2[9] + pAx2[19];
            double r_300_100_2 = AmBx*pAx2[10] + pAx2[20];
            double r_210_100_2 = AmBx*pAx2[15] + pAx2[23];
            double r_201_100_2 = AmBx*pAx2[17] + pAx2[25];
            double r_111_100_2 = AmBx*pAx2[19] + pAx2[34];
            double b_010_1 = AmBy*pAx1[0] + pAx1[2];
            double r_010_010_1 = AmBy*pAx1[2] + pAx1[5];
            double r_001_010_1 = AmBy*pAx1[3] + pAx1[9];
            double b_010_2 = AmBy*pAx2[0] + pAx2[2];
            double r_100_010_2 = AmBy*pAx2[1] + pAx2[7];
            double r_010_010_2 = AmBy*pAx2[2] + pAx2[5];
            double r_001_010_2 = AmBy*pAx2[3] + pAx2[9];
            double r_200_010_2 = AmBy*pAx2[4] + pAx2[15];
            double r_020_010_2 = AmBy*pAx2[5] + pAx2[11];
            double r_110_010_2 = AmBy*pAx2[7] + pAx2[13];
            double r_101_010_2 = AmBy*pAx2[8] + pAx2[19];
            double r_011_010_2 = AmBy*pAx2[9] + pAx2[18];
            double r_030_010_2 = AmBy*pAx2[11] + pAx2[21];
            double r_120_010_2 = AmBy*pAx2[13] + pAx2[24];
            double r_210_010_2 = AmBy*pAx2[15] + pAx2[29];
            double r_021_010_2 = AmBy*pAx2[18] + pAx2[27];
            double r_111_010_2 = AmBy*pAx2[19] + pAx2[33];
            double b_001_1 = AmBz*pAx1[0] + pAx1[3];
            double r_001_001_1 = AmBz*pAx1[3] + pAx1[6];
            double b_001_2 = AmBz*pAx2[0] + pAx2[3];
            double r_100_001_2 = AmBz*pAx2[1] + pAx2[8];
            double r_010_001_2 = AmBz*pAx2[2] + pAx2[9];
            double r_001_001_2 = AmBz*pAx2[3] + pAx2[6];
            double r_200_001_2 = AmBz*pAx2[4] + pAx2[17];
            double r_020_001_2 = AmBz*pAx2[5] + pAx2[18];
            double r_002_001_2 = AmBz*pAx2[6] + pAx2[12];
            double r_110_001_2 = AmBz*pAx2[7] + pAx2[19];
            double r_101_001_2 = AmBz*pAx2[8] + pAx2[14];
            double r_011_001_2 = AmBz*pAx2[9] + pAx2[16];
            double r_003_001_2 = AmBz*pAx2[12] + pAx2[22];
            double r_102_001_2 = AmBz*pAx2[14] + pAx2[26];
            double r_012_001_2 = AmBz*pAx2[16] + pAx2[28];
            double r_201_001_2 = AmBz*pAx2[17] + pAx2[30];
            double r_021_001_2 = AmBz*pAx2[18] + pAx2[31];
            double r_111_001_2 = AmBz*pAx2[19] + pAx2[32];
            double b_200_1 = AmBx*b_100_1 + r_100_100_1;
            double b_200_2 = AmBx*b_100_2 + r_100_100_2;
            double r_100_200_2 = AmBx*r_100_100_2 + r_200_100_2;
            double r_010_200_2 = AmBx*r_010_100_2 + r_110_100_2;
            double r_001_200_2 = AmBx*r_001_100_2 + r_101_100_2;
            double r_200_200_2 = AmBx*r_200_100_2 + r_300_100_2;
            double r_110_200_2 = AmBx*r_110_100_2 + r_210_100_2;
            double r_101_200_2 = AmBx*r_101_100_2 + r_201_100_2;
            double r_011_200_2 = AmBx*r_011_100_2 + r_111_100_2;
            double b_020_1 = AmBy*b_010_1 + r_010_010_1;
            double b_020_2 = AmBy*b_010_2 + r_010_010_2;
            double r_100_020_2 = AmBy*r_100_010_2 + r_110_010_2;
            double r_010_020_2 = AmBy*r_010_010_2 + r_020_010_2;
            double r_001_020_2 = AmBy*r_001_010_2 + r_011_010_2;
            double r_200_020_2 = AmBy*r_200_010_2 + r_210_010_2;
            double r_020_020_2 = AmBy*r_020_010_2 + r_030_010_2;
            double r_110_020_2 = AmBy*r_110_010_2 + r_120_010_2;
            double r_101_020_2 = AmBy*r_101_010_2 + r_111_010_2;
            double r_011_020_2 = AmBy*r_011_010_2 + r_021_010_2;
            double b_002_1 = AmBz*b_001_1 + r_001_001_1;
            double b_002_2 = AmBz*b_001_2 + r_001_001_2;
            double r_100_002_2 = AmBz*r_100_001_2 + r_101_001_2;
            double r_010_002_2 = AmBz*r_010_001_2 + r_011_001_2;
            double r_001_002_2 = AmBz*r_001_001_2 + r_002_001_2;
            double r_200_002_2 = AmBz*r_200_001_2 + r_201_001_2;
            double r_020_002_2 = AmBz*r_020_001_2 + r_021_001_2;
            double r_002_002_2 = AmBz*r_002_001_2 + r_003_001_2;
            double r_110_002_2 = AmBz*r_110_001_2 + r_111_001_2;
            double r_101_002_2 = AmBz*r_101_001_2 + r_102_001_2;
            double r_011_002_2 = AmBz*r_011_001_2 + r_012_001_2;
            double b_110_1 = AmBy*b_100_1 + r_010_100_1;
            double b_101_1 = AmBz*b_100_1 + r_001_100_1;
            double b_011_1 = AmBz*b_010_1 + r_001_010_1;
            double b_300_2 = AmBx*b_200_2 + r_100_200_2;
            double r_100_300_2 = AmBx*r_100_200_2 + r_200_200_2;
            double r_010_300_2 = AmBx*r_010_200_2 + r_110_200_2;
            double r_001_300_2 = AmBx*r_001_200_2 + r_101_200_2;
            double b_030_2 = AmBy*b_020_2 + r_010_020_2;
            double r_100_030_2 = AmBy*r_100_020_2 + r_110_020_2;
            double r_010_030_2 = AmBy*r_010_020_2 + r_020_020_2;
            double r_001_030_2 = AmBy*r_001_020_2 + r_011_020_2;
            double b_003_2 = AmBz*b_002_2 + r_001_002_2;
            double r_100_003_2 = AmBz*r_100_002_2 + r_101_002_2;
            double r_010_003_2 = AmBz*r_010_002_2 + r_011_002_2;
            double r_001_003_2 = AmBz*r_001_002_2 + r_002_002_2;
            double b_120_2 = AmBx*b_020_2 + r_100_020_2;
            double r_100_120_2 = AmBx*r_100_020_2 + r_200_020_2;
            double r_001_120_2 = AmBx*r_001_020_2 + r_101_020_2;
            double b_102_2 = AmBx*b_002_2 + r_100_002_2;
            double r_100_102_2 = AmBx*r_100_002_2 + r_200_002_2;
            double r_010_102_2 = AmBx*r_010_002_2 + r_110_002_2;
            double b_210_2 = AmBy*b_200_2 + r_010_200_2;
            double r_001_210_2 = AmBy*r_001_200_2 + r_011_200_2;
            double b_012_2 = AmBy*b_002_2 + r_010_002_2;
            double r_010_012_2 = AmBy*r_010_002_2 + r_020_002_2;
            double b_400_2 = AmBx*b_300_2 + r_100_300_2;
            double b_040_2 = AmBy*b_030_2 + r_010_030_2;
            double b_004_2 = AmBz*b_003_2 + r_001_003_2;
            double b_310_2 = AmBy*b_300_2 + r_010_300_2;
            double b_130_2 = AmBx*b_030_2 + r_100_030_2;
            double b_301_2 = AmBz*b_300_2 + r_001_300_2;
            double b_103_2 = AmBx*b_003_2 + r_100_003_2;
            double b_031_2 = AmBz*b_030_2 + r_001_030_2;
            double b_013_2 = AmBy*b_003_2 + r_010_003_2;
            double b_220_2 = AmBx*b_120_2 + r_100_120_2;
            double b_202_2 = AmBx*b_102_2 + r_100_102_2;
            double b_022_2 = AmBy*b_012_2 + r_010_012_2;
            double b_112_2 = AmBy*b_102_2 + r_010_102_2;
            double b_121_2 = AmBz*b_120_2 + r_001_120_2;
            double b_211_2 = AmBz*b_210_2 + r_001_210_2;
            double b_200_L1 = 7*b_200_1 - b_202_2 - b_220_2 - b_400_2;
            double b_020_L1 = 7*b_020_1 - b_022_2 - b_040_2 - b_220_2;
            double b_002_L1 = 7*b_002_1 - b_004_2 - b_022_2 - b_202_2;
            double b_110_L1 = 7*b_110_1 - b_112_2 - b_130_2 - b_310_2;
            double b_101_L1 = 7*b_101_1 - b_103_2 - b_121_2 - b_301_2;
            double b_011_L1 = 7*b_011_1 - b_013_2 - b_031_2 - b_211_2;
            // 21.17 steps per component, 0.99 kb stack
            pOut_[sb*0] = b_002_L1 - b_020_L1*sd0 - b_200_L1*sd0;
            pOut_[sb*1] = b_110_L1*sd1;
            pOut_[sb*2] = b_101_L1*sd1;
            pOut_[sb*3] = -b_020_L1*sd2 + b_200_L1*sd2;
            pOut_[sb*4] = b_011_L1*sd1;
         }
         return;
      }
      case 3: {
         for (size_t ia = 0; ia < nCount; ++ ia) {
            double const * pAx1 = p2Z + 20 * ia;
            double const * pAx2 = p4Z + 56 * ia;
            double * pOut_ = pOut + sa * ia;
            //IR_PREFETCH_W(&pOut_[sb*0]);
            //IR_PREFETCH_W(&pOut_[sb*1]);
            //IR_PREFETCH_W(&pOut_[sb*2]);
            //IR_PREFETCH_W(&pOut_[sb*3]);
            //IR_PREFETCH_W(&pOut_[sb*4]);
            //IR_PREFETCH_W(&pOut_[sb*5]);
            //IR_PREFETCH_W(&pOut_[sb*6]);
            double b_100_1 = AmBx*pAx1[0] + pAx1[1];
            double r_100_100_1 = AmBx*pAx1[1] + pAx1[4];
            double r_010_100_1 = AmBx*pAx1[2] + pAx1[7];
            double r_001_100_1 = AmBx*pAx1[3] + pAx1[8];
            double r_200_100_1 = AmBx*pAx1[4] + pAx1[10];
            double r_110_100_1 = AmBx*pAx1[7] + pAx1[15];
            double r_101_100_1 = AmBx*pAx1[8] + pAx1[17];
            double r_011_100_1 = AmBx*pAx1[9] + pAx1[19];
            double b_100_2 = AmBx*pAx2[0] + pAx2[1];
            double r_100_100_2 = AmBx*pAx2[1] + pAx2[4];
            double r_010_100_2 = AmBx*pAx2[2] + pAx2[7];
            double r_001_100_2 = AmBx*pAx2[3] + pAx2[8];
            double r_200_100_2 = AmBx*pAx2[4] + pAx2[10];
            double r_020_100_2 = AmBx*pAx2[5] + pAx2[13];
            double r_002_100_2 = AmBx*pAx2[6] + pAx2[14];
            double r_110_100_2 = AmBx*pAx2[7] + pAx2[15];
            double r_101_100_2 = AmBx*pAx2[8] + pAx2[17];
            double r_011_100_2 = AmBx*pAx2[9] + pAx2[19];
            double r_300_100_2 = AmBx*pAx2[10] + pAx2[20];
            double r_120_100_2 = AmBx*pAx2[13] + pAx2[29];
            double r_102_100_2 = AmBx*pAx2[14] + pAx2[30];
            double r_210_100_2 = AmBx*pAx2[15] + pAx2[23];
            double r_201_100_2 = AmBx*pAx2[17] + pAx2[25];
            double r_111_100_2 = AmBx*pAx2[19] + pAx2[34];
            double r_400_100_2 = AmBx*pAx2[20] + pAx2[35];
            double r_310_100_2 = AmBx*pAx2[23] + pAx2[40];
            double r_301_100_2 = AmBx*pAx2[25] + pAx2[42];
            double r_220_100_2 = AmBx*pAx2[29] + pAx2[44];
            double r_202_100_2 = AmBx*pAx2[30] + pAx2[45];
            double r_211_100_2 = AmBx*pAx2[34] + pAx2[50];
            double b_010_1 = AmBy*pAx1[0] + pAx1[2];
            double r_100_010_1 = AmBy*pAx1[1] + pAx1[7];
            double r_010_010_1 = AmBy*pAx1[2] + pAx1[5];
            double r_001_010_1 = AmBy*pAx1[3] + pAx1[9];
            double r_020_010_1 = AmBy*pAx1[5] + pAx1[11];
            double r_110_010_1 = AmBy*pAx1[7] + pAx1[13];
            double r_011_010_1 = AmBy*pAx1[9] + pAx1[18];
            double b_010_2 = AmBy*pAx2[0] + pAx2[2];
            double r_100_010_2 = AmBy*pAx2[1] + pAx2[7];
            double r_010_010_2 = AmBy*pAx2[2] + pAx2[5];
            double r_001_010_2 = AmBy*pAx2[3] + pAx2[9];
            double r_200_010_2 = AmBy*pAx2[4] + pAx2[15];
            double r_020_010_2 = AmBy*pAx2[5] + pAx2[11];
            double r_002_010_2 = AmBy*pAx2[6] + pAx2[16];
            double r_110_010_2 = AmBy*pAx2[7] + pAx2[13];
            double r_101_010_2 = AmBy*pAx2[8] + pAx2[19];
            double r_011_010_2 = AmBy*pAx2[9] + pAx2[18];
            double r_030_010_2 = AmBy*pAx2[11] + pAx2[21];
            double r_120_010_2 = AmBy*pAx2[13] + pAx2[24];
            double r_210_010_2 = AmBy*pAx2[15] + pAx2[29];
            double r_012_010_2 = AmBy*pAx2[16] + pAx2[31];
            double r_201_010_2 = AmBy*pAx2[17] + pAx2[34];
            double r_021_010_2 = AmBy*pAx2[18] + pAx2[27];
            double r_111_010_2 = AmBy*pAx2[19] + pAx2[33];
            double r_040_010_2 = AmBy*pAx2[21] + pAx2[36];
            double r_130_010_2 = AmBy*pAx2[24] + pAx2[38];
            double r_031_010_2 = AmBy*pAx2[27] + pAx2[43];
            double r_220_010_2 = AmBy*pAx2[29] + pAx2[46];
            double r_022_010_2 = AmBy*pAx2[31] + pAx2[47];
            double r_121_010_2 = AmBy*pAx2[33] + pAx2[51];
            double r_211_010_2 = AmBy*pAx2[34] + pAx2[55];
            double b_001_1 = AmBz*pAx1[0] + pAx1[3];
            double r_100_001_1 = AmBz*pAx1[1] + pAx1[8];
            double r_010_001_1 = AmBz*pAx1[2] + pAx1[9];
            double r_001_001_1 = AmBz*pAx1[3] + pAx1[6];
            double r_002_001_1 = AmBz*pAx1[6] + pAx1[12];
            double r_101_001_1 = AmBz*pAx1[8] + pAx1[14];
            double r_011_001_1 = AmBz*pAx1[9] + pAx1[16];
            double b_001_2 = AmBz*pAx2[0] + pAx2[3];
            double r_100_001_2 = AmBz*pAx2[1] + pAx2[8];
            double r_010_001_2 = AmBz*pAx2[2] + pAx2[9];
            double r_001_001_2 = AmBz*pAx2[3] + pAx2[6];
            double r_200_001_2 = AmBz*pAx2[4] + pAx2[17];
            double r_020_001_2 = AmBz*pAx2[5] + pAx2[18];
            double r_002_001_2 = AmBz*pAx2[6] + pAx2[12];
            double r_110_001_2 = AmBz*pAx2[7] + pAx2[19];
            double r_101_001_2 = AmBz*pAx2[8] + pAx2[14];
            double r_011_001_2 = AmBz*pAx2[9] + pAx2[16];
            double r_003_001_2 = AmBz*pAx2[12] + pAx2[22];
            double r_120_001_2 = AmBz*pAx2[13] + pAx2[33];
            double r_102_001_2 = AmBz*pAx2[14] + pAx2[26];
            double r_210_001_2 = AmBz*pAx2[15] + pAx2[34];
            double r_012_001_2 = AmBz*pAx2[16] + pAx2[28];
            double r_201_001_2 = AmBz*pAx2[17] + pAx2[30];
            double r_021_001_2 = AmBz*pAx2[18] + pAx2[31];
            double r_111_001_2 = AmBz*pAx2[19] + pAx2[32];
            double r_004_001_2 = AmBz*pAx2[22] + pAx2[37];
            double r_103_001_2 = AmBz*pAx2[26] + pAx2[39];
            double r_013_001_2 = AmBz*pAx2[28] + pAx2[41];
            double r_202_001_2 = AmBz*pAx2[30] + pAx2[48];
            double r_022_001_2 = AmBz*pAx2[31] + pAx2[49];
            double r_112_001_2 = AmBz*pAx2[32] + pAx2[52];
            double r_121_001_2 = AmBz*pAx2[33] + pAx2[53];
            double r_211_001_2 = AmBz*pAx2[34] + pAx2[54];
            double b_200_1 = AmBx*b_100_1 + r_100_100_1;
            double r_100_200_1 = AmBx*r_100_100_1 + r_200_100_1;
            double r_010_200_1 = AmBx*r_010_100_1 + r_110_100_1;
            double r_001_200_1 = AmBx*r_001_100_1 + r_101_100_1;
            double b_200_2 = AmBx*b_100_2 + r_100_100_2;
            double r_100_200_2 = AmBx*r_100_100_2 + r_200_100_2;
            double r_010_200_2 = AmBx*r_010_100_2 + r_110_100_2;
            double r_001_200_2 = AmBx*r_001_100_2 + r_101_100_2;
            double r_200_200_2 = AmBx*r_200_100_2 + r_300_100_2;
            double r_020_200_2 = AmBx*r_020_100_2 + r_120_100_2;
            double r_002_200_2 = AmBx*r_002_100_2 + r_102_100_2;
            double r_110_200_2 = AmBx*r_110_100_2 + r_210_100_2;
            double r_101_200_2 = AmBx*r_101_100_2 + r_201_100_2;
            double r_011_200_2 = AmBx*r_011_100_2 + r_111_100_2;
            double r_300_200_2 = AmBx*r_300_100_2 + r_400_100_2;
            double r_120_200_2 = AmBx*r_120_100_2 + r_220_100_2;
            double r_102_200_2 = AmBx*r_102_100_2 + r_202_100_2;
            double r_210_200_2 = AmBx*r_210_100_2 + r_310_100_2;
            double r_201_200_2 = AmBx*r_201_100_2 + r_301_100_2;
            double r_111_200_2 = AmBx*r_111_100_2 + r_211_100_2;
            double b_020_1 = AmBy*b_010_1 + r_010_010_1;
            double r_100_020_1 = AmBy*r_100_010_1 + r_110_010_1;
            double r_010_020_1 = AmBy*r_010_010_1 + r_020_010_1;
            double r_001_020_1 = AmBy*r_001_010_1 + r_011_010_1;
            double b_020_2 = AmBy*b_010_2 + r_010_010_2;
            double r_100_020_2 = AmBy*r_100_010_2 + r_110_010_2;
            double r_010_020_2 = AmBy*r_010_010_2 + r_020_010_2;
            double r_001_020_2 = AmBy*r_001_010_2 + r_011_010_2;
            double r_200_020_2 = AmBy*r_200_010_2 + r_210_010_2;
            double r_020_020_2 = AmBy*r_020_010_2 + r_030_010_2;
            double r_002_020_2 = AmBy*r_002_010_2 + r_012_010_2;
            double r_110_020_2 = AmBy*r_110_010_2 + r_120_010_2;
            double r_101_020_2 = AmBy*r_101_010_2 + r_111_010_2;
            double r_011_020_2 = AmBy*r_011_010_2 + r_021_010_2;
            double r_030_020_2 = AmBy*r_030_010_2 + r_040_010_2;
            double r_120_020_2 = AmBy*r_120_010_2 + r_130_010_2;
            double r_210_020_2 = AmBy*r_210_010_2 + r_220_010_2;
            double r_012_020_2 = AmBy*r_012_010_2 + r_022_010_2;
            double r_201_020_2 = AmBy*r_201_010_2 + r_211_010_2;
            double r_021_020_2 = AmBy*r_021_010_2 + r_031_010_2;
            double r_111_020_2 = AmBy*r_111_010_2 + r_121_010_2;
            double b_002_1 = AmBz*b_001_1 + r_001_001_1;
            double r_100_002_1 = AmBz*r_100_001_1 + r_101_001_1;
            double r_010_002_1 = AmBz*r_010_001_1 + r_011_001_1;
            double r_001_002_1 = AmBz*r_001_001_1 + r_002_001_1;
            double b_002_2 = AmBz*b_001_2 + r_001_001_2;
            double r_100_002_2 = AmBz*r_100_001_2 + r_101_001_2;
            double r_010_002_2 = AmBz*r_010_001_2 + r_011_001_2;
            double r_001_002_2 = AmBz*r_001_001_2 + r_002_001_2;
            double r_200_002_2 = AmBz*r_200_001_2 + r_201_001_2;
            double r_020_002_2 = AmBz*r_020_001_2 + r_021_001_2;
            double r_002_002_2 = AmBz*r_002_001_2 + r_003_001_2;
            double r_110_002_2 = AmBz*r_110_001_2 + r_111_001_2;
            double r_101_002_2 = AmBz*r_101_001_2 + r_102_001_2;
            double r_011_002_2 = AmBz*r_011_001_2 + r_012_001_2;
            double r_003_002_2 = AmBz*r_003_001_2 + r_004_001_2;
            double r_120_002_2 = AmBz*r_120_001_2 + r_121_001_2;
            double r_102_002_2 = AmBz*r_102_001_2 + r_103_001_2;
            double r_210_002_2 = AmBz*r_210_001_2 + r_211_001_2;
            double r_012_002_2 = AmBz*r_012_001_2 + r_013_001_2;
            double r_201_002_2 = AmBz*r_201_001_2 + r_202_001_2;
            double r_021_002_2 = AmBz*r_021_001_2 + r_022_001_2;
            double r_111_002_2 = AmBz*r_111_001_2 + r_112_001_2;
            double b_110_1 = AmBy*b_100_1 + r_010_100_1;
            double r_001_110_1 = AmBy*r_001_100_1 + r_011_100_1;
            double b_300_1 = AmBx*b_200_1 + r_100_200_1;
            double b_300_2 = AmBx*b_200_2 + r_100_200_2;
            double r_100_300_2 = AmBx*r_100_200_2 + r_200_200_2;
            double r_010_300_2 = AmBx*r_010_200_2 + r_110_200_2;
            double r_001_300_2 = AmBx*r_001_200_2 + r_101_200_2;
            double r_200_300_2 = AmBx*r_200_200_2 + r_300_200_2;
            double r_020_300_2 = AmBx*r_020_200_2 + r_120_200_2;
            double r_002_300_2 = AmBx*r_002_200_2 + r_102_200_2;
            double r_110_300_2 = AmBx*r_110_200_2 + r_210_200_2;
            double r_101_300_2 = AmBx*r_101_200_2 + r_201_200_2;
            double r_011_300_2 = AmBx*r_011_200_2 + r_111_200_2;
            double b_030_1 = AmBy*b_020_1 + r_010_020_1;
            double b_030_2 = AmBy*b_020_2 + r_010_020_2;
            double r_100_030_2 = AmBy*r_100_020_2 + r_110_020_2;
            double r_010_030_2 = AmBy*r_010_020_2 + r_020_020_2;
            double r_001_030_2 = AmBy*r_001_020_2 + r_011_020_2;
            double r_200_030_2 = AmBy*r_200_020_2 + r_210_020_2;
            double r_020_030_2 = AmBy*r_020_020_2 + r_030_020_2;
            double r_002_030_2 = AmBy*r_002_020_2 + r_012_020_2;
            double r_110_030_2 = AmBy*r_110_020_2 + r_120_020_2;
            double r_101_030_2 = AmBy*r_101_020_2 + r_111_020_2;
            double r_011_030_2 = AmBy*r_011_020_2 + r_021_020_2;
            double b_003_1 = AmBz*b_002_1 + r_001_002_1;
            double b_003_2 = AmBz*b_002_2 + r_001_002_2;
            double r_100_003_2 = AmBz*r_100_002_2 + r_101_002_2;
            double r_010_003_2 = AmBz*r_010_002_2 + r_011_002_2;
            double r_001_003_2 = AmBz*r_001_002_2 + r_002_002_2;
            double r_200_003_2 = AmBz*r_200_002_2 + r_201_002_2;
            double r_020_003_2 = AmBz*r_020_002_2 + r_021_002_2;
            double r_002_003_2 = AmBz*r_002_002_2 + r_003_002_2;
            double r_110_003_2 = AmBz*r_110_002_2 + r_111_002_2;
            double r_101_003_2 = AmBz*r_101_002_2 + r_102_002_2;
            double r_011_003_2 = AmBz*r_011_002_2 + r_012_002_2;
            double b_120_1 = AmBx*b_020_1 + r_100_020_1;
            double b_120_2 = AmBx*b_020_2 + r_100_020_2;
            double r_100_120_2 = AmBx*r_100_020_2 + r_200_020_2;
            double r_001_120_2 = AmBx*r_001_020_2 + r_101_020_2;
            double r_101_120_2 = AmBx*r_101_020_2 + r_201_020_2;
            double b_102_1 = AmBx*b_002_1 + r_100_002_1;
            double b_102_2 = AmBx*b_002_2 + r_100_002_2;
            double r_100_102_2 = AmBx*r_100_002_2 + r_200_002_2;
            double r_010_102_2 = AmBx*r_010_002_2 + r_110_002_2;
            double r_110_102_2 = AmBx*r_110_002_2 + r_210_002_2;
            double b_210_1 = AmBy*b_200_1 + r_010_200_1;
            double b_012_1 = AmBy*b_002_1 + r_010_002_1;
            double b_012_2 = AmBy*b_002_2 + r_010_002_2;
            double r_100_012_2 = AmBy*r_100_002_2 + r_110_002_2;
            double r_010_012_2 = AmBy*r_010_002_2 + r_020_002_2;
            double r_110_012_2 = AmBy*r_110_002_2 + r_120_002_2;
            double b_201_1 = AmBz*b_200_1 + r_001_200_1;
            double b_021_1 = AmBz*b_020_1 + r_001_020_1;
            double b_111_1 = AmBz*b_110_1 + r_001_110_1;
            double b_400_2 = AmBx*b_300_2 + r_100_300_2;
            double r_100_400_2 = AmBx*r_100_300_2 + r_200_300_2;
            double r_010_400_2 = AmBx*r_010_300_2 + r_110_300_2;
            double r_001_400_2 = AmBx*r_001_300_2 + r_101_300_2;
            double b_040_2 = AmBy*b_030_2 + r_010_030_2;
            double r_100_040_2 = AmBy*r_100_030_2 + r_110_030_2;
            double r_010_040_2 = AmBy*r_010_030_2 + r_020_030_2;
            double r_001_040_2 = AmBy*r_001_030_2 + r_011_030_2;
            double b_004_2 = AmBz*b_003_2 + r_001_003_2;
            double r_100_004_2 = AmBz*r_100_003_2 + r_101_003_2;
            double r_010_004_2 = AmBz*r_010_003_2 + r_011_003_2;
            double r_001_004_2 = AmBz*r_001_003_2 + r_002_003_2;
            double b_310_2 = AmBy*b_300_2 + r_010_300_2;
            double r_010_310_2 = AmBy*r_010_300_2 + r_020_300_2;
            double r_001_310_2 = AmBy*r_001_300_2 + r_011_300_2;
            double b_130_2 = AmBx*b_030_2 + r_100_030_2;
            double r_100_130_2 = AmBx*r_100_030_2 + r_200_030_2;
            double r_001_130_2 = AmBx*r_001_030_2 + r_101_030_2;
            double b_301_2 = AmBz*b_300_2 + r_001_300_2;
            double r_001_301_2 = AmBz*r_001_300_2 + r_002_300_2;
            double b_103_2 = AmBx*b_003_2 + r_100_003_2;
            double r_100_103_2 = AmBx*r_100_003_2 + r_200_003_2;
            double r_010_103_2 = AmBx*r_010_003_2 + r_110_003_2;
            double b_031_2 = AmBz*b_030_2 + r_001_030_2;
            double r_001_031_2 = AmBz*r_001_030_2 + r_002_030_2;
            double b_013_2 = AmBy*b_003_2 + r_010_003_2;
            double r_010_013_2 = AmBy*r_010_003_2 + r_020_003_2;
            double b_220_2 = AmBx*b_120_2 + r_100_120_2;
            double r_001_220_2 = AmBx*r_001_120_2 + r_101_120_2;
            double b_202_2 = AmBx*b_102_2 + r_100_102_2;
            double r_010_202_2 = AmBx*r_010_102_2 + r_110_102_2;
            double b_022_2 = AmBy*b_012_2 + r_010_012_2;
            double r_100_022_2 = AmBy*r_100_012_2 + r_110_012_2;
            double b_500_2 = AmBx*b_400_2 + r_100_400_2;
            double b_050_2 = AmBy*b_040_2 + r_010_040_2;
            double b_005_2 = AmBz*b_004_2 + r_001_004_2;
            double b_140_2 = AmBx*b_040_2 + r_100_040_2;
            double b_104_2 = AmBx*b_004_2 + r_100_004_2;
            double b_410_2 = AmBy*b_400_2 + r_010_400_2;
            double b_014_2 = AmBy*b_004_2 + r_010_004_2;
            double b_401_2 = AmBz*b_400_2 + r_001_400_2;
            double b_041_2 = AmBz*b_040_2 + r_001_040_2;
            double b_320_2 = AmBy*b_310_2 + r_010_310_2;
            double b_302_2 = AmBz*b_301_2 + r_001_301_2;
            double b_230_2 = AmBx*b_130_2 + r_100_130_2;
            double b_032_2 = AmBz*b_031_2 + r_001_031_2;
            double b_203_2 = AmBx*b_103_2 + r_100_103_2;
            double b_023_2 = AmBy*b_013_2 + r_010_013_2;
            double b_311_2 = AmBz*b_310_2 + r_001_310_2;
            double b_131_2 = AmBz*b_130_2 + r_001_130_2;
            double b_113_2 = AmBy*b_103_2 + r_010_103_2;
            double b_122_2 = AmBx*b_022_2 + r_100_022_2;
            double b_212_2 = AmBy*b_202_2 + r_010_202_2;
            double b_221_2 = AmBz*b_220_2 + r_001_220_2;
            double b_300_L1 = 9*b_300_1 - b_302_2 - b_320_2 - b_500_2;
            double b_030_L1 = 9*b_030_1 - b_032_2 - b_050_2 - b_230_2;
            double b_003_L1 = 9*b_003_1 - b_005_2 - b_023_2 - b_203_2;
            double b_120_L1 = 9*b_120_1 - b_122_2 - b_140_2 - b_320_2;
            double b_102_L1 = 9*b_102_1 - b_104_2 - b_122_2 - b_302_2;
            double b_210_L1 = 9*b_210_1 - b_212_2 - b_230_2 - b_410_2;
            double b_012_L1 = 9*b_012_1 - b_014_2 - b_032_2 - b_212_2;
            double b_201_L1 = 9*b_201_1 - b_203_2 - b_221_2 - b_401_2;
            double b_021_L1 = 9*b_021_1 - b_023_2 - b_041_2 - b_221_2;
            double b_111_L1 = 9*b_111_1 - b_113_2 - b_131_2 - b_311_2;
            // 27.50 steps per component, 2.15 kb stack
            pOut_[sb*0] = b_102_L1*sd4 - b_120_L1*sd3 - b_300_L1*sd3;
            pOut_[sb*1] = b_012_L1*sd4 - b_030_L1*sd3 - b_210_L1*sd3;
            pOut_[sb*2] = b_003_L1 - b_021_L1*sd5 - b_201_L1*sd5;
            pOut_[sb*3] = -b_120_L1*sd7 + b_300_L1*sd6;
            pOut_[sb*4] = b_111_L1*sd8;
            pOut_[sb*5] = -b_030_L1*sd6 + b_210_L1*sd7;
            pOut_[sb*6] = -b_021_L1*sd9 + b_201_L1*sd9;
         }
         return;
      }
      case 4: {
         for (size_t ia = 0; ia < nCount; ++ ia) {
            double const * pAx1 = p2Z + 35 * ia;
            double const * pAx2 = p4Z + 84 * ia;
            double * pOut_ = pOut + sa * ia;
            //IR_PREFETCH_W(&pOut_[sb*0]);
            //IR_PREFETCH_W(&pOut_[sb*1]);
            //IR_PREFETCH_W(&pOut_[sb*2]);
            //IR_PREFETCH_W(&pOut_[sb*3]);
            //IR_PREFETCH_W(&pOut_[sb*4]);
            //IR_PREFETCH_W(&pOut_[sb*5]);
            //IR_PREFETCH_W(&pOut_[sb*6]);
            //IR_PREFETCH_W(&pOut_[sb*7]);
            //IR_PREFETCH_W(&pOut_[sb*8]);
            double b_100_1 = AmBx*pAx1[0] + pAx1[1];
            double r_100_100_1 = AmBx*pAx1[1] + pAx1[4];
            double r_010_100_1 = AmBx*pAx1[2] + pAx1[7];
            double r_001_100_1 = AmBx*pAx1[3] + pAx1[8];
            double r_200_100_1 = AmBx*pAx1[4] + pAx1[10];
            double r_110_100_1 = AmBx*pAx1[7] + pAx1[15];
            double r_101_100_1 = AmBx*pAx1[8] + pAx1[17];
            double r_011_100_1 = AmBx*pAx1[9] + pAx1[19];
            double r_300_100_1 = AmBx*pAx1[10] + pAx1[20];
            double r_210_100_1 = AmBx*pAx1[15] + pAx1[23];
            double r_201_100_1 = AmBx*pAx1[17] + pAx1[25];
            double r_111_100_1 = AmBx*pAx1[19] + pAx1[34];
            double b_100_2 = AmBx*pAx2[0] + pAx2[1];
            double r_100_100_2 = AmBx*pAx2[1] + pAx2[4];
            double r_010_100_2 = AmBx*pAx2[2] + pAx2[7];
            double r_001_100_2 = AmBx*pAx2[3] + pAx2[8];
            double r_200_100_2 = AmBx*pAx2[4] + pAx2[10];
            double r_020_100_2 = AmBx*pAx2[5] + pAx2[13];
            double r_002_100_2 = AmBx*pAx2[6] + pAx2[14];
            double r_110_100_2 = AmBx*pAx2[7] + pAx2[15];
            double r_101_100_2 = AmBx*pAx2[8] + pAx2[17];
            double r_011_100_2 = AmBx*pAx2[9] + pAx2[19];
            double r_300_100_2 = AmBx*pAx2[10] + pAx2[20];
            double r_030_100_2 = AmBx*pAx2[11] + pAx2[24];
            double r_003_100_2 = AmBx*pAx2[12] + pAx2[26];
            double r_120_100_2 = AmBx*pAx2[13] + pAx2[29];
            double r_102_100_2 = AmBx*pAx2[14] + pAx2[30];
            double r_210_100_2 = AmBx*pAx2[15] + pAx2[23];
            double r_012_100_2 = AmBx*pAx2[16] + pAx2[32];
            double r_201_100_2 = AmBx*pAx2[17] + pAx2[25];
            double r_021_100_2 = AmBx*pAx2[18] + pAx2[33];
            double r_111_100_2 = AmBx*pAx2[19] + pAx2[34];
            double r_400_100_2 = AmBx*pAx2[20] + pAx2[35];
            double r_310_100_2 = AmBx*pAx2[23] + pAx2[40];
            double r_130_100_2 = AmBx*pAx2[24] + pAx2[46];
            double r_301_100_2 = AmBx*pAx2[25] + pAx2[42];
            double r_103_100_2 = AmBx*pAx2[26] + pAx2[48];
            double r_220_100_2 = AmBx*pAx2[29] + pAx2[44];
            double r_202_100_2 = AmBx*pAx2[30] + pAx2[45];
            double r_112_100_2 = AmBx*pAx2[32] + pAx2[54];
            double r_121_100_2 = AmBx*pAx2[33] + pAx2[55];
            double r_211_100_2 = AmBx*pAx2[34] + pAx2[50];
            double r_500_100_2 = AmBx*pAx2[35] + pAx2[56];
            double r_410_100_2 = AmBx*pAx2[40] + pAx2[59];
            double r_401_100_2 = AmBx*pAx2[42] + pAx2[61];
            double r_320_100_2 = AmBx*pAx2[44] + pAx2[65];
            double r_302_100_2 = AmBx*pAx2[45] + pAx2[66];
            double r_230_100_2 = AmBx*pAx2[46] + pAx2[71];
            double r_203_100_2 = AmBx*pAx2[48] + pAx2[72];
            double r_311_100_2 = AmBx*pAx2[50] + pAx2[76];
            double r_212_100_2 = AmBx*pAx2[54] + pAx2[77];
            double r_221_100_2 = AmBx*pAx2[55] + pAx2[79];
            double b_010_1 = AmBy*pAx1[0] + pAx1[2];
            double r_100_010_1 = AmBy*pAx1[1] + pAx1[7];
            double r_010_010_1 = AmBy*pAx1[2] + pAx1[5];
            double r_001_010_1 = AmBy*pAx1[3] + pAx1[9];
            double r_200_010_1 = AmBy*pAx1[4] + pAx1[15];
            double r_020_010_1 = AmBy*pAx1[5] + pAx1[11];
            double r_110_010_1 = AmBy*pAx1[7] + pAx1[13];
            double r_101_010_1 = AmBy*pAx1[8] + pAx1[19];
            double r_011_010_1 = AmBy*pAx1[9] + pAx1[18];
            double r_030_010_1 = AmBy*pAx1[11] + pAx1[21];
            double r_120_010_1 = AmBy*pAx1[13] + pAx1[24];
            double r_210_010_1 = AmBy*pAx1[15] + pAx1[29];
            double r_021_010_1 = AmBy*pAx1[18] + pAx1[27];
            double r_111_010_1 = AmBy*pAx1[19] + pAx1[33];
            double b_010_2 = AmBy*pAx2[0] + pAx2[2];
            double r_100_010_2 = AmBy*pAx2[1] + pAx2[7];
            double r_010_010_2 = AmBy*pAx2[2] + pAx2[5];
            double r_001_010_2 = AmBy*pAx2[3] + pAx2[9];
            double r_200_010_2 = AmBy*pAx2[4] + pAx2[15];
            double r_020_010_2 = AmBy*pAx2[5] + pAx2[11];
            double r_002_010_2 = AmBy*pAx2[6] + pAx2[16];
            double r_110_010_2 = AmBy*pAx2[7] + pAx2[13];
            double r_101_010_2 = AmBy*pAx2[8] + pAx2[19];
            double r_011_010_2 = AmBy*pAx2[9] + pAx2[18];
            double r_030_010_2 = AmBy*pAx2[11] + pAx2[21];
            double r_003_010_2 = AmBy*pAx2[12] + pAx2[28];
            double r_120_010_2 = AmBy*pAx2[13] + pAx2[24];
            double r_102_010_2 = AmBy*pAx2[14] + pAx2[32];
            double r_210_010_2 = AmBy*pAx2[15] + pAx2[29];
            double r_012_010_2 = AmBy*pAx2[16] + pAx2[31];
            double r_201_010_2 = AmBy*pAx2[17] + pAx2[34];
            double r_021_010_2 = AmBy*pAx2[18] + pAx2[27];
            double r_111_010_2 = AmBy*pAx2[19] + pAx2[33];
            double r_040_010_2 = AmBy*pAx2[21] + pAx2[36];
            double r_130_010_2 = AmBy*pAx2[24] + pAx2[38];
            double r_031_010_2 = AmBy*pAx2[27] + pAx2[43];
            double r_013_010_2 = AmBy*pAx2[28] + pAx2[49];
            double r_220_010_2 = AmBy*pAx2[29] + pAx2[46];
            double r_022_010_2 = AmBy*pAx2[31] + pAx2[47];
            double r_112_010_2 = AmBy*pAx2[32] + pAx2[53];
            double r_121_010_2 = AmBy*pAx2[33] + pAx2[51];
            double r_211_010_2 = AmBy*pAx2[34] + pAx2[55];
            double r_050_010_2 = AmBy*pAx2[36] + pAx2[57];
            double r_140_010_2 = AmBy*pAx2[38] + pAx2[60];
            double r_041_010_2 = AmBy*pAx2[43] + pAx2[63];
            double r_230_010_2 = AmBy*pAx2[46] + pAx2[67];
            double r_032_010_2 = AmBy*pAx2[47] + pAx2[69];
            double r_023_010_2 = AmBy*pAx2[49] + pAx2[73];
            double r_131_010_2 = AmBy*pAx2[51] + pAx2[75];
            double r_122_010_2 = AmBy*pAx2[53] + pAx2[78];
            double r_221_010_2 = AmBy*pAx2[55] + pAx2[81];
            double b_001_1 = AmBz*pAx1[0] + pAx1[3];
            double r_100_001_1 = AmBz*pAx1[1] + pAx1[8];
            double r_010_001_1 = AmBz*pAx1[2] + pAx1[9];
            double r_001_001_1 = AmBz*pAx1[3] + pAx1[6];
            double r_200_001_1 = AmBz*pAx1[4] + pAx1[17];
            double r_020_001_1 = AmBz*pAx1[5] + pAx1[18];
            double r_002_001_1 = AmBz*pAx1[6] + pAx1[12];
            double r_110_001_1 = AmBz*pAx1[7] + pAx1[19];
            double r_101_001_1 = AmBz*pAx1[8] + pAx1[14];
            double r_011_001_1 = AmBz*pAx1[9] + pAx1[16];
            double r_003_001_1 = AmBz*pAx1[12] + pAx1[22];
            double r_102_001_1 = AmBz*pAx1[14] + pAx1[26];
            double r_012_001_1 = AmBz*pAx1[16] + pAx1[28];
            double r_201_001_1 = AmBz*pAx1[17] + pAx1[30];
            double r_021_001_1 = AmBz*pAx1[18] + pAx1[31];
            double r_111_001_1 = AmBz*pAx1[19] + pAx1[32];
            double b_001_2 = AmBz*pAx2[0] + pAx2[3];
            double r_100_001_2 = AmBz*pAx2[1] + pAx2[8];
            double r_010_001_2 = AmBz*pAx2[2] + pAx2[9];
            double r_001_001_2 = AmBz*pAx2[3] + pAx2[6];
            double r_200_001_2 = AmBz*pAx2[4] + pAx2[17];
            double r_020_001_2 = AmBz*pAx2[5] + pAx2[18];
            double r_002_001_2 = AmBz*pAx2[6] + pAx2[12];
            double r_110_001_2 = AmBz*pAx2[7] + pAx2[19];
            double r_101_001_2 = AmBz*pAx2[8] + pAx2[14];
            double r_011_001_2 = AmBz*pAx2[9] + pAx2[16];
            double r_003_001_2 = AmBz*pAx2[12] + pAx2[22];
            double r_120_001_2 = AmBz*pAx2[13] + pAx2[33];
            double r_102_001_2 = AmBz*pAx2[14] + pAx2[26];
            double r_210_001_2 = AmBz*pAx2[15] + pAx2[34];
            double r_012_001_2 = AmBz*pAx2[16] + pAx2[28];
            double r_201_001_2 = AmBz*pAx2[17] + pAx2[30];
            double r_021_001_2 = AmBz*pAx2[18] + pAx2[31];
            double r_111_001_2 = AmBz*pAx2[19] + pAx2[32];
            double r_004_001_2 = AmBz*pAx2[22] + pAx2[37];
            double r_103_001_2 = AmBz*pAx2[26] + pAx2[39];
            double r_013_001_2 = AmBz*pAx2[28] + pAx2[41];
            double r_220_001_2 = AmBz*pAx2[29] + pAx2[55];
            double r_202_001_2 = AmBz*pAx2[30] + pAx2[48];
            double r_022_001_2 = AmBz*pAx2[31] + pAx2[49];
            double r_112_001_2 = AmBz*pAx2[32] + pAx2[52];
            double r_121_001_2 = AmBz*pAx2[33] + pAx2[53];
            double r_211_001_2 = AmBz*pAx2[34] + pAx2[54];
            double r_005_001_2 = AmBz*pAx2[37] + pAx2[58];
            double r_104_001_2 = AmBz*pAx2[39] + pAx2[62];
            double r_014_001_2 = AmBz*pAx2[41] + pAx2[64];
            double r_203_001_2 = AmBz*pAx2[48] + pAx2[68];
            double r_023_001_2 = AmBz*pAx2[49] + pAx2[70];
            double r_113_001_2 = AmBz*pAx2[52] + pAx2[74];
            double r_122_001_2 = AmBz*pAx2[53] + pAx2[80];
            double r_212_001_2 = AmBz*pAx2[54] + pAx2[82];
            double r_221_001_2 = AmBz*pAx2[55] + pAx2[83];
            double b_200_1 = AmBx*b_100_1 + r_100_100_1;
            double r_100_200_1 = AmBx*r_100_100_1 + r_200_100_1;
            double r_010_200_1 = AmBx*r_010_100_1 + r_110_100_1;
            double r_001_200_1 = AmBx*r_001_100_1 + r_101_100_1;
            double r_200_200_1 = AmBx*r_200_100_1 + r_300_100_1;
            double r_110_200_1 = AmBx*r_110_100_1 + r_210_100_1;
            double r_101_200_1 = AmBx*r_101_100_1 + r_201_100_1;
            double r_011_200_1 = AmBx*r_011_100_1 + r_111_100_1;
            double b_200_2 = AmBx*b_100_2 + r_100_100_2;
            double r_100_200_2 = AmBx*r_100_100_2 + r_200_100_2;
            double r_010_200_2 = AmBx*r_010_100_2 + r_110_100_2;
            double r_001_200_2 = AmBx*r_001_100_2 + r_101_100_2;
            double r_200_200_2 = AmBx*r_200_100_2 + r_300_100_2;
            double r_020_200_2 = AmBx*r_020_100_2 + r_120_100_2;
            double r_002_200_2 = AmBx*r_002_100_2 + r_102_100_2;
            double r_110_200_2 = AmBx*r_110_100_2 + r_210_100_2;
            double r_101_200_2 = AmBx*r_101_100_2 + r_201_100_2;
            double r_011_200_2 = AmBx*r_011_100_2 + r_111_100_2;
            double r_300_200_2 = AmBx*r_300_100_2 + r_400_100_2;
            double r_030_200_2 = AmBx*r_030_100_2 + r_130_100_2;
            double r_003_200_2 = AmBx*r_003_100_2 + r_103_100_2;
            double r_120_200_2 = AmBx*r_120_100_2 + r_220_100_2;
            double r_102_200_2 = AmBx*r_102_100_2 + r_202_100_2;
            double r_210_200_2 = AmBx*r_210_100_2 + r_310_100_2;
            double r_012_200_2 = AmBx*r_012_100_2 + r_112_100_2;
            double r_201_200_2 = AmBx*r_201_100_2 + r_301_100_2;
            double r_021_200_2 = AmBx*r_021_100_2 + r_121_100_2;
            double r_111_200_2 = AmBx*r_111_100_2 + r_211_100_2;
            double r_400_200_2 = AmBx*r_400_100_2 + r_500_100_2;
            double r_310_200_2 = AmBx*r_310_100_2 + r_410_100_2;
            double r_130_200_2 = AmBx*r_130_100_2 + r_230_100_2;
            double r_301_200_2 = AmBx*r_301_100_2 + r_401_100_2;
            double r_103_200_2 = AmBx*r_103_100_2 + r_203_100_2;
            double r_220_200_2 = AmBx*r_220_100_2 + r_320_100_2;
            double r_202_200_2 = AmBx*r_202_100_2 + r_302_100_2;
            double r_112_200_2 = AmBx*r_112_100_2 + r_212_100_2;
            double r_121_200_2 = AmBx*r_121_100_2 + r_221_100_2;
            double r_211_200_2 = AmBx*r_211_100_2 + r_311_100_2;
            double b_020_1 = AmBy*b_010_1 + r_010_010_1;
            double r_100_020_1 = AmBy*r_100_010_1 + r_110_010_1;
            double r_010_020_1 = AmBy*r_010_010_1 + r_020_010_1;
            double r_001_020_1 = AmBy*r_001_010_1 + r_011_010_1;
            double r_200_020_1 = AmBy*r_200_010_1 + r_210_010_1;
            double r_020_020_1 = AmBy*r_020_010_1 + r_030_010_1;
            double r_110_020_1 = AmBy*r_110_010_1 + r_120_010_1;
            double r_101_020_1 = AmBy*r_101_010_1 + r_111_010_1;
            double r_011_020_1 = AmBy*r_011_010_1 + r_021_010_1;
            double b_020_2 = AmBy*b_010_2 + r_010_010_2;
            double r_100_020_2 = AmBy*r_100_010_2 + r_110_010_2;
            double r_010_020_2 = AmBy*r_010_010_2 + r_020_010_2;
            double r_001_020_2 = AmBy*r_001_010_2 + r_011_010_2;
            double r_200_020_2 = AmBy*r_200_010_2 + r_210_010_2;
            double r_020_020_2 = AmBy*r_020_010_2 + r_030_010_2;
            double r_002_020_2 = AmBy*r_002_010_2 + r_012_010_2;
            double r_110_020_2 = AmBy*r_110_010_2 + r_120_010_2;
            double r_101_020_2 = AmBy*r_101_010_2 + r_111_010_2;
            double r_011_020_2 = AmBy*r_011_010_2 + r_021_010_2;
            double r_030_020_2 = AmBy*r_030_010_2 + r_040_010_2;
            double r_003_020_2 = AmBy*r_003_010_2 + r_013_010_2;
            double r_120_020_2 = AmBy*r_120_010_2 + r_130_010_2;
            double r_102_020_2 = AmBy*r_102_010_2 + r_112_010_2;
            double r_210_020_2 = AmBy*r_210_010_2 + r_220_010_2;
            double r_012_020_2 = AmBy*r_012_010_2 + r_022_010_2;
            double r_201_020_2 = AmBy*r_201_010_2 + r_211_010_2;
            double r_021_020_2 = AmBy*r_021_010_2 + r_031_010_2;
            double r_111_020_2 = AmBy*r_111_010_2 + r_121_010_2;
            double r_040_020_2 = AmBy*r_040_010_2 + r_050_010_2;
            double r_130_020_2 = AmBy*r_130_010_2 + r_140_010_2;
            double r_031_020_2 = AmBy*r_031_010_2 + r_041_010_2;
            double r_013_020_2 = AmBy*r_013_010_2 + r_023_010_2;
            double r_220_020_2 = AmBy*r_220_010_2 + r_230_010_2;
            double r_022_020_2 = AmBy*r_022_010_2 + r_032_010_2;
            double r_112_020_2 = AmBy*r_112_010_2 + r_122_010_2;
            double r_121_020_2 = AmBy*r_121_010_2 + r_131_010_2;
            double r_211_020_2 = AmBy*r_211_010_2 + r_221_010_2;
            double b_002_1 = AmBz*b_001_1 + r_001_001_1;
            double r_100_002_1 = AmBz*r_100_001_1 + r_101_001_1;
            double r_010_002_1 = AmBz*r_010_001_1 + r_011_001_1;
            double r_001_002_1 = AmBz*r_001_001_1 + r_002_001_1;
            double r_200_002_1 = AmBz*r_200_001_1 + r_201_001_1;
            double r_020_002_1 = AmBz*r_020_001_1 + r_021_001_1;
            double r_002_002_1 = AmBz*r_002_001_1 + r_003_001_1;
            double r_110_002_1 = AmBz*r_110_001_1 + r_111_001_1;
            double r_101_002_1 = AmBz*r_101_001_1 + r_102_001_1;
            double r_011_002_1 = AmBz*r_011_001_1 + r_012_001_1;
            double b_002_2 = AmBz*b_001_2 + r_001_001_2;
            double r_100_002_2 = AmBz*r_100_001_2 + r_101_001_2;
            double r_010_002_2 = AmBz*r_010_001_2 + r_011_001_2;
            double r_001_002_2 = AmBz*r_001_001_2 + r_002_001_2;
            double r_200_002_2 = AmBz*r_200_001_2 + r_201_001_2;
            double r_020_002_2 = AmBz*r_020_001_2 + r_021_001_2;
            double r_002_002_2 = AmBz*r_002_001_2 + r_003_001_2;
            double r_110_002_2 = AmBz*r_110_001_2 + r_111_001_2;
            double r_101_002_2 = AmBz*r_101_001_2 + r_102_001_2;
            double r_011_002_2 = AmBz*r_011_001_2 + r_012_001_2;
            double r_003_002_2 = AmBz*r_003_001_2 + r_004_001_2;
            double r_120_002_2 = AmBz*r_120_001_2 + r_121_001_2;
            double r_102_002_2 = AmBz*r_102_001_2 + r_103_001_2;
            double r_210_002_2 = AmBz*r_210_001_2 + r_211_001_2;
            double r_012_002_2 = AmBz*r_012_001_2 + r_013_001_2;
            double r_201_002_2 = AmBz*r_201_001_2 + r_202_001_2;
            double r_021_002_2 = AmBz*r_021_001_2 + r_022_001_2;
            double r_111_002_2 = AmBz*r_111_001_2 + r_112_001_2;
            double r_004_002_2 = AmBz*r_004_001_2 + r_005_001_2;
            double r_103_002_2 = AmBz*r_103_001_2 + r_104_001_2;
            double r_013_002_2 = AmBz*r_013_001_2 + r_014_001_2;
            double r_220_002_2 = AmBz*r_220_001_2 + r_221_001_2;
            double r_202_002_2 = AmBz*r_202_001_2 + r_203_001_2;
            double r_022_002_2 = AmBz*r_022_001_2 + r_023_001_2;
            double r_112_002_2 = AmBz*r_112_001_2 + r_113_001_2;
            double r_121_002_2 = AmBz*r_121_001_2 + r_122_001_2;
            double r_211_002_2 = AmBz*r_211_001_2 + r_212_001_2;
            double b_300_1 = AmBx*b_200_1 + r_100_200_1;
            double r_100_300_1 = AmBx*r_100_200_1 + r_200_200_1;
            double r_010_300_1 = AmBx*r_010_200_1 + r_110_200_1;
            double r_001_300_1 = AmBx*r_001_200_1 + r_101_200_1;
            double b_300_2 = AmBx*b_200_2 + r_100_200_2;
            double r_100_300_2 = AmBx*r_100_200_2 + r_200_200_2;
            double r_010_300_2 = AmBx*r_010_200_2 + r_110_200_2;
            double r_001_300_2 = AmBx*r_001_200_2 + r_101_200_2;
            double r_200_300_2 = AmBx*r_200_200_2 + r_300_200_2;
            double r_020_300_2 = AmBx*r_020_200_2 + r_120_200_2;
            double r_002_300_2 = AmBx*r_002_200_2 + r_102_200_2;
            double r_110_300_2 = AmBx*r_110_200_2 + r_210_200_2;
            double r_101_300_2 = AmBx*r_101_200_2 + r_201_200_2;
            double r_011_300_2 = AmBx*r_011_200_2 + r_111_200_2;
            double r_300_300_2 = AmBx*r_300_200_2 + r_400_200_2;
            double r_030_300_2 = AmBx*r_030_200_2 + r_130_200_2;
            double r_003_300_2 = AmBx*r_003_200_2 + r_103_200_2;
            double r_120_300_2 = AmBx*r_120_200_2 + r_220_200_2;
            double r_102_300_2 = AmBx*r_102_200_2 + r_202_200_2;
            double r_210_300_2 = AmBx*r_210_200_2 + r_310_200_2;
            double r_012_300_2 = AmBx*r_012_200_2 + r_112_200_2;
            double r_201_300_2 = AmBx*r_201_200_2 + r_301_200_2;
            double r_021_300_2 = AmBx*r_021_200_2 + r_121_200_2;
            double r_111_300_2 = AmBx*r_111_200_2 + r_211_200_2;
            double b_030_1 = AmBy*b_020_1 + r_010_020_1;
            double r_100_030_1 = AmBy*r_100_020_1 + r_110_020_1;
            double r_010_030_1 = AmBy*r_010_020_1 + r_020_020_1;
            double r_001_030_1 = AmBy*r_001_020_1 + r_011_020_1;
            double b_030_2 = AmBy*b_020_2 + r_010_020_2;
            double r_100_030_2 = AmBy*r_100_020_2 + r_110_020_2;
            double r_010_030_2 = AmBy*r_010_020_2 + r_020_020_2;
            double r_001_030_2 = AmBy*r_001_020_2 + r_011_020_2;
            double r_200_030_2 = AmBy*r_200_020_2 + r_210_020_2;
            double r_020_030_2 = AmBy*r_020_020_2 + r_030_020_2;
            double r_002_030_2 = AmBy*r_002_020_2 + r_012_020_2;
            double r_110_030_2 = AmBy*r_110_020_2 + r_120_020_2;
            double r_101_030_2 = AmBy*r_101_020_2 + r_111_020_2;
            double r_011_030_2 = AmBy*r_011_020_2 + r_021_020_2;
            double r_030_030_2 = AmBy*r_030_020_2 + r_040_020_2;
            double r_003_030_2 = AmBy*r_003_020_2 + r_013_020_2;
            double r_120_030_2 = AmBy*r_120_020_2 + r_130_020_2;
            double r_102_030_2 = AmBy*r_102_020_2 + r_112_020_2;
            double r_210_030_2 = AmBy*r_210_020_2 + r_220_020_2;
            double r_012_030_2 = AmBy*r_012_020_2 + r_022_020_2;
            double r_201_030_2 = AmBy*r_201_020_2 + r_211_020_2;
            double r_021_030_2 = AmBy*r_021_020_2 + r_031_020_2;
            double r_111_030_2 = AmBy*r_111_020_2 + r_121_020_2;
            double b_003_1 = AmBz*b_002_1 + r_001_002_1;
            double r_100_003_1 = AmBz*r_100_002_1 + r_101_002_1;
            double r_010_003_1 = AmBz*r_010_002_1 + r_011_002_1;
            double r_001_003_1 = AmBz*r_001_002_1 + r_002_002_1;
            double b_003_2 = AmBz*b_002_2 + r_001_002_2;
            double r_100_003_2 = AmBz*r_100_002_2 + r_101_002_2;
            double r_010_003_2 = AmBz*r_010_002_2 + r_011_002_2;
            double r_001_003_2 = AmBz*r_001_002_2 + r_002_002_2;
            double r_200_003_2 = AmBz*r_200_002_2 + r_201_002_2;
            double r_020_003_2 = AmBz*r_020_002_2 + r_021_002_2;
            double r_002_003_2 = AmBz*r_002_002_2 + r_003_002_2;
            double r_110_003_2 = AmBz*r_110_002_2 + r_111_002_2;
            double r_101_003_2 = AmBz*r_101_002_2 + r_102_002_2;
            double r_011_003_2 = AmBz*r_011_002_2 + r_012_002_2;
            double r_003_003_2 = AmBz*r_003_002_2 + r_004_002_2;
            double r_120_003_2 = AmBz*r_120_002_2 + r_121_002_2;
            double r_102_003_2 = AmBz*r_102_002_2 + r_103_002_2;
            double r_210_003_2 = AmBz*r_210_002_2 + r_211_002_2;
            double r_012_003_2 = AmBz*r_012_002_2 + r_013_002_2;
            double r_201_003_2 = AmBz*r_201_002_2 + r_202_002_2;
            double r_021_003_2 = AmBz*r_021_002_2 + r_022_002_2;
            double r_111_003_2 = AmBz*r_111_002_2 + r_112_002_2;
            double b_120_1 = AmBx*b_020_1 + r_100_020_1;
            double r_100_120_1 = AmBx*r_100_020_1 + r_200_020_1;
            double r_001_120_1 = AmBx*r_001_020_1 + r_101_020_1;
            double b_102_1 = AmBx*b_002_1 + r_100_002_1;
            double r_100_102_1 = AmBx*r_100_002_1 + r_200_002_1;
            double r_010_102_1 = AmBx*r_010_002_1 + r_110_002_1;
            double b_210_1 = AmBy*b_200_1 + r_010_200_1;
            double r_001_210_1 = AmBy*r_001_200_1 + r_011_200_1;
            double b_012_1 = AmBy*b_002_1 + r_010_002_1;
            double r_010_012_1 = AmBy*r_010_002_1 + r_020_002_1;
            double b_012_2 = AmBy*b_002_2 + r_010_002_2;
            double r_100_012_2 = AmBy*r_100_002_2 + r_110_002_2;
            double r_010_012_2 = AmBy*r_010_002_2 + r_020_002_2;
            double r_200_012_2 = AmBy*r_200_002_2 + r_210_002_2;
            double r_110_012_2 = AmBy*r_110_002_2 + r_120_002_2;
            double r_210_012_2 = AmBy*r_210_002_2 + r_220_002_2;
            double b_400_1 = AmBx*b_300_1 + r_100_300_1;
            double b_400_2 = AmBx*b_300_2 + r_100_300_2;
            double r_100_400_2 = AmBx*r_100_300_2 + r_200_300_2;
            double r_010_400_2 = AmBx*r_010_300_2 + r_110_300_2;
            double r_001_400_2 = AmBx*r_001_300_2 + r_101_300_2;
            double r_200_400_2 = AmBx*r_200_300_2 + r_300_300_2;
            double r_020_400_2 = AmBx*r_020_300_2 + r_120_300_2;
            double r_002_400_2 = AmBx*r_002_300_2 + r_102_300_2;
            double r_110_400_2 = AmBx*r_110_300_2 + r_210_300_2;
            double r_101_400_2 = AmBx*r_101_300_2 + r_201_300_2;
            double r_011_400_2 = AmBx*r_011_300_2 + r_111_300_2;
            double b_040_1 = AmBy*b_030_1 + r_010_030_1;
            double b_040_2 = AmBy*b_030_2 + r_010_030_2;
            double r_100_040_2 = AmBy*r_100_030_2 + r_110_030_2;
            double r_010_040_2 = AmBy*r_010_030_2 + r_020_030_2;
            double r_001_040_2 = AmBy*r_001_030_2 + r_011_030_2;
            double r_200_040_2 = AmBy*r_200_030_2 + r_210_030_2;
            double r_020_040_2 = AmBy*r_020_030_2 + r_030_030_2;
            double r_002_040_2 = AmBy*r_002_030_2 + r_012_030_2;
            double r_110_040_2 = AmBy*r_110_030_2 + r_120_030_2;
            double r_101_040_2 = AmBy*r_101_030_2 + r_111_030_2;
            double r_011_040_2 = AmBy*r_011_030_2 + r_021_030_2;
            double b_004_1 = AmBz*b_003_1 + r_001_003_1;
            double b_004_2 = AmBz*b_003_2 + r_001_003_2;
            double r_100_004_2 = AmBz*r_100_003_2 + r_101_003_2;
            double r_010_004_2 = AmBz*r_010_003_2 + r_011_003_2;
            double r_001_004_2 = AmBz*r_001_003_2 + r_002_003_2;
            double r_200_004_2 = AmBz*r_200_003_2 + r_201_003_2;
            double r_020_004_2 = AmBz*r_020_003_2 + r_021_003_2;
            double r_002_004_2 = AmBz*r_002_003_2 + r_003_003_2;
            double r_110_004_2 = AmBz*r_110_003_2 + r_111_003_2;
            double r_101_004_2 = AmBz*r_101_003_2 + r_102_003_2;
            double r_011_004_2 = AmBz*r_011_003_2 + r_012_003_2;
            double b_310_1 = AmBy*b_300_1 + r_010_300_1;
            double b_310_2 = AmBy*b_300_2 + r_010_300_2;
            double r_010_310_2 = AmBy*r_010_300_2 + r_020_300_2;
            double r_001_310_2 = AmBy*r_001_300_2 + r_011_300_2;
            double r_020_310_2 = AmBy*r_020_300_2 + r_030_300_2;
            double r_011_310_2 = AmBy*r_011_300_2 + r_021_300_2;
            double b_130_1 = AmBx*b_030_1 + r_100_030_1;
            double b_130_2 = AmBx*b_030_2 + r_100_030_2;
            double r_100_130_2 = AmBx*r_100_030_2 + r_200_030_2;
            double r_001_130_2 = AmBx*r_001_030_2 + r_101_030_2;
            double r_101_130_2 = AmBx*r_101_030_2 + r_201_030_2;
            double b_301_1 = AmBz*b_300_1 + r_001_300_1;
            double b_301_2 = AmBz*b_300_2 + r_001_300_2;
            double r_010_301_2 = AmBz*r_010_300_2 + r_011_300_2;
            double r_001_301_2 = AmBz*r_001_300_2 + r_002_300_2;
            double r_002_301_2 = AmBz*r_002_300_2 + r_003_300_2;
            double r_011_301_2 = AmBz*r_011_300_2 + r_012_300_2;
            double b_103_1 = AmBx*b_003_1 + r_100_003_1;
            double b_103_2 = AmBx*b_003_2 + r_100_003_2;
            double r_100_103_2 = AmBx*r_100_003_2 + r_200_003_2;
            double r_010_103_2 = AmBx*r_010_003_2 + r_110_003_2;
            double r_110_103_2 = AmBx*r_110_003_2 + r_210_003_2;
            double b_031_1 = AmBz*b_030_1 + r_001_030_1;
            double b_031_2 = AmBz*b_030_2 + r_001_030_2;
            double r_100_031_2 = AmBz*r_100_030_2 + r_101_030_2;
            double r_001_031_2 = AmBz*r_001_030_2 + r_002_030_2;
            double r_002_031_2 = AmBz*r_002_030_2 + r_003_030_2;
            double r_101_031_2 = AmBz*r_101_030_2 + r_102_030_2;
            double b_013_1 = AmBy*b_003_1 + r_010_003_1;
            double b_013_2 = AmBy*b_003_2 + r_010_003_2;
            double r_100_013_2 = AmBy*r_100_003_2 + r_110_003_2;
            double r_010_013_2 = AmBy*r_010_003_2 + r_020_003_2;
            double r_110_013_2 = AmBy*r_110_003_2 + r_120_003_2;
            double b_220_1 = AmBx*b_120_1 + r_100_120_1;
            double b_202_1 = AmBx*b_102_1 + r_100_102_1;
            double b_022_1 = AmBy*b_012_1 + r_010_012_1;
            double b_022_2 = AmBy*b_012_2 + r_010_012_2;
            double r_100_022_2 = AmBy*r_100_012_2 + r_110_012_2;
            double r_200_022_2 = AmBy*r_200_012_2 + r_210_012_2;
            double b_112_1 = AmBy*b_102_1 + r_010_102_1;
            double b_121_1 = AmBz*b_120_1 + r_001_120_1;
            double b_211_1 = AmBz*b_210_1 + r_001_210_1;
            double b_500_2 = AmBx*b_400_2 + r_100_400_2;
            double r_100_500_2 = AmBx*r_100_400_2 + r_200_400_2;
            double r_010_500_2 = AmBx*r_010_400_2 + r_110_400_2;
            double r_001_500_2 = AmBx*r_001_400_2 + r_101_400_2;
            double b_050_2 = AmBy*b_040_2 + r_010_040_2;
            double r_100_050_2 = AmBy*r_100_040_2 + r_110_040_2;
            double r_010_050_2 = AmBy*r_010_040_2 + r_020_040_2;
            double r_001_050_2 = AmBy*r_001_040_2 + r_011_040_2;
            double b_005_2 = AmBz*b_004_2 + r_001_004_2;
            double r_100_005_2 = AmBz*r_100_004_2 + r_101_004_2;
            double r_010_005_2 = AmBz*r_010_004_2 + r_011_004_2;
            double r_001_005_2 = AmBz*r_001_004_2 + r_002_004_2;
            double b_140_2 = AmBx*b_040_2 + r_100_040_2;
            double r_100_140_2 = AmBx*r_100_040_2 + r_200_040_2;
            double r_001_140_2 = AmBx*r_001_040_2 + r_101_040_2;
            double b_104_2 = AmBx*b_004_2 + r_100_004_2;
            double r_100_104_2 = AmBx*r_100_004_2 + r_200_004_2;
            double r_010_104_2 = AmBx*r_010_004_2 + r_110_004_2;
            double b_410_2 = AmBy*b_400_2 + r_010_400_2;
            double r_010_410_2 = AmBy*r_010_400_2 + r_020_400_2;
            double r_001_410_2 = AmBy*r_001_400_2 + r_011_400_2;
            double b_014_2 = AmBy*b_004_2 + r_010_004_2;
            double r_010_014_2 = AmBy*r_010_004_2 + r_020_004_2;
            double b_401_2 = AmBz*b_400_2 + r_001_400_2;
            double r_001_401_2 = AmBz*r_001_400_2 + r_002_400_2;
            double b_041_2 = AmBz*b_040_2 + r_001_040_2;
            double r_001_041_2 = AmBz*r_001_040_2 + r_002_040_2;
            double b_320_2 = AmBy*b_310_2 + r_010_310_2;
            double r_010_320_2 = AmBy*r_010_310_2 + r_020_310_2;
            double r_001_320_2 = AmBy*r_001_310_2 + r_011_310_2;
            double b_302_2 = AmBz*b_301_2 + r_001_301_2;
            double r_010_302_2 = AmBz*r_010_301_2 + r_011_301_2;
            double r_001_302_2 = AmBz*r_001_301_2 + r_002_301_2;
            double b_230_2 = AmBx*b_130_2 + r_100_130_2;
            double r_001_230_2 = AmBx*r_001_130_2 + r_101_130_2;
            double b_032_2 = AmBz*b_031_2 + r_001_031_2;
            double r_100_032_2 = AmBz*r_100_031_2 + r_101_031_2;
            double r_001_032_2 = AmBz*r_001_031_2 + r_002_031_2;
            double b_203_2 = AmBx*b_103_2 + r_100_103_2;
            double r_010_203_2 = AmBx*r_010_103_2 + r_110_103_2;
            double b_023_2 = AmBy*b_013_2 + r_010_013_2;
            double r_100_023_2 = AmBy*r_100_013_2 + r_110_013_2;
            double b_122_2 = AmBx*b_022_2 + r_100_022_2;
            double r_100_122_2 = AmBx*r_100_022_2 + r_200_022_2;
            double b_600_2 = AmBx*b_500_2 + r_100_500_2;
            double b_060_2 = AmBy*b_050_2 + r_010_050_2;
            double b_006_2 = AmBz*b_005_2 + r_001_005_2;
            double b_510_2 = AmBy*b_500_2 + r_010_500_2;
            double b_150_2 = AmBx*b_050_2 + r_100_050_2;
            double b_501_2 = AmBz*b_500_2 + r_001_500_2;
            double b_105_2 = AmBx*b_005_2 + r_100_005_2;
            double b_051_2 = AmBz*b_050_2 + r_001_050_2;
            double b_015_2 = AmBy*b_005_2 + r_010_005_2;
            double b_420_2 = AmBy*b_410_2 + r_010_410_2;
            double b_402_2 = AmBz*b_401_2 + r_001_401_2;
            double b_240_2 = AmBx*b_140_2 + r_100_140_2;
            double b_204_2 = AmBx*b_104_2 + r_100_104_2;
            double b_042_2 = AmBz*b_041_2 + r_001_041_2;
            double b_024_2 = AmBy*b_014_2 + r_010_014_2;
            double b_330_2 = AmBy*b_320_2 + r_010_320_2;
            double b_303_2 = AmBz*b_302_2 + r_001_302_2;
            double b_033_2 = AmBz*b_032_2 + r_001_032_2;
            double b_114_2 = AmBy*b_104_2 + r_010_104_2;
            double b_141_2 = AmBz*b_140_2 + r_001_140_2;
            double b_411_2 = AmBz*b_410_2 + r_001_410_2;
            double b_312_2 = AmBy*b_302_2 + r_010_302_2;
            double b_132_2 = AmBx*b_032_2 + r_100_032_2;
            double b_321_2 = AmBz*b_320_2 + r_001_320_2;
            double b_123_2 = AmBx*b_023_2 + r_100_023_2;
            double b_231_2 = AmBz*b_230_2 + r_001_230_2;
            double b_213_2 = AmBy*b_203_2 + r_010_203_2;
            double b_222_2 = AmBx*b_122_2 + r_100_122_2;
            double b_400_L1 = 11*b_400_1 - b_402_2 - b_420_2 - b_600_2;
            double b_040_L1 = 11*b_040_1 - b_042_2 - b_060_2 - b_240_2;
            double b_004_L1 = 11*b_004_1 - b_006_2 - b_024_2 - b_204_2;
            double b_310_L1 = 11*b_310_1 - b_312_2 - b_330_2 - b_510_2;
            double b_130_L1 = 11*b_130_1 - b_132_2 - b_150_2 - b_330_2;
            double b_301_L1 = 11*b_301_1 - b_303_2 - b_321_2 - b_501_2;
            double b_103_L1 = 11*b_103_1 - b_105_2 - b_123_2 - b_303_2;
            double b_031_L1 = 11*b_031_1 - b_033_2 - b_051_2 - b_231_2;
            double b_013_L1 = 11*b_013_1 - b_015_2 - b_033_2 - b_213_2;
            double b_220_L1 = 11*b_220_1 - b_222_2 - b_240_2 - b_420_2;
            double b_202_L1 = 11*b_202_1 - b_204_2 - b_222_2 - b_402_2;
            double b_022_L1 = 11*b_022_1 - b_024_2 - b_042_2 - b_222_2;
            double b_112_L1 = 11*b_112_1 - b_114_2 - b_132_2 - b_312_2;
            double b_121_L1 = 11*b_121_1 - b_123_2 - b_141_2 - b_321_2;
            double b_211_L1 = 11*b_211_1 - b_213_2 - b_231_2 - b_411_2;
            // 34.27 steps per component, 4.02 kb stack
            pOut_[sb*0] = b_004_L1 - b_022_L1*sdc + b_040_L1*sda - b_202_L1*sdc + b_220_L1*sdb + b_400_L1*sda;
            pOut_[sb*1] = b_112_L1*sde - b_130_L1*sdd - b_310_L1*sdd;
            pOut_[sb*2] = b_103_L1*sdf - b_121_L1*sd7 - b_301_L1*sd7;
            pOut_[sb*3] = b_040_L1*sd10 - b_220_L1*sd11 + b_400_L1*sd10;
            pOut_[sb*4] = b_013_L1*sdf - b_031_L1*sd7 - b_211_L1*sd7;
            pOut_[sb*5] = -b_022_L1*sd13 + b_040_L1*sd12 + b_202_L1*sd13 - b_400_L1*sd12;
            pOut_[sb*6] = -b_130_L1*sd14 + b_310_L1*sd14;
            pOut_[sb*7] = -b_121_L1*sd16 + b_301_L1*sd15;
            pOut_[sb*8] = -b_031_L1*sd15 + b_211_L1*sd16;
         }
         return;
      }
      case 5: {
         for (size_t ia = 0; ia < nCount; ++ ia) {
            double const * pAx1 = p2Z + 56 * ia;
            double const * pAx2 = p4Z + 120 * ia;
            double * pOut_ = pOut + sa * ia;
            //IR_PREFETCH_W(&pOut_[sb*0]);
            //IR_PREFETCH_W(&pOut_[sb*1]);
            //IR_PREFETCH_W(&pOut_[sb*2]);
            //IR_PREFETCH_W(&pOut_[sb*3]);
            //IR_PREFETCH_W(&pOut_[sb*4]);
            //IR_PREFETCH_W(&pOut_[sb*5]);
            //IR_PREFETCH_W(&pOut_[sb*6]);
            //IR_PREFETCH_W(&pOut_[sb*7]);
            //IR_PREFETCH_W(&pOut_[sb*8]);
            //IR_PREFETCH_W(&pOut_[sb*9]);
            //IR_PREFETCH_W(&pOut_[sb*10]);
            double b_100_1 = AmBx*pAx1[0] + pAx1[1];
            double r_100_100_1 = AmBx*pAx1[1] + pAx1[4];
            double r_010_100_1 = AmBx*pAx1[2] + pAx1[7];
            double r_001_100_1 = AmBx*pAx1[3] + pAx1[8];
            double r_200_100_1 = AmBx*pAx1[4] + pAx1[10];
            double r_020_100_1 = AmBx*pAx1[5] + pAx1[13];
            double r_002_100_1 = AmBx*pAx1[6] + pAx1[14];
            double r_110_100_1 = AmBx*pAx1[7] + pAx1[15];
            double r_101_100_1 = AmBx*pAx1[8] + pAx1[17];
            double r_011_100_1 = AmBx*pAx1[9] + pAx1[19];
            double r_300_100_1 = AmBx*pAx1[10] + pAx1[20];
            double r_120_100_1 = AmBx*pAx1[13] + pAx1[29];
            double r_102_100_1 = AmBx*pAx1[14] + pAx1[30];
            double r_210_100_1 = AmBx*pAx1[15] + pAx1[23];
            double r_201_100_1 = AmBx*pAx1[17] + pAx1[25];
            double r_111_100_1 = AmBx*pAx1[19] + pAx1[34];
            double r_400_100_1 = AmBx*pAx1[20] + pAx1[35];
            double r_310_100_1 = AmBx*pAx1[23] + pAx1[40];
            double r_301_100_1 = AmBx*pAx1[25] + pAx1[42];
            double r_220_100_1 = AmBx*pAx1[29] + pAx1[44];
            double r_202_100_1 = AmBx*pAx1[30] + pAx1[45];
            double r_211_100_1 = AmBx*pAx1[34] + pAx1[50];
            double b_100_2 = AmBx*pAx2[0] + pAx2[1];
            double r_100_100_2 = AmBx*pAx2[1] + pAx2[4];
            double r_010_100_2 = AmBx*pAx2[2] + pAx2[7];
            double r_001_100_2 = AmBx*pAx2[3] + pAx2[8];
            double r_200_100_2 = AmBx*pAx2[4] + pAx2[10];
            double r_020_100_2 = AmBx*pAx2[5] + pAx2[13];
            double r_002_100_2 = AmBx*pAx2[6] + pAx2[14];
            double r_110_100_2 = AmBx*pAx2[7] + pAx2[15];
            double r_101_100_2 = AmBx*pAx2[8] + pAx2[17];
            double r_011_100_2 = AmBx*pAx2[9] + pAx2[19];
            double r_300_100_2 = AmBx*pAx2[10] + pAx2[20];
            double r_030_100_2 = AmBx*pAx2[11] + pAx2[24];
            double r_003_100_2 = AmBx*pAx2[12] + pAx2[26];
            double r_120_100_2 = AmBx*pAx2[13] + pAx2[29];
            double r_102_100_2 = AmBx*pAx2[14] + pAx2[30];
            double r_210_100_2 = AmBx*pAx2[15] + pAx2[23];
            double r_012_100_2 = AmBx*pAx2[16] + pAx2[32];
            double r_201_100_2 = AmBx*pAx2[17] + pAx2[25];
            double r_021_100_2 = AmBx*pAx2[18] + pAx2[33];
            double r_111_100_2 = AmBx*pAx2[19] + pAx2[34];
            double r_400_100_2 = AmBx*pAx2[20] + pAx2[35];
            double r_310_100_2 = AmBx*pAx2[23] + pAx2[40];
            double r_130_100_2 = AmBx*pAx2[24] + pAx2[46];
            double r_301_100_2 = AmBx*pAx2[25] + pAx2[42];
            double r_103_100_2 = AmBx*pAx2[26] + pAx2[48];
            double r_031_100_2 = AmBx*pAx2[27] + pAx2[51];
            double r_013_100_2 = AmBx*pAx2[28] + pAx2[52];
            double r_220_100_2 = AmBx*pAx2[29] + pAx2[44];
            double r_202_100_2 = AmBx*pAx2[30] + pAx2[45];
            double r_022_100_2 = AmBx*pAx2[31] + pAx2[53];
            double r_112_100_2 = AmBx*pAx2[32] + pAx2[54];
            double r_121_100_2 = AmBx*pAx2[33] + pAx2[55];
            double r_211_100_2 = AmBx*pAx2[34] + pAx2[50];
            double r_500_100_2 = AmBx*pAx2[35] + pAx2[56];
            double r_410_100_2 = AmBx*pAx2[40] + pAx2[59];
            double r_401_100_2 = AmBx*pAx2[42] + pAx2[61];
            double r_320_100_2 = AmBx*pAx2[44] + pAx2[65];
            double r_302_100_2 = AmBx*pAx2[45] + pAx2[66];
            double r_230_100_2 = AmBx*pAx2[46] + pAx2[71];
            double r_203_100_2 = AmBx*pAx2[48] + pAx2[72];
            double r_311_100_2 = AmBx*pAx2[50] + pAx2[76];
            double r_131_100_2 = AmBx*pAx2[51] + pAx2[81];
            double r_113_100_2 = AmBx*pAx2[52] + pAx2[82];
            double r_122_100_2 = AmBx*pAx2[53] + pAx2[83];
            double r_212_100_2 = AmBx*pAx2[54] + pAx2[77];
            double r_221_100_2 = AmBx*pAx2[55] + pAx2[79];
            double r_600_100_2 = AmBx*pAx2[56] + pAx2[84];
            double r_510_100_2 = AmBx*pAx2[59] + pAx2[89];
            double r_501_100_2 = AmBx*pAx2[61] + pAx2[91];
            double r_420_100_2 = AmBx*pAx2[65] + pAx2[93];
            double r_402_100_2 = AmBx*pAx2[66] + pAx2[94];
            double r_330_100_2 = AmBx*pAx2[71] + pAx2[101];
            double r_303_100_2 = AmBx*pAx2[72] + pAx2[103];
            double r_411_100_2 = AmBx*pAx2[76] + pAx2[105];
            double r_312_100_2 = AmBx*pAx2[77] + pAx2[110];
            double r_321_100_2 = AmBx*pAx2[79] + pAx2[112];
            double r_231_100_2 = AmBx*pAx2[81] + pAx2[114];
            double r_213_100_2 = AmBx*pAx2[82] + pAx2[115];
            double r_222_100_2 = AmBx*pAx2[83] + pAx2[117];
            double b_010_1 = AmBy*pAx1[0] + pAx1[2];
            double r_100_010_1 = AmBy*pAx1[1] + pAx1[7];
            double r_010_010_1 = AmBy*pAx1[2] + pAx1[5];
            double r_001_010_1 = AmBy*pAx1[3] + pAx1[9];
            double r_200_010_1 = AmBy*pAx1[4] + pAx1[15];
            double r_020_010_1 = AmBy*pAx1[5] + pAx1[11];
            double r_002_010_1 = AmBy*pAx1[6] + pAx1[16];
            double r_110_010_1 = AmBy*pAx1[7] + pAx1[13];
            double r_101_010_1 = AmBy*pAx1[8] + pAx1[19];
            double r_011_010_1 = AmBy*pAx1[9] + pAx1[18];
            double r_030_010_1 = AmBy*pAx1[11] + pAx1[21];
            double r_120_010_1 = AmBy*pAx1[13] + pAx1[24];
            double r_210_010_1 = AmBy*pAx1[15] + pAx1[29];
            double r_012_010_1 = AmBy*pAx1[16] + pAx1[31];
            double r_201_010_1 = AmBy*pAx1[17] + pAx1[34];
            double r_021_010_1 = AmBy*pAx1[18] + pAx1[27];
            double r_111_010_1 = AmBy*pAx1[19] + pAx1[33];
            double r_040_010_1 = AmBy*pAx1[21] + pAx1[36];
            double r_130_010_1 = AmBy*pAx1[24] + pAx1[38];
            double r_031_010_1 = AmBy*pAx1[27] + pAx1[43];
            double r_220_010_1 = AmBy*pAx1[29] + pAx1[46];
            double r_022_010_1 = AmBy*pAx1[31] + pAx1[47];
            double r_121_010_1 = AmBy*pAx1[33] + pAx1[51];
            double r_211_010_1 = AmBy*pAx1[34] + pAx1[55];
            double b_010_2 = AmBy*pAx2[0] + pAx2[2];
            double r_100_010_2 = AmBy*pAx2[1] + pAx2[7];
            double r_010_010_2 = AmBy*pAx2[2] + pAx2[5];
            double r_001_010_2 = AmBy*pAx2[3] + pAx2[9];
            double r_200_010_2 = AmBy*pAx2[4] + pAx2[15];
            double r_020_010_2 = AmBy*pAx2[5] + pAx2[11];
            double r_002_010_2 = AmBy*pAx2[6] + pAx2[16];
            double r_110_010_2 = AmBy*pAx2[7] + pAx2[13];
            double r_101_010_2 = AmBy*pAx2[8] + pAx2[19];
            double r_011_010_2 = AmBy*pAx2[9] + pAx2[18];
            double r_300_010_2 = AmBy*pAx2[10] + pAx2[23];
            double r_030_010_2 = AmBy*pAx2[11] + pAx2[21];
            double r_003_010_2 = AmBy*pAx2[12] + pAx2[28];
            double r_120_010_2 = AmBy*pAx2[13] + pAx2[24];
            double r_102_010_2 = AmBy*pAx2[14] + pAx2[32];
            double r_210_010_2 = AmBy*pAx2[15] + pAx2[29];
            double r_012_010_2 = AmBy*pAx2[16] + pAx2[31];
            double r_201_010_2 = AmBy*pAx2[17] + pAx2[34];
            double r_021_010_2 = AmBy*pAx2[18] + pAx2[27];
            double r_111_010_2 = AmBy*pAx2[19] + pAx2[33];
            double r_040_010_2 = AmBy*pAx2[21] + pAx2[36];
            double r_310_010_2 = AmBy*pAx2[23] + pAx2[44];
            double r_130_010_2 = AmBy*pAx2[24] + pAx2[38];
            double r_103_010_2 = AmBy*pAx2[26] + pAx2[52];
            double r_031_010_2 = AmBy*pAx2[27] + pAx2[43];
            double r_013_010_2 = AmBy*pAx2[28] + pAx2[49];
            double r_220_010_2 = AmBy*pAx2[29] + pAx2[46];
            double r_202_010_2 = AmBy*pAx2[30] + pAx2[54];
            double r_022_010_2 = AmBy*pAx2[31] + pAx2[47];
            double r_112_010_2 = AmBy*pAx2[32] + pAx2[53];
            double r_121_010_2 = AmBy*pAx2[33] + pAx2[51];
            double r_211_010_2 = AmBy*pAx2[34] + pAx2[55];
            double r_050_010_2 = AmBy*pAx2[36] + pAx2[57];
            double r_140_010_2 = AmBy*pAx2[38] + pAx2[60];
            double r_041_010_2 = AmBy*pAx2[43] + pAx2[63];
            double r_320_010_2 = AmBy*pAx2[44] + pAx2[71];
            double r_230_010_2 = AmBy*pAx2[46] + pAx2[67];
            double r_032_010_2 = AmBy*pAx2[47] + pAx2[69];
            double r_023_010_2 = AmBy*pAx2[49] + pAx2[73];
            double r_131_010_2 = AmBy*pAx2[51] + pAx2[75];
            double r_113_010_2 = AmBy*pAx2[52] + pAx2[80];
            double r_122_010_2 = AmBy*pAx2[53] + pAx2[78];
            double r_212_010_2 = AmBy*pAx2[54] + pAx2[83];
            double r_221_010_2 = AmBy*pAx2[55] + pAx2[81];
            double r_060_010_2 = AmBy*pAx2[57] + pAx2[85];
            double r_150_010_2 = AmBy*pAx2[60] + pAx2[87];
            double r_051_010_2 = AmBy*pAx2[63] + pAx2[92];
            double r_240_010_2 = AmBy*pAx2[67] + pAx2[95];
            double r_042_010_2 = AmBy*pAx2[69] + pAx2[96];
            double r_330_010_2 = AmBy*pAx2[71] + pAx2[99];
            double r_033_010_2 = AmBy*pAx2[73] + pAx2[104];
            double r_141_010_2 = AmBy*pAx2[75] + pAx2[106];
            double r_132_010_2 = AmBy*pAx2[78] + pAx2[108];
            double r_123_010_2 = AmBy*pAx2[80] + pAx2[116];
            double r_231_010_2 = AmBy*pAx2[81] + pAx2[113];
            double r_222_010_2 = AmBy*pAx2[83] + pAx2[118];
            double b_001_1 = AmBz*pAx1[0] + pAx1[3];
            double r_100_001_1 = AmBz*pAx1[1] + pAx1[8];
            double r_010_001_1 = AmBz*pAx1[2] + pAx1[9];
            double r_001_001_1 = AmBz*pAx1[3] + pAx1[6];
            double r_200_001_1 = AmBz*pAx1[4] + pAx1[17];
            double r_020_001_1 = AmBz*pAx1[5] + pAx1[18];
            double r_002_001_1 = AmBz*pAx1[6] + pAx1[12];
            double r_110_001_1 = AmBz*pAx1[7] + pAx1[19];
            double r_101_001_1 = AmBz*pAx1[8] + pAx1[14];
            double r_011_001_1 = AmBz*pAx1[9] + pAx1[16];
            double r_003_001_1 = AmBz*pAx1[12] + pAx1[22];
            double r_120_001_1 = AmBz*pAx1[13] + pAx1[33];
            double r_102_001_1 = AmBz*pAx1[14] + pAx1[26];
            double r_210_001_1 = AmBz*pAx1[15] + pAx1[34];
            double r_012_001_1 = AmBz*pAx1[16] + pAx1[28];
            double r_201_001_1 = AmBz*pAx1[17] + pAx1[30];
            double r_021_001_1 = AmBz*pAx1[18] + pAx1[31];
            double r_111_001_1 = AmBz*pAx1[19] + pAx1[32];
            double r_004_001_1 = AmBz*pAx1[22] + pAx1[37];
            double r_103_001_1 = AmBz*pAx1[26] + pAx1[39];
            double r_013_001_1 = AmBz*pAx1[28] + pAx1[41];
            double r_202_001_1 = AmBz*pAx1[30] + pAx1[48];
            double r_022_001_1 = AmBz*pAx1[31] + pAx1[49];
            double r_112_001_1 = AmBz*pAx1[32] + pAx1[52];
            double r_121_001_1 = AmBz*pAx1[33] + pAx1[53];
            double r_211_001_1 = AmBz*pAx1[34] + pAx1[54];
            double b_001_2 = AmBz*pAx2[0] + pAx2[3];
            double r_100_001_2 = AmBz*pAx2[1] + pAx2[8];
            double r_010_001_2 = AmBz*pAx2[2] + pAx2[9];
            double r_001_001_2 = AmBz*pAx2[3] + pAx2[6];
            double r_200_001_2 = AmBz*pAx2[4] + pAx2[17];
            double r_020_001_2 = AmBz*pAx2[5] + pAx2[18];
            double r_002_001_2 = AmBz*pAx2[6] + pAx2[12];
            double r_110_001_2 = AmBz*pAx2[7] + pAx2[19];
            double r_101_001_2 = AmBz*pAx2[8] + pAx2[14];
            double r_011_001_2 = AmBz*pAx2[9] + pAx2[16];
            double r_300_001_2 = AmBz*pAx2[10] + pAx2[25];
            double r_030_001_2 = AmBz*pAx2[11] + pAx2[27];
            double r_003_001_2 = AmBz*pAx2[12] + pAx2[22];
            double r_120_001_2 = AmBz*pAx2[13] + pAx2[33];
            double r_102_001_2 = AmBz*pAx2[14] + pAx2[26];
            double r_210_001_2 = AmBz*pAx2[15] + pAx2[34];
            double r_012_001_2 = AmBz*pAx2[16] + pAx2[28];
            double r_201_001_2 = AmBz*pAx2[17] + pAx2[30];
            double r_021_001_2 = AmBz*pAx2[18] + pAx2[31];
            double r_111_001_2 = AmBz*pAx2[19] + pAx2[32];
            double r_004_001_2 = AmBz*pAx2[22] + pAx2[37];
            double r_301_001_2 = AmBz*pAx2[25] + pAx2[45];
            double r_103_001_2 = AmBz*pAx2[26] + pAx2[39];
            double r_031_001_2 = AmBz*pAx2[27] + pAx2[47];
            double r_013_001_2 = AmBz*pAx2[28] + pAx2[41];
            double r_220_001_2 = AmBz*pAx2[29] + pAx2[55];
            double r_202_001_2 = AmBz*pAx2[30] + pAx2[48];
            double r_022_001_2 = AmBz*pAx2[31] + pAx2[49];
            double r_112_001_2 = AmBz*pAx2[32] + pAx2[52];
            double r_121_001_2 = AmBz*pAx2[33] + pAx2[53];
            double r_211_001_2 = AmBz*pAx2[34] + pAx2[54];
            double r_005_001_2 = AmBz*pAx2[37] + pAx2[58];
            double r_104_001_2 = AmBz*pAx2[39] + pAx2[62];
            double r_014_001_2 = AmBz*pAx2[41] + pAx2[64];
            double r_302_001_2 = AmBz*pAx2[45] + pAx2[72];
            double r_032_001_2 = AmBz*pAx2[47] + pAx2[73];
            double r_203_001_2 = AmBz*pAx2[48] + pAx2[68];
            double r_023_001_2 = AmBz*pAx2[49] + pAx2[70];
            double r_113_001_2 = AmBz*pAx2[52] + pAx2[74];
            double r_122_001_2 = AmBz*pAx2[53] + pAx2[80];
            double r_212_001_2 = AmBz*pAx2[54] + pAx2[82];
            double r_221_001_2 = AmBz*pAx2[55] + pAx2[83];
            double r_006_001_2 = AmBz*pAx2[58] + pAx2[86];
            double r_105_001_2 = AmBz*pAx2[62] + pAx2[88];
            double r_015_001_2 = AmBz*pAx2[64] + pAx2[90];
            double r_204_001_2 = AmBz*pAx2[68] + pAx2[97];
            double r_024_001_2 = AmBz*pAx2[70] + pAx2[98];
            double r_303_001_2 = AmBz*pAx2[72] + pAx2[100];
            double r_033_001_2 = AmBz*pAx2[73] + pAx2[102];
            double r_114_001_2 = AmBz*pAx2[74] + pAx2[107];
            double r_123_001_2 = AmBz*pAx2[80] + pAx2[109];
            double r_213_001_2 = AmBz*pAx2[82] + pAx2[111];
            double r_222_001_2 = AmBz*pAx2[83] + pAx2[119];
            double b_200_1 = AmBx*b_100_1 + r_100_100_1;
            double r_100_200_1 = AmBx*r_100_100_1 + r_200_100_1;
            double r_010_200_1 = AmBx*r_010_100_1 + r_110_100_1;
            double r_001_200_1 = AmBx*r_001_100_1 + r_101_100_1;
            double r_200_200_1 = AmBx*r_200_100_1 + r_300_100_1;
            double r_020_200_1 = AmBx*r_020_100_1 + r_120_100_1;
            double r_002_200_1 = AmBx*r_002_100_1 + r_102_100_1;
            double r_110_200_1 = AmBx*r_110_100_1 + r_210_100_1;
            double r_101_200_1 = AmBx*r_101_100_1 + r_201_100_1;
            double r_011_200_1 = AmBx*r_011_100_1 + r_111_100_1;
            double r_300_200_1 = AmBx*r_300_100_1 + r_400_100_1;
            double r_120_200_1 = AmBx*r_120_100_1 + r_220_100_1;
            double r_102_200_1 = AmBx*r_102_100_1 + r_202_100_1;
            double r_210_200_1 = AmBx*r_210_100_1 + r_310_100_1;
            double r_201_200_1 = AmBx*r_201_100_1 + r_301_100_1;
            double r_111_200_1 = AmBx*r_111_100_1 + r_211_100_1;
            double b_200_2 = AmBx*b_100_2 + r_100_100_2;
            double r_100_200_2 = AmBx*r_100_100_2 + r_200_100_2;
            double r_010_200_2 = AmBx*r_010_100_2 + r_110_100_2;
            double r_001_200_2 = AmBx*r_001_100_2 + r_101_100_2;
            double r_200_200_2 = AmBx*r_200_100_2 + r_300_100_2;
            double r_020_200_2 = AmBx*r_020_100_2 + r_120_100_2;
            double r_002_200_2 = AmBx*r_002_100_2 + r_102_100_2;
            double r_110_200_2 = AmBx*r_110_100_2 + r_210_100_2;
            double r_101_200_2 = AmBx*r_101_100_2 + r_201_100_2;
            double r_011_200_2 = AmBx*r_011_100_2 + r_111_100_2;
            double r_300_200_2 = AmBx*r_300_100_2 + r_400_100_2;
            double r_030_200_2 = AmBx*r_030_100_2 + r_130_100_2;
            double r_003_200_2 = AmBx*r_003_100_2 + r_103_100_2;
            double r_120_200_2 = AmBx*r_120_100_2 + r_220_100_2;
            double r_102_200_2 = AmBx*r_102_100_2 + r_202_100_2;
            double r_210_200_2 = AmBx*r_210_100_2 + r_310_100_2;
            double r_012_200_2 = AmBx*r_012_100_2 + r_112_100_2;
            double r_201_200_2 = AmBx*r_201_100_2 + r_301_100_2;
            double r_021_200_2 = AmBx*r_021_100_2 + r_121_100_2;
            double r_111_200_2 = AmBx*r_111_100_2 + r_211_100_2;
            double r_400_200_2 = AmBx*r_400_100_2 + r_500_100_2;
            double r_310_200_2 = AmBx*r_310_100_2 + r_410_100_2;
            double r_130_200_2 = AmBx*r_130_100_2 + r_230_100_2;
            double r_301_200_2 = AmBx*r_301_100_2 + r_401_100_2;
            double r_103_200_2 = AmBx*r_103_100_2 + r_203_100_2;
            double r_031_200_2 = AmBx*r_031_100_2 + r_131_100_2;
            double r_013_200_2 = AmBx*r_013_100_2 + r_113_100_2;
            double r_220_200_2 = AmBx*r_220_100_2 + r_320_100_2;
            double r_202_200_2 = AmBx*r_202_100_2 + r_302_100_2;
            double r_022_200_2 = AmBx*r_022_100_2 + r_122_100_2;
            double r_112_200_2 = AmBx*r_112_100_2 + r_212_100_2;
            double r_121_200_2 = AmBx*r_121_100_2 + r_221_100_2;
            double r_211_200_2 = AmBx*r_211_100_2 + r_311_100_2;
            double r_500_200_2 = AmBx*r_500_100_2 + r_600_100_2;
            double r_410_200_2 = AmBx*r_410_100_2 + r_510_100_2;
            double r_401_200_2 = AmBx*r_401_100_2 + r_501_100_2;
            double r_320_200_2 = AmBx*r_320_100_2 + r_420_100_2;
            double r_302_200_2 = AmBx*r_302_100_2 + r_402_100_2;
            double r_230_200_2 = AmBx*r_230_100_2 + r_330_100_2;
            double r_203_200_2 = AmBx*r_203_100_2 + r_303_100_2;
            double r_311_200_2 = AmBx*r_311_100_2 + r_411_100_2;
            double r_131_200_2 = AmBx*r_131_100_2 + r_231_100_2;
            double r_113_200_2 = AmBx*r_113_100_2 + r_213_100_2;
            double r_122_200_2 = AmBx*r_122_100_2 + r_222_100_2;
            double r_212_200_2 = AmBx*r_212_100_2 + r_312_100_2;
            double r_221_200_2 = AmBx*r_221_100_2 + r_321_100_2;
            double b_020_1 = AmBy*b_010_1 + r_010_010_1;
            double r_100_020_1 = AmBy*r_100_010_1 + r_110_010_1;
            double r_010_020_1 = AmBy*r_010_010_1 + r_020_010_1;
            double r_001_020_1 = AmBy*r_001_010_1 + r_011_010_1;
            double r_200_020_1 = AmBy*r_200_010_1 + r_210_010_1;
            double r_020_020_1 = AmBy*r_020_010_1 + r_030_010_1;
            double r_002_020_1 = AmBy*r_002_010_1 + r_012_010_1;
            double r_110_020_1 = AmBy*r_110_010_1 + r_120_010_1;
            double r_101_020_1 = AmBy*r_101_010_1 + r_111_010_1;
            double r_011_020_1 = AmBy*r_011_010_1 + r_021_010_1;
            double r_030_020_1 = AmBy*r_030_010_1 + r_040_010_1;
            double r_120_020_1 = AmBy*r_120_010_1 + r_130_010_1;
            double r_210_020_1 = AmBy*r_210_010_1 + r_220_010_1;
            double r_012_020_1 = AmBy*r_012_010_1 + r_022_010_1;
            double r_201_020_1 = AmBy*r_201_010_1 + r_211_010_1;
            double r_021_020_1 = AmBy*r_021_010_1 + r_031_010_1;
            double r_111_020_1 = AmBy*r_111_010_1 + r_121_010_1;
            double b_020_2 = AmBy*b_010_2 + r_010_010_2;
            double r_100_020_2 = AmBy*r_100_010_2 + r_110_010_2;
            double r_010_020_2 = AmBy*r_010_010_2 + r_020_010_2;
            double r_001_020_2 = AmBy*r_001_010_2 + r_011_010_2;
            double r_200_020_2 = AmBy*r_200_010_2 + r_210_010_2;
            double r_020_020_2 = AmBy*r_020_010_2 + r_030_010_2;
            double r_002_020_2 = AmBy*r_002_010_2 + r_012_010_2;
            double r_110_020_2 = AmBy*r_110_010_2 + r_120_010_2;
            double r_101_020_2 = AmBy*r_101_010_2 + r_111_010_2;
            double r_011_020_2 = AmBy*r_011_010_2 + r_021_010_2;
            double r_300_020_2 = AmBy*r_300_010_2 + r_310_010_2;
            double r_030_020_2 = AmBy*r_030_010_2 + r_040_010_2;
            double r_003_020_2 = AmBy*r_003_010_2 + r_013_010_2;
            double r_120_020_2 = AmBy*r_120_010_2 + r_130_010_2;
            double r_102_020_2 = AmBy*r_102_010_2 + r_112_010_2;
            double r_210_020_2 = AmBy*r_210_010_2 + r_220_010_2;
            double r_012_020_2 = AmBy*r_012_010_2 + r_022_010_2;
            double r_201_020_2 = AmBy*r_201_010_2 + r_211_010_2;
            double r_021_020_2 = AmBy*r_021_010_2 + r_031_010_2;
            double r_111_020_2 = AmBy*r_111_010_2 + r_121_010_2;
            double r_040_020_2 = AmBy*r_040_010_2 + r_050_010_2;
            double r_310_020_2 = AmBy*r_310_010_2 + r_320_010_2;
            double r_130_020_2 = AmBy*r_130_010_2 + r_140_010_2;
            double r_103_020_2 = AmBy*r_103_010_2 + r_113_010_2;
            double r_031_020_2 = AmBy*r_031_010_2 + r_041_010_2;
            double r_013_020_2 = AmBy*r_013_010_2 + r_023_010_2;
            double r_220_020_2 = AmBy*r_220_010_2 + r_230_010_2;
            double r_202_020_2 = AmBy*r_202_010_2 + r_212_010_2;
            double r_022_020_2 = AmBy*r_022_010_2 + r_032_010_2;
            double r_112_020_2 = AmBy*r_112_010_2 + r_122_010_2;
            double r_121_020_2 = AmBy*r_121_010_2 + r_131_010_2;
            double r_211_020_2 = AmBy*r_211_010_2 + r_221_010_2;
            double r_050_020_2 = AmBy*r_050_010_2 + r_060_010_2;
            double r_140_020_2 = AmBy*r_140_010_2 + r_150_010_2;
            double r_041_020_2 = AmBy*r_041_010_2 + r_051_010_2;
            double r_320_020_2 = AmBy*r_320_010_2 + r_330_010_2;
            double r_230_020_2 = AmBy*r_230_010_2 + r_240_010_2;
            double r_032_020_2 = AmBy*r_032_010_2 + r_042_010_2;
            double r_023_020_2 = AmBy*r_023_010_2 + r_033_010_2;
            double r_131_020_2 = AmBy*r_131_010_2 + r_141_010_2;
            double r_113_020_2 = AmBy*r_113_010_2 + r_123_010_2;
            double r_122_020_2 = AmBy*r_122_010_2 + r_132_010_2;
            double r_212_020_2 = AmBy*r_212_010_2 + r_222_010_2;
            double r_221_020_2 = AmBy*r_221_010_2 + r_231_010_2;
            double b_002_1 = AmBz*b_001_1 + r_001_001_1;
            double r_100_002_1 = AmBz*r_100_001_1 + r_101_001_1;
            double r_010_002_1 = AmBz*r_010_001_1 + r_011_001_1;
            double r_001_002_1 = AmBz*r_001_001_1 + r_002_001_1;
            double r_200_002_1 = AmBz*r_200_001_1 + r_201_001_1;
            double r_020_002_1 = AmBz*r_020_001_1 + r_021_001_1;
            double r_002_002_1 = AmBz*r_002_001_1 + r_003_001_1;
            double r_110_002_1 = AmBz*r_110_001_1 + r_111_001_1;
            double r_101_002_1 = AmBz*r_101_001_1 + r_102_001_1;
            double r_011_002_1 = AmBz*r_011_001_1 + r_012_001_1;
            double r_003_002_1 = AmBz*r_003_001_1 + r_004_001_1;
            double r_120_002_1 = AmBz*r_120_001_1 + r_121_001_1;
            double r_102_002_1 = AmBz*r_102_001_1 + r_103_001_1;
            double r_210_002_1 = AmBz*r_210_001_1 + r_211_001_1;
            double r_012_002_1 = AmBz*r_012_001_1 + r_013_001_1;
            double r_201_002_1 = AmBz*r_201_001_1 + r_202_001_1;
            double r_021_002_1 = AmBz*r_021_001_1 + r_022_001_1;
            double r_111_002_1 = AmBz*r_111_001_1 + r_112_001_1;
            double b_002_2 = AmBz*b_001_2 + r_001_001_2;
            double r_100_002_2 = AmBz*r_100_001_2 + r_101_001_2;
            double r_010_002_2 = AmBz*r_010_001_2 + r_011_001_2;
            double r_001_002_2 = AmBz*r_001_001_2 + r_002_001_2;
            double r_200_002_2 = AmBz*r_200_001_2 + r_201_001_2;
            double r_020_002_2 = AmBz*r_020_001_2 + r_021_001_2;
            double r_002_002_2 = AmBz*r_002_001_2 + r_003_001_2;
            double r_110_002_2 = AmBz*r_110_001_2 + r_111_001_2;
            double r_101_002_2 = AmBz*r_101_001_2 + r_102_001_2;
            double r_011_002_2 = AmBz*r_011_001_2 + r_012_001_2;
            double r_300_002_2 = AmBz*r_300_001_2 + r_301_001_2;
            double r_030_002_2 = AmBz*r_030_001_2 + r_031_001_2;
            double r_003_002_2 = AmBz*r_003_001_2 + r_004_001_2;
            double r_120_002_2 = AmBz*r_120_001_2 + r_121_001_2;
            double r_102_002_2 = AmBz*r_102_001_2 + r_103_001_2;
            double r_210_002_2 = AmBz*r_210_001_2 + r_211_001_2;
            double r_012_002_2 = AmBz*r_012_001_2 + r_013_001_2;
            double r_201_002_2 = AmBz*r_201_001_2 + r_202_001_2;
            double r_021_002_2 = AmBz*r_021_001_2 + r_022_001_2;
            double r_111_002_2 = AmBz*r_111_001_2 + r_112_001_2;
            double r_004_002_2 = AmBz*r_004_001_2 + r_005_001_2;
            double r_301_002_2 = AmBz*r_301_001_2 + r_302_001_2;
            double r_103_002_2 = AmBz*r_103_001_2 + r_104_001_2;
            double r_031_002_2 = AmBz*r_031_001_2 + r_032_001_2;
            double r_013_002_2 = AmBz*r_013_001_2 + r_014_001_2;
            double r_220_002_2 = AmBz*r_220_001_2 + r_221_001_2;
            double r_202_002_2 = AmBz*r_202_001_2 + r_203_001_2;
            double r_022_002_2 = AmBz*r_022_001_2 + r_023_001_2;
            double r_112_002_2 = AmBz*r_112_001_2 + r_113_001_2;
            double r_121_002_2 = AmBz*r_121_001_2 + r_122_001_2;
            double r_211_002_2 = AmBz*r_211_001_2 + r_212_001_2;
            double r_005_002_2 = AmBz*r_005_001_2 + r_006_001_2;
            double r_104_002_2 = AmBz*r_104_001_2 + r_105_001_2;
            double r_014_002_2 = AmBz*r_014_001_2 + r_015_001_2;
            double r_302_002_2 = AmBz*r_302_001_2 + r_303_001_2;
            double r_032_002_2 = AmBz*r_032_001_2 + r_033_001_2;
            double r_203_002_2 = AmBz*r_203_001_2 + r_204_001_2;
            double r_023_002_2 = AmBz*r_023_001_2 + r_024_001_2;
            double r_113_002_2 = AmBz*r_113_001_2 + r_114_001_2;
            double r_122_002_2 = AmBz*r_122_001_2 + r_123_001_2;
            double r_212_002_2 = AmBz*r_212_001_2 + r_213_001_2;
            double r_221_002_2 = AmBz*r_221_001_2 + r_222_001_2;
            double b_300_1 = AmBx*b_200_1 + r_100_200_1;
            double r_100_300_1 = AmBx*r_100_200_1 + r_200_200_1;
            double r_010_300_1 = AmBx*r_010_200_1 + r_110_200_1;
            double r_001_300_1 = AmBx*r_001_200_1 + r_101_200_1;
            double r_200_300_1 = AmBx*r_200_200_1 + r_300_200_1;
            double r_020_300_1 = AmBx*r_020_200_1 + r_120_200_1;
            double r_002_300_1 = AmBx*r_002_200_1 + r_102_200_1;
            double r_110_300_1 = AmBx*r_110_200_1 + r_210_200_1;
            double r_101_300_1 = AmBx*r_101_200_1 + r_201_200_1;
            double r_011_300_1 = AmBx*r_011_200_1 + r_111_200_1;
            double b_300_2 = AmBx*b_200_2 + r_100_200_2;
            double r_100_300_2 = AmBx*r_100_200_2 + r_200_200_2;
            double r_010_300_2 = AmBx*r_010_200_2 + r_110_200_2;
            double r_001_300_2 = AmBx*r_001_200_2 + r_101_200_2;
            double r_200_300_2 = AmBx*r_200_200_2 + r_300_200_2;
            double r_020_300_2 = AmBx*r_020_200_2 + r_120_200_2;
            double r_002_300_2 = AmBx*r_002_200_2 + r_102_200_2;
            double r_110_300_2 = AmBx*r_110_200_2 + r_210_200_2;
            double r_101_300_2 = AmBx*r_101_200_2 + r_201_200_2;
            double r_011_300_2 = AmBx*r_011_200_2 + r_111_200_2;
            double r_300_300_2 = AmBx*r_300_200_2 + r_400_200_2;
            double r_030_300_2 = AmBx*r_030_200_2 + r_130_200_2;
            double r_003_300_2 = AmBx*r_003_200_2 + r_103_200_2;
            double r_120_300_2 = AmBx*r_120_200_2 + r_220_200_2;
            double r_102_300_2 = AmBx*r_102_200_2 + r_202_200_2;
            double r_210_300_2 = AmBx*r_210_200_2 + r_310_200_2;
            double r_012_300_2 = AmBx*r_012_200_2 + r_112_200_2;
            double r_201_300_2 = AmBx*r_201_200_2 + r_301_200_2;
            double r_021_300_2 = AmBx*r_021_200_2 + r_121_200_2;
            double r_111_300_2 = AmBx*r_111_200_2 + r_211_200_2;
            double r_400_300_2 = AmBx*r_400_200_2 + r_500_200_2;
            double r_310_300_2 = AmBx*r_310_200_2 + r_410_200_2;
            double r_130_300_2 = AmBx*r_130_200_2 + r_230_200_2;
            double r_301_300_2 = AmBx*r_301_200_2 + r_401_200_2;
            double r_103_300_2 = AmBx*r_103_200_2 + r_203_200_2;
            double r_031_300_2 = AmBx*r_031_200_2 + r_131_200_2;
            double r_013_300_2 = AmBx*r_013_200_2 + r_113_200_2;
            double r_220_300_2 = AmBx*r_220_200_2 + r_320_200_2;
            double r_202_300_2 = AmBx*r_202_200_2 + r_302_200_2;
            double r_022_300_2 = AmBx*r_022_200_2 + r_122_200_2;
            double r_112_300_2 = AmBx*r_112_200_2 + r_212_200_2;
            double r_121_300_2 = AmBx*r_121_200_2 + r_221_200_2;
            double r_211_300_2 = AmBx*r_211_200_2 + r_311_200_2;
            double b_030_1 = AmBy*b_020_1 + r_010_020_1;
            double r_100_030_1 = AmBy*r_100_020_1 + r_110_020_1;
            double r_010_030_1 = AmBy*r_010_020_1 + r_020_020_1;
            double r_001_030_1 = AmBy*r_001_020_1 + r_011_020_1;
            double r_200_030_1 = AmBy*r_200_020_1 + r_210_020_1;
            double r_020_030_1 = AmBy*r_020_020_1 + r_030_020_1;
            double r_002_030_1 = AmBy*r_002_020_1 + r_012_020_1;
            double r_110_030_1 = AmBy*r_110_020_1 + r_120_020_1;
            double r_101_030_1 = AmBy*r_101_020_1 + r_111_020_1;
            double r_011_030_1 = AmBy*r_011_020_1 + r_021_020_1;
            double b_030_2 = AmBy*b_020_2 + r_010_020_2;
            double r_100_030_2 = AmBy*r_100_020_2 + r_110_020_2;
            double r_010_030_2 = AmBy*r_010_020_2 + r_020_020_2;
            double r_001_030_2 = AmBy*r_001_020_2 + r_011_020_2;
            double r_200_030_2 = AmBy*r_200_020_2 + r_210_020_2;
            double r_020_030_2 = AmBy*r_020_020_2 + r_030_020_2;
            double r_002_030_2 = AmBy*r_002_020_2 + r_012_020_2;
            double r_110_030_2 = AmBy*r_110_020_2 + r_120_020_2;
            double r_101_030_2 = AmBy*r_101_020_2 + r_111_020_2;
            double r_011_030_2 = AmBy*r_011_020_2 + r_021_020_2;
            double r_300_030_2 = AmBy*r_300_020_2 + r_310_020_2;
            double r_030_030_2 = AmBy*r_030_020_2 + r_040_020_2;
            double r_003_030_2 = AmBy*r_003_020_2 + r_013_020_2;
            double r_120_030_2 = AmBy*r_120_020_2 + r_130_020_2;
            double r_102_030_2 = AmBy*r_102_020_2 + r_112_020_2;
            double r_210_030_2 = AmBy*r_210_020_2 + r_220_020_2;
            double r_012_030_2 = AmBy*r_012_020_2 + r_022_020_2;
            double r_201_030_2 = AmBy*r_201_020_2 + r_211_020_2;
            double r_021_030_2 = AmBy*r_021_020_2 + r_031_020_2;
            double r_111_030_2 = AmBy*r_111_020_2 + r_121_020_2;
            double r_040_030_2 = AmBy*r_040_020_2 + r_050_020_2;
            double r_310_030_2 = AmBy*r_310_020_2 + r_320_020_2;
            double r_130_030_2 = AmBy*r_130_020_2 + r_140_020_2;
            double r_103_030_2 = AmBy*r_103_020_2 + r_113_020_2;
            double r_031_030_2 = AmBy*r_031_020_2 + r_041_020_2;
            double r_013_030_2 = AmBy*r_013_020_2 + r_023_020_2;
            double r_220_030_2 = AmBy*r_220_020_2 + r_230_020_2;
            double r_202_030_2 = AmBy*r_202_020_2 + r_212_020_2;
            double r_022_030_2 = AmBy*r_022_020_2 + r_032_020_2;
            double r_112_030_2 = AmBy*r_112_020_2 + r_122_020_2;
            double r_121_030_2 = AmBy*r_121_020_2 + r_131_020_2;
            double r_211_030_2 = AmBy*r_211_020_2 + r_221_020_2;
            double b_003_1 = AmBz*b_002_1 + r_001_002_1;
            double r_100_003_1 = AmBz*r_100_002_1 + r_101_002_1;
            double r_010_003_1 = AmBz*r_010_002_1 + r_011_002_1;
            double r_001_003_1 = AmBz*r_001_002_1 + r_002_002_1;
            double r_200_003_1 = AmBz*r_200_002_1 + r_201_002_1;
            double r_020_003_1 = AmBz*r_020_002_1 + r_021_002_1;
            double r_002_003_1 = AmBz*r_002_002_1 + r_003_002_1;
            double r_110_003_1 = AmBz*r_110_002_1 + r_111_002_1;
            double r_101_003_1 = AmBz*r_101_002_1 + r_102_002_1;
            double r_011_003_1 = AmBz*r_011_002_1 + r_012_002_1;
            double b_003_2 = AmBz*b_002_2 + r_001_002_2;
            double r_100_003_2 = AmBz*r_100_002_2 + r_101_002_2;
            double r_010_003_2 = AmBz*r_010_002_2 + r_011_002_2;
            double r_001_003_2 = AmBz*r_001_002_2 + r_002_002_2;
            double r_200_003_2 = AmBz*r_200_002_2 + r_201_002_2;
            double r_020_003_2 = AmBz*r_020_002_2 + r_021_002_2;
            double r_002_003_2 = AmBz*r_002_002_2 + r_003_002_2;
            double r_110_003_2 = AmBz*r_110_002_2 + r_111_002_2;
            double r_101_003_2 = AmBz*r_101_002_2 + r_102_002_2;
            double r_011_003_2 = AmBz*r_011_002_2 + r_012_002_2;
            double r_300_003_2 = AmBz*r_300_002_2 + r_301_002_2;
            double r_030_003_2 = AmBz*r_030_002_2 + r_031_002_2;
            double r_003_003_2 = AmBz*r_003_002_2 + r_004_002_2;
            double r_120_003_2 = AmBz*r_120_002_2 + r_121_002_2;
            double r_102_003_2 = AmBz*r_102_002_2 + r_103_002_2;
            double r_210_003_2 = AmBz*r_210_002_2 + r_211_002_2;
            double r_012_003_2 = AmBz*r_012_002_2 + r_013_002_2;
            double r_201_003_2 = AmBz*r_201_002_2 + r_202_002_2;
            double r_021_003_2 = AmBz*r_021_002_2 + r_022_002_2;
            double r_111_003_2 = AmBz*r_111_002_2 + r_112_002_2;
            double r_004_003_2 = AmBz*r_004_002_2 + r_005_002_2;
            double r_301_003_2 = AmBz*r_301_002_2 + r_302_002_2;
            double r_103_003_2 = AmBz*r_103_002_2 + r_104_002_2;
            double r_031_003_2 = AmBz*r_031_002_2 + r_032_002_2;
            double r_013_003_2 = AmBz*r_013_002_2 + r_014_002_2;
            double r_220_003_2 = AmBz*r_220_002_2 + r_221_002_2;
            double r_202_003_2 = AmBz*r_202_002_2 + r_203_002_2;
            double r_022_003_2 = AmBz*r_022_002_2 + r_023_002_2;
            double r_112_003_2 = AmBz*r_112_002_2 + r_113_002_2;
            double r_121_003_2 = AmBz*r_121_002_2 + r_122_002_2;
            double r_211_003_2 = AmBz*r_211_002_2 + r_212_002_2;
            double b_120_1 = AmBx*b_020_1 + r_100_020_1;
            double r_100_120_1 = AmBx*r_100_020_1 + r_200_020_1;
            double r_001_120_1 = AmBx*r_001_020_1 + r_101_020_1;
            double r_101_120_1 = AmBx*r_101_020_1 + r_201_020_1;
            double b_102_1 = AmBx*b_002_1 + r_100_002_1;
            double r_100_102_1 = AmBx*r_100_002_1 + r_200_002_1;
            double r_010_102_1 = AmBx*r_010_002_1 + r_110_002_1;
            double r_110_102_1 = AmBx*r_110_002_1 + r_210_002_1;
            double b_012_1 = AmBy*b_002_1 + r_010_002_1;
            double r_100_012_1 = AmBy*r_100_002_1 + r_110_002_1;
            double r_010_012_1 = AmBy*r_010_002_1 + r_020_002_1;
            double r_110_012_1 = AmBy*r_110_002_1 + r_120_002_1;
            double b_400_1 = AmBx*b_300_1 + r_100_300_1;
            double r_100_400_1 = AmBx*r_100_300_1 + r_200_300_1;
            double r_010_400_1 = AmBx*r_010_300_1 + r_110_300_1;
            double r_001_400_1 = AmBx*r_001_300_1 + r_101_300_1;
            double b_400_2 = AmBx*b_300_2 + r_100_300_2;
            double r_100_400_2 = AmBx*r_100_300_2 + r_200_300_2;
            double r_010_400_2 = AmBx*r_010_300_2 + r_110_300_2;
            double r_001_400_2 = AmBx*r_001_300_2 + r_101_300_2;
            double r_200_400_2 = AmBx*r_200_300_2 + r_300_300_2;
            double r_020_400_2 = AmBx*r_020_300_2 + r_120_300_2;
            double r_002_400_2 = AmBx*r_002_300_2 + r_102_300_2;
            double r_110_400_2 = AmBx*r_110_300_2 + r_210_300_2;
            double r_101_400_2 = AmBx*r_101_300_2 + r_201_300_2;
            double r_011_400_2 = AmBx*r_011_300_2 + r_111_300_2;
            double r_300_400_2 = AmBx*r_300_300_2 + r_400_300_2;
            double r_030_400_2 = AmBx*r_030_300_2 + r_130_300_2;
            double r_003_400_2 = AmBx*r_003_300_2 + r_103_300_2;
            double r_120_400_2 = AmBx*r_120_300_2 + r_220_300_2;
            double r_102_400_2 = AmBx*r_102_300_2 + r_202_300_2;
            double r_210_400_2 = AmBx*r_210_300_2 + r_310_300_2;
            double r_012_400_2 = AmBx*r_012_300_2 + r_112_300_2;
            double r_201_400_2 = AmBx*r_201_300_2 + r_301_300_2;
            double r_021_400_2 = AmBx*r_021_300_2 + r_121_300_2;
            double r_111_400_2 = AmBx*r_111_300_2 + r_211_300_2;
            double b_040_1 = AmBy*b_030_1 + r_010_030_1;
            double r_100_040_1 = AmBy*r_100_030_1 + r_110_030_1;
            double r_010_040_1 = AmBy*r_010_030_1 + r_020_030_1;
            double r_001_040_1 = AmBy*r_001_030_1 + r_011_030_1;
            double b_040_2 = AmBy*b_030_2 + r_010_030_2;
            double r_100_040_2 = AmBy*r_100_030_2 + r_110_030_2;
            double r_010_040_2 = AmBy*r_010_030_2 + r_020_030_2;
            double r_001_040_2 = AmBy*r_001_030_2 + r_011_030_2;
            double r_200_040_2 = AmBy*r_200_030_2 + r_210_030_2;
            double r_020_040_2 = AmBy*r_020_030_2 + r_030_030_2;
            double r_002_040_2 = AmBy*r_002_030_2 + r_012_030_2;
            double r_110_040_2 = AmBy*r_110_030_2 + r_120_030_2;
            double r_101_040_2 = AmBy*r_101_030_2 + r_111_030_2;
            double r_011_040_2 = AmBy*r_011_030_2 + r_021_030_2;
            double r_300_040_2 = AmBy*r_300_030_2 + r_310_030_2;
            double r_030_040_2 = AmBy*r_030_030_2 + r_040_030_2;
            double r_003_040_2 = AmBy*r_003_030_2 + r_013_030_2;
            double r_120_040_2 = AmBy*r_120_030_2 + r_130_030_2;
            double r_102_040_2 = AmBy*r_102_030_2 + r_112_030_2;
            double r_210_040_2 = AmBy*r_210_030_2 + r_220_030_2;
            double r_012_040_2 = AmBy*r_012_030_2 + r_022_030_2;
            double r_201_040_2 = AmBy*r_201_030_2 + r_211_030_2;
            double r_021_040_2 = AmBy*r_021_030_2 + r_031_030_2;
            double r_111_040_2 = AmBy*r_111_030_2 + r_121_030_2;
            double b_004_1 = AmBz*b_003_1 + r_001_003_1;
            double r_100_004_1 = AmBz*r_100_003_1 + r_101_003_1;
            double r_010_004_1 = AmBz*r_010_003_1 + r_011_003_1;
            double r_001_004_1 = AmBz*r_001_003_1 + r_002_003_1;
            double b_004_2 = AmBz*b_003_2 + r_001_003_2;
            double r_100_004_2 = AmBz*r_100_003_2 + r_101_003_2;
            double r_010_004_2 = AmBz*r_010_003_2 + r_011_003_2;
            double r_001_004_2 = AmBz*r_001_003_2 + r_002_003_2;
            double r_200_004_2 = AmBz*r_200_003_2 + r_201_003_2;
            double r_020_004_2 = AmBz*r_020_003_2 + r_021_003_2;
            double r_002_004_2 = AmBz*r_002_003_2 + r_003_003_2;
            double r_110_004_2 = AmBz*r_110_003_2 + r_111_003_2;
            double r_101_004_2 = AmBz*r_101_003_2 + r_102_003_2;
            double r_011_004_2 = AmBz*r_011_003_2 + r_012_003_2;
            double r_300_004_2 = AmBz*r_300_003_2 + r_301_003_2;
            double r_030_004_2 = AmBz*r_030_003_2 + r_031_003_2;
            double r_003_004_2 = AmBz*r_003_003_2 + r_004_003_2;
            double r_120_004_2 = AmBz*r_120_003_2 + r_121_003_2;
            double r_102_004_2 = AmBz*r_102_003_2 + r_103_003_2;
            double r_210_004_2 = AmBz*r_210_003_2 + r_211_003_2;
            double r_012_004_2 = AmBz*r_012_003_2 + r_013_003_2;
            double r_201_004_2 = AmBz*r_201_003_2 + r_202_003_2;
            double r_021_004_2 = AmBz*r_021_003_2 + r_022_003_2;
            double r_111_004_2 = AmBz*r_111_003_2 + r_112_003_2;
            double b_310_1 = AmBy*b_300_1 + r_010_300_1;
            double r_010_310_1 = AmBy*r_010_300_1 + r_020_300_1;
            double r_001_310_1 = AmBy*r_001_300_1 + r_011_300_1;
            double b_310_2 = AmBy*b_300_2 + r_010_300_2;
            double r_010_310_2 = AmBy*r_010_300_2 + r_020_300_2;
            double r_001_310_2 = AmBy*r_001_300_2 + r_011_300_2;
            double r_020_310_2 = AmBy*r_020_300_2 + r_030_300_2;
            double r_011_310_2 = AmBy*r_011_300_2 + r_021_300_2;
            double r_021_310_2 = AmBy*r_021_300_2 + r_031_300_2;
            double b_130_1 = AmBx*b_030_1 + r_100_030_1;
            double r_100_130_1 = AmBx*r_100_030_1 + r_200_030_1;
            double r_001_130_1 = AmBx*r_001_030_1 + r_101_030_1;
            double b_301_1 = AmBz*b_300_1 + r_001_300_1;
            double r_001_301_1 = AmBz*r_001_300_1 + r_002_300_1;
            double b_301_2 = AmBz*b_300_2 + r_001_300_2;
            double r_010_301_2 = AmBz*r_010_300_2 + r_011_300_2;
            double r_001_301_2 = AmBz*r_001_300_2 + r_002_300_2;
            double r_020_301_2 = AmBz*r_020_300_2 + r_021_300_2;
            double r_002_301_2 = AmBz*r_002_300_2 + r_003_300_2;
            double r_011_301_2 = AmBz*r_011_300_2 + r_012_300_2;
            double r_012_301_2 = AmBz*r_012_300_2 + r_013_300_2;
            double r_021_301_2 = AmBz*r_021_300_2 + r_022_300_2;
            double b_103_1 = AmBx*b_003_1 + r_100_003_1;
            double r_100_103_1 = AmBx*r_100_003_1 + r_200_003_1;
            double r_010_103_1 = AmBx*r_010_003_1 + r_110_003_1;
            double b_031_1 = AmBz*b_030_1 + r_001_030_1;
            double r_001_031_1 = AmBz*r_001_030_1 + r_002_030_1;
            double b_031_2 = AmBz*b_030_2 + r_001_030_2;
            double r_100_031_2 = AmBz*r_100_030_2 + r_101_030_2;
            double r_001_031_2 = AmBz*r_001_030_2 + r_002_030_2;
            double r_200_031_2 = AmBz*r_200_030_2 + r_201_030_2;
            double r_002_031_2 = AmBz*r_002_030_2 + r_003_030_2;
            double r_101_031_2 = AmBz*r_101_030_2 + r_102_030_2;
            double r_102_031_2 = AmBz*r_102_030_2 + r_103_030_2;
            double r_201_031_2 = AmBz*r_201_030_2 + r_202_030_2;
            double b_013_1 = AmBy*b_003_1 + r_010_003_1;
            double r_010_013_1 = AmBy*r_010_003_1 + r_020_003_1;
            double b_013_2 = AmBy*b_003_2 + r_010_003_2;
            double r_100_013_2 = AmBy*r_100_003_2 + r_110_003_2;
            double r_010_013_2 = AmBy*r_010_003_2 + r_020_003_2;
            double r_200_013_2 = AmBy*r_200_003_2 + r_210_003_2;
            double r_110_013_2 = AmBy*r_110_003_2 + r_120_003_2;
            double r_210_013_2 = AmBy*r_210_003_2 + r_220_003_2;
            double b_220_1 = AmBx*b_120_1 + r_100_120_1;
            double r_001_220_1 = AmBx*r_001_120_1 + r_101_120_1;
            double b_202_1 = AmBx*b_102_1 + r_100_102_1;
            double r_010_202_1 = AmBx*r_010_102_1 + r_110_102_1;
            double b_022_1 = AmBy*b_012_1 + r_010_012_1;
            double r_100_022_1 = AmBy*r_100_012_1 + r_110_012_1;
            double b_500_1 = AmBx*b_400_1 + r_100_400_1;
            double b_500_2 = AmBx*b_400_2 + r_100_400_2;
            double r_100_500_2 = AmBx*r_100_400_2 + r_200_400_2;
            double r_010_500_2 = AmBx*r_010_400_2 + r_110_400_2;
            double r_001_500_2 = AmBx*r_001_400_2 + r_101_400_2;
            double r_200_500_2 = AmBx*r_200_400_2 + r_300_400_2;
            double r_020_500_2 = AmBx*r_020_400_2 + r_120_400_2;
            double r_002_500_2 = AmBx*r_002_400_2 + r_102_400_2;
            double r_110_500_2 = AmBx*r_110_400_2 + r_210_400_2;
            double r_101_500_2 = AmBx*r_101_400_2 + r_201_400_2;
            double r_011_500_2 = AmBx*r_011_400_2 + r_111_400_2;
            double b_050_1 = AmBy*b_040_1 + r_010_040_1;
            double b_050_2 = AmBy*b_040_2 + r_010_040_2;
            double r_100_050_2 = AmBy*r_100_040_2 + r_110_040_2;
            double r_010_050_2 = AmBy*r_010_040_2 + r_020_040_2;
            double r_001_050_2 = AmBy*r_001_040_2 + r_011_040_2;
            double r_200_050_2 = AmBy*r_200_040_2 + r_210_040_2;
            double r_020_050_2 = AmBy*r_020_040_2 + r_030_040_2;
            double r_002_050_2 = AmBy*r_002_040_2 + r_012_040_2;
            double r_110_050_2 = AmBy*r_110_040_2 + r_120_040_2;
            double r_101_050_2 = AmBy*r_101_040_2 + r_111_040_2;
            double r_011_050_2 = AmBy*r_011_040_2 + r_021_040_2;
            double b_005_1 = AmBz*b_004_1 + r_001_004_1;
            double b_005_2 = AmBz*b_004_2 + r_001_004_2;
            double r_100_005_2 = AmBz*r_100_004_2 + r_101_004_2;
            double r_010_005_2 = AmBz*r_010_004_2 + r_011_004_2;
            double r_001_005_2 = AmBz*r_001_004_2 + r_002_004_2;
            double r_200_005_2 = AmBz*r_200_004_2 + r_201_004_2;
            double r_020_005_2 = AmBz*r_020_004_2 + r_021_004_2;
            double r_002_005_2 = AmBz*r_002_004_2 + r_003_004_2;
            double r_110_005_2 = AmBz*r_110_004_2 + r_111_004_2;
            double r_101_005_2 = AmBz*r_101_004_2 + r_102_004_2;
            double r_011_005_2 = AmBz*r_011_004_2 + r_012_004_2;
            double b_140_1 = AmBx*b_040_1 + r_100_040_1;
            double b_140_2 = AmBx*b_040_2 + r_100_040_2;
            double r_100_140_2 = AmBx*r_100_040_2 + r_200_040_2;
            double r_001_140_2 = AmBx*r_001_040_2 + r_101_040_2;
            double r_200_140_2 = AmBx*r_200_040_2 + r_300_040_2;
            double r_101_140_2 = AmBx*r_101_040_2 + r_201_040_2;
            double b_104_1 = AmBx*b_004_1 + r_100_004_1;
            double b_104_2 = AmBx*b_004_2 + r_100_004_2;
            double r_100_104_2 = AmBx*r_100_004_2 + r_200_004_2;
            double r_010_104_2 = AmBx*r_010_004_2 + r_110_004_2;
            double r_200_104_2 = AmBx*r_200_004_2 + r_300_004_2;
            double r_110_104_2 = AmBx*r_110_004_2 + r_210_004_2;
            double b_410_1 = AmBy*b_400_1 + r_010_400_1;
            double b_410_2 = AmBy*b_400_2 + r_010_400_2;
            double r_010_410_2 = AmBy*r_010_400_2 + r_020_400_2;
            double r_001_410_2 = AmBy*r_001_400_2 + r_011_400_2;
            double r_020_410_2 = AmBy*r_020_400_2 + r_030_400_2;
            double r_011_410_2 = AmBy*r_011_400_2 + r_021_400_2;
            double b_014_1 = AmBy*b_004_1 + r_010_004_1;
            double b_014_2 = AmBy*b_004_2 + r_010_004_2;
            double r_100_014_2 = AmBy*r_100_004_2 + r_110_004_2;
            double r_010_014_2 = AmBy*r_010_004_2 + r_020_004_2;
            double r_020_014_2 = AmBy*r_020_004_2 + r_030_004_2;
            double r_110_014_2 = AmBy*r_110_004_2 + r_120_004_2;
            double b_401_1 = AmBz*b_400_1 + r_001_400_1;
            double b_401_2 = AmBz*b_400_2 + r_001_400_2;
            double r_010_401_2 = AmBz*r_010_400_2 + r_011_400_2;
            double r_001_401_2 = AmBz*r_001_400_2 + r_002_400_2;
            double r_002_401_2 = AmBz*r_002_400_2 + r_003_400_2;
            double r_011_401_2 = AmBz*r_011_400_2 + r_012_400_2;
            double b_041_1 = AmBz*b_040_1 + r_001_040_1;
            double b_041_2 = AmBz*b_040_2 + r_001_040_2;
            double r_100_041_2 = AmBz*r_100_040_2 + r_101_040_2;
            double r_001_041_2 = AmBz*r_001_040_2 + r_002_040_2;
            double r_002_041_2 = AmBz*r_002_040_2 + r_003_040_2;
            double r_101_041_2 = AmBz*r_101_040_2 + r_102_040_2;
            double b_320_1 = AmBy*b_310_1 + r_010_310_1;
            double b_320_2 = AmBy*b_310_2 + r_010_310_2;
            double r_010_320_2 = AmBy*r_010_310_2 + r_020_310_2;
            double r_001_320_2 = AmBy*r_001_310_2 + r_011_310_2;
            double r_011_320_2 = AmBy*r_011_310_2 + r_021_310_2;
            double b_302_1 = AmBz*b_301_1 + r_001_301_1;
            double b_302_2 = AmBz*b_301_2 + r_001_301_2;
            double r_010_302_2 = AmBz*r_010_301_2 + r_011_301_2;
            double r_001_302_2 = AmBz*r_001_301_2 + r_002_301_2;
            double r_020_302_2 = AmBz*r_020_301_2 + r_021_301_2;
            double r_011_302_2 = AmBz*r_011_301_2 + r_012_301_2;
            double b_230_1 = AmBx*b_130_1 + r_100_130_1;
            double b_032_1 = AmBz*b_031_1 + r_001_031_1;
            double b_032_2 = AmBz*b_031_2 + r_001_031_2;
            double r_100_032_2 = AmBz*r_100_031_2 + r_101_031_2;
            double r_001_032_2 = AmBz*r_001_031_2 + r_002_031_2;
            double r_200_032_2 = AmBz*r_200_031_2 + r_201_031_2;
            double r_101_032_2 = AmBz*r_101_031_2 + r_102_031_2;
            double b_203_1 = AmBx*b_103_1 + r_100_103_1;
            double b_023_1 = AmBy*b_013_1 + r_010_013_1;
            double b_023_2 = AmBy*b_013_2 + r_010_013_2;
            double r_100_023_2 = AmBy*r_100_013_2 + r_110_013_2;
            double r_200_023_2 = AmBy*r_200_013_2 + r_210_013_2;
            double b_311_1 = AmBz*b_310_1 + r_001_310_1;
            double b_131_1 = AmBz*b_130_1 + r_001_130_1;
            double b_113_1 = AmBy*b_103_1 + r_010_103_1;
            double b_122_1 = AmBx*b_022_1 + r_100_022_1;
            double b_212_1 = AmBy*b_202_1 + r_010_202_1;
            double b_221_1 = AmBz*b_220_1 + r_001_220_1;
            double b_600_2 = AmBx*b_500_2 + r_100_500_2;
            double r_100_600_2 = AmBx*r_100_500_2 + r_200_500_2;
            double r_010_600_2 = AmBx*r_010_500_2 + r_110_500_2;
            double r_001_600_2 = AmBx*r_001_500_2 + r_101_500_2;
            double b_060_2 = AmBy*b_050_2 + r_010_050_2;
            double r_100_060_2 = AmBy*r_100_050_2 + r_110_050_2;
            double r_010_060_2 = AmBy*r_010_050_2 + r_020_050_2;
            double r_001_060_2 = AmBy*r_001_050_2 + r_011_050_2;
            double b_006_2 = AmBz*b_005_2 + r_001_005_2;
            double r_100_006_2 = AmBz*r_100_005_2 + r_101_005_2;
            double r_010_006_2 = AmBz*r_010_005_2 + r_011_005_2;
            double r_001_006_2 = AmBz*r_001_005_2 + r_002_005_2;
            double b_510_2 = AmBy*b_500_2 + r_010_500_2;
            double r_010_510_2 = AmBy*r_010_500_2 + r_020_500_2;
            double r_001_510_2 = AmBy*r_001_500_2 + r_011_500_2;
            double b_150_2 = AmBx*b_050_2 + r_100_050_2;
            double r_100_150_2 = AmBx*r_100_050_2 + r_200_050_2;
            double r_001_150_2 = AmBx*r_001_050_2 + r_101_050_2;
            double b_501_2 = AmBz*b_500_2 + r_001_500_2;
            double r_001_501_2 = AmBz*r_001_500_2 + r_002_500_2;
            double b_105_2 = AmBx*b_005_2 + r_100_005_2;
            double r_100_105_2 = AmBx*r_100_005_2 + r_200_005_2;
            double r_010_105_2 = AmBx*r_010_005_2 + r_110_005_2;
            double b_051_2 = AmBz*b_050_2 + r_001_050_2;
            double r_001_051_2 = AmBz*r_001_050_2 + r_002_050_2;
            double b_015_2 = AmBy*b_005_2 + r_010_005_2;
            double r_010_015_2 = AmBy*r_010_005_2 + r_020_005_2;
            double b_420_2 = AmBy*b_410_2 + r_010_410_2;
            double r_010_420_2 = AmBy*r_010_410_2 + r_020_410_2;
            double r_001_420_2 = AmBy*r_001_410_2 + r_011_410_2;
            double b_402_2 = AmBz*b_401_2 + r_001_401_2;
            double r_010_402_2 = AmBz*r_010_401_2 + r_011_401_2;
            double r_001_402_2 = AmBz*r_001_401_2 + r_002_401_2;
            double b_240_2 = AmBx*b_140_2 + r_100_140_2;
            double r_100_240_2 = AmBx*r_100_140_2 + r_200_140_2;
            double r_001_240_2 = AmBx*r_001_140_2 + r_101_140_2;
            double b_204_2 = AmBx*b_104_2 + r_100_104_2;
            double r_100_204_2 = AmBx*r_100_104_2 + r_200_104_2;
            double r_010_204_2 = AmBx*r_010_104_2 + r_110_104_2;
            double b_042_2 = AmBz*b_041_2 + r_001_041_2;
            double r_100_042_2 = AmBz*r_100_041_2 + r_101_041_2;
            double r_001_042_2 = AmBz*r_001_041_2 + r_002_041_2;
            double b_024_2 = AmBy*b_014_2 + r_010_014_2;
            double r_100_024_2 = AmBy*r_100_014_2 + r_110_014_2;
            double r_010_024_2 = AmBy*r_010_014_2 + r_020_014_2;
            double b_330_2 = AmBy*b_320_2 + r_010_320_2;
            double r_001_330_2 = AmBy*r_001_320_2 + r_011_320_2;
            double b_303_2 = AmBz*b_302_2 + r_001_302_2;
            double r_010_303_2 = AmBz*r_010_302_2 + r_011_302_2;
            double b_033_2 = AmBz*b_032_2 + r_001_032_2;
            double r_100_033_2 = AmBz*r_100_032_2 + r_101_032_2;
            double b_312_2 = AmBy*b_302_2 + r_010_302_2;
            double r_010_312_2 = AmBy*r_010_302_2 + r_020_302_2;
            double b_132_2 = AmBx*b_032_2 + r_100_032_2;
            double r_100_132_2 = AmBx*r_100_032_2 + r_200_032_2;
            double b_123_2 = AmBx*b_023_2 + r_100_023_2;
            double r_100_123_2 = AmBx*r_100_023_2 + r_200_023_2;
            double b_700_2 = AmBx*b_600_2 + r_100_600_2;
            double b_070_2 = AmBy*b_060_2 + r_010_060_2;
            double b_007_2 = AmBz*b_006_2 + r_001_006_2;
            double b_160_2 = AmBx*b_060_2 + r_100_060_2;
            double b_106_2 = AmBx*b_006_2 + r_100_006_2;
            double b_610_2 = AmBy*b_600_2 + r_010_600_2;
            double b_016_2 = AmBy*b_006_2 + r_010_006_2;
            double b_601_2 = AmBz*b_600_2 + r_001_600_2;
            double b_061_2 = AmBz*b_060_2 + r_001_060_2;
            double b_520_2 = AmBy*b_510_2 + r_010_510_2;
            double b_502_2 = AmBz*b_501_2 + r_001_501_2;
            double b_250_2 = AmBx*b_150_2 + r_100_150_2;
            double b_052_2 = AmBz*b_051_2 + r_001_051_2;
            double b_205_2 = AmBx*b_105_2 + r_100_105_2;
            double b_025_2 = AmBy*b_015_2 + r_010_015_2;
            double b_340_2 = AmBx*b_240_2 + r_100_240_2;
            double b_304_2 = AmBx*b_204_2 + r_100_204_2;
            double b_430_2 = AmBy*b_420_2 + r_010_420_2;
            double b_034_2 = AmBy*b_024_2 + r_010_024_2;
            double b_403_2 = AmBz*b_402_2 + r_001_402_2;
            double b_043_2 = AmBz*b_042_2 + r_001_042_2;
            double b_511_2 = AmBz*b_510_2 + r_001_510_2;
            double b_151_2 = AmBz*b_150_2 + r_001_150_2;
            double b_115_2 = AmBy*b_105_2 + r_010_105_2;
            double b_142_2 = AmBx*b_042_2 + r_100_042_2;
            double b_124_2 = AmBx*b_024_2 + r_100_024_2;
            double b_412_2 = AmBy*b_402_2 + r_010_402_2;
            double b_214_2 = AmBy*b_204_2 + r_010_204_2;
            double b_421_2 = AmBz*b_420_2 + r_001_420_2;
            double b_241_2 = AmBz*b_240_2 + r_001_240_2;
            double b_331_2 = AmBz*b_330_2 + r_001_330_2;
            double b_313_2 = AmBy*b_303_2 + r_010_303_2;
            double b_133_2 = AmBx*b_033_2 + r_100_033_2;
            double b_322_2 = AmBy*b_312_2 + r_010_312_2;
            double b_232_2 = AmBx*b_132_2 + r_100_132_2;
            double b_223_2 = AmBx*b_123_2 + r_100_123_2;
            double b_500_L1 = 13*b_500_1 - b_502_2 - b_520_2 - b_700_2;
            double b_050_L1 = 13*b_050_1 - b_052_2 - b_070_2 - b_250_2;
            double b_005_L1 = 13*b_005_1 - b_007_2 - b_025_2 - b_205_2;
            double b_140_L1 = 13*b_140_1 - b_142_2 - b_160_2 - b_340_2;
            double b_104_L1 = 13*b_104_1 - b_106_2 - b_124_2 - b_304_2;
            double b_410_L1 = 13*b_410_1 - b_412_2 - b_430_2 - b_610_2;
            double b_014_L1 = 13*b_014_1 - b_016_2 - b_034_2 - b_214_2;
            double b_401_L1 = 13*b_401_1 - b_403_2 - b_421_2 - b_601_2;
            double b_041_L1 = 13*b_041_1 - b_043_2 - b_061_2 - b_241_2;
            double b_320_L1 = 13*b_320_1 - b_322_2 - b_340_2 - b_520_2;
            double b_302_L1 = 13*b_302_1 - b_304_2 - b_322_2 - b_502_2;
            double b_230_L1 = 13*b_230_1 - b_232_2 - b_250_2 - b_430_2;
            double b_032_L1 = 13*b_032_1 - b_034_2 - b_052_2 - b_232_2;
            double b_203_L1 = 13*b_203_1 - b_205_2 - b_223_2 - b_403_2;
            double b_023_L1 = 13*b_023_1 - b_025_2 - b_043_2 - b_223_2;
            double b_311_L1 = 13*b_311_1 - b_313_2 - b_331_2 - b_511_2;
            double b_131_L1 = 13*b_131_1 - b_133_2 - b_151_2 - b_331_2;
            double b_113_L1 = 13*b_113_1 - b_115_2 - b_133_2 - b_313_2;
            double b_122_L1 = 13*b_122_1 - b_124_2 - b_142_2 - b_322_2;
            double b_212_L1 = 13*b_212_1 - b_214_2 - b_232_2 - b_412_2;
            double b_221_L1 = 13*b_221_1 - b_223_2 - b_241_2 - b_421_2;
            // 42.57 steps per component, 6.98 kb stack
            pOut_[sb*0] = b_104_L1*sd8 - b_122_L1*sd19 + b_140_L1*sd17 - b_302_L1*sd19 + b_320_L1*sd18 + b_500_L1*sd17;
            pOut_[sb*10] = b_113_L1*sd2a - b_131_L1*sd1b - b_311_L1*sd1b;
            pOut_[sb*1] = b_014_L1*sd8 - b_032_L1*sd19 + b_050_L1*sd17 - b_212_L1*sd19 + b_230_L1*sd18 + b_410_L1*sd17;
            pOut_[sb*2] = -b_023_L1*sd1b + b_041_L1*sd1a + b_203_L1*sd1b - b_401_L1*sd1a;
            pOut_[sb*3] = -b_122_L1*sd20 + b_140_L1*sd1f + b_302_L1*sd1e + b_320_L1*sd1d - b_500_L1*sd1c;
            pOut_[sb*4] = -b_131_L1*sd21 + b_311_L1*sd21;
            pOut_[sb*5] = -b_032_L1*sd1e + b_050_L1*sd1c + b_212_L1*sd20 - b_230_L1*sd1d - b_410_L1*sd1f;
            pOut_[sb*6] = b_041_L1*sd22 - b_221_L1*sd23 + b_401_L1*sd22;
            pOut_[sb*7] = b_050_L1*sd26 - b_230_L1*sd25 + b_410_L1*sd24;
            pOut_[sb*8] = b_005_L1 - b_023_L1*sd29 + b_041_L1*sd27 - b_203_L1*sd29 + b_221_L1*sd28 + b_401_L1*sd27;
            pOut_[sb*9] = b_140_L1*sd24 - b_320_L1*sd25 + b_500_L1*sd26;
         }
         return;
      }
      case 6: {
         for (size_t ia = 0; ia < nCount; ++ ia) {
            double const * pAx1 = p2Z + 84 * ia;
            double const * pAx2 = p4Z + 165 * ia;
            double * pOut_ = pOut + sa * ia;
            //IR_PREFETCH_W(&pOut_[sb*0]);
            //IR_PREFETCH_W(&pOut_[sb*1]);
            //IR_PREFETCH_W(&pOut_[sb*2]);
            //IR_PREFETCH_W(&pOut_[sb*3]);
            //IR_PREFETCH_W(&pOut_[sb*4]);
            //IR_PREFETCH_W(&pOut_[sb*5]);
            //IR_PREFETCH_W(&pOut_[sb*6]);
            //IR_PREFETCH_W(&pOut_[sb*7]);
            //IR_PREFETCH_W(&pOut_[sb*8]);
            //IR_PREFETCH_W(&pOut_[sb*9]);
            //IR_PREFETCH_W(&pOut_[sb*10]);
            //IR_PREFETCH_W(&pOut_[sb*11]);
            //IR_PREFETCH_W(&pOut_[sb*12]);
            double b_100_1 = AmBx*pAx1[0] + pAx1[1];
            double r_100_100_1 = AmBx*pAx1[1] + pAx1[4];
            double r_010_100_1 = AmBx*pAx1[2] + pAx1[7];
            double r_001_100_1 = AmBx*pAx1[3] + pAx1[8];
            double r_200_100_1 = AmBx*pAx1[4] + pAx1[10];
            double r_020_100_1 = AmBx*pAx1[5] + pAx1[13];
            double r_002_100_1 = AmBx*pAx1[6] + pAx1[14];
            double r_110_100_1 = AmBx*pAx1[7] + pAx1[15];
            double r_101_100_1 = AmBx*pAx1[8] + pAx1[17];
            double r_011_100_1 = AmBx*pAx1[9] + pAx1[19];
            double r_300_100_1 = AmBx*pAx1[10] + pAx1[20];
            double r_030_100_1 = AmBx*pAx1[11] + pAx1[24];
            double r_003_100_1 = AmBx*pAx1[12] + pAx1[26];
            double r_120_100_1 = AmBx*pAx1[13] + pAx1[29];
            double r_102_100_1 = AmBx*pAx1[14] + pAx1[30];
            double r_210_100_1 = AmBx*pAx1[15] + pAx1[23];
            double r_012_100_1 = AmBx*pAx1[16] + pAx1[32];
            double r_201_100_1 = AmBx*pAx1[17] + pAx1[25];
            double r_021_100_1 = AmBx*pAx1[18] + pAx1[33];
            double r_111_100_1 = AmBx*pAx1[19] + pAx1[34];
            double r_400_100_1 = AmBx*pAx1[20] + pAx1[35];
            double r_310_100_1 = AmBx*pAx1[23] + pAx1[40];
            double r_130_100_1 = AmBx*pAx1[24] + pAx1[46];
            double r_301_100_1 = AmBx*pAx1[25] + pAx1[42];
            double r_103_100_1 = AmBx*pAx1[26] + pAx1[48];
            double r_220_100_1 = AmBx*pAx1[29] + pAx1[44];
            double r_202_100_1 = AmBx*pAx1[30] + pAx1[45];
            double r_112_100_1 = AmBx*pAx1[32] + pAx1[54];
            double r_121_100_1 = AmBx*pAx1[33] + pAx1[55];
            double r_211_100_1 = AmBx*pAx1[34] + pAx1[50];
            double r_500_100_1 = AmBx*pAx1[35] + pAx1[56];
            double r_410_100_1 = AmBx*pAx1[40] + pAx1[59];
            double r_401_100_1 = AmBx*pAx1[42] + pAx1[61];
            double r_320_100_1 = AmBx*pAx1[44] + pAx1[65];
            double r_302_100_1 = AmBx*pAx1[45] + pAx1[66];
            double r_230_100_1 = AmBx*pAx1[46] + pAx1[71];
            double r_203_100_1 = AmBx*pAx1[48] + pAx1[72];
            double r_311_100_1 = AmBx*pAx1[50] + pAx1[76];
            double r_212_100_1 = AmBx*pAx1[54] + pAx1[77];
            double r_221_100_1 = AmBx*pAx1[55] + pAx1[79];
            double b_100_2 = AmBx*pAx2[0] + pAx2[1];
            double r_100_100_2 = AmBx*pAx2[1] + pAx2[4];
            double r_010_100_2 = AmBx*pAx2[2] + pAx2[7];
            double r_001_100_2 = AmBx*pAx2[3] + pAx2[8];
            double r_200_100_2 = AmBx*pAx2[4] + pAx2[10];
            double r_020_100_2 = AmBx*pAx2[5] + pAx2[13];
            double r_002_100_2 = AmBx*pAx2[6] + pAx2[14];
            double r_110_100_2 = AmBx*pAx2[7] + pAx2[15];
            double r_101_100_2 = AmBx*pAx2[8] + pAx2[17];
            double r_011_100_2 = AmBx*pAx2[9] + pAx2[19];
            double r_300_100_2 = AmBx*pAx2[10] + pAx2[20];
            double r_030_100_2 = AmBx*pAx2[11] + pAx2[24];
            double r_003_100_2 = AmBx*pAx2[12] + pAx2[26];
            double r_120_100_2 = AmBx*pAx2[13] + pAx2[29];
            double r_102_100_2 = AmBx*pAx2[14] + pAx2[30];
            double r_210_100_2 = AmBx*pAx2[15] + pAx2[23];
            double r_012_100_2 = AmBx*pAx2[16] + pAx2[32];
            double r_201_100_2 = AmBx*pAx2[17] + pAx2[25];
            double r_021_100_2 = AmBx*pAx2[18] + pAx2[33];
            double r_111_100_2 = AmBx*pAx2[19] + pAx2[34];
            double r_400_100_2 = AmBx*pAx2[20] + pAx2[35];
            double r_310_100_2 = AmBx*pAx2[23] + pAx2[40];
            double r_130_100_2 = AmBx*pAx2[24] + pAx2[46];
            double r_301_100_2 = AmBx*pAx2[25] + pAx2[42];
            double r_103_100_2 = AmBx*pAx2[26] + pAx2[48];
            double r_031_100_2 = AmBx*pAx2[27] + pAx2[51];
            double r_013_100_2 = AmBx*pAx2[28] + pAx2[52];
            double r_220_100_2 = AmBx*pAx2[29] + pAx2[44];
            double r_202_100_2 = AmBx*pAx2[30] + pAx2[45];
            double r_022_100_2 = AmBx*pAx2[31] + pAx2[53];
            double r_112_100_2 = AmBx*pAx2[32] + pAx2[54];
            double r_121_100_2 = AmBx*pAx2[33] + pAx2[55];
            double r_211_100_2 = AmBx*pAx2[34] + pAx2[50];
            double r_500_100_2 = AmBx*pAx2[35] + pAx2[56];
            double r_410_100_2 = AmBx*pAx2[40] + pAx2[59];
            double r_401_100_2 = AmBx*pAx2[42] + pAx2[61];
            double r_320_100_2 = AmBx*pAx2[44] + pAx2[65];
            double r_302_100_2 = AmBx*pAx2[45] + pAx2[66];
            double r_230_100_2 = AmBx*pAx2[46] + pAx2[71];
            double r_032_100_2 = AmBx*pAx2[47] + pAx2[78];
            double r_203_100_2 = AmBx*pAx2[48] + pAx2[72];
            double r_023_100_2 = AmBx*pAx2[49] + pAx2[80];
            double r_311_100_2 = AmBx*pAx2[50] + pAx2[76];
            double r_131_100_2 = AmBx*pAx2[51] + pAx2[81];
            double r_113_100_2 = AmBx*pAx2[52] + pAx2[82];
            double r_122_100_2 = AmBx*pAx2[53] + pAx2[83];
            double r_212_100_2 = AmBx*pAx2[54] + pAx2[77];
            double r_221_100_2 = AmBx*pAx2[55] + pAx2[79];
            double r_600_100_2 = AmBx*pAx2[56] + pAx2[84];
            double r_510_100_2 = AmBx*pAx2[59] + pAx2[89];
            double r_501_100_2 = AmBx*pAx2[61] + pAx2[91];
            double r_420_100_2 = AmBx*pAx2[65] + pAx2[93];
            double r_402_100_2 = AmBx*pAx2[66] + pAx2[94];
            double r_330_100_2 = AmBx*pAx2[71] + pAx2[101];
            double r_303_100_2 = AmBx*pAx2[72] + pAx2[103];
            double r_411_100_2 = AmBx*pAx2[76] + pAx2[105];
            double r_312_100_2 = AmBx*pAx2[77] + pAx2[110];
            double r_132_100_2 = AmBx*pAx2[78] + pAx2[118];
            double r_321_100_2 = AmBx*pAx2[79] + pAx2[112];
            double r_123_100_2 = AmBx*pAx2[80] + pAx2[119];
            double r_231_100_2 = AmBx*pAx2[81] + pAx2[114];
            double r_213_100_2 = AmBx*pAx2[82] + pAx2[115];
            double r_222_100_2 = AmBx*pAx2[83] + pAx2[117];
            double r_700_100_2 = AmBx*pAx2[84] + pAx2[120];
            double r_610_100_2 = AmBx*pAx2[89] + pAx2[123];
            double r_601_100_2 = AmBx*pAx2[91] + pAx2[125];
            double r_520_100_2 = AmBx*pAx2[93] + pAx2[129];
            double r_502_100_2 = AmBx*pAx2[94] + pAx2[130];
            double r_430_100_2 = AmBx*pAx2[101] + pAx2[135];
            double r_403_100_2 = AmBx*pAx2[103] + pAx2[137];
            double r_511_100_2 = AmBx*pAx2[105] + pAx2[146];
            double r_412_100_2 = AmBx*pAx2[110] + pAx2[147];
            double r_421_100_2 = AmBx*pAx2[112] + pAx2[149];
            double r_331_100_2 = AmBx*pAx2[114] + pAx2[157];
            double r_313_100_2 = AmBx*pAx2[115] + pAx2[158];
            double r_322_100_2 = AmBx*pAx2[117] + pAx2[159];
            double r_232_100_2 = AmBx*pAx2[118] + pAx2[162];
            double r_223_100_2 = AmBx*pAx2[119] + pAx2[163];
            double b_010_1 = AmBy*pAx1[0] + pAx1[2];
            double r_100_010_1 = AmBy*pAx1[1] + pAx1[7];
            double r_010_010_1 = AmBy*pAx1[2] + pAx1[5];
            double r_001_010_1 = AmBy*pAx1[3] + pAx1[9];
            double r_200_010_1 = AmBy*pAx1[4] + pAx1[15];
            double r_020_010_1 = AmBy*pAx1[5] + pAx1[11];
            double r_002_010_1 = AmBy*pAx1[6] + pAx1[16];
            double r_110_010_1 = AmBy*pAx1[7] + pAx1[13];
            double r_101_010_1 = AmBy*pAx1[8] + pAx1[19];
            double r_011_010_1 = AmBy*pAx1[9] + pAx1[18];
            double r_030_010_1 = AmBy*pAx1[11] + pAx1[21];
            double r_003_010_1 = AmBy*pAx1[12] + pAx1[28];
            double r_120_010_1 = AmBy*pAx1[13] + pAx1[24];
            double r_102_010_1 = AmBy*pAx1[14] + pAx1[32];
            double r_210_010_1 = AmBy*pAx1[15] + pAx1[29];
            double r_012_010_1 = AmBy*pAx1[16] + pAx1[31];
            double r_201_010_1 = AmBy*pAx1[17] + pAx1[34];
            double r_021_010_1 = AmBy*pAx1[18] + pAx1[27];
            double r_111_010_1 = AmBy*pAx1[19] + pAx1[33];
            double r_040_010_1 = AmBy*pAx1[21] + pAx1[36];
            double r_130_010_1 = AmBy*pAx1[24] + pAx1[38];
            double r_031_010_1 = AmBy*pAx1[27] + pAx1[43];
            double r_013_010_1 = AmBy*pAx1[28] + pAx1[49];
            double r_220_010_1 = AmBy*pAx1[29] + pAx1[46];
            double r_022_010_1 = AmBy*pAx1[31] + pAx1[47];
            double r_112_010_1 = AmBy*pAx1[32] + pAx1[53];
            double r_121_010_1 = AmBy*pAx1[33] + pAx1[51];
            double r_211_010_1 = AmBy*pAx1[34] + pAx1[55];
            double r_050_010_1 = AmBy*pAx1[36] + pAx1[57];
            double r_140_010_1 = AmBy*pAx1[38] + pAx1[60];
            double r_041_010_1 = AmBy*pAx1[43] + pAx1[63];
            double r_230_010_1 = AmBy*pAx1[46] + pAx1[67];
            double r_032_010_1 = AmBy*pAx1[47] + pAx1[69];
            double r_023_010_1 = AmBy*pAx1[49] + pAx1[73];
            double r_131_010_1 = AmBy*pAx1[51] + pAx1[75];
            double r_122_010_1 = AmBy*pAx1[53] + pAx1[78];
            double r_221_010_1 = AmBy*pAx1[55] + pAx1[81];
            double b_010_2 = AmBy*pAx2[0] + pAx2[2];
            double r_100_010_2 = AmBy*pAx2[1] + pAx2[7];
            double r_010_010_2 = AmBy*pAx2[2] + pAx2[5];
            double r_001_010_2 = AmBy*pAx2[3] + pAx2[9];
            double r_200_010_2 = AmBy*pAx2[4] + pAx2[15];
            double r_020_010_2 = AmBy*pAx2[5] + pAx2[11];
            double r_002_010_2 = AmBy*pAx2[6] + pAx2[16];
            double r_110_010_2 = AmBy*pAx2[7] + pAx2[13];
            double r_101_010_2 = AmBy*pAx2[8] + pAx2[19];
            double r_011_010_2 = AmBy*pAx2[9] + pAx2[18];
            double r_300_010_2 = AmBy*pAx2[10] + pAx2[23];
            double r_030_010_2 = AmBy*pAx2[11] + pAx2[21];
            double r_003_010_2 = AmBy*pAx2[12] + pAx2[28];
            double r_120_010_2 = AmBy*pAx2[13] + pAx2[24];
            double r_102_010_2 = AmBy*pAx2[14] + pAx2[32];
            double r_210_010_2 = AmBy*pAx2[15] + pAx2[29];
            double r_012_010_2 = AmBy*pAx2[16] + pAx2[31];
            double r_201_010_2 = AmBy*pAx2[17] + pAx2[34];
            double r_021_010_2 = AmBy*pAx2[18] + pAx2[27];
            double r_111_010_2 = AmBy*pAx2[19] + pAx2[33];
            double r_400_010_2 = AmBy*pAx2[20] + pAx2[40];
            double r_040_010_2 = AmBy*pAx2[21] + pAx2[36];
            double r_310_010_2 = AmBy*pAx2[23] + pAx2[44];
            double r_130_010_2 = AmBy*pAx2[24] + pAx2[38];
            double r_301_010_2 = AmBy*pAx2[25] + pAx2[50];
            double r_103_010_2 = AmBy*pAx2[26] + pAx2[52];
            double r_031_010_2 = AmBy*pAx2[27] + pAx2[43];
            double r_013_010_2 = AmBy*pAx2[28] + pAx2[49];
            double r_220_010_2 = AmBy*pAx2[29] + pAx2[46];
            double r_202_010_2 = AmBy*pAx2[30] + pAx2[54];
            double r_022_010_2 = AmBy*pAx2[31] + pAx2[47];
            double r_112_010_2 = AmBy*pAx2[32] + pAx2[53];
            double r_121_010_2 = AmBy*pAx2[33] + pAx2[51];
            double r_211_010_2 = AmBy*pAx2[34] + pAx2[55];
            double r_050_010_2 = AmBy*pAx2[36] + pAx2[57];
            double r_140_010_2 = AmBy*pAx2[38] + pAx2[60];
            double r_410_010_2 = AmBy*pAx2[40] + pAx2[65];
            double r_041_010_2 = AmBy*pAx2[43] + pAx2[63];
            double r_320_010_2 = AmBy*pAx2[44] + pAx2[71];
            double r_230_010_2 = AmBy*pAx2[46] + pAx2[67];
            double r_032_010_2 = AmBy*pAx2[47] + pAx2[69];
            double r_203_010_2 = AmBy*pAx2[48] + pAx2[82];
            double r_023_010_2 = AmBy*pAx2[49] + pAx2[73];
            double r_311_010_2 = AmBy*pAx2[50] + pAx2[79];
            double r_131_010_2 = AmBy*pAx2[51] + pAx2[75];
            double r_113_010_2 = AmBy*pAx2[52] + pAx2[80];
            double r_122_010_2 = AmBy*pAx2[53] + pAx2[78];
            double r_212_010_2 = AmBy*pAx2[54] + pAx2[83];
            double r_221_010_2 = AmBy*pAx2[55] + pAx2[81];
            double r_060_010_2 = AmBy*pAx2[57] + pAx2[85];
            double r_150_010_2 = AmBy*pAx2[60] + pAx2[87];
            double r_051_010_2 = AmBy*pAx2[63] + pAx2[92];
            double r_420_010_2 = AmBy*pAx2[65] + pAx2[101];
            double r_240_010_2 = AmBy*pAx2[67] + pAx2[95];
            double r_042_010_2 = AmBy*pAx2[69] + pAx2[96];
            double r_330_010_2 = AmBy*pAx2[71] + pAx2[99];
            double r_033_010_2 = AmBy*pAx2[73] + pAx2[104];
            double r_141_010_2 = AmBy*pAx2[75] + pAx2[106];
            double r_132_010_2 = AmBy*pAx2[78] + pAx2[108];
            double r_321_010_2 = AmBy*pAx2[79] + pAx2[114];
            double r_123_010_2 = AmBy*pAx2[80] + pAx2[116];
            double r_231_010_2 = AmBy*pAx2[81] + pAx2[113];
            double r_213_010_2 = AmBy*pAx2[82] + pAx2[119];
            double r_222_010_2 = AmBy*pAx2[83] + pAx2[118];
            double r_070_010_2 = AmBy*pAx2[85] + pAx2[121];
            double r_160_010_2 = AmBy*pAx2[87] + pAx2[124];
            double r_061_010_2 = AmBy*pAx2[92] + pAx2[127];
            double r_250_010_2 = AmBy*pAx2[95] + pAx2[131];
            double r_052_010_2 = AmBy*pAx2[96] + pAx2[133];
            double r_340_010_2 = AmBy*pAx2[99] + pAx2[136];
            double r_430_010_2 = AmBy*pAx2[101] + pAx2[141];
            double r_043_010_2 = AmBy*pAx2[104] + pAx2[139];
            double r_151_010_2 = AmBy*pAx2[106] + pAx2[145];
            double r_142_010_2 = AmBy*pAx2[108] + pAx2[148];
            double r_241_010_2 = AmBy*pAx2[113] + pAx2[151];
            double r_331_010_2 = AmBy*pAx2[114] + pAx2[155];
            double r_133_010_2 = AmBy*pAx2[116] + pAx2[156];
            double r_232_010_2 = AmBy*pAx2[118] + pAx2[160];
            double r_223_010_2 = AmBy*pAx2[119] + pAx2[164];
            double b_001_1 = AmBz*pAx1[0] + pAx1[3];
            double r_100_001_1 = AmBz*pAx1[1] + pAx1[8];
            double r_010_001_1 = AmBz*pAx1[2] + pAx1[9];
            double r_001_001_1 = AmBz*pAx1[3] + pAx1[6];
            double r_200_001_1 = AmBz*pAx1[4] + pAx1[17];
            double r_020_001_1 = AmBz*pAx1[5] + pAx1[18];
            double r_002_001_1 = AmBz*pAx1[6] + pAx1[12];
            double r_110_001_1 = AmBz*pAx1[7] + pAx1[19];
            double r_101_001_1 = AmBz*pAx1[8] + pAx1[14];
            double r_011_001_1 = AmBz*pAx1[9] + pAx1[16];
            double r_003_001_1 = AmBz*pAx1[12] + pAx1[22];
            double r_120_001_1 = AmBz*pAx1[13] + pAx1[33];
            double r_102_001_1 = AmBz*pAx1[14] + pAx1[26];
            double r_210_001_1 = AmBz*pAx1[15] + pAx1[34];
            double r_012_001_1 = AmBz*pAx1[16] + pAx1[28];
            double r_201_001_1 = AmBz*pAx1[17] + pAx1[30];
            double r_021_001_1 = AmBz*pAx1[18] + pAx1[31];
            double r_111_001_1 = AmBz*pAx1[19] + pAx1[32];
            double r_004_001_1 = AmBz*pAx1[22] + pAx1[37];
            double r_103_001_1 = AmBz*pAx1[26] + pAx1[39];
            double r_013_001_1 = AmBz*pAx1[28] + pAx1[41];
            double r_220_001_1 = AmBz*pAx1[29] + pAx1[55];
            double r_202_001_1 = AmBz*pAx1[30] + pAx1[48];
            double r_022_001_1 = AmBz*pAx1[31] + pAx1[49];
            double r_112_001_1 = AmBz*pAx1[32] + pAx1[52];
            double r_121_001_1 = AmBz*pAx1[33] + pAx1[53];
            double r_211_001_1 = AmBz*pAx1[34] + pAx1[54];
            double r_005_001_1 = AmBz*pAx1[37] + pAx1[58];
            double r_104_001_1 = AmBz*pAx1[39] + pAx1[62];
            double r_014_001_1 = AmBz*pAx1[41] + pAx1[64];
            double r_203_001_1 = AmBz*pAx1[48] + pAx1[68];
            double r_023_001_1 = AmBz*pAx1[49] + pAx1[70];
            double r_113_001_1 = AmBz*pAx1[52] + pAx1[74];
            double r_122_001_1 = AmBz*pAx1[53] + pAx1[80];
            double r_212_001_1 = AmBz*pAx1[54] + pAx1[82];
            double r_221_001_1 = AmBz*pAx1[55] + pAx1[83];
            double b_001_2 = AmBz*pAx2[0] + pAx2[3];
            double r_100_001_2 = AmBz*pAx2[1] + pAx2[8];
            double r_010_001_2 = AmBz*pAx2[2] + pAx2[9];
            double r_001_001_2 = AmBz*pAx2[3] + pAx2[6];
            double r_200_001_2 = AmBz*pAx2[4] + pAx2[17];
            double r_020_001_2 = AmBz*pAx2[5] + pAx2[18];
            double r_002_001_2 = AmBz*pAx2[6] + pAx2[12];
            double r_110_001_2 = AmBz*pAx2[7] + pAx2[19];
            double r_101_001_2 = AmBz*pAx2[8] + pAx2[14];
            double r_011_001_2 = AmBz*pAx2[9] + pAx2[16];
            double r_300_001_2 = AmBz*pAx2[10] + pAx2[25];
            double r_030_001_2 = AmBz*pAx2[11] + pAx2[27];
            double r_003_001_2 = AmBz*pAx2[12] + pAx2[22];
            double r_120_001_2 = AmBz*pAx2[13] + pAx2[33];
            double r_102_001_2 = AmBz*pAx2[14] + pAx2[26];
            double r_210_001_2 = AmBz*pAx2[15] + pAx2[34];
            double r_012_001_2 = AmBz*pAx2[16] + pAx2[28];
            double r_201_001_2 = AmBz*pAx2[17] + pAx2[30];
            double r_021_001_2 = AmBz*pAx2[18] + pAx2[31];
            double r_111_001_2 = AmBz*pAx2[19] + pAx2[32];
            double r_400_001_2 = AmBz*pAx2[20] + pAx2[42];
            double r_040_001_2 = AmBz*pAx2[21] + pAx2[43];
            double r_004_001_2 = AmBz*pAx2[22] + pAx2[37];
            double r_310_001_2 = AmBz*pAx2[23] + pAx2[50];
            double r_130_001_2 = AmBz*pAx2[24] + pAx2[51];
            double r_301_001_2 = AmBz*pAx2[25] + pAx2[45];
            double r_103_001_2 = AmBz*pAx2[26] + pAx2[39];
            double r_031_001_2 = AmBz*pAx2[27] + pAx2[47];
            double r_013_001_2 = AmBz*pAx2[28] + pAx2[41];
            double r_220_001_2 = AmBz*pAx2[29] + pAx2[55];
            double r_202_001_2 = AmBz*pAx2[30] + pAx2[48];
            double r_022_001_2 = AmBz*pAx2[31] + pAx2[49];
            double r_112_001_2 = AmBz*pAx2[32] + pAx2[52];
            double r_121_001_2 = AmBz*pAx2[33] + pAx2[53];
            double r_211_001_2 = AmBz*pAx2[34] + pAx2[54];
            double r_005_001_2 = AmBz*pAx2[37] + pAx2[58];
            double r_104_001_2 = AmBz*pAx2[39] + pAx2[62];
            double r_014_001_2 = AmBz*pAx2[41] + pAx2[64];
            double r_401_001_2 = AmBz*pAx2[42] + pAx2[66];
            double r_041_001_2 = AmBz*pAx2[43] + pAx2[69];
            double r_302_001_2 = AmBz*pAx2[45] + pAx2[72];
            double r_032_001_2 = AmBz*pAx2[47] + pAx2[73];
            double r_203_001_2 = AmBz*pAx2[48] + pAx2[68];
            double r_023_001_2 = AmBz*pAx2[49] + pAx2[70];
            double r_311_001_2 = AmBz*pAx2[50] + pAx2[77];
            double r_131_001_2 = AmBz*pAx2[51] + pAx2[78];
            double r_113_001_2 = AmBz*pAx2[52] + pAx2[74];
            double r_122_001_2 = AmBz*pAx2[53] + pAx2[80];
            double r_212_001_2 = AmBz*pAx2[54] + pAx2[82];
            double r_221_001_2 = AmBz*pAx2[55] + pAx2[83];
            double r_006_001_2 = AmBz*pAx2[58] + pAx2[86];
            double r_105_001_2 = AmBz*pAx2[62] + pAx2[88];
            double r_015_001_2 = AmBz*pAx2[64] + pAx2[90];
            double r_402_001_2 = AmBz*pAx2[66] + pAx2[103];
            double r_204_001_2 = AmBz*pAx2[68] + pAx2[97];
            double r_042_001_2 = AmBz*pAx2[69] + pAx2[104];
            double r_024_001_2 = AmBz*pAx2[70] + pAx2[98];
            double r_303_001_2 = AmBz*pAx2[72] + pAx2[100];
            double r_033_001_2 = AmBz*pAx2[73] + pAx2[102];
            double r_114_001_2 = AmBz*pAx2[74] + pAx2[107];
            double r_312_001_2 = AmBz*pAx2[77] + pAx2[115];
            double r_132_001_2 = AmBz*pAx2[78] + pAx2[116];
            double r_123_001_2 = AmBz*pAx2[80] + pAx2[109];
            double r_213_001_2 = AmBz*pAx2[82] + pAx2[111];
            double r_222_001_2 = AmBz*pAx2[83] + pAx2[119];
            double r_007_001_2 = AmBz*pAx2[86] + pAx2[122];
            double r_106_001_2 = AmBz*pAx2[88] + pAx2[126];
            double r_016_001_2 = AmBz*pAx2[90] + pAx2[128];
            double r_205_001_2 = AmBz*pAx2[97] + pAx2[132];
            double r_025_001_2 = AmBz*pAx2[98] + pAx2[134];
            double r_304_001_2 = AmBz*pAx2[100] + pAx2[138];
            double r_034_001_2 = AmBz*pAx2[102] + pAx2[140];
            double r_403_001_2 = AmBz*pAx2[103] + pAx2[142];
            double r_043_001_2 = AmBz*pAx2[104] + pAx2[143];
            double r_115_001_2 = AmBz*pAx2[107] + pAx2[144];
            double r_124_001_2 = AmBz*pAx2[109] + pAx2[150];
            double r_214_001_2 = AmBz*pAx2[111] + pAx2[152];
            double r_313_001_2 = AmBz*pAx2[115] + pAx2[153];
            double r_133_001_2 = AmBz*pAx2[116] + pAx2[154];
            double r_223_001_2 = AmBz*pAx2[119] + pAx2[161];
            double b_200_1 = AmBx*b_100_1 + r_100_100_1;
            double r_100_200_1 = AmBx*r_100_100_1 + r_200_100_1;
            double r_010_200_1 = AmBx*r_010_100_1 + r_110_100_1;
            double r_001_200_1 = AmBx*r_001_100_1 + r_101_100_1;
            double r_200_200_1 = AmBx*r_200_100_1 + r_300_100_1;
            double r_020_200_1 = AmBx*r_020_100_1 + r_120_100_1;
            double r_002_200_1 = AmBx*r_002_100_1 + r_102_100_1;
            double r_110_200_1 = AmBx*r_110_100_1 + r_210_100_1;
            double r_101_200_1 = AmBx*r_101_100_1 + r_201_100_1;
            double r_011_200_1 = AmBx*r_011_100_1 + r_111_100_1;
            double r_300_200_1 = AmBx*r_300_100_1 + r_400_100_1;
            double r_030_200_1 = AmBx*r_030_100_1 + r_130_100_1;
            double r_003_200_1 = AmBx*r_003_100_1 + r_103_100_1;
            double r_120_200_1 = AmBx*r_120_100_1 + r_220_100_1;
            double r_102_200_1 = AmBx*r_102_100_1 + r_202_100_1;
            double r_210_200_1 = AmBx*r_210_100_1 + r_310_100_1;
            double r_012_200_1 = AmBx*r_012_100_1 + r_112_100_1;
            double r_201_200_1 = AmBx*r_201_100_1 + r_301_100_1;
            double r_021_200_1 = AmBx*r_021_100_1 + r_121_100_1;
            double r_111_200_1 = AmBx*r_111_100_1 + r_211_100_1;
            double r_400_200_1 = AmBx*r_400_100_1 + r_500_100_1;
            double r_310_200_1 = AmBx*r_310_100_1 + r_410_100_1;
            double r_130_200_1 = AmBx*r_130_100_1 + r_230_100_1;
            double r_301_200_1 = AmBx*r_301_100_1 + r_401_100_1;
            double r_103_200_1 = AmBx*r_103_100_1 + r_203_100_1;
            double r_220_200_1 = AmBx*r_220_100_1 + r_320_100_1;
            double r_202_200_1 = AmBx*r_202_100_1 + r_302_100_1;
            double r_112_200_1 = AmBx*r_112_100_1 + r_212_100_1;
            double r_121_200_1 = AmBx*r_121_100_1 + r_221_100_1;
            double r_211_200_1 = AmBx*r_211_100_1 + r_311_100_1;
            double b_200_2 = AmBx*b_100_2 + r_100_100_2;
            double r_100_200_2 = AmBx*r_100_100_2 + r_200_100_2;
            double r_010_200_2 = AmBx*r_010_100_2 + r_110_100_2;
            double r_001_200_2 = AmBx*r_001_100_2 + r_101_100_2;
            double r_200_200_2 = AmBx*r_200_100_2 + r_300_100_2;
            double r_020_200_2 = AmBx*r_020_100_2 + r_120_100_2;
            double r_002_200_2 = AmBx*r_002_100_2 + r_102_100_2;
            double r_110_200_2 = AmBx*r_110_100_2 + r_210_100_2;
            double r_101_200_2 = AmBx*r_101_100_2 + r_201_100_2;
            double r_011_200_2 = AmBx*r_011_100_2 + r_111_100_2;
            double r_300_200_2 = AmBx*r_300_100_2 + r_400_100_2;
            double r_030_200_2 = AmBx*r_030_100_2 + r_130_100_2;
            double r_003_200_2 = AmBx*r_003_100_2 + r_103_100_2;
            double r_120_200_2 = AmBx*r_120_100_2 + r_220_100_2;
            double r_102_200_2 = AmBx*r_102_100_2 + r_202_100_2;
            double r_210_200_2 = AmBx*r_210_100_2 + r_310_100_2;
            double r_012_200_2 = AmBx*r_012_100_2 + r_112_100_2;
            double r_201_200_2 = AmBx*r_201_100_2 + r_301_100_2;
            double r_021_200_2 = AmBx*r_021_100_2 + r_121_100_2;
            double r_111_200_2 = AmBx*r_111_100_2 + r_211_100_2;
            double r_400_200_2 = AmBx*r_400_100_2 + r_500_100_2;
            double r_310_200_2 = AmBx*r_310_100_2 + r_410_100_2;
            double r_130_200_2 = AmBx*r_130_100_2 + r_230_100_2;
            double r_301_200_2 = AmBx*r_301_100_2 + r_401_100_2;
            double r_103_200_2 = AmBx*r_103_100_2 + r_203_100_2;
            double r_031_200_2 = AmBx*r_031_100_2 + r_131_100_2;
            double r_013_200_2 = AmBx*r_013_100_2 + r_113_100_2;
            double r_220_200_2 = AmBx*r_220_100_2 + r_320_100_2;
            double r_202_200_2 = AmBx*r_202_100_2 + r_302_100_2;
            double r_022_200_2 = AmBx*r_022_100_2 + r_122_100_2;
            double r_112_200_2 = AmBx*r_112_100_2 + r_212_100_2;
            double r_121_200_2 = AmBx*r_121_100_2 + r_221_100_2;
            double r_211_200_2 = AmBx*r_211_100_2 + r_311_100_2;
            double r_500_200_2 = AmBx*r_500_100_2 + r_600_100_2;
            double r_410_200_2 = AmBx*r_410_100_2 + r_510_100_2;
            double r_401_200_2 = AmBx*r_401_100_2 + r_501_100_2;
            double r_320_200_2 = AmBx*r_320_100_2 + r_420_100_2;
            double r_302_200_2 = AmBx*r_302_100_2 + r_402_100_2;
            double r_230_200_2 = AmBx*r_230_100_2 + r_330_100_2;
            double r_032_200_2 = AmBx*r_032_100_2 + r_132_100_2;
            double r_203_200_2 = AmBx*r_203_100_2 + r_303_100_2;
            double r_023_200_2 = AmBx*r_023_100_2 + r_123_100_2;
            double r_311_200_2 = AmBx*r_311_100_2 + r_411_100_2;
            double r_131_200_2 = AmBx*r_131_100_2 + r_231_100_2;
            double r_113_200_2 = AmBx*r_113_100_2 + r_213_100_2;
            double r_122_200_2 = AmBx*r_122_100_2 + r_222_100_2;
            double r_212_200_2 = AmBx*r_212_100_2 + r_312_100_2;
            double r_221_200_2 = AmBx*r_221_100_2 + r_321_100_2;
            double r_600_200_2 = AmBx*r_600_100_2 + r_700_100_2;
            double r_510_200_2 = AmBx*r_510_100_2 + r_610_100_2;
            double r_501_200_2 = AmBx*r_501_100_2 + r_601_100_2;
            double r_420_200_2 = AmBx*r_420_100_2 + r_520_100_2;
            double r_402_200_2 = AmBx*r_402_100_2 + r_502_100_2;
            double r_330_200_2 = AmBx*r_330_100_2 + r_430_100_2;
            double r_303_200_2 = AmBx*r_303_100_2 + r_403_100_2;
            double r_411_200_2 = AmBx*r_411_100_2 + r_511_100_2;
            double r_312_200_2 = AmBx*r_312_100_2 + r_412_100_2;
            double r_132_200_2 = AmBx*r_132_100_2 + r_232_100_2;
            double r_321_200_2 = AmBx*r_321_100_2 + r_421_100_2;
            double r_123_200_2 = AmBx*r_123_100_2 + r_223_100_2;
            double r_231_200_2 = AmBx*r_231_100_2 + r_331_100_2;
            double r_213_200_2 = AmBx*r_213_100_2 + r_313_100_2;
            double r_222_200_2 = AmBx*r_222_100_2 + r_322_100_2;
            double b_020_1 = AmBy*b_010_1 + r_010_010_1;
            double r_100_020_1 = AmBy*r_100_010_1 + r_110_010_1;
            double r_010_020_1 = AmBy*r_010_010_1 + r_020_010_1;
            double r_001_020_1 = AmBy*r_001_010_1 + r_011_010_1;
            double r_200_020_1 = AmBy*r_200_010_1 + r_210_010_1;
            double r_020_020_1 = AmBy*r_020_010_1 + r_030_010_1;
            double r_002_020_1 = AmBy*r_002_010_1 + r_012_010_1;
            double r_110_020_1 = AmBy*r_110_010_1 + r_120_010_1;
            double r_101_020_1 = AmBy*r_101_010_1 + r_111_010_1;
            double r_011_020_1 = AmBy*r_011_010_1 + r_021_010_1;
            double r_030_020_1 = AmBy*r_030_010_1 + r_040_010_1;
            double r_003_020_1 = AmBy*r_003_010_1 + r_013_010_1;
            double r_120_020_1 = AmBy*r_120_010_1 + r_130_010_1;
            double r_102_020_1 = AmBy*r_102_010_1 + r_112_010_1;
            double r_210_020_1 = AmBy*r_210_010_1 + r_220_010_1;
            double r_012_020_1 = AmBy*r_012_010_1 + r_022_010_1;
            double r_201_020_1 = AmBy*r_201_010_1 + r_211_010_1;
            double r_021_020_1 = AmBy*r_021_010_1 + r_031_010_1;
            double r_111_020_1 = AmBy*r_111_010_1 + r_121_010_1;
            double r_040_020_1 = AmBy*r_040_010_1 + r_050_010_1;
            double r_130_020_1 = AmBy*r_130_010_1 + r_140_010_1;
            double r_031_020_1 = AmBy*r_031_010_1 + r_041_010_1;
            double r_013_020_1 = AmBy*r_013_010_1 + r_023_010_1;
            double r_220_020_1 = AmBy*r_220_010_1 + r_230_010_1;
            double r_022_020_1 = AmBy*r_022_010_1 + r_032_010_1;
            double r_112_020_1 = AmBy*r_112_010_1 + r_122_010_1;
            double r_121_020_1 = AmBy*r_121_010_1 + r_131_010_1;
            double r_211_020_1 = AmBy*r_211_010_1 + r_221_010_1;
            double b_020_2 = AmBy*b_010_2 + r_010_010_2;
            double r_100_020_2 = AmBy*r_100_010_2 + r_110_010_2;
            double r_010_020_2 = AmBy*r_010_010_2 + r_020_010_2;
            double r_001_020_2 = AmBy*r_001_010_2 + r_011_010_2;
            double r_200_020_2 = AmBy*r_200_010_2 + r_210_010_2;
            double r_020_020_2 = AmBy*r_020_010_2 + r_030_010_2;
            double r_002_020_2 = AmBy*r_002_010_2 + r_012_010_2;
            double r_110_020_2 = AmBy*r_110_010_2 + r_120_010_2;
            double r_101_020_2 = AmBy*r_101_010_2 + r_111_010_2;
            double r_011_020_2 = AmBy*r_011_010_2 + r_021_010_2;
            double r_300_020_2 = AmBy*r_300_010_2 + r_310_010_2;
            double r_030_020_2 = AmBy*r_030_010_2 + r_040_010_2;
            double r_003_020_2 = AmBy*r_003_010_2 + r_013_010_2;
            double r_120_020_2 = AmBy*r_120_010_2 + r_130_010_2;
            double r_102_020_2 = AmBy*r_102_010_2 + r_112_010_2;
            double r_210_020_2 = AmBy*r_210_010_2 + r_220_010_2;
            double r_012_020_2 = AmBy*r_012_010_2 + r_022_010_2;
            double r_201_020_2 = AmBy*r_201_010_2 + r_211_010_2;
            double r_021_020_2 = AmBy*r_021_010_2 + r_031_010_2;
            double r_111_020_2 = AmBy*r_111_010_2 + r_121_010_2;
            double r_400_020_2 = AmBy*r_400_010_2 + r_410_010_2;
            double r_040_020_2 = AmBy*r_040_010_2 + r_050_010_2;
            double r_310_020_2 = AmBy*r_310_010_2 + r_320_010_2;
            double r_130_020_2 = AmBy*r_130_010_2 + r_140_010_2;
            double r_301_020_2 = AmBy*r_301_010_2 + r_311_010_2;
            double r_103_020_2 = AmBy*r_103_010_2 + r_113_010_2;
            double r_031_020_2 = AmBy*r_031_010_2 + r_041_010_2;
            double r_013_020_2 = AmBy*r_013_010_2 + r_023_010_2;
            double r_220_020_2 = AmBy*r_220_010_2 + r_230_010_2;
            double r_202_020_2 = AmBy*r_202_010_2 + r_212_010_2;
            double r_022_020_2 = AmBy*r_022_010_2 + r_032_010_2;
            double r_112_020_2 = AmBy*r_112_010_2 + r_122_010_2;
            double r_121_020_2 = AmBy*r_121_010_2 + r_131_010_2;
            double r_211_020_2 = AmBy*r_211_010_2 + r_221_010_2;
            double r_050_020_2 = AmBy*r_050_010_2 + r_060_010_2;
            double r_140_020_2 = AmBy*r_140_010_2 + r_150_010_2;
            double r_410_020_2 = AmBy*r_410_010_2 + r_420_010_2;
            double r_041_020_2 = AmBy*r_041_010_2 + r_051_010_2;
            double r_320_020_2 = AmBy*r_320_010_2 + r_330_010_2;
            double r_230_020_2 = AmBy*r_230_010_2 + r_240_010_2;
            double r_032_020_2 = AmBy*r_032_010_2 + r_042_010_2;
            double r_203_020_2 = AmBy*r_203_010_2 + r_213_010_2;
            double r_023_020_2 = AmBy*r_023_010_2 + r_033_010_2;
            double r_311_020_2 = AmBy*r_311_010_2 + r_321_010_2;
            double r_131_020_2 = AmBy*r_131_010_2 + r_141_010_2;
            double r_113_020_2 = AmBy*r_113_010_2 + r_123_010_2;
            double r_122_020_2 = AmBy*r_122_010_2 + r_132_010_2;
            double r_212_020_2 = AmBy*r_212_010_2 + r_222_010_2;
            double r_221_020_2 = AmBy*r_221_010_2 + r_231_010_2;
            double r_060_020_2 = AmBy*r_060_010_2 + r_070_010_2;
            double r_150_020_2 = AmBy*r_150_010_2 + r_160_010_2;
            double r_051_020_2 = AmBy*r_051_010_2 + r_061_010_2;
            double r_420_020_2 = AmBy*r_420_010_2 + r_430_010_2;
            double r_240_020_2 = AmBy*r_240_010_2 + r_250_010_2;
            double r_042_020_2 = AmBy*r_042_010_2 + r_052_010_2;
            double r_330_020_2 = AmBy*r_330_010_2 + r_340_010_2;
            double r_033_020_2 = AmBy*r_033_010_2 + r_043_010_2;
            double r_141_020_2 = AmBy*r_141_010_2 + r_151_010_2;
            double r_132_020_2 = AmBy*r_132_010_2 + r_142_010_2;
            double r_321_020_2 = AmBy*r_321_010_2 + r_331_010_2;
            double r_123_020_2 = AmBy*r_123_010_2 + r_133_010_2;
            double r_231_020_2 = AmBy*r_231_010_2 + r_241_010_2;
            double r_213_020_2 = AmBy*r_213_010_2 + r_223_010_2;
            double r_222_020_2 = AmBy*r_222_010_2 + r_232_010_2;
            double b_002_1 = AmBz*b_001_1 + r_001_001_1;
            double r_100_002_1 = AmBz*r_100_001_1 + r_101_001_1;
            double r_010_002_1 = AmBz*r_010_001_1 + r_011_001_1;
            double r_001_002_1 = AmBz*r_001_001_1 + r_002_001_1;
            double r_200_002_1 = AmBz*r_200_001_1 + r_201_001_1;
            double r_020_002_1 = AmBz*r_020_001_1 + r_021_001_1;
            double r_002_002_1 = AmBz*r_002_001_1 + r_003_001_1;
            double r_110_002_1 = AmBz*r_110_001_1 + r_111_001_1;
            double r_101_002_1 = AmBz*r_101_001_1 + r_102_001_1;
            double r_011_002_1 = AmBz*r_011_001_1 + r_012_001_1;
            double r_003_002_1 = AmBz*r_003_001_1 + r_004_001_1;
            double r_120_002_1 = AmBz*r_120_001_1 + r_121_001_1;
            double r_102_002_1 = AmBz*r_102_001_1 + r_103_001_1;
            double r_210_002_1 = AmBz*r_210_001_1 + r_211_001_1;
            double r_012_002_1 = AmBz*r_012_001_1 + r_013_001_1;
            double r_201_002_1 = AmBz*r_201_001_1 + r_202_001_1;
            double r_021_002_1 = AmBz*r_021_001_1 + r_022_001_1;
            double r_111_002_1 = AmBz*r_111_001_1 + r_112_001_1;
            double r_004_002_1 = AmBz*r_004_001_1 + r_005_001_1;
            double r_103_002_1 = AmBz*r_103_001_1 + r_104_001_1;
            double r_013_002_1 = AmBz*r_013_001_1 + r_014_001_1;
            double r_220_002_1 = AmBz*r_220_001_1 + r_221_001_1;
            double r_202_002_1 = AmBz*r_202_001_1 + r_203_001_1;
            double r_022_002_1 = AmBz*r_022_001_1 + r_023_001_1;
            double r_112_002_1 = AmBz*r_112_001_1 + r_113_001_1;
            double r_121_002_1 = AmBz*r_121_001_1 + r_122_001_1;
            double r_211_002_1 = AmBz*r_211_001_1 + r_212_001_1;
            double b_002_2 = AmBz*b_001_2 + r_001_001_2;
            double r_100_002_2 = AmBz*r_100_001_2 + r_101_001_2;
            double r_010_002_2 = AmBz*r_010_001_2 + r_011_001_2;
            double r_001_002_2 = AmBz*r_001_001_2 + r_002_001_2;
            double r_200_002_2 = AmBz*r_200_001_2 + r_201_001_2;
            double r_020_002_2 = AmBz*r_020_001_2 + r_021_001_2;
            double r_002_002_2 = AmBz*r_002_001_2 + r_003_001_2;
            double r_110_002_2 = AmBz*r_110_001_2 + r_111_001_2;
            double r_101_002_2 = AmBz*r_101_001_2 + r_102_001_2;
            double r_011_002_2 = AmBz*r_011_001_2 + r_012_001_2;
            double r_300_002_2 = AmBz*r_300_001_2 + r_301_001_2;
            double r_030_002_2 = AmBz*r_030_001_2 + r_031_001_2;
            double r_003_002_2 = AmBz*r_003_001_2 + r_004_001_2;
            double r_120_002_2 = AmBz*r_120_001_2 + r_121_001_2;
            double r_102_002_2 = AmBz*r_102_001_2 + r_103_001_2;
            double r_210_002_2 = AmBz*r_210_001_2 + r_211_001_2;
            double r_012_002_2 = AmBz*r_012_001_2 + r_013_001_2;
            double r_201_002_2 = AmBz*r_201_001_2 + r_202_001_2;
            double r_021_002_2 = AmBz*r_021_001_2 + r_022_001_2;
            double r_111_002_2 = AmBz*r_111_001_2 + r_112_001_2;
            double r_400_002_2 = AmBz*r_400_001_2 + r_401_001_2;
            double r_040_002_2 = AmBz*r_040_001_2 + r_041_001_2;
            double r_004_002_2 = AmBz*r_004_001_2 + r_005_001_2;
            double r_310_002_2 = AmBz*r_310_001_2 + r_311_001_2;
            double r_130_002_2 = AmBz*r_130_001_2 + r_131_001_2;
            double r_301_002_2 = AmBz*r_301_001_2 + r_302_001_2;
            double r_103_002_2 = AmBz*r_103_001_2 + r_104_001_2;
            double r_031_002_2 = AmBz*r_031_001_2 + r_032_001_2;
            double r_013_002_2 = AmBz*r_013_001_2 + r_014_001_2;
            double r_220_002_2 = AmBz*r_220_001_2 + r_221_001_2;
            double r_202_002_2 = AmBz*r_202_001_2 + r_203_001_2;
            double r_022_002_2 = AmBz*r_022_001_2 + r_023_001_2;
            double r_112_002_2 = AmBz*r_112_001_2 + r_113_001_2;
            double r_121_002_2 = AmBz*r_121_001_2 + r_122_001_2;
            double r_211_002_2 = AmBz*r_211_001_2 + r_212_001_2;
            double r_005_002_2 = AmBz*r_005_001_2 + r_006_001_2;
            double r_104_002_2 = AmBz*r_104_001_2 + r_105_001_2;
            double r_014_002_2 = AmBz*r_014_001_2 + r_015_001_2;
            double r_401_002_2 = AmBz*r_401_001_2 + r_402_001_2;
            double r_041_002_2 = AmBz*r_041_001_2 + r_042_001_2;
            double r_302_002_2 = AmBz*r_302_001_2 + r_303_001_2;
            double r_032_002_2 = AmBz*r_032_001_2 + r_033_001_2;
            double r_203_002_2 = AmBz*r_203_001_2 + r_204_001_2;
            double r_023_002_2 = AmBz*r_023_001_2 + r_024_001_2;
            double r_311_002_2 = AmBz*r_311_001_2 + r_312_001_2;
            double r_131_002_2 = AmBz*r_131_001_2 + r_132_001_2;
            double r_113_002_2 = AmBz*r_113_001_2 + r_114_001_2;
            double r_122_002_2 = AmBz*r_122_001_2 + r_123_001_2;
            double r_212_002_2 = AmBz*r_212_001_2 + r_213_001_2;
            double r_221_002_2 = AmBz*r_221_001_2 + r_222_001_2;
            double r_006_002_2 = AmBz*r_006_001_2 + r_007_001_2;
            double r_105_002_2 = AmBz*r_105_001_2 + r_106_001_2;
            double r_015_002_2 = AmBz*r_015_001_2 + r_016_001_2;
            double r_402_002_2 = AmBz*r_402_001_2 + r_403_001_2;
            double r_204_002_2 = AmBz*r_204_001_2 + r_205_001_2;
            double r_042_002_2 = AmBz*r_042_001_2 + r_043_001_2;
            double r_024_002_2 = AmBz*r_024_001_2 + r_025_001_2;
            double r_303_002_2 = AmBz*r_303_001_2 + r_304_001_2;
            double r_033_002_2 = AmBz*r_033_001_2 + r_034_001_2;
            double r_114_002_2 = AmBz*r_114_001_2 + r_115_001_2;
            double r_312_002_2 = AmBz*r_312_001_2 + r_313_001_2;
            double r_132_002_2 = AmBz*r_132_001_2 + r_133_001_2;
            double r_123_002_2 = AmBz*r_123_001_2 + r_124_001_2;
            double r_213_002_2 = AmBz*r_213_001_2 + r_214_001_2;
            double r_222_002_2 = AmBz*r_222_001_2 + r_223_001_2;
            double b_300_1 = AmBx*b_200_1 + r_100_200_1;
            double r_100_300_1 = AmBx*r_100_200_1 + r_200_200_1;
            double r_010_300_1 = AmBx*r_010_200_1 + r_110_200_1;
            double r_001_300_1 = AmBx*r_001_200_1 + r_101_200_1;
            double r_200_300_1 = AmBx*r_200_200_1 + r_300_200_1;
            double r_020_300_1 = AmBx*r_020_200_1 + r_120_200_1;
            double r_002_300_1 = AmBx*r_002_200_1 + r_102_200_1;
            double r_110_300_1 = AmBx*r_110_200_1 + r_210_200_1;
            double r_101_300_1 = AmBx*r_101_200_1 + r_201_200_1;
            double r_011_300_1 = AmBx*r_011_200_1 + r_111_200_1;
            double r_300_300_1 = AmBx*r_300_200_1 + r_400_200_1;
            double r_030_300_1 = AmBx*r_030_200_1 + r_130_200_1;
            double r_003_300_1 = AmBx*r_003_200_1 + r_103_200_1;
            double r_120_300_1 = AmBx*r_120_200_1 + r_220_200_1;
            double r_102_300_1 = AmBx*r_102_200_1 + r_202_200_1;
            double r_210_300_1 = AmBx*r_210_200_1 + r_310_200_1;
            double r_012_300_1 = AmBx*r_012_200_1 + r_112_200_1;
            double r_201_300_1 = AmBx*r_201_200_1 + r_301_200_1;
            double r_021_300_1 = AmBx*r_021_200_1 + r_121_200_1;
            double r_111_300_1 = AmBx*r_111_200_1 + r_211_200_1;
            double b_300_2 = AmBx*b_200_2 + r_100_200_2;
            double r_100_300_2 = AmBx*r_100_200_2 + r_200_200_2;
            double r_010_300_2 = AmBx*r_010_200_2 + r_110_200_2;
            double r_001_300_2 = AmBx*r_001_200_2 + r_101_200_2;
            double r_200_300_2 = AmBx*r_200_200_2 + r_300_200_2;
            double r_020_300_2 = AmBx*r_020_200_2 + r_120_200_2;
            double r_002_300_2 = AmBx*r_002_200_2 + r_102_200_2;
            double r_110_300_2 = AmBx*r_110_200_2 + r_210_200_2;
            double r_101_300_2 = AmBx*r_101_200_2 + r_201_200_2;
            double r_011_300_2 = AmBx*r_011_200_2 + r_111_200_2;
            double r_300_300_2 = AmBx*r_300_200_2 + r_400_200_2;
            double r_030_300_2 = AmBx*r_030_200_2 + r_130_200_2;
            double r_003_300_2 = AmBx*r_003_200_2 + r_103_200_2;
            double r_120_300_2 = AmBx*r_120_200_2 + r_220_200_2;
            double r_102_300_2 = AmBx*r_102_200_2 + r_202_200_2;
            double r_210_300_2 = AmBx*r_210_200_2 + r_310_200_2;
            double r_012_300_2 = AmBx*r_012_200_2 + r_112_200_2;
            double r_201_300_2 = AmBx*r_201_200_2 + r_301_200_2;
            double r_021_300_2 = AmBx*r_021_200_2 + r_121_200_2;
            double r_111_300_2 = AmBx*r_111_200_2 + r_211_200_2;
            double r_400_300_2 = AmBx*r_400_200_2 + r_500_200_2;
            double r_310_300_2 = AmBx*r_310_200_2 + r_410_200_2;
            double r_130_300_2 = AmBx*r_130_200_2 + r_230_200_2;
            double r_301_300_2 = AmBx*r_301_200_2 + r_401_200_2;
            double r_103_300_2 = AmBx*r_103_200_2 + r_203_200_2;
            double r_031_300_2 = AmBx*r_031_200_2 + r_131_200_2;
            double r_013_300_2 = AmBx*r_013_200_2 + r_113_200_2;
            double r_220_300_2 = AmBx*r_220_200_2 + r_320_200_2;
            double r_202_300_2 = AmBx*r_202_200_2 + r_302_200_2;
            double r_022_300_2 = AmBx*r_022_200_2 + r_122_200_2;
            double r_112_300_2 = AmBx*r_112_200_2 + r_212_200_2;
            double r_121_300_2 = AmBx*r_121_200_2 + r_221_200_2;
            double r_211_300_2 = AmBx*r_211_200_2 + r_311_200_2;
            double r_500_300_2 = AmBx*r_500_200_2 + r_600_200_2;
            double r_410_300_2 = AmBx*r_410_200_2 + r_510_200_2;
            double r_401_300_2 = AmBx*r_401_200_2 + r_501_200_2;
            double r_320_300_2 = AmBx*r_320_200_2 + r_420_200_2;
            double r_302_300_2 = AmBx*r_302_200_2 + r_402_200_2;
            double r_230_300_2 = AmBx*r_230_200_2 + r_330_200_2;
            double r_032_300_2 = AmBx*r_032_200_2 + r_132_200_2;
            double r_203_300_2 = AmBx*r_203_200_2 + r_303_200_2;
            double r_023_300_2 = AmBx*r_023_200_2 + r_123_200_2;
            double r_311_300_2 = AmBx*r_311_200_2 + r_411_200_2;
            double r_131_300_2 = AmBx*r_131_200_2 + r_231_200_2;
            double r_113_300_2 = AmBx*r_113_200_2 + r_213_200_2;
            double r_122_300_2 = AmBx*r_122_200_2 + r_222_200_2;
            double r_212_300_2 = AmBx*r_212_200_2 + r_312_200_2;
            double r_221_300_2 = AmBx*r_221_200_2 + r_321_200_2;
            double b_030_1 = AmBy*b_020_1 + r_010_020_1;
            double r_100_030_1 = AmBy*r_100_020_1 + r_110_020_1;
            double r_010_030_1 = AmBy*r_010_020_1 + r_020_020_1;
            double r_001_030_1 = AmBy*r_001_020_1 + r_011_020_1;
            double r_200_030_1 = AmBy*r_200_020_1 + r_210_020_1;
            double r_020_030_1 = AmBy*r_020_020_1 + r_030_020_1;
            double r_002_030_1 = AmBy*r_002_020_1 + r_012_020_1;
            double r_110_030_1 = AmBy*r_110_020_1 + r_120_020_1;
            double r_101_030_1 = AmBy*r_101_020_1 + r_111_020_1;
            double r_011_030_1 = AmBy*r_011_020_1 + r_021_020_1;
            double r_030_030_1 = AmBy*r_030_020_1 + r_040_020_1;
            double r_003_030_1 = AmBy*r_003_020_1 + r_013_020_1;
            double r_120_030_1 = AmBy*r_120_020_1 + r_130_020_1;
            double r_102_030_1 = AmBy*r_102_020_1 + r_112_020_1;
            double r_210_030_1 = AmBy*r_210_020_1 + r_220_020_1;
            double r_012_030_1 = AmBy*r_012_020_1 + r_022_020_1;
            double r_201_030_1 = AmBy*r_201_020_1 + r_211_020_1;
            double r_021_030_1 = AmBy*r_021_020_1 + r_031_020_1;
            double r_111_030_1 = AmBy*r_111_020_1 + r_121_020_1;
            double b_030_2 = AmBy*b_020_2 + r_010_020_2;
            double r_100_030_2 = AmBy*r_100_020_2 + r_110_020_2;
            double r_010_030_2 = AmBy*r_010_020_2 + r_020_020_2;
            double r_001_030_2 = AmBy*r_001_020_2 + r_011_020_2;
            double r_200_030_2 = AmBy*r_200_020_2 + r_210_020_2;
            double r_020_030_2 = AmBy*r_020_020_2 + r_030_020_2;
            double r_002_030_2 = AmBy*r_002_020_2 + r_012_020_2;
            double r_110_030_2 = AmBy*r_110_020_2 + r_120_020_2;
            double r_101_030_2 = AmBy*r_101_020_2 + r_111_020_2;
            double r_011_030_2 = AmBy*r_011_020_2 + r_021_020_2;
            double r_300_030_2 = AmBy*r_300_020_2 + r_310_020_2;
            double r_030_030_2 = AmBy*r_030_020_2 + r_040_020_2;
            double r_003_030_2 = AmBy*r_003_020_2 + r_013_020_2;
            double r_120_030_2 = AmBy*r_120_020_2 + r_130_020_2;
            double r_102_030_2 = AmBy*r_102_020_2 + r_112_020_2;
            double r_210_030_2 = AmBy*r_210_020_2 + r_220_020_2;
            double r_012_030_2 = AmBy*r_012_020_2 + r_022_020_2;
            double r_201_030_2 = AmBy*r_201_020_2 + r_211_020_2;
            double r_021_030_2 = AmBy*r_021_020_2 + r_031_020_2;
            double r_111_030_2 = AmBy*r_111_020_2 + r_121_020_2;
            double r_400_030_2 = AmBy*r_400_020_2 + r_410_020_2;
            double r_040_030_2 = AmBy*r_040_020_2 + r_050_020_2;
            double r_310_030_2 = AmBy*r_310_020_2 + r_320_020_2;
            double r_130_030_2 = AmBy*r_130_020_2 + r_140_020_2;
            double r_301_030_2 = AmBy*r_301_020_2 + r_311_020_2;
            double r_103_030_2 = AmBy*r_103_020_2 + r_113_020_2;
            double r_031_030_2 = AmBy*r_031_020_2 + r_041_020_2;
            double r_013_030_2 = AmBy*r_013_020_2 + r_023_020_2;
            double r_220_030_2 = AmBy*r_220_020_2 + r_230_020_2;
            double r_202_030_2 = AmBy*r_202_020_2 + r_212_020_2;
            double r_022_030_2 = AmBy*r_022_020_2 + r_032_020_2;
            double r_112_030_2 = AmBy*r_112_020_2 + r_122_020_2;
            double r_121_030_2 = AmBy*r_121_020_2 + r_131_020_2;
            double r_211_030_2 = AmBy*r_211_020_2 + r_221_020_2;
            double r_050_030_2 = AmBy*r_050_020_2 + r_060_020_2;
            double r_140_030_2 = AmBy*r_140_020_2 + r_150_020_2;
            double r_410_030_2 = AmBy*r_410_020_2 + r_420_020_2;
            double r_041_030_2 = AmBy*r_041_020_2 + r_051_020_2;
            double r_320_030_2 = AmBy*r_320_020_2 + r_330_020_2;
            double r_230_030_2 = AmBy*r_230_020_2 + r_240_020_2;
            double r_032_030_2 = AmBy*r_032_020_2 + r_042_020_2;
            double r_203_030_2 = AmBy*r_203_020_2 + r_213_020_2;
            double r_023_030_2 = AmBy*r_023_020_2 + r_033_020_2;
            double r_311_030_2 = AmBy*r_311_020_2 + r_321_020_2;
            double r_131_030_2 = AmBy*r_131_020_2 + r_141_020_2;
            double r_113_030_2 = AmBy*r_113_020_2 + r_123_020_2;
            double r_122_030_2 = AmBy*r_122_020_2 + r_132_020_2;
            double r_212_030_2 = AmBy*r_212_020_2 + r_222_020_2;
            double r_221_030_2 = AmBy*r_221_020_2 + r_231_020_2;
            double b_003_1 = AmBz*b_002_1 + r_001_002_1;
            double r_100_003_1 = AmBz*r_100_002_1 + r_101_002_1;
            double r_010_003_1 = AmBz*r_010_002_1 + r_011_002_1;
            double r_001_003_1 = AmBz*r_001_002_1 + r_002_002_1;
            double r_200_003_1 = AmBz*r_200_002_1 + r_201_002_1;
            double r_020_003_1 = AmBz*r_020_002_1 + r_021_002_1;
            double r_002_003_1 = AmBz*r_002_002_1 + r_003_002_1;
            double r_110_003_1 = AmBz*r_110_002_1 + r_111_002_1;
            double r_101_003_1 = AmBz*r_101_002_1 + r_102_002_1;
            double r_011_003_1 = AmBz*r_011_002_1 + r_012_002_1;
            double r_003_003_1 = AmBz*r_003_002_1 + r_004_002_1;
            double r_120_003_1 = AmBz*r_120_002_1 + r_121_002_1;
            double r_102_003_1 = AmBz*r_102_002_1 + r_103_002_1;
            double r_210_003_1 = AmBz*r_210_002_1 + r_211_002_1;
            double r_012_003_1 = AmBz*r_012_002_1 + r_013_002_1;
            double r_201_003_1 = AmBz*r_201_002_1 + r_202_002_1;
            double r_021_003_1 = AmBz*r_021_002_1 + r_022_002_1;
            double r_111_003_1 = AmBz*r_111_002_1 + r_112_002_1;
            double b_003_2 = AmBz*b_002_2 + r_001_002_2;
            double r_100_003_2 = AmBz*r_100_002_2 + r_101_002_2;
            double r_010_003_2 = AmBz*r_010_002_2 + r_011_002_2;
            double r_001_003_2 = AmBz*r_001_002_2 + r_002_002_2;
            double r_200_003_2 = AmBz*r_200_002_2 + r_201_002_2;
            double r_020_003_2 = AmBz*r_020_002_2 + r_021_002_2;
            double r_002_003_2 = AmBz*r_002_002_2 + r_003_002_2;
            double r_110_003_2 = AmBz*r_110_002_2 + r_111_002_2;
            double r_101_003_2 = AmBz*r_101_002_2 + r_102_002_2;
            double r_011_003_2 = AmBz*r_011_002_2 + r_012_002_2;
            double r_300_003_2 = AmBz*r_300_002_2 + r_301_002_2;
            double r_030_003_2 = AmBz*r_030_002_2 + r_031_002_2;
            double r_003_003_2 = AmBz*r_003_002_2 + r_004_002_2;
            double r_120_003_2 = AmBz*r_120_002_2 + r_121_002_2;
            double r_102_003_2 = AmBz*r_102_002_2 + r_103_002_2;
            double r_210_003_2 = AmBz*r_210_002_2 + r_211_002_2;
            double r_012_003_2 = AmBz*r_012_002_2 + r_013_002_2;
            double r_201_003_2 = AmBz*r_201_002_2 + r_202_002_2;
            double r_021_003_2 = AmBz*r_021_002_2 + r_022_002_2;
            double r_111_003_2 = AmBz*r_111_002_2 + r_112_002_2;
            double r_400_003_2 = AmBz*r_400_002_2 + r_401_002_2;
            double r_040_003_2 = AmBz*r_040_002_2 + r_041_002_2;
            double r_004_003_2 = AmBz*r_004_002_2 + r_005_002_2;
            double r_310_003_2 = AmBz*r_310_002_2 + r_311_002_2;
            double r_130_003_2 = AmBz*r_130_002_2 + r_131_002_2;
            double r_301_003_2 = AmBz*r_301_002_2 + r_302_002_2;
            double r_103_003_2 = AmBz*r_103_002_2 + r_104_002_2;
            double r_031_003_2 = AmBz*r_031_002_2 + r_032_002_2;
            double r_013_003_2 = AmBz*r_013_002_2 + r_014_002_2;
            double r_220_003_2 = AmBz*r_220_002_2 + r_221_002_2;
            double r_202_003_2 = AmBz*r_202_002_2 + r_203_002_2;
            double r_022_003_2 = AmBz*r_022_002_2 + r_023_002_2;
            double r_112_003_2 = AmBz*r_112_002_2 + r_113_002_2;
            double r_121_003_2 = AmBz*r_121_002_2 + r_122_002_2;
            double r_211_003_2 = AmBz*r_211_002_2 + r_212_002_2;
            double r_005_003_2 = AmBz*r_005_002_2 + r_006_002_2;
            double r_104_003_2 = AmBz*r_104_002_2 + r_105_002_2;
            double r_014_003_2 = AmBz*r_014_002_2 + r_015_002_2;
            double r_401_003_2 = AmBz*r_401_002_2 + r_402_002_2;
            double r_041_003_2 = AmBz*r_041_002_2 + r_042_002_2;
            double r_302_003_2 = AmBz*r_302_002_2 + r_303_002_2;
            double r_032_003_2 = AmBz*r_032_002_2 + r_033_002_2;
            double r_203_003_2 = AmBz*r_203_002_2 + r_204_002_2;
            double r_023_003_2 = AmBz*r_023_002_2 + r_024_002_2;
            double r_311_003_2 = AmBz*r_311_002_2 + r_312_002_2;
            double r_131_003_2 = AmBz*r_131_002_2 + r_132_002_2;
            double r_113_003_2 = AmBz*r_113_002_2 + r_114_002_2;
            double r_122_003_2 = AmBz*r_122_002_2 + r_123_002_2;
            double r_212_003_2 = AmBz*r_212_002_2 + r_213_002_2;
            double r_221_003_2 = AmBz*r_221_002_2 + r_222_002_2;
            double b_012_1 = AmBy*b_002_1 + r_010_002_1;
            double r_100_012_1 = AmBy*r_100_002_1 + r_110_002_1;
            double r_010_012_1 = AmBy*r_010_002_1 + r_020_002_1;
            double r_200_012_1 = AmBy*r_200_002_1 + r_210_002_1;
            double r_110_012_1 = AmBy*r_110_002_1 + r_120_002_1;
            double r_210_012_1 = AmBy*r_210_002_1 + r_220_002_1;
            double b_400_1 = AmBx*b_300_1 + r_100_300_1;
            double r_100_400_1 = AmBx*r_100_300_1 + r_200_300_1;
            double r_010_400_1 = AmBx*r_010_300_1 + r_110_300_1;
            double r_001_400_1 = AmBx*r_001_300_1 + r_101_300_1;
            double r_200_400_1 = AmBx*r_200_300_1 + r_300_300_1;
            double r_020_400_1 = AmBx*r_020_300_1 + r_120_300_1;
            double r_002_400_1 = AmBx*r_002_300_1 + r_102_300_1;
            double r_110_400_1 = AmBx*r_110_300_1 + r_210_300_1;
            double r_101_400_1 = AmBx*r_101_300_1 + r_201_300_1;
            double r_011_400_1 = AmBx*r_011_300_1 + r_111_300_1;
            double b_400_2 = AmBx*b_300_2 + r_100_300_2;
            double r_100_400_2 = AmBx*r_100_300_2 + r_200_300_2;
            double r_010_400_2 = AmBx*r_010_300_2 + r_110_300_2;
            double r_001_400_2 = AmBx*r_001_300_2 + r_101_300_2;
            double r_200_400_2 = AmBx*r_200_300_2 + r_300_300_2;
            double r_020_400_2 = AmBx*r_020_300_2 + r_120_300_2;
            double r_002_400_2 = AmBx*r_002_300_2 + r_102_300_2;
            double r_110_400_2 = AmBx*r_110_300_2 + r_210_300_2;
            double r_101_400_2 = AmBx*r_101_300_2 + r_201_300_2;
            double r_011_400_2 = AmBx*r_011_300_2 + r_111_300_2;
            double r_300_400_2 = AmBx*r_300_300_2 + r_400_300_2;
            double r_030_400_2 = AmBx*r_030_300_2 + r_130_300_2;
            double r_003_400_2 = AmBx*r_003_300_2 + r_103_300_2;
            double r_120_400_2 = AmBx*r_120_300_2 + r_220_300_2;
            double r_102_400_2 = AmBx*r_102_300_2 + r_202_300_2;
            double r_210_400_2 = AmBx*r_210_300_2 + r_310_300_2;
            double r_012_400_2 = AmBx*r_012_300_2 + r_112_300_2;
            double r_201_400_2 = AmBx*r_201_300_2 + r_301_300_2;
            double r_021_400_2 = AmBx*r_021_300_2 + r_121_300_2;
            double r_111_400_2 = AmBx*r_111_300_2 + r_211_300_2;
            double r_400_400_2 = AmBx*r_400_300_2 + r_500_300_2;
            double r_310_400_2 = AmBx*r_310_300_2 + r_410_300_2;
            double r_130_400_2 = AmBx*r_130_300_2 + r_230_300_2;
            double r_301_400_2 = AmBx*r_301_300_2 + r_401_300_2;
            double r_103_400_2 = AmBx*r_103_300_2 + r_203_300_2;
            double r_031_400_2 = AmBx*r_031_300_2 + r_131_300_2;
            double r_013_400_2 = AmBx*r_013_300_2 + r_113_300_2;
            double r_220_400_2 = AmBx*r_220_300_2 + r_320_300_2;
            double r_202_400_2 = AmBx*r_202_300_2 + r_302_300_2;
            double r_022_400_2 = AmBx*r_022_300_2 + r_122_300_2;
            double r_112_400_2 = AmBx*r_112_300_2 + r_212_300_2;
            double r_121_400_2 = AmBx*r_121_300_2 + r_221_300_2;
            double r_211_400_2 = AmBx*r_211_300_2 + r_311_300_2;
            double b_040_1 = AmBy*b_030_1 + r_010_030_1;
            double r_100_040_1 = AmBy*r_100_030_1 + r_110_030_1;
            double r_010_040_1 = AmBy*r_010_030_1 + r_020_030_1;
            double r_001_040_1 = AmBy*r_001_030_1 + r_011_030_1;
            double r_200_040_1 = AmBy*r_200_030_1 + r_210_030_1;
            double r_020_040_1 = AmBy*r_020_030_1 + r_030_030_1;
            double r_002_040_1 = AmBy*r_002_030_1 + r_012_030_1;
            double r_110_040_1 = AmBy*r_110_030_1 + r_120_030_1;
            double r_101_040_1 = AmBy*r_101_030_1 + r_111_030_1;
            double r_011_040_1 = AmBy*r_011_030_1 + r_021_030_1;
            double b_040_2 = AmBy*b_030_2 + r_010_030_2;
            double r_100_040_2 = AmBy*r_100_030_2 + r_110_030_2;
            double r_010_040_2 = AmBy*r_010_030_2 + r_020_030_2;
            double r_001_040_2 = AmBy*r_001_030_2 + r_011_030_2;
            double r_200_040_2 = AmBy*r_200_030_2 + r_210_030_2;
            double r_020_040_2 = AmBy*r_020_030_2 + r_030_030_2;
            double r_002_040_2 = AmBy*r_002_030_2 + r_012_030_2;
            double r_110_040_2 = AmBy*r_110_030_2 + r_120_030_2;
            double r_101_040_2 = AmBy*r_101_030_2 + r_111_030_2;
            double r_011_040_2 = AmBy*r_011_030_2 + r_021_030_2;
            double r_300_040_2 = AmBy*r_300_030_2 + r_310_030_2;
            double r_030_040_2 = AmBy*r_030_030_2 + r_040_030_2;
            double r_003_040_2 = AmBy*r_003_030_2 + r_013_030_2;
            double r_120_040_2 = AmBy*r_120_030_2 + r_130_030_2;
            double r_102_040_2 = AmBy*r_102_030_2 + r_112_030_2;
            double r_210_040_2 = AmBy*r_210_030_2 + r_220_030_2;
            double r_012_040_2 = AmBy*r_012_030_2 + r_022_030_2;
            double r_201_040_2 = AmBy*r_201_030_2 + r_211_030_2;
            double r_021_040_2 = AmBy*r_021_030_2 + r_031_030_2;
            double r_111_040_2 = AmBy*r_111_030_2 + r_121_030_2;
            double r_400_040_2 = AmBy*r_400_030_2 + r_410_030_2;
            double r_040_040_2 = AmBy*r_040_030_2 + r_050_030_2;
            double r_310_040_2 = AmBy*r_310_030_2 + r_320_030_2;
            double r_130_040_2 = AmBy*r_130_030_2 + r_140_030_2;
            double r_301_040_2 = AmBy*r_301_030_2 + r_311_030_2;
            double r_103_040_2 = AmBy*r_103_030_2 + r_113_030_2;
            double r_031_040_2 = AmBy*r_031_030_2 + r_041_030_2;
            double r_013_040_2 = AmBy*r_013_030_2 + r_023_030_2;
            double r_220_040_2 = AmBy*r_220_030_2 + r_230_030_2;
            double r_202_040_2 = AmBy*r_202_030_2 + r_212_030_2;
            double r_022_040_2 = AmBy*r_022_030_2 + r_032_030_2;
            double r_112_040_2 = AmBy*r_112_030_2 + r_122_030_2;
            double r_121_040_2 = AmBy*r_121_030_2 + r_131_030_2;
            double r_211_040_2 = AmBy*r_211_030_2 + r_221_030_2;
            double b_004_1 = AmBz*b_003_1 + r_001_003_1;
            double r_100_004_1 = AmBz*r_100_003_1 + r_101_003_1;
            double r_010_004_1 = AmBz*r_010_003_1 + r_011_003_1;
            double r_001_004_1 = AmBz*r_001_003_1 + r_002_003_1;
            double r_200_004_1 = AmBz*r_200_003_1 + r_201_003_1;
            double r_020_004_1 = AmBz*r_020_003_1 + r_021_003_1;
            double r_002_004_1 = AmBz*r_002_003_1 + r_003_003_1;
            double r_110_004_1 = AmBz*r_110_003_1 + r_111_003_1;
            double r_101_004_1 = AmBz*r_101_003_1 + r_102_003_1;
            double r_011_004_1 = AmBz*r_011_003_1 + r_012_003_1;
            double b_004_2 = AmBz*b_003_2 + r_001_003_2;
            double r_100_004_2 = AmBz*r_100_003_2 + r_101_003_2;
            double r_010_004_2 = AmBz*r_010_003_2 + r_011_003_2;
            double r_001_004_2 = AmBz*r_001_003_2 + r_002_003_2;
            double r_200_004_2 = AmBz*r_200_003_2 + r_201_003_2;
            double r_020_004_2 = AmBz*r_020_003_2 + r_021_003_2;
            double r_002_004_2 = AmBz*r_002_003_2 + r_003_003_2;
            double r_110_004_2 = AmBz*r_110_003_2 + r_111_003_2;
            double r_101_004_2 = AmBz*r_101_003_2 + r_102_003_2;
            double r_011_004_2 = AmBz*r_011_003_2 + r_012_003_2;
            double r_300_004_2 = AmBz*r_300_003_2 + r_301_003_2;
            double r_030_004_2 = AmBz*r_030_003_2 + r_031_003_2;
            double r_003_004_2 = AmBz*r_003_003_2 + r_004_003_2;
            double r_120_004_2 = AmBz*r_120_003_2 + r_121_003_2;
            double r_102_004_2 = AmBz*r_102_003_2 + r_103_003_2;
            double r_210_004_2 = AmBz*r_210_003_2 + r_211_003_2;
            double r_012_004_2 = AmBz*r_012_003_2 + r_013_003_2;
            double r_201_004_2 = AmBz*r_201_003_2 + r_202_003_2;
            double r_021_004_2 = AmBz*r_021_003_2 + r_022_003_2;
            double r_111_004_2 = AmBz*r_111_003_2 + r_112_003_2;
            double r_400_004_2 = AmBz*r_400_003_2 + r_401_003_2;
            double r_040_004_2 = AmBz*r_040_003_2 + r_041_003_2;
            double r_004_004_2 = AmBz*r_004_003_2 + r_005_003_2;
            double r_310_004_2 = AmBz*r_310_003_2 + r_311_003_2;
            double r_130_004_2 = AmBz*r_130_003_2 + r_131_003_2;
            double r_301_004_2 = AmBz*r_301_003_2 + r_302_003_2;
            double r_103_004_2 = AmBz*r_103_003_2 + r_104_003_2;
            double r_031_004_2 = AmBz*r_031_003_2 + r_032_003_2;
            double r_013_004_2 = AmBz*r_013_003_2 + r_014_003_2;
            double r_220_004_2 = AmBz*r_220_003_2 + r_221_003_2;
            double r_202_004_2 = AmBz*r_202_003_2 + r_203_003_2;
            double r_022_004_2 = AmBz*r_022_003_2 + r_023_003_2;
            double r_112_004_2 = AmBz*r_112_003_2 + r_113_003_2;
            double r_121_004_2 = AmBz*r_121_003_2 + r_122_003_2;
            double r_211_004_2 = AmBz*r_211_003_2 + r_212_003_2;
            double b_310_1 = AmBy*b_300_1 + r_010_300_1;
            double r_010_310_1 = AmBy*r_010_300_1 + r_020_300_1;
            double r_001_310_1 = AmBy*r_001_300_1 + r_011_300_1;
            double r_020_310_1 = AmBy*r_020_300_1 + r_030_300_1;
            double r_011_310_1 = AmBy*r_011_300_1 + r_021_300_1;
            double b_310_2 = AmBy*b_300_2 + r_010_300_2;
            double r_010_310_2 = AmBy*r_010_300_2 + r_020_300_2;
            double r_001_310_2 = AmBy*r_001_300_2 + r_011_300_2;
            double r_020_310_2 = AmBy*r_020_300_2 + r_030_300_2;
            double r_002_310_2 = AmBy*r_002_300_2 + r_012_300_2;
            double r_011_310_2 = AmBy*r_011_300_2 + r_021_300_2;
            double r_012_310_2 = AmBy*r_012_300_2 + r_022_300_2;
            double r_021_310_2 = AmBy*r_021_300_2 + r_031_300_2;
            double r_022_310_2 = AmBy*r_022_300_2 + r_032_300_2;
            double b_130_1 = AmBx*b_030_1 + r_100_030_1;
            double r_100_130_1 = AmBx*r_100_030_1 + r_200_030_1;
            double r_001_130_1 = AmBx*r_001_030_1 + r_101_030_1;
            double r_101_130_1 = AmBx*r_101_030_1 + r_201_030_1;
            double b_301_1 = AmBz*b_300_1 + r_001_300_1;
            double r_010_301_1 = AmBz*r_010_300_1 + r_011_300_1;
            double r_001_301_1 = AmBz*r_001_300_1 + r_002_300_1;
            double r_002_301_1 = AmBz*r_002_300_1 + r_003_300_1;
            double r_011_301_1 = AmBz*r_011_300_1 + r_012_300_1;
            double b_301_2 = AmBz*b_300_2 + r_001_300_2;
            double r_010_301_2 = AmBz*r_010_300_2 + r_011_300_2;
            double r_001_301_2 = AmBz*r_001_300_2 + r_002_300_2;
            double r_020_301_2 = AmBz*r_020_300_2 + r_021_300_2;
            double r_002_301_2 = AmBz*r_002_300_2 + r_003_300_2;
            double r_011_301_2 = AmBz*r_011_300_2 + r_012_300_2;
            double r_012_301_2 = AmBz*r_012_300_2 + r_013_300_2;
            double r_021_301_2 = AmBz*r_021_300_2 + r_022_300_2;
            double r_022_301_2 = AmBz*r_022_300_2 + r_023_300_2;
            double b_103_1 = AmBx*b_003_1 + r_100_003_1;
            double r_100_103_1 = AmBx*r_100_003_1 + r_200_003_1;
            double r_010_103_1 = AmBx*r_010_003_1 + r_110_003_1;
            double r_110_103_1 = AmBx*r_110_003_1 + r_210_003_1;
            double b_031_1 = AmBz*b_030_1 + r_001_030_1;
            double r_100_031_1 = AmBz*r_100_030_1 + r_101_030_1;
            double r_001_031_1 = AmBz*r_001_030_1 + r_002_030_1;
            double r_002_031_1 = AmBz*r_002_030_1 + r_003_030_1;
            double r_101_031_1 = AmBz*r_101_030_1 + r_102_030_1;
            double b_031_2 = AmBz*b_030_2 + r_001_030_2;
            double r_100_031_2 = AmBz*r_100_030_2 + r_101_030_2;
            double r_001_031_2 = AmBz*r_001_030_2 + r_002_030_2;
            double r_200_031_2 = AmBz*r_200_030_2 + r_201_030_2;
            double r_002_031_2 = AmBz*r_002_030_2 + r_003_030_2;
            double r_101_031_2 = AmBz*r_101_030_2 + r_102_030_2;
            double r_102_031_2 = AmBz*r_102_030_2 + r_103_030_2;
            double r_201_031_2 = AmBz*r_201_030_2 + r_202_030_2;
            double r_202_031_2 = AmBz*r_202_030_2 + r_203_030_2;
            double b_013_1 = AmBy*b_003_1 + r_010_003_1;
            double r_100_013_1 = AmBy*r_100_003_1 + r_110_003_1;
            double r_010_013_1 = AmBy*r_010_003_1 + r_020_003_1;
            double r_110_013_1 = AmBy*r_110_003_1 + r_120_003_1;
            double b_022_1 = AmBy*b_012_1 + r_010_012_1;
            double r_100_022_1 = AmBy*r_100_012_1 + r_110_012_1;
            double r_200_022_1 = AmBy*r_200_012_1 + r_210_012_1;
            double b_500_1 = AmBx*b_400_1 + r_100_400_1;
            double r_100_500_1 = AmBx*r_100_400_1 + r_200_400_1;
            double r_010_500_1 = AmBx*r_010_400_1 + r_110_400_1;
            double r_001_500_1 = AmBx*r_001_400_1 + r_101_400_1;
            double b_500_2 = AmBx*b_400_2 + r_100_400_2;
            double r_100_500_2 = AmBx*r_100_400_2 + r_200_400_2;
            double r_010_500_2 = AmBx*r_010_400_2 + r_110_400_2;
            double r_001_500_2 = AmBx*r_001_400_2 + r_101_400_2;
            double r_200_500_2 = AmBx*r_200_400_2 + r_300_400_2;
            double r_020_500_2 = AmBx*r_020_400_2 + r_120_400_2;
            double r_002_500_2 = AmBx*r_002_400_2 + r_102_400_2;
            double r_110_500_2 = AmBx*r_110_400_2 + r_210_400_2;
            double r_101_500_2 = AmBx*r_101_400_2 + r_201_400_2;
            double r_011_500_2 = AmBx*r_011_400_2 + r_111_400_2;
            double r_300_500_2 = AmBx*r_300_400_2 + r_400_400_2;
            double r_030_500_2 = AmBx*r_030_400_2 + r_130_400_2;
            double r_003_500_2 = AmBx*r_003_400_2 + r_103_400_2;
            double r_120_500_2 = AmBx*r_120_400_2 + r_220_400_2;
            double r_102_500_2 = AmBx*r_102_400_2 + r_202_400_2;
            double r_210_500_2 = AmBx*r_210_400_2 + r_310_400_2;
            double r_012_500_2 = AmBx*r_012_400_2 + r_112_400_2;
            double r_201_500_2 = AmBx*r_201_400_2 + r_301_400_2;
            double r_021_500_2 = AmBx*r_021_400_2 + r_121_400_2;
            double r_111_500_2 = AmBx*r_111_400_2 + r_211_400_2;
            double b_050_1 = AmBy*b_040_1 + r_010_040_1;
            double r_100_050_1 = AmBy*r_100_040_1 + r_110_040_1;
            double r_010_050_1 = AmBy*r_010_040_1 + r_020_040_1;
            double r_001_050_1 = AmBy*r_001_040_1 + r_011_040_1;
            double b_050_2 = AmBy*b_040_2 + r_010_040_2;
            double r_100_050_2 = AmBy*r_100_040_2 + r_110_040_2;
            double r_010_050_2 = AmBy*r_010_040_2 + r_020_040_2;
            double r_001_050_2 = AmBy*r_001_040_2 + r_011_040_2;
            double r_200_050_2 = AmBy*r_200_040_2 + r_210_040_2;
            double r_020_050_2 = AmBy*r_020_040_2 + r_030_040_2;
            double r_002_050_2 = AmBy*r_002_040_2 + r_012_040_2;
            double r_110_050_2 = AmBy*r_110_040_2 + r_120_040_2;
            double r_101_050_2 = AmBy*r_101_040_2 + r_111_040_2;
            double r_011_050_2 = AmBy*r_011_040_2 + r_021_040_2;
            double r_300_050_2 = AmBy*r_300_040_2 + r_310_040_2;
            double r_030_050_2 = AmBy*r_030_040_2 + r_040_040_2;
            double r_003_050_2 = AmBy*r_003_040_2 + r_013_040_2;
            double r_120_050_2 = AmBy*r_120_040_2 + r_130_040_2;
            double r_102_050_2 = AmBy*r_102_040_2 + r_112_040_2;
            double r_210_050_2 = AmBy*r_210_040_2 + r_220_040_2;
            double r_012_050_2 = AmBy*r_012_040_2 + r_022_040_2;
            double r_201_050_2 = AmBy*r_201_040_2 + r_211_040_2;
            double r_021_050_2 = AmBy*r_021_040_2 + r_031_040_2;
            double r_111_050_2 = AmBy*r_111_040_2 + r_121_040_2;
            double b_005_1 = AmBz*b_004_1 + r_001_004_1;
            double r_100_005_1 = AmBz*r_100_004_1 + r_101_004_1;
            double r_010_005_1 = AmBz*r_010_004_1 + r_011_004_1;
            double r_001_005_1 = AmBz*r_001_004_1 + r_002_004_1;
            double b_005_2 = AmBz*b_004_2 + r_001_004_2;
            double r_100_005_2 = AmBz*r_100_004_2 + r_101_004_2;
            double r_010_005_2 = AmBz*r_010_004_2 + r_011_004_2;
            double r_001_005_2 = AmBz*r_001_004_2 + r_002_004_2;
            double r_200_005_2 = AmBz*r_200_004_2 + r_201_004_2;
            double r_020_005_2 = AmBz*r_020_004_2 + r_021_004_2;
            double r_002_005_2 = AmBz*r_002_004_2 + r_003_004_2;
            double r_110_005_2 = AmBz*r_110_004_2 + r_111_004_2;
            double r_101_005_2 = AmBz*r_101_004_2 + r_102_004_2;
            double r_011_005_2 = AmBz*r_011_004_2 + r_012_004_2;
            double r_300_005_2 = AmBz*r_300_004_2 + r_301_004_2;
            double r_030_005_2 = AmBz*r_030_004_2 + r_031_004_2;
            double r_003_005_2 = AmBz*r_003_004_2 + r_004_004_2;
            double r_120_005_2 = AmBz*r_120_004_2 + r_121_004_2;
            double r_102_005_2 = AmBz*r_102_004_2 + r_103_004_2;
            double r_210_005_2 = AmBz*r_210_004_2 + r_211_004_2;
            double r_012_005_2 = AmBz*r_012_004_2 + r_013_004_2;
            double r_201_005_2 = AmBz*r_201_004_2 + r_202_004_2;
            double r_021_005_2 = AmBz*r_021_004_2 + r_022_004_2;
            double r_111_005_2 = AmBz*r_111_004_2 + r_112_004_2;
            double b_140_1 = AmBx*b_040_1 + r_100_040_1;
            double r_100_140_1 = AmBx*r_100_040_1 + r_200_040_1;
            double r_001_140_1 = AmBx*r_001_040_1 + r_101_040_1;
            double b_140_2 = AmBx*b_040_2 + r_100_040_2;
            double r_100_140_2 = AmBx*r_100_040_2 + r_200_040_2;
            double r_001_140_2 = AmBx*r_001_040_2 + r_101_040_2;
            double r_200_140_2 = AmBx*r_200_040_2 + r_300_040_2;
            double r_101_140_2 = AmBx*r_101_040_2 + r_201_040_2;
            double r_300_140_2 = AmBx*r_300_040_2 + r_400_040_2;
            double r_201_140_2 = AmBx*r_201_040_2 + r_301_040_2;
            double b_104_1 = AmBx*b_004_1 + r_100_004_1;
            double r_100_104_1 = AmBx*r_100_004_1 + r_200_004_1;
            double r_010_104_1 = AmBx*r_010_004_1 + r_110_004_1;
            double b_104_2 = AmBx*b_004_2 + r_100_004_2;
            double r_100_104_2 = AmBx*r_100_004_2 + r_200_004_2;
            double r_010_104_2 = AmBx*r_010_004_2 + r_110_004_2;
            double r_200_104_2 = AmBx*r_200_004_2 + r_300_004_2;
            double r_110_104_2 = AmBx*r_110_004_2 + r_210_004_2;
            double r_300_104_2 = AmBx*r_300_004_2 + r_400_004_2;
            double r_210_104_2 = AmBx*r_210_004_2 + r_310_004_2;
            double b_410_1 = AmBy*b_400_1 + r_010_400_1;
            double r_010_410_1 = AmBy*r_010_400_1 + r_020_400_1;
            double r_001_410_1 = AmBy*r_001_400_1 + r_011_400_1;
            double b_410_2 = AmBy*b_400_2 + r_010_400_2;
            double r_010_410_2 = AmBy*r_010_400_2 + r_020_400_2;
            double r_001_410_2 = AmBy*r_001_400_2 + r_011_400_2;
            double r_020_410_2 = AmBy*r_020_400_2 + r_030_400_2;
            double r_011_410_2 = AmBy*r_011_400_2 + r_021_400_2;
            double r_021_410_2 = AmBy*r_021_400_2 + r_031_400_2;
            double b_014_1 = AmBy*b_004_1 + r_010_004_1;
            double r_010_014_1 = AmBy*r_010_004_1 + r_020_004_1;
            double b_014_2 = AmBy*b_004_2 + r_010_004_2;
            double r_100_014_2 = AmBy*r_100_004_2 + r_110_004_2;
            double r_010_014_2 = AmBy*r_010_004_2 + r_020_004_2;
            double r_200_014_2 = AmBy*r_200_004_2 + r_210_004_2;
            double r_020_014_2 = AmBy*r_020_004_2 + r_030_004_2;
            double r_110_014_2 = AmBy*r_110_004_2 + r_120_004_2;
            double r_030_014_2 = AmBy*r_030_004_2 + r_040_004_2;
            double r_120_014_2 = AmBy*r_120_004_2 + r_130_004_2;
            double r_210_014_2 = AmBy*r_210_004_2 + r_220_004_2;
            double b_401_1 = AmBz*b_400_1 + r_001_400_1;
            double r_001_401_1 = AmBz*r_001_400_1 + r_002_400_1;
            double b_401_2 = AmBz*b_400_2 + r_001_400_2;
            double r_010_401_2 = AmBz*r_010_400_2 + r_011_400_2;
            double r_001_401_2 = AmBz*r_001_400_2 + r_002_400_2;
            double r_020_401_2 = AmBz*r_020_400_2 + r_021_400_2;
            double r_002_401_2 = AmBz*r_002_400_2 + r_003_400_2;
            double r_011_401_2 = AmBz*r_011_400_2 + r_012_400_2;
            double r_012_401_2 = AmBz*r_012_400_2 + r_013_400_2;
            double r_021_401_2 = AmBz*r_021_400_2 + r_022_400_2;
            double b_041_1 = AmBz*b_040_1 + r_001_040_1;
            double r_001_041_1 = AmBz*r_001_040_1 + r_002_040_1;
            double b_041_2 = AmBz*b_040_2 + r_001_040_2;
            double r_100_041_2 = AmBz*r_100_040_2 + r_101_040_2;
            double r_001_041_2 = AmBz*r_001_040_2 + r_002_040_2;
            double r_200_041_2 = AmBz*r_200_040_2 + r_201_040_2;
            double r_002_041_2 = AmBz*r_002_040_2 + r_003_040_2;
            double r_101_041_2 = AmBz*r_101_040_2 + r_102_040_2;
            double r_102_041_2 = AmBz*r_102_040_2 + r_103_040_2;
            double r_201_041_2 = AmBz*r_201_040_2 + r_202_040_2;
            double b_320_1 = AmBy*b_310_1 + r_010_310_1;
            double r_010_320_1 = AmBy*r_010_310_1 + r_020_310_1;
            double r_001_320_1 = AmBy*r_001_310_1 + r_011_310_1;
            double b_320_2 = AmBy*b_310_2 + r_010_310_2;
            double r_010_320_2 = AmBy*r_010_310_2 + r_020_310_2;
            double r_001_320_2 = AmBy*r_001_310_2 + r_011_310_2;
            double r_002_320_2 = AmBy*r_002_310_2 + r_012_310_2;
            double r_011_320_2 = AmBy*r_011_310_2 + r_021_310_2;
            double r_012_320_2 = AmBy*r_012_310_2 + r_022_310_2;
            double b_302_1 = AmBz*b_301_1 + r_001_301_1;
            double r_010_302_1 = AmBz*r_010_301_1 + r_011_301_1;
            double r_001_302_1 = AmBz*r_001_301_1 + r_002_301_1;
            double b_302_2 = AmBz*b_301_2 + r_001_301_2;
            double r_010_302_2 = AmBz*r_010_301_2 + r_011_301_2;
            double r_001_302_2 = AmBz*r_001_301_2 + r_002_301_2;
            double r_020_302_2 = AmBz*r_020_301_2 + r_021_301_2;
            double r_011_302_2 = AmBz*r_011_301_2 + r_012_301_2;
            double r_021_302_2 = AmBz*r_021_301_2 + r_022_301_2;
            double b_230_1 = AmBx*b_130_1 + r_100_130_1;
            double r_001_230_1 = AmBx*r_001_130_1 + r_101_130_1;
            double b_032_1 = AmBz*b_031_1 + r_001_031_1;
            double r_100_032_1 = AmBz*r_100_031_1 + r_101_031_1;
            double r_001_032_1 = AmBz*r_001_031_1 + r_002_031_1;
            double b_032_2 = AmBz*b_031_2 + r_001_031_2;
            double r_100_032_2 = AmBz*r_100_031_2 + r_101_031_2;
            double r_001_032_2 = AmBz*r_001_031_2 + r_002_031_2;
            double r_200_032_2 = AmBz*r_200_031_2 + r_201_031_2;
            double r_101_032_2 = AmBz*r_101_031_2 + r_102_031_2;
            double r_201_032_2 = AmBz*r_201_031_2 + r_202_031_2;
            double b_203_1 = AmBx*b_103_1 + r_100_103_1;
            double r_010_203_1 = AmBx*r_010_103_1 + r_110_103_1;
            double b_023_1 = AmBy*b_013_1 + r_010_013_1;
            double r_100_023_1 = AmBy*r_100_013_1 + r_110_013_1;
            double b_122_1 = AmBx*b_022_1 + r_100_022_1;
            double r_100_122_1 = AmBx*r_100_022_1 + r_200_022_1;
            double b_600_1 = AmBx*b_500_1 + r_100_500_1;
            double b_600_2 = AmBx*b_500_2 + r_100_500_2;
            double r_100_600_2 = AmBx*r_100_500_2 + r_200_500_2;
            double r_010_600_2 = AmBx*r_010_500_2 + r_110_500_2;
            double r_001_600_2 = AmBx*r_001_500_2 + r_101_500_2;
            double r_200_600_2 = AmBx*r_200_500_2 + r_300_500_2;
            double r_020_600_2 = AmBx*r_020_500_2 + r_120_500_2;
            double r_002_600_2 = AmBx*r_002_500_2 + r_102_500_2;
            double r_110_600_2 = AmBx*r_110_500_2 + r_210_500_2;
            double r_101_600_2 = AmBx*r_101_500_2 + r_201_500_2;
            double r_011_600_2 = AmBx*r_011_500_2 + r_111_500_2;
            double b_060_1 = AmBy*b_050_1 + r_010_050_1;
            double b_060_2 = AmBy*b_050_2 + r_010_050_2;
            double r_100_060_2 = AmBy*r_100_050_2 + r_110_050_2;
            double r_010_060_2 = AmBy*r_010_050_2 + r_020_050_2;
            double r_001_060_2 = AmBy*r_001_050_2 + r_011_050_2;
            double r_200_060_2 = AmBy*r_200_050_2 + r_210_050_2;
            double r_020_060_2 = AmBy*r_020_050_2 + r_030_050_2;
            double r_002_060_2 = AmBy*r_002_050_2 + r_012_050_2;
            double r_110_060_2 = AmBy*r_110_050_2 + r_120_050_2;
            double r_101_060_2 = AmBy*r_101_050_2 + r_111_050_2;
            double r_011_060_2 = AmBy*r_011_050_2 + r_021_050_2;
            double b_006_1 = AmBz*b_005_1 + r_001_005_1;
            double b_006_2 = AmBz*b_005_2 + r_001_005_2;
            double r_100_006_2 = AmBz*r_100_005_2 + r_101_005_2;
            double r_010_006_2 = AmBz*r_010_005_2 + r_011_005_2;
            double r_001_006_2 = AmBz*r_001_005_2 + r_002_005_2;
            double r_200_006_2 = AmBz*r_200_005_2 + r_201_005_2;
            double r_020_006_2 = AmBz*r_020_005_2 + r_021_005_2;
            double r_002_006_2 = AmBz*r_002_005_2 + r_003_005_2;
            double r_110_006_2 = AmBz*r_110_005_2 + r_111_005_2;
            double r_101_006_2 = AmBz*r_101_005_2 + r_102_005_2;
            double r_011_006_2 = AmBz*r_011_005_2 + r_012_005_2;
            double b_510_1 = AmBy*b_500_1 + r_010_500_1;
            double b_510_2 = AmBy*b_500_2 + r_010_500_2;
            double r_010_510_2 = AmBy*r_010_500_2 + r_020_500_2;
            double r_001_510_2 = AmBy*r_001_500_2 + r_011_500_2;
            double r_020_510_2 = AmBy*r_020_500_2 + r_030_500_2;
            double r_011_510_2 = AmBy*r_011_500_2 + r_021_500_2;
            double b_150_1 = AmBx*b_050_1 + r_100_050_1;
            double b_150_2 = AmBx*b_050_2 + r_100_050_2;
            double r_100_150_2 = AmBx*r_100_050_2 + r_200_050_2;
            double r_001_150_2 = AmBx*r_001_050_2 + r_101_050_2;
            double r_200_150_2 = AmBx*r_200_050_2 + r_300_050_2;
            double r_101_150_2 = AmBx*r_101_050_2 + r_201_050_2;
            double b_501_1 = AmBz*b_500_1 + r_001_500_1;
            double b_501_2 = AmBz*b_500_2 + r_001_500_2;
            double r_010_501_2 = AmBz*r_010_500_2 + r_011_500_2;
            double r_001_501_2 = AmBz*r_001_500_2 + r_002_500_2;
            double r_002_501_2 = AmBz*r_002_500_2 + r_003_500_2;
            double r_011_501_2 = AmBz*r_011_500_2 + r_012_500_2;
            double b_105_1 = AmBx*b_005_1 + r_100_005_1;
            double b_105_2 = AmBx*b_005_2 + r_100_005_2;
            double r_100_105_2 = AmBx*r_100_005_2 + r_200_005_2;
            double r_010_105_2 = AmBx*r_010_005_2 + r_110_005_2;
            double r_200_105_2 = AmBx*r_200_005_2 + r_300_005_2;
            double r_110_105_2 = AmBx*r_110_005_2 + r_210_005_2;
            double b_051_1 = AmBz*b_050_1 + r_001_050_1;
            double b_051_2 = AmBz*b_050_2 + r_001_050_2;
            double r_100_051_2 = AmBz*r_100_050_2 + r_101_050_2;
            double r_001_051_2 = AmBz*r_001_050_2 + r_002_050_2;
            double r_002_051_2 = AmBz*r_002_050_2 + r_003_050_2;
            double r_101_051_2 = AmBz*r_101_050_2 + r_102_050_2;
            double b_015_1 = AmBy*b_005_1 + r_010_005_1;
            double b_015_2 = AmBy*b_005_2 + r_010_005_2;
            double r_100_015_2 = AmBy*r_100_005_2 + r_110_005_2;
            double r_010_015_2 = AmBy*r_010_005_2 + r_020_005_2;
            double r_020_015_2 = AmBy*r_020_005_2 + r_030_005_2;
            double r_110_015_2 = AmBy*r_110_005_2 + r_120_005_2;
            double b_420_1 = AmBy*b_410_1 + r_010_410_1;
            double b_420_2 = AmBy*b_410_2 + r_010_410_2;
            double r_010_420_2 = AmBy*r_010_410_2 + r_020_410_2;
            double r_001_420_2 = AmBy*r_001_410_2 + r_011_410_2;
            double r_011_420_2 = AmBy*r_011_410_2 + r_021_410_2;
            double b_402_1 = AmBz*b_401_1 + r_001_401_1;
            double b_402_2 = AmBz*b_401_2 + r_001_401_2;
            double r_010_402_2 = AmBz*r_010_401_2 + r_011_401_2;
            double r_001_402_2 = AmBz*r_001_401_2 + r_002_401_2;
            double r_020_402_2 = AmBz*r_020_401_2 + r_021_401_2;
            double r_011_402_2 = AmBz*r_011_401_2 + r_012_401_2;
            double b_240_1 = AmBx*b_140_1 + r_100_140_1;
            double b_240_2 = AmBx*b_140_2 + r_100_140_2;
            double r_100_240_2 = AmBx*r_100_140_2 + r_200_140_2;
            double r_001_240_2 = AmBx*r_001_140_2 + r_101_140_2;
            double r_200_240_2 = AmBx*r_200_140_2 + r_300_140_2;
            double r_101_240_2 = AmBx*r_101_140_2 + r_201_140_2;
            double b_204_1 = AmBx*b_104_1 + r_100_104_1;
            double b_204_2 = AmBx*b_104_2 + r_100_104_2;
            double r_100_204_2 = AmBx*r_100_104_2 + r_200_104_2;
            double r_010_204_2 = AmBx*r_010_104_2 + r_110_104_2;
            double r_200_204_2 = AmBx*r_200_104_2 + r_300_104_2;
            double r_110_204_2 = AmBx*r_110_104_2 + r_210_104_2;
            double b_042_1 = AmBz*b_041_1 + r_001_041_1;
            double b_042_2 = AmBz*b_041_2 + r_001_041_2;
            double r_100_042_2 = AmBz*r_100_041_2 + r_101_041_2;
            double r_001_042_2 = AmBz*r_001_041_2 + r_002_041_2;
            double r_200_042_2 = AmBz*r_200_041_2 + r_201_041_2;
            double r_101_042_2 = AmBz*r_101_041_2 + r_102_041_2;
            double b_024_1 = AmBy*b_014_1 + r_010_014_1;
            double b_024_2 = AmBy*b_014_2 + r_010_014_2;
            double r_100_024_2 = AmBy*r_100_014_2 + r_110_014_2;
            double r_010_024_2 = AmBy*r_010_014_2 + r_020_014_2;
            double r_200_024_2 = AmBy*r_200_014_2 + r_210_014_2;
            double r_020_024_2 = AmBy*r_020_014_2 + r_030_014_2;
            double r_110_024_2 = AmBy*r_110_014_2 + r_120_014_2;
            double b_330_1 = AmBy*b_320_1 + r_010_320_1;
            double b_330_2 = AmBy*b_320_2 + r_010_320_2;
            double r_001_330_2 = AmBy*r_001_320_2 + r_011_320_2;
            double r_002_330_2 = AmBy*r_002_320_2 + r_012_320_2;
            double b_303_1 = AmBz*b_302_1 + r_001_302_1;
            double b_303_2 = AmBz*b_302_2 + r_001_302_2;
            double r_010_303_2 = AmBz*r_010_302_2 + r_011_302_2;
            double r_020_303_2 = AmBz*r_020_302_2 + r_021_302_2;
            double b_033_1 = AmBz*b_032_1 + r_001_032_1;
            double b_033_2 = AmBz*b_032_2 + r_001_032_2;
            double r_100_033_2 = AmBz*r_100_032_2 + r_101_032_2;
            double r_200_033_2 = AmBz*r_200_032_2 + r_201_032_2;
            double b_114_1 = AmBy*b_104_1 + r_010_104_1;
            double b_141_1 = AmBz*b_140_1 + r_001_140_1;
            double b_411_1 = AmBz*b_410_1 + r_001_410_1;
            double b_312_1 = AmBy*b_302_1 + r_010_302_1;
            double b_132_1 = AmBx*b_032_1 + r_100_032_1;
            double b_321_1 = AmBz*b_320_1 + r_001_320_1;
            double b_123_1 = AmBx*b_023_1 + r_100_023_1;
            double b_231_1 = AmBz*b_230_1 + r_001_230_1;
            double b_213_1 = AmBy*b_203_1 + r_010_203_1;
            double b_222_1 = AmBx*b_122_1 + r_100_122_1;
            double b_700_2 = AmBx*b_600_2 + r_100_600_2;
            double r_100_700_2 = AmBx*r_100_600_2 + r_200_600_2;
            double r_010_700_2 = AmBx*r_010_600_2 + r_110_600_2;
            double r_001_700_2 = AmBx*r_001_600_2 + r_101_600_2;
            double b_070_2 = AmBy*b_060_2 + r_010_060_2;
            double r_100_070_2 = AmBy*r_100_060_2 + r_110_060_2;
            double r_010_070_2 = AmBy*r_010_060_2 + r_020_060_2;
            double r_001_070_2 = AmBy*r_001_060_2 + r_011_060_2;
            double b_007_2 = AmBz*b_006_2 + r_001_006_2;
            double r_100_007_2 = AmBz*r_100_006_2 + r_101_006_2;
            double r_010_007_2 = AmBz*r_010_006_2 + r_011_006_2;
            double r_001_007_2 = AmBz*r_001_006_2 + r_002_006_2;
            double b_160_2 = AmBx*b_060_2 + r_100_060_2;
            double r_100_160_2 = AmBx*r_100_060_2 + r_200_060_2;
            double r_001_160_2 = AmBx*r_001_060_2 + r_101_060_2;
            double b_106_2 = AmBx*b_006_2 + r_100_006_2;
            double r_100_106_2 = AmBx*r_100_006_2 + r_200_006_2;
            double r_010_106_2 = AmBx*r_010_006_2 + r_110_006_2;
            double b_610_2 = AmBy*b_600_2 + r_010_600_2;
            double r_010_610_2 = AmBy*r_010_600_2 + r_020_600_2;
            double r_001_610_2 = AmBy*r_001_600_2 + r_011_600_2;
            double b_016_2 = AmBy*b_006_2 + r_010_006_2;
            double r_010_016_2 = AmBy*r_010_006_2 + r_020_006_2;
            double b_601_2 = AmBz*b_600_2 + r_001_600_2;
            double r_001_601_2 = AmBz*r_001_600_2 + r_002_600_2;
            double b_061_2 = AmBz*b_060_2 + r_001_060_2;
            double r_001_061_2 = AmBz*r_001_060_2 + r_002_060_2;
            double b_520_2 = AmBy*b_510_2 + r_010_510_2;
            double r_010_520_2 = AmBy*r_010_510_2 + r_020_510_2;
            double r_001_520_2 = AmBy*r_001_510_2 + r_011_510_2;
            double b_502_2 = AmBz*b_501_2 + r_001_501_2;
            double r_010_502_2 = AmBz*r_010_501_2 + r_011_501_2;
            double r_001_502_2 = AmBz*r_001_501_2 + r_002_501_2;
            double b_250_2 = AmBx*b_150_2 + r_100_150_2;
            double r_100_250_2 = AmBx*r_100_150_2 + r_200_150_2;
            double r_001_250_2 = AmBx*r_001_150_2 + r_101_150_2;
            double b_052_2 = AmBz*b_051_2 + r_001_051_2;
            double r_100_052_2 = AmBz*r_100_051_2 + r_101_051_2;
            double r_001_052_2 = AmBz*r_001_051_2 + r_002_051_2;
            double b_205_2 = AmBx*b_105_2 + r_100_105_2;
            double r_100_205_2 = AmBx*r_100_105_2 + r_200_105_2;
            double r_010_205_2 = AmBx*r_010_105_2 + r_110_105_2;
            double b_025_2 = AmBy*b_015_2 + r_010_015_2;
            double r_100_025_2 = AmBy*r_100_015_2 + r_110_015_2;
            double r_010_025_2 = AmBy*r_010_015_2 + r_020_015_2;
            double b_340_2 = AmBx*b_240_2 + r_100_240_2;
            double r_100_340_2 = AmBx*r_100_240_2 + r_200_240_2;
            double r_001_340_2 = AmBx*r_001_240_2 + r_101_240_2;
            double b_304_2 = AmBx*b_204_2 + r_100_204_2;
            double r_100_304_2 = AmBx*r_100_204_2 + r_200_204_2;
            double r_010_304_2 = AmBx*r_010_204_2 + r_110_204_2;
            double b_430_2 = AmBy*b_420_2 + r_010_420_2;
            double r_001_430_2 = AmBy*r_001_420_2 + r_011_420_2;
            double b_034_2 = AmBy*b_024_2 + r_010_024_2;
            double r_100_034_2 = AmBy*r_100_024_2 + r_110_024_2;
            double r_010_034_2 = AmBy*r_010_024_2 + r_020_024_2;
            double b_403_2 = AmBz*b_402_2 + r_001_402_2;
            double r_010_403_2 = AmBz*r_010_402_2 + r_011_402_2;
            double b_043_2 = AmBz*b_042_2 + r_001_042_2;
            double r_100_043_2 = AmBz*r_100_042_2 + r_101_042_2;
            double b_142_2 = AmBx*b_042_2 + r_100_042_2;
            double r_100_142_2 = AmBx*r_100_042_2 + r_200_042_2;
            double b_124_2 = AmBx*b_024_2 + r_100_024_2;
            double r_100_124_2 = AmBx*r_100_024_2 + r_200_024_2;
            double b_412_2 = AmBy*b_402_2 + r_010_402_2;
            double r_010_412_2 = AmBy*r_010_402_2 + r_020_402_2;
            double b_331_2 = AmBz*b_330_2 + r_001_330_2;
            double r_001_331_2 = AmBz*r_001_330_2 + r_002_330_2;
            double b_313_2 = AmBy*b_303_2 + r_010_303_2;
            double r_010_313_2 = AmBy*r_010_303_2 + r_020_303_2;
            double b_133_2 = AmBx*b_033_2 + r_100_033_2;
            double r_100_133_2 = AmBx*r_100_033_2 + r_200_033_2;
            double b_800_2 = AmBx*b_700_2 + r_100_700_2;
            double b_080_2 = AmBy*b_070_2 + r_010_070_2;
            double b_008_2 = AmBz*b_007_2 + r_001_007_2;
            double b_710_2 = AmBy*b_700_2 + r_010_700_2;
            double b_170_2 = AmBx*b_070_2 + r_100_070_2;
            double b_701_2 = AmBz*b_700_2 + r_001_700_2;
            double b_107_2 = AmBx*b_007_2 + r_100_007_2;
            double b_071_2 = AmBz*b_070_2 + r_001_070_2;
            double b_017_2 = AmBy*b_007_2 + r_010_007_2;
            double b_620_2 = AmBy*b_610_2 + r_010_610_2;
            double b_602_2 = AmBz*b_601_2 + r_001_601_2;
            double b_260_2 = AmBx*b_160_2 + r_100_160_2;
            double b_206_2 = AmBx*b_106_2 + r_100_106_2;
            double b_062_2 = AmBz*b_061_2 + r_001_061_2;
            double b_026_2 = AmBy*b_016_2 + r_010_016_2;
            double b_530_2 = AmBy*b_520_2 + r_010_520_2;
            double b_350_2 = AmBx*b_250_2 + r_100_250_2;
            double b_503_2 = AmBz*b_502_2 + r_001_502_2;
            double b_305_2 = AmBx*b_205_2 + r_100_205_2;
            double b_053_2 = AmBz*b_052_2 + r_001_052_2;
            double b_035_2 = AmBy*b_025_2 + r_010_025_2;
            double b_440_2 = AmBx*b_340_2 + r_100_340_2;
            double b_404_2 = AmBx*b_304_2 + r_100_304_2;
            double b_044_2 = AmBy*b_034_2 + r_010_034_2;
            double b_116_2 = AmBy*b_106_2 + r_010_106_2;
            double b_161_2 = AmBz*b_160_2 + r_001_160_2;
            double b_611_2 = AmBz*b_610_2 + r_001_610_2;
            double b_512_2 = AmBy*b_502_2 + r_010_502_2;
            double b_152_2 = AmBx*b_052_2 + r_100_052_2;
            double b_521_2 = AmBz*b_520_2 + r_001_520_2;
            double b_125_2 = AmBx*b_025_2 + r_100_025_2;
            double b_251_2 = AmBz*b_250_2 + r_001_250_2;
            double b_215_2 = AmBy*b_205_2 + r_010_205_2;
            double b_314_2 = AmBy*b_304_2 + r_010_304_2;
            double b_134_2 = AmBx*b_034_2 + r_100_034_2;
            double b_341_2 = AmBz*b_340_2 + r_001_340_2;
            double b_143_2 = AmBx*b_043_2 + r_100_043_2;
            double b_431_2 = AmBz*b_430_2 + r_001_430_2;
            double b_413_2 = AmBy*b_403_2 + r_010_403_2;
            double b_422_2 = AmBy*b_412_2 + r_010_412_2;
            double b_242_2 = AmBx*b_142_2 + r_100_142_2;
            double b_224_2 = AmBx*b_124_2 + r_100_124_2;
            double b_332_2 = AmBz*b_331_2 + r_001_331_2;
            double b_323_2 = AmBy*b_313_2 + r_010_313_2;
            double b_233_2 = AmBx*b_133_2 + r_100_133_2;
            double b_600_L1 = 15*b_600_1 - b_602_2 - b_620_2 - b_800_2;
            double b_060_L1 = 15*b_060_1 - b_062_2 - b_080_2 - b_260_2;
            double b_006_L1 = 15*b_006_1 - b_008_2 - b_026_2 - b_206_2;
            double b_510_L1 = 15*b_510_1 - b_512_2 - b_530_2 - b_710_2;
            double b_150_L1 = 15*b_150_1 - b_152_2 - b_170_2 - b_350_2;
            double b_501_L1 = 15*b_501_1 - b_503_2 - b_521_2 - b_701_2;
            double b_105_L1 = 15*b_105_1 - b_107_2 - b_125_2 - b_305_2;
            double b_051_L1 = 15*b_051_1 - b_053_2 - b_071_2 - b_251_2;
            double b_015_L1 = 15*b_015_1 - b_017_2 - b_035_2 - b_215_2;
            double b_420_L1 = 15*b_420_1 - b_422_2 - b_440_2 - b_620_2;
            double b_402_L1 = 15*b_402_1 - b_404_2 - b_422_2 - b_602_2;
            double b_240_L1 = 15*b_240_1 - b_242_2 - b_260_2 - b_440_2;
            double b_204_L1 = 15*b_204_1 - b_206_2 - b_224_2 - b_404_2;
            double b_042_L1 = 15*b_042_1 - b_044_2 - b_062_2 - b_242_2;
            double b_024_L1 = 15*b_024_1 - b_026_2 - b_044_2 - b_224_2;
            double b_330_L1 = 15*b_330_1 - b_332_2 - b_350_2 - b_530_2;
            double b_303_L1 = 15*b_303_1 - b_305_2 - b_323_2 - b_503_2;
            double b_033_L1 = 15*b_033_1 - b_035_2 - b_053_2 - b_233_2;
            double b_114_L1 = 15*b_114_1 - b_116_2 - b_134_2 - b_314_2;
            double b_141_L1 = 15*b_141_1 - b_143_2 - b_161_2 - b_341_2;
            double b_411_L1 = 15*b_411_1 - b_413_2 - b_431_2 - b_611_2;
            double b_312_L1 = 15*b_312_1 - b_314_2 - b_332_2 - b_512_2;
            double b_132_L1 = 15*b_132_1 - b_134_2 - b_152_2 - b_332_2;
            double b_321_L1 = 15*b_321_1 - b_323_2 - b_341_2 - b_521_2;
            double b_123_L1 = 15*b_123_1 - b_125_2 - b_143_2 - b_323_2;
            double b_231_L1 = 15*b_231_1 - b_233_2 - b_251_2 - b_431_2;
            double b_213_L1 = 15*b_213_1 - b_215_2 - b_233_2 - b_413_2;
            double b_222_L1 = 15*b_222_1 - b_224_2 - b_242_2 - b_422_2;
            // 52.32 steps per component, 11.45 kb stack
            pOut_[sb*0] = -b_060_L1*sd2b + b_240_L1*sd2c - b_420_L1*sd2c + b_600_L1*sd2b;
            pOut_[sb*10] = -b_033_L1*sd38 + b_051_L1*sd3b + b_213_L1*sd3e - b_231_L1*sd3c - b_411_L1*sd3d;
            pOut_[sb*11] = b_015_L1*sd49 - b_033_L1*sd48 + b_051_L1*sd46 - b_213_L1*sd48 + b_231_L1*sd47 + b_411_L1*sd46;
            pOut_[sb*12] = b_105_L1*sd49 - b_123_L1*sd48 + b_141_L1*sd46 - b_303_L1*sd48 + b_321_L1*sd47 + b_501_L1*sd46;
            pOut_[sb*1] = b_114_L1*sd2f - b_132_L1*sd2f + b_150_L1*sd2d - b_312_L1*sd2f + b_330_L1*sd2e + b_510_L1*sd2d;
            pOut_[sb*2] = b_141_L1*sd32 - b_321_L1*sd31 + b_501_L1*sd30;
            pOut_[sb*3] = b_042_L1*sd35 - b_060_L1*sd33 - b_222_L1*sd36 + b_240_L1*sd34 + b_402_L1*sd35 + b_420_L1*sd34 - b_600_L1*sd33;
            pOut_[sb*4] = b_051_L1*sd30 - b_231_L1*sd31 + b_411_L1*sd32;
            pOut_[sb*5] = -b_024_L1*sd38 + b_042_L1*sd38 - b_060_L1*sd37 + b_204_L1*sd38 - b_240_L1*sd37 - b_402_L1*sd38 + b_420_L1*sd37 + b_600_L1*sd37;
            pOut_[sb*6] = b_150_L1*sd39 - b_330_L1*sd3a + b_510_L1*sd39;
            pOut_[sb*7] = -b_123_L1*sd3e + b_141_L1*sd3d + b_303_L1*sd38 + b_321_L1*sd3c - b_501_L1*sd3b;
            pOut_[sb*8] = -b_132_L1*sd40 + b_150_L1*sd3f + b_312_L1*sd40 - b_510_L1*sd3f;
            pOut_[sb*9] = b_006_L1 - b_024_L1*sd45 + b_042_L1*sd43 - b_060_L1*sd41 - b_204_L1*sd45 + b_222_L1*sd44 - b_240_L1*sd42 + b_402_L1*sd43 - b_420_L1*sd42 - b_600_L1*sd41;
         }
         return;
      }
   }
   //assert(0);
}

// Solid harmonic -> cartesian transform: Transform a matrix (2*l+1) x N to nCartY(l) x N
static void CaTrC6(double * pOut, double const * pIn, size_t N)
{
   for (size_t i = 0; i < N; ++ i) {
      pOut[0] = pIn[0]*sd2b - pIn[3]*sd33 + pIn[5]*sd37 - pIn[9]*sd41;
      pOut[1] = -pIn[0]*sd2b - pIn[3]*sd33 - pIn[5]*sd37 - pIn[9]*sd41;
      pOut[2] = pIn[9];
      pOut[3] = pIn[1]*sd2d + pIn[6]*sd39 - pIn[8]*sd3f;
      pOut[4] = pIn[1]*sd2d + pIn[6]*sd39 + pIn[8]*sd3f;
      pOut[5] = pIn[12]*sd46 + pIn[2]*sd30 - pIn[7]*sd3b;
      pOut[6] = pIn[12]*sd49;
      pOut[7] = pIn[10]*sd3b + pIn[11]*sd46 + pIn[4]*sd30;
      pOut[8] = pIn[11]*sd49;
      pOut[9] = -pIn[0]*sd2c + pIn[3]*sd34 + pIn[5]*sd37 - pIn[9]*sd42;
      pOut[10] = pIn[3]*sd35 - pIn[5]*sd38 + pIn[9]*sd43;
      pOut[11] = pIn[0]*sd2c + pIn[3]*sd34 - pIn[5]*sd37 - pIn[9]*sd42;
      pOut[12] = pIn[5]*sd38 - pIn[9]*sd45;
      pOut[13] = pIn[3]*sd35 + pIn[5]*sd38 + pIn[9]*sd43;
      pOut[14] = -pIn[5]*sd38 - pIn[9]*sd45;
      pOut[15] = pIn[1]*sd2e - pIn[6]*sd3a;
      pOut[16] = -pIn[12]*sd48 + pIn[7]*sd38;
      pOut[17] = -pIn[10]*sd38 - pIn[11]*sd48;
      pOut[18] = pIn[1]*sd2f;
      pOut[19] = pIn[12]*sd46 + pIn[2]*sd32 + pIn[7]*sd3d;
      pOut[20] = -pIn[10]*sd3d + pIn[11]*sd46 + pIn[4]*sd32;
      pOut[21] = -pIn[1]*sd2f + pIn[8]*sd40;
      pOut[22] = -pIn[1]*sd2f - pIn[8]*sd40;
      pOut[23] = pIn[12]*sd47 - pIn[2]*sd31 + pIn[7]*sd3c;
      pOut[24] = -pIn[12]*sd48 - pIn[7]*sd3e;
      pOut[25] = -pIn[10]*sd3c + pIn[11]*sd47 - pIn[4]*sd31;
      pOut[26] = pIn[10]*sd3e - pIn[11]*sd48;
      pOut[27] = -pIn[3]*sd36 + pIn[9]*sd44;
      pOut += 28;
      pIn += 13;
   }
}

static void CaTrC5(double * pOut, double const * pIn, size_t N)
{
   for (size_t i = 0; i < N; ++ i) {
      pOut[0] = pIn[0]*sd17 - pIn[3]*sd1c + pIn[9]*sd26;
      pOut[1] = pIn[1]*sd17 + pIn[5]*sd1c + pIn[7]*sd26;
      pOut[2] = pIn[8];
      pOut[3] = pIn[0]*sd17 + pIn[3]*sd1f + pIn[9]*sd24;
      pOut[4] = pIn[0]*sd8;
      pOut[5] = pIn[1]*sd17 - pIn[5]*sd1f + pIn[7]*sd24;
      pOut[6] = pIn[1]*sd8;
      pOut[7] = -pIn[2]*sd1a + pIn[6]*sd22 + pIn[8]*sd27;
      pOut[8] = pIn[2]*sd1a + pIn[6]*sd22 + pIn[8]*sd27;
      pOut[9] = pIn[0]*sd18 + pIn[3]*sd1d - pIn[9]*sd25;
      pOut[10] = -pIn[0]*sd19 + pIn[3]*sd1e;
      pOut[11] = pIn[1]*sd18 - pIn[5]*sd1d - pIn[7]*sd25;
      pOut[12] = -pIn[1]*sd19 - pIn[5]*sd1e;
      pOut[13] = pIn[2]*sd1b - pIn[8]*sd29;
      pOut[14] = -pIn[2]*sd1b - pIn[8]*sd29;
      pOut[15] = -pIn[10]*sd1b + pIn[4]*sd21;
      pOut[16] = -pIn[10]*sd1b - pIn[4]*sd21;
      pOut[17] = pIn[10]*sd2a;
      pOut[18] = -pIn[0]*sd19 - pIn[3]*sd20;
      pOut[19] = -pIn[1]*sd19 + pIn[5]*sd20;
      pOut[20] = -pIn[6]*sd23 + pIn[8]*sd28;
      pOut += 21;
      pIn += 11;
   }
}

static void CaTrC4(double * pOut, double const * pIn, size_t N)
{
   for (size_t i = 0; i < N; ++ i) {
      pOut[0] = pIn[0]*sda + pIn[3]*sd10 - pIn[5]*sd12;
      pOut[1] = pIn[0]*sda + pIn[3]*sd10 + pIn[5]*sd12;
      pOut[2] = pIn[0];
      pOut[3] = -pIn[1]*sdd + pIn[6]*sd14;
      pOut[4] = -pIn[1]*sdd - pIn[6]*sd14;
      pOut[5] = -pIn[2]*sd7 + pIn[7]*sd15;
      pOut[6] = pIn[2]*sdf;
      pOut[7] = -pIn[4]*sd7 - pIn[8]*sd15;
      pOut[8] = pIn[4]*sdf;
      pOut[9] = pIn[0]*sdb - pIn[3]*sd11;
      pOut[10] = -pIn[0]*sdc + pIn[5]*sd13;
      pOut[11] = -pIn[0]*sdc - pIn[5]*sd13;
      pOut[12] = pIn[1]*sde;
      pOut[13] = -pIn[2]*sd7 - pIn[7]*sd16;
      pOut[14] = -pIn[4]*sd7 + pIn[8]*sd16;
      pOut += 15;
      pIn += 9;
   }
}

static void CaTrC3(double * pOut, double const * pIn, size_t N)
{
   for (size_t i = 0; i < N; ++ i) {
      pOut[0] = -pIn[0]*sd3 + pIn[3]*sd6;
      pOut[1] = -pIn[1]*sd3 - pIn[5]*sd6;
      pOut[2] = pIn[2];
      pOut[3] = -pIn[0]*sd3 - pIn[3]*sd7;
      pOut[4] = pIn[0]*sd4;
      pOut[5] = -pIn[1]*sd3 + pIn[5]*sd7;
      pOut[6] = pIn[1]*sd4;
      pOut[7] = -pIn[2]*sd5 + pIn[6]*sd9;
      pOut[8] = -pIn[2]*sd5 - pIn[6]*sd9;
      pOut[9] = pIn[4]*sd8;
      pOut += 10;
      pIn += 7;
   }
}

static void CaTrC2(double * pOut, double const * pIn, size_t N)
{
   for (size_t i = 0; i < N; ++ i) {
      pOut[0] = -pIn[0]*sd0 + pIn[3]*sd2;
      pOut[1] = -pIn[0]*sd0 - pIn[3]*sd2;
      pOut[2] = pIn[0];
      pOut[3] = pIn[1]*sd1;
      pOut[4] = pIn[2]*sd1;
      pOut[5] = pIn[4]*sd1;
      pOut += 6;
      pIn += 5;
   }
}

static void CaTrC1(double * pOut, double const * pIn, size_t N)
{
   for (size_t i = 0; i < N; ++ i) {
      pOut[0] = pIn[0];
      pOut[1] = pIn[1];
      pOut[2] = pIn[2];
      pOut += 3;
      pIn += 3;
   }
}

static void CaTrC0(double * pOut, double const * pIn, size_t N)
{
   for (size_t i = 0; i < N; ++ i) {
      pOut[0] = pIn[0];
      pOut += 1;
      pIn += 1;
   }
}

// Solid harmonic -> cartesian transform: Transform a matrix (2*l+1) x N to nCartY(l) x N
void CaTrC(double * pOut, double const * pIn, size_t N, unsigned l)
{
   switch(l) {
      case 0: return CaTrC0(pOut, pIn, N);
      case 1: return CaTrC1(pOut, pIn, N);
      case 2: return CaTrC2(pOut, pIn, N);
      case 3: return CaTrC3(pOut, pIn, N);
      case 4: return CaTrC4(pOut, pIn, N);
      case 5: return CaTrC5(pOut, pIn, N);
      case 6: return CaTrC6(pOut, pIn, N);
   }
   //assert(0);
}

// Solid harmonic -> cartesian transform: Transform single (2*l+1) to nCartY(l)
static void CaTrA6(double * pOut, double const * pIn, size_t si)
{
   pOut[0] = pIn[si*0]*sd2b - pIn[si*3]*sd33 + pIn[si*5]*sd37 - pIn[si*9]*sd41;
   pOut[1] = -pIn[si*0]*sd2b - pIn[si*3]*sd33 - pIn[si*5]*sd37 - pIn[si*9]*sd41;
   pOut[2] = pIn[si*9];
   pOut[3] = pIn[si*1]*sd2d + pIn[si*6]*sd39 - pIn[si*8]*sd3f;
   pOut[4] = pIn[si*1]*sd2d + pIn[si*6]*sd39 + pIn[si*8]*sd3f;
   pOut[5] = pIn[si*12]*sd46 + pIn[si*2]*sd30 - pIn[si*7]*sd3b;
   pOut[6] = pIn[si*12]*sd49;
   pOut[7] = pIn[si*10]*sd3b + pIn[si*11]*sd46 + pIn[si*4]*sd30;
   pOut[8] = pIn[si*11]*sd49;
   pOut[9] = -pIn[si*0]*sd2c + pIn[si*3]*sd34 + pIn[si*5]*sd37 - pIn[si*9]*sd42;
   pOut[10] = pIn[si*3]*sd35 - pIn[si*5]*sd38 + pIn[si*9]*sd43;
   pOut[11] = pIn[si*0]*sd2c + pIn[si*3]*sd34 - pIn[si*5]*sd37 - pIn[si*9]*sd42;
   pOut[12] = pIn[si*5]*sd38 - pIn[si*9]*sd45;
   pOut[13] = pIn[si*3]*sd35 + pIn[si*5]*sd38 + pIn[si*9]*sd43;
   pOut[14] = -pIn[si*5]*sd38 - pIn[si*9]*sd45;
   pOut[15] = pIn[si*1]*sd2e - pIn[si*6]*sd3a;
   pOut[16] = -pIn[si*12]*sd48 + pIn[si*7]*sd38;
   pOut[17] = -pIn[si*10]*sd38 - pIn[si*11]*sd48;
   pOut[18] = pIn[si*1]*sd2f;
   pOut[19] = pIn[si*12]*sd46 + pIn[si*2]*sd32 + pIn[si*7]*sd3d;
   pOut[20] = -pIn[si*10]*sd3d + pIn[si*11]*sd46 + pIn[si*4]*sd32;
   pOut[21] = -pIn[si*1]*sd2f + pIn[si*8]*sd40;
   pOut[22] = -pIn[si*1]*sd2f - pIn[si*8]*sd40;
   pOut[23] = pIn[si*12]*sd47 - pIn[si*2]*sd31 + pIn[si*7]*sd3c;
   pOut[24] = -pIn[si*12]*sd48 - pIn[si*7]*sd3e;
   pOut[25] = -pIn[si*10]*sd3c + pIn[si*11]*sd47 - pIn[si*4]*sd31;
   pOut[26] = pIn[si*10]*sd3e - pIn[si*11]*sd48;
   pOut[27] = -pIn[si*3]*sd36 + pIn[si*9]*sd44;
}

static void CaTrA5(double * pOut, double const * pIn, size_t si)
{
   pOut[0] = pIn[si*0]*sd17 - pIn[si*3]*sd1c + pIn[si*9]*sd26;
   pOut[1] = pIn[si*1]*sd17 + pIn[si*5]*sd1c + pIn[si*7]*sd26;
   pOut[2] = pIn[si*8];
   pOut[3] = pIn[si*0]*sd17 + pIn[si*3]*sd1f + pIn[si*9]*sd24;
   pOut[4] = pIn[si*0]*sd8;
   pOut[5] = pIn[si*1]*sd17 - pIn[si*5]*sd1f + pIn[si*7]*sd24;
   pOut[6] = pIn[si*1]*sd8;
   pOut[7] = -pIn[si*2]*sd1a + pIn[si*6]*sd22 + pIn[si*8]*sd27;
   pOut[8] = pIn[si*2]*sd1a + pIn[si*6]*sd22 + pIn[si*8]*sd27;
   pOut[9] = pIn[si*0]*sd18 + pIn[si*3]*sd1d - pIn[si*9]*sd25;
   pOut[10] = -pIn[si*0]*sd19 + pIn[si*3]*sd1e;
   pOut[11] = pIn[si*1]*sd18 - pIn[si*5]*sd1d - pIn[si*7]*sd25;
   pOut[12] = -pIn[si*1]*sd19 - pIn[si*5]*sd1e;
   pOut[13] = pIn[si*2]*sd1b - pIn[si*8]*sd29;
   pOut[14] = -pIn[si*2]*sd1b - pIn[si*8]*sd29;
   pOut[15] = -pIn[si*10]*sd1b + pIn[si*4]*sd21;
   pOut[16] = -pIn[si*10]*sd1b - pIn[si*4]*sd21;
   pOut[17] = pIn[si*10]*sd2a;
   pOut[18] = -pIn[si*0]*sd19 - pIn[si*3]*sd20;
   pOut[19] = -pIn[si*1]*sd19 + pIn[si*5]*sd20;
   pOut[20] = -pIn[si*6]*sd23 + pIn[si*8]*sd28;
}

static void CaTrA4(double * pOut, double const * pIn, size_t si)
{
   pOut[0] = pIn[si*0]*sda + pIn[si*3]*sd10 - pIn[si*5]*sd12;
   pOut[1] = pIn[si*0]*sda + pIn[si*3]*sd10 + pIn[si*5]*sd12;
   pOut[2] = pIn[si*0];
   pOut[3] = -pIn[si*1]*sdd + pIn[si*6]*sd14;
   pOut[4] = -pIn[si*1]*sdd - pIn[si*6]*sd14;
   pOut[5] = -pIn[si*2]*sd7 + pIn[si*7]*sd15;
   pOut[6] = pIn[si*2]*sdf;
   pOut[7] = -pIn[si*4]*sd7 - pIn[si*8]*sd15;
   pOut[8] = pIn[si*4]*sdf;
   pOut[9] = pIn[si*0]*sdb - pIn[si*3]*sd11;
   pOut[10] = -pIn[si*0]*sdc + pIn[si*5]*sd13;
   pOut[11] = -pIn[si*0]*sdc - pIn[si*5]*sd13;
   pOut[12] = pIn[si*1]*sde;
   pOut[13] = -pIn[si*2]*sd7 - pIn[si*7]*sd16;
   pOut[14] = -pIn[si*4]*sd7 + pIn[si*8]*sd16;
}

static void CaTrA3(double * pOut, double const * pIn, size_t si)
{
   pOut[0] = -pIn[si*0]*sd3 + pIn[si*3]*sd6;
   pOut[1] = -pIn[si*1]*sd3 - pIn[si*5]*sd6;
   pOut[2] = pIn[si*2];
   pOut[3] = -pIn[si*0]*sd3 - pIn[si*3]*sd7;
   pOut[4] = pIn[si*0]*sd4;
   pOut[5] = -pIn[si*1]*sd3 + pIn[si*5]*sd7;
   pOut[6] = pIn[si*1]*sd4;
   pOut[7] = -pIn[si*2]*sd5 + pIn[si*6]*sd9;
   pOut[8] = -pIn[si*2]*sd5 - pIn[si*6]*sd9;
   pOut[9] = pIn[si*4]*sd8;
}

static void CaTrA2(double * pOut, double const * pIn, size_t si)
{
   pOut[0] = -pIn[si*0]*sd0 + pIn[si*3]*sd2;
   pOut[1] = -pIn[si*0]*sd0 - pIn[si*3]*sd2;
   pOut[2] = pIn[si*0];
   pOut[3] = pIn[si*1]*sd1;
   pOut[4] = pIn[si*2]*sd1;
   pOut[5] = pIn[si*4]*sd1;
}

static void CaTrA1(double * pOut, double const * pIn, size_t si)
{
   pOut[0] = pIn[si*0];
   pOut[1] = pIn[si*1];
   pOut[2] = pIn[si*2];
}

static void CaTrA0(double * pOut, double const * pIn, size_t si)
{
   pOut[0] = pIn[si*0];
}

// Solid harmonic -> cartesian transform: Transform single (2*l+1) to nCartY(l)
void CaTrA(double * pOut, double const * pIn, size_t si, unsigned l)
{
   switch(l) {
      case 0: return CaTrA0(pOut, pIn, si);
      case 1: return CaTrA1(pOut, pIn, si);
      case 2: return CaTrA2(pOut, pIn, si);
      case 3: return CaTrA3(pOut, pIn, si);
      case 4: return CaTrA4(pOut, pIn, si);
      case 5: return CaTrA5(pOut, pIn, si);
      case 6: return CaTrA6(pOut, pIn, si);
   }
   //assert(0);
}

// Expand solid harmonic S[l=lb,m](r-B) centered at B into cartesians of degree 0..lb centered at A.
void OsrrRx(double * pOut, double const * pIn, size_t si, double AmBx, double AmBy, double AmBz, unsigned lb)
{
   double p0, p1, p2, p3, p4, p5;
   switch (lb) {
      case 0: {
         pOut[0] = pIn[0];
         return;
      }
      case 1: {
         pOut[1] = pIn[0];
         pOut[2] = pIn[si];
         pOut[3] = pIn[2*si];
         pOut[0] = AmBx*pOut[1] + AmBy*pOut[2] + AmBz*pOut[3];
         return;
      }
      case 2: {
         CaTrA2(&pOut[4], &pIn[0], si);
         p0 = 1./2.;
         p1 = 1./1.;
         goto _osrr_rx1;
      }
      case 3: {
         CaTrA3(&pOut[10], &pIn[0], si);
         p0 = 1./3.;
         p1 = 1./2.;
         p2 = 1./1.;
         goto _osrr_rx2;
      }
      case 4: {
         CaTrA4(&pOut[20], &pIn[0], si);
         p0 = 1./4.;
         p1 = 1./3.;
         p2 = 1./2.;
         p3 = 1./1.;
         goto _osrr_rx3;
      }
      case 5: {
         CaTrA5(&pOut[35], &pIn[0], si);
         p0 = 1./5.;
         p1 = 1./4.;
         p2 = 1./3.;
         p3 = 1./2.;
         p4 = 1./1.;
         goto _osrr_rx4;
      }
      case 6: {
         CaTrA6(&pOut[56], &pIn[0], si);
         p0 = 1./6.;
         p1 = 1./5.;
         p2 = 1./4.;
         p3 = 1./3.;
         p4 = 1./2.;
         p5 = 1./1.;
         goto _osrr_rx5;
      }
   }
   //assert(0);
   _osrr_rx5:
   pOut[35] = p5*(6*AmBx*pOut[56] + AmBy*pOut[59] + AmBz*pOut[61]);
   pOut[36] = p5*(AmBx*pOut[60] + 6*AmBy*pOut[57] + AmBz*pOut[63]);
   pOut[37] = p5*(AmBx*pOut[62] + AmBy*pOut[64] + 6*AmBz*pOut[58]);
   pOut[38] = p5*(2*AmBx*pOut[67] + 5*AmBy*pOut[60] + AmBz*pOut[75]);
   pOut[39] = p5*(2*AmBx*pOut[68] + AmBy*pOut[74] + 5*AmBz*pOut[62]);
   pOut[40] = p5*(5*AmBx*pOut[59] + 2*AmBy*pOut[65] + AmBz*pOut[76]);
   pOut[41] = p5*(AmBx*pOut[74] + 2*AmBy*pOut[70] + 5*AmBz*pOut[64]);
   pOut[42] = p5*(5*AmBx*pOut[61] + AmBy*pOut[76] + 2*AmBz*pOut[66]);
   pOut[43] = p5*(AmBx*pOut[75] + 5*AmBy*pOut[63] + 2*AmBz*pOut[69]);
   pOut[44] = p5*(4*AmBx*pOut[65] + 3*AmBy*pOut[71] + AmBz*pOut[79]);
   pOut[45] = p5*(4*AmBx*pOut[66] + AmBy*pOut[77] + 3*AmBz*pOut[72]);
   pOut[46] = p5*(3*AmBx*pOut[71] + 4*AmBy*pOut[67] + AmBz*pOut[81]);
   pOut[47] = p5*(AmBx*pOut[78] + 4*AmBy*pOut[69] + 3*AmBz*pOut[73]);
   pOut[48] = p5*(3*AmBx*pOut[72] + AmBy*pOut[82] + 4*AmBz*pOut[68]);
   pOut[49] = p5*(AmBx*pOut[80] + 3*AmBy*pOut[73] + 4*AmBz*pOut[70]);
   pOut[50] = p5*(4*AmBx*pOut[76] + 2*AmBy*pOut[79] + 2*AmBz*pOut[77]);
   pOut[51] = p5*(2*AmBx*pOut[81] + 4*AmBy*pOut[75] + 2*AmBz*pOut[78]);
   pOut[52] = p5*(2*AmBx*pOut[82] + 2*AmBy*pOut[80] + 4*AmBz*pOut[74]);
   pOut[53] = p5*(2*AmBx*pOut[83] + 3*AmBy*pOut[78] + 3*AmBz*pOut[80]);
   pOut[54] = p5*(3*AmBx*pOut[77] + 2*AmBy*pOut[83] + 3*AmBz*pOut[82]);
   pOut[55] = p5*(3*AmBx*pOut[79] + 3*AmBy*pOut[81] + 2*AmBz*pOut[83]);
   _osrr_rx4:
   pOut[20] = p4*(5*AmBx*pOut[35] + AmBy*pOut[40] + AmBz*pOut[42]);
   pOut[21] = p4*(AmBx*pOut[38] + 5*AmBy*pOut[36] + AmBz*pOut[43]);
   pOut[22] = p4*(AmBx*pOut[39] + AmBy*pOut[41] + 5*AmBz*pOut[37]);
   pOut[23] = p4*(4*AmBx*pOut[40] + 2*AmBy*pOut[44] + AmBz*pOut[50]);
   pOut[24] = p4*(2*AmBx*pOut[46] + 4*AmBy*pOut[38] + AmBz*pOut[51]);
   pOut[25] = p4*(4*AmBx*pOut[42] + AmBy*pOut[50] + 2*AmBz*pOut[45]);
   pOut[26] = p4*(2*AmBx*pOut[48] + AmBy*pOut[52] + 4*AmBz*pOut[39]);
   pOut[27] = p4*(AmBx*pOut[51] + 4*AmBy*pOut[43] + 2*AmBz*pOut[47]);
   pOut[28] = p4*(AmBx*pOut[52] + 2*AmBy*pOut[49] + 4*AmBz*pOut[41]);
   pOut[29] = p4*(3*AmBx*pOut[44] + 3*AmBy*pOut[46] + AmBz*pOut[55]);
   pOut[30] = p4*(3*AmBx*pOut[45] + AmBy*pOut[54] + 3*AmBz*pOut[48]);
   pOut[31] = p4*(AmBx*pOut[53] + 3*AmBy*pOut[47] + 3*AmBz*pOut[49]);
   pOut[32] = p4*(2*AmBx*pOut[54] + 2*AmBy*pOut[53] + 3*AmBz*pOut[52]);
   pOut[33] = p4*(2*AmBx*pOut[55] + 3*AmBy*pOut[51] + 2*AmBz*pOut[53]);
   pOut[34] = p4*(3*AmBx*pOut[50] + 2*AmBy*pOut[55] + 2*AmBz*pOut[54]);
   _osrr_rx3:
   pOut[10] = p3*(4*AmBx*pOut[20] + AmBy*pOut[23] + AmBz*pOut[25]);
   pOut[11] = p3*(AmBx*pOut[24] + 4*AmBy*pOut[21] + AmBz*pOut[27]);
   pOut[12] = p3*(AmBx*pOut[26] + AmBy*pOut[28] + 4*AmBz*pOut[22]);
   pOut[13] = p3*(2*AmBx*pOut[29] + 3*AmBy*pOut[24] + AmBz*pOut[33]);
   pOut[14] = p3*(2*AmBx*pOut[30] + AmBy*pOut[32] + 3*AmBz*pOut[26]);
   pOut[15] = p3*(3*AmBx*pOut[23] + 2*AmBy*pOut[29] + AmBz*pOut[34]);
   pOut[16] = p3*(AmBx*pOut[32] + 2*AmBy*pOut[31] + 3*AmBz*pOut[28]);
   pOut[17] = p3*(3*AmBx*pOut[25] + AmBy*pOut[34] + 2*AmBz*pOut[30]);
   pOut[18] = p3*(AmBx*pOut[33] + 3*AmBy*pOut[27] + 2*AmBz*pOut[31]);
   pOut[19] = p3*(2*AmBx*pOut[34] + 2*AmBy*pOut[33] + 2*AmBz*pOut[32]);
   _osrr_rx2:
   pOut[4] = p2*(3*AmBx*pOut[10] + AmBy*pOut[15] + AmBz*pOut[17]);
   pOut[5] = p2*(AmBx*pOut[13] + 3*AmBy*pOut[11] + AmBz*pOut[18]);
   pOut[6] = p2*(AmBx*pOut[14] + AmBy*pOut[16] + 3*AmBz*pOut[12]);
   pOut[7] = p2*(2*AmBx*pOut[15] + 2*AmBy*pOut[13] + AmBz*pOut[19]);
   pOut[8] = p2*(2*AmBx*pOut[17] + AmBy*pOut[19] + 2*AmBz*pOut[14]);
   pOut[9] = p2*(AmBx*pOut[19] + 2*AmBy*pOut[18] + 2*AmBz*pOut[16]);
   _osrr_rx1:
   pOut[1] = p1*(2*AmBx*pOut[4] + AmBy*pOut[7] + AmBz*pOut[8]);
   pOut[2] = p1*(AmBx*pOut[7] + 2*AmBy*pOut[5] + AmBz*pOut[9]);
   pOut[3] = p1*(AmBx*pOut[8] + AmBy*pOut[9] + 2*AmBz*pOut[6]);
   pOut[0] = p0*(AmBx*pOut[1] + AmBy*pOut[2] + AmBz*pOut[3]);
}

// Cartesian -> Solid harmonic transforms: Transform a matrix
// nCartY(l) x N to (2*l+1) x N.
static void ShTrC6_NN(double * pOut, double const * pIn, size_t N)
{
   for (size_t i = 0; i < N; ++ i) {
      double z0 = pIn[0], z1 = pIn[1], z3 = pIn[3], z4 = pIn[4], z5 = pIn[5], z7 = pIn[7], z9 = pIn[9], za = pIn[10], zb = pIn[11], zc = pIn[12], zd = pIn[13], ze = pIn[14], zf = pIn[15], z10 = pIn[16], z11 = pIn[17], z13 = pIn[19], z14 = pIn[20], z15 = pIn[21], z16 = pIn[22], z17 = pIn[23], z18 = pIn[24], z19 = pIn[25], z1a = pIn[26], z1b = pIn[27];
      pOut[0] = sd2b*z0 - sd2b*z1 - sd2c*z9 + sd2c*zb;
      pOut[1] = pIn[18]*sd2f + sd2d*z3 + sd2d*z4 + sd2e*zf - sd2f*z15 - sd2f*z16;
      pOut[2] = sd30*z5 - sd31*z17 + sd32*z13;
      pOut[3] = -sd33*z0 - sd33*z1 + sd34*z9 + sd34*zb + sd35*za + sd35*zd - sd36*z1b;
      pOut[4] = sd30*z7 - sd31*z19 + sd32*z14;
      pOut[5] = sd37*z0 - sd37*z1 + sd37*z9 - sd37*zb - sd38*za + sd38*zc + sd38*zd - sd38*ze;
      pOut[6] = sd39*z3 + sd39*z4 - sd3a*zf;
      pOut[7] = sd38*z10 - sd3b*z5 + sd3c*z17 + sd3d*z13 - sd3e*z18;
      pOut[8] = -sd3f*z3 + sd3f*z4 + sd40*z15 - sd40*z16;
      pOut[9] = pIn[2] - sd41*z0 - sd41*z1 - sd42*z9 - sd42*zb + sd43*za + sd43*zd + sd44*z1b - sd45*zc - sd45*ze;
      pOut[10] = -sd38*z11 + sd3b*z7 - sd3c*z19 - sd3d*z14 + sd3e*z1a;
      pOut[11] = pIn[8]*sd49 + sd46*z14 + sd46*z7 + sd47*z19 - sd48*z11 - sd48*z1a;
      pOut[12] = pIn[6]*sd49 + sd46*z13 + sd46*z5 + sd47*z17 - sd48*z10 - sd48*z18;
      pOut += 13;
      pIn += 28;
   }
   return;
}

static void ShTrC5_NN(double * pOut, double const * pIn, size_t N)
{
   for (size_t i = 0; i < N; ++ i) {
      double z0 = pIn[0], z1 = pIn[1], z3 = pIn[3], z5 = pIn[5], z7 = pIn[7], z8 = pIn[8], z9 = pIn[9], za = pIn[10], zb = pIn[11], zc = pIn[12], zd = pIn[13], ze = pIn[14], zf = pIn[15], z10 = pIn[16], z12 = pIn[18], z13 = pIn[19], z14 = pIn[20];
      pOut[0] = pIn[4]*sd8 + sd17*z0 + sd17*z3 + sd18*z9 - sd19*z12 - sd19*za;
      pOut[1] = pIn[6]*sd8 + sd17*z1 + sd17*z5 + sd18*zb - sd19*z13 - sd19*zc;
      pOut[2] = -sd1a*z7 + sd1a*z8 + sd1b*zd - sd1b*ze;
      pOut[3] = -sd1c*z0 + sd1d*z9 + sd1e*za + sd1f*z3 - sd20*z12;
      pOut[4] = -sd21*z10 + sd21*zf;
      pOut[5] = sd1c*z1 - sd1d*zb - sd1e*zc - sd1f*z5 + sd20*z13;
      pOut[6] = sd22*z7 + sd22*z8 - sd23*z14;
      pOut[7] = sd24*z5 - sd25*zb + sd26*z1;
      pOut[8] = pIn[2] + sd27*z7 + sd27*z8 + sd28*z14 - sd29*zd - sd29*ze;
      pOut[9] = sd24*z3 - sd25*z9 + sd26*z0;
      pOut[10] = pIn[17]*sd2a - sd1b*z10 - sd1b*zf;
      pOut += 11;
      pIn += 21;
   }
   return;
}

static void ShTrC4_NN(double * pOut, double const * pIn, size_t N)
{
   for (size_t i = 0; i < N; ++ i) {
      double z0 = pIn[0], z1 = pIn[1], z3 = pIn[3], z4 = pIn[4], z5 = pIn[5], z7 = pIn[7], z9 = pIn[9], za = pIn[10], zb = pIn[11], zd = pIn[13], ze = pIn[14];
      pOut[0] = pIn[2] + sda*z0 + sda*z1 + sdb*z9 - sdc*za - sdc*zb;
      pOut[1] = pIn[12]*sde - sdd*z3 - sdd*z4;
      pOut[2] = pIn[6]*sdf - sd7*z5 - sd7*zd;
      pOut[3] = sd10*z0 + sd10*z1 - sd11*z9;
      pOut[4] = pIn[8]*sdf - sd7*z7 - sd7*ze;
      pOut[5] = -sd12*z0 + sd12*z1 + sd13*za - sd13*zb;
      pOut[6] = sd14*z3 - sd14*z4;
      pOut[7] = sd15*z5 - sd16*zd;
      pOut[8] = -sd15*z7 + sd16*ze;
      pOut += 9;
      pIn += 15;
   }
   return;
}

static void ShTrC3_NN(double * pOut, double const * pIn, size_t N)
{
   for (size_t i = 0; i < N; ++ i) {
      double z0 = pIn[0], z1 = pIn[1], z3 = pIn[3], z5 = pIn[5], z7 = pIn[7], z8 = pIn[8];
      pOut[0] = pIn[4]*sd4 - sd3*z0 - sd3*z3;
      pOut[1] = pIn[6]*sd4 - sd3*z1 - sd3*z5;
      pOut[2] = pIn[2] - sd5*z7 - sd5*z8;
      pOut[3] = sd6*z0 - sd7*z3;
      pOut[4] = pIn[9]*sd8;
      pOut[5] = -sd6*z1 + sd7*z5;
      pOut[6] = sd9*z7 - sd9*z8;
      pOut += 7;
      pIn += 10;
   }
   return;
}

static void ShTrC2_NN(double * pOut, double const * pIn, size_t N)
{
   for (size_t i = 0; i < N; ++ i) {
      double z0 = pIn[0], z1 = pIn[1];
      pOut[0] = pIn[2] - sd0*z0 - sd0*z1;
      pOut[1] = pIn[3]*sd1;
      pOut[2] = pIn[4]*sd1;
      pOut[3] = sd2*z0 - sd2*z1;
      pOut[4] = pIn[5]*sd1;
      pOut += 5;
      pIn += 6;
   }
   return;
}

static void ShTrC1_NN(double * pOut, double const * pIn, size_t N)
{
   for (size_t i = 0; i < N; ++ i) {
      pOut[0] = pIn[0];
      pOut[1] = pIn[1];
      pOut[2] = pIn[2];
      pOut += 3;
      pIn += 3;
   }
   return;
}

static void ShTrC0_NN(double * pOut, double const * pIn, size_t N)
{
   for (size_t i = 0; i < N; ++ i) {
      pOut[0] = pIn[0];
      pOut += 1;
      pIn += 1;
   }
   return;
}

// Cartesian -> Solid harmonic transform: Transform a matrix
// nCartY(l) x N to (2*l+1) x N.
void ShTrN_NN(double * pOut, double const * pIn, size_t N, unsigned l)
{
   switch(l) {
      case 0: return ShTrC0_NN(pOut, pIn, N);
      case 1: return ShTrC1_NN(pOut, pIn, N);
      case 2: return ShTrC2_NN(pOut, pIn, N);
      case 3: return ShTrC3_NN(pOut, pIn, N);
      case 4: return ShTrC4_NN(pOut, pIn, N);
      case 5: return ShTrC5_NN(pOut, pIn, N);
      case 6: return ShTrC6_NN(pOut, pIn, N);
   }
   //assert(0);
}

// calculate [CartY(lab)]^0 from [0]^m. Effectively, this function calculates
//    D^r f(t)
// from f^[m](t) = (D/Dt)^m f(t) and R, where t = R^2, D^r means \prod_i (D/D{R_i})^{r_x},
// and f is some arbitrary scalar function (of which you supply the m'th derivatives with
// respect to t as [0]^m).
void ShellMdrr(double * pOut, double const * pIn, double Rx, double Ry, double Rz, unsigned lab)
{
   pIn += lab;
   if (lab == 0) {
      pOut[0] = pIn[0];
      return;
   }
   if (lab == 1) {
      pOut[0] = Rx*pIn[0];
      pOut[1] = Ry*pIn[0];
      pOut[2] = Rz*pIn[0];
      return;
   }
   double r_100_1 = Rx*pIn[0];
   double r_010_1 = Ry*pIn[0];
   double r_001_1 = Rz*pIn[0];
   if (lab == 2) {
      pOut[0] = Rx*r_100_1 - pIn[-1];
      pOut[1] = Ry*r_010_1 - pIn[-1];
      pOut[2] = Rz*r_001_1 - pIn[-1];
      pOut[3] = Ry*r_100_1;
      pOut[4] = Rz*r_100_1;
      pOut[5] = Rz*r_010_1;
      return;
   }
   double r_100_2 = Rx*pIn[-1];
   double r_010_2 = Ry*pIn[-1];
   double r_001_2 = Rz*pIn[-1];
   double r_200_2 = Rx*r_100_1 - pIn[-1];
   double r_020_2 = Ry*r_010_1 - pIn[-1];
   double r_002_2 = Rz*r_001_1 - pIn[-1];
   double r_110_2 = Ry*r_100_1;
   if (lab == 3) {
      pOut[0] = Rx*r_200_2 - 2*r_100_2;
      pOut[1] = Ry*r_020_2 - 2*r_010_2;
      pOut[2] = Rz*r_002_2 - 2*r_001_2;
      pOut[3] = Rx*r_020_2;
      pOut[4] = Rx*r_002_2;
      pOut[5] = Ry*r_200_2;
      pOut[6] = Ry*r_002_2;
      pOut[7] = Rz*r_200_2;
      pOut[8] = Rz*r_020_2;
      pOut[9] = Rz*r_110_2;
      return;
   }
   double r_200_3 = Rx*r_100_2 - pIn[-2];
   double r_020_3 = Ry*r_010_2 - pIn[-2];
   double r_002_3 = Rz*r_001_2 - pIn[-2];
   double r_300_3 = Rx*r_200_2 - 2*r_100_2;
   double r_030_3 = Ry*r_020_2 - 2*r_010_2;
   double r_003_3 = Rz*r_002_2 - 2*r_001_2;
   double r_120_3 = Rx*r_020_2;
   double r_102_3 = Rx*r_002_2;
   double r_210_3 = Ry*r_200_2;
   double r_012_3 = Ry*r_002_2;
   if (lab == 4) {
      pOut[0] = Rx*r_300_3 - 3*r_200_3;
      pOut[1] = Ry*r_030_3 - 3*r_020_3;
      pOut[2] = Rz*r_003_3 - 3*r_002_3;
      pOut[3] = Ry*r_300_3;
      pOut[4] = Rx*r_030_3;
      pOut[5] = Rz*r_300_3;
      pOut[6] = Rx*r_003_3;
      pOut[7] = Rz*r_030_3;
      pOut[8] = Ry*r_003_3;
      pOut[9] = Rx*r_120_3 - r_020_3;
      pOut[10] = Rx*r_102_3 - r_002_3;
      pOut[11] = Ry*r_012_3 - r_002_3;
      pOut[12] = Ry*r_102_3;
      pOut[13] = Rz*r_120_3;
      pOut[14] = Rz*r_210_3;
      return;
   }
   double r_100_3 = Rx*pIn[-2];
   double r_010_3 = Ry*pIn[-2];
   double r_001_3 = Rz*pIn[-2];
   double r_300_4 = Rx*r_200_3 - 2*r_100_3;
   double r_030_4 = Ry*r_020_3 - 2*r_010_3;
   double r_003_4 = Rz*r_002_3 - 2*r_001_3;
   double r_400_4 = Rx*r_300_3 - 3*r_200_3;
   double r_040_4 = Ry*r_030_3 - 3*r_020_3;
   double r_004_4 = Rz*r_003_3 - 3*r_002_3;
   double r_310_4 = Ry*r_300_3;
   double r_130_4 = Rx*r_030_3;
   double r_301_4 = Rz*r_300_3;
   double r_103_4 = Rx*r_003_3;
   double r_031_4 = Rz*r_030_3;
   double r_013_4 = Ry*r_003_3;
   double r_220_4 = Rx*r_120_3 - r_020_3;
   double r_202_4 = Rx*r_102_3 - r_002_3;
   double r_022_4 = Ry*r_012_3 - r_002_3;
   if (lab == 5) {
      pOut[0] = Rx*r_400_4 - 4*r_300_4;
      pOut[1] = Ry*r_040_4 - 4*r_030_4;
      pOut[2] = Rz*r_004_4 - 4*r_003_4;
      pOut[3] = Rx*r_040_4;
      pOut[4] = Rx*r_004_4;
      pOut[5] = Ry*r_400_4;
      pOut[6] = Ry*r_004_4;
      pOut[7] = Rz*r_400_4;
      pOut[8] = Rz*r_040_4;
      pOut[9] = Ry*r_310_4 - r_300_4;
      pOut[10] = Rz*r_301_4 - r_300_4;
      pOut[11] = Rx*r_130_4 - r_030_4;
      pOut[12] = Rz*r_031_4 - r_030_4;
      pOut[13] = Rx*r_103_4 - r_003_4;
      pOut[14] = Ry*r_013_4 - r_003_4;
      pOut[15] = Rz*r_310_4;
      pOut[16] = Rz*r_130_4;
      pOut[17] = Ry*r_103_4;
      pOut[18] = Rx*r_022_4;
      pOut[19] = Ry*r_202_4;
      pOut[20] = Rz*r_220_4;
      return;
   }
   double r_200_4 = Rx*r_100_3 - pIn[-3];
   double r_020_4 = Ry*r_010_3 - pIn[-3];
   double r_002_4 = Rz*r_001_3 - pIn[-3];
   double r_012_4 = Ry*r_002_3;
   double r_400_5 = Rx*r_300_4 - 3*r_200_4;
   double r_040_5 = Ry*r_030_4 - 3*r_020_4;
   double r_004_5 = Rz*r_003_4 - 3*r_002_4;
   double r_310_5 = Ry*r_300_4;
   double r_301_5 = Rz*r_300_4;
   double r_031_5 = Rz*r_030_4;
   double r_022_5 = Ry*r_012_4 - r_002_4;
   double r_500_5 = Rx*r_400_4 - 4*r_300_4;
   double r_050_5 = Ry*r_040_4 - 4*r_030_4;
   double r_005_5 = Rz*r_004_4 - 4*r_003_4;
   double r_140_5 = Rx*r_040_4;
   double r_104_5 = Rx*r_004_4;
   double r_410_5 = Ry*r_400_4;
   double r_014_5 = Ry*r_004_4;
   double r_401_5 = Rz*r_400_4;
   double r_041_5 = Rz*r_040_4;
   double r_320_5 = Ry*r_310_4 - r_300_4;
   double r_302_5 = Rz*r_301_4 - r_300_4;
   double r_230_5 = Rx*r_130_4 - r_030_4;
   double r_032_5 = Rz*r_031_4 - r_030_4;
   double r_203_5 = Rx*r_103_4 - r_003_4;
   double r_023_5 = Ry*r_013_4 - r_003_4;
   double r_122_5 = Rx*r_022_4;
   if (lab == 6) {
      pOut[0] = Rx*r_500_5 - 5*r_400_5;
      pOut[1] = Ry*r_050_5 - 5*r_040_5;
      pOut[2] = Rz*r_005_5 - 5*r_004_5;
      pOut[3] = Ry*r_500_5;
      pOut[4] = Rx*r_050_5;
      pOut[5] = Rz*r_500_5;
      pOut[6] = Rx*r_005_5;
      pOut[7] = Rz*r_050_5;
      pOut[8] = Ry*r_005_5;
      pOut[9] = Ry*r_410_5 - r_400_5;
      pOut[10] = Rz*r_401_5 - r_400_5;
      pOut[11] = Rx*r_140_5 - r_040_5;
      pOut[12] = Rx*r_104_5 - r_004_5;
      pOut[13] = Rz*r_041_5 - r_040_5;
      pOut[14] = Ry*r_014_5 - r_004_5;
      pOut[15] = Ry*r_320_5 - 2*r_310_5;
      pOut[16] = Rz*r_302_5 - 2*r_301_5;
      pOut[17] = Rz*r_032_5 - 2*r_031_5;
      pOut[18] = Ry*r_104_5;
      pOut[19] = Rz*r_140_5;
      pOut[20] = Rz*r_410_5;
      pOut[21] = Ry*r_302_5;
      pOut[22] = Rx*r_032_5;
      pOut[23] = Rz*r_320_5;
      pOut[24] = Rx*r_023_5;
      pOut[25] = Rz*r_230_5;
      pOut[26] = Ry*r_203_5;
      pOut[27] = Rx*r_122_5 - r_022_5;
      return;
   }
   double r_100_4 = Rx*pIn[-3];
   double r_010_4 = Ry*pIn[-3];
   double r_001_4 = Rz*pIn[-3];
   double r_300_5 = Rx*r_200_4 - 2*r_100_4;
   double r_030_5 = Ry*r_020_4 - 2*r_010_4;
   double r_003_5 = Rz*r_002_4 - 2*r_001_4;
   double r_013_5 = Ry*r_003_4;
   double r_500_6 = Rx*r_400_5 - 4*r_300_5;
   double r_050_6 = Ry*r_040_5 - 4*r_030_5;
   double r_005_6 = Rz*r_004_5 - 4*r_003_5;
   double r_140_6 = Rx*r_040_5;
   double r_104_6 = Rx*r_004_5;
   double r_410_6 = Ry*r_400_5;
   double r_014_6 = Ry*r_004_5;
   double r_401_6 = Rz*r_400_5;
   double r_041_6 = Rz*r_040_5;
   double r_302_6 = Rz*r_301_5 - r_300_5;
   double r_032_6 = Rz*r_031_5 - r_030_5;
   double r_023_6 = Ry*r_013_5 - r_003_5;
   double r_600_6 = Rx*r_500_5 - 5*r_400_5;
   double r_060_6 = Ry*r_050_5 - 5*r_040_5;
   double r_006_6 = Rz*r_005_5 - 5*r_004_5;
   double r_510_6 = Ry*r_500_5;
   double r_150_6 = Rx*r_050_5;
   double r_501_6 = Rz*r_500_5;
   double r_105_6 = Rx*r_005_5;
   double r_051_6 = Rz*r_050_5;
   double r_015_6 = Ry*r_005_5;
   double r_420_6 = Ry*r_410_5 - r_400_5;
   double r_402_6 = Rz*r_401_5 - r_400_5;
   double r_240_6 = Rx*r_140_5 - r_040_5;
   double r_204_6 = Rx*r_104_5 - r_004_5;
   double r_042_6 = Rz*r_041_5 - r_040_5;
   double r_024_6 = Ry*r_014_5 - r_004_5;
   double r_330_6 = Ry*r_320_5 - 2*r_310_5;
   double r_303_6 = Rz*r_302_5 - 2*r_301_5;
   double r_033_6 = Rz*r_032_5 - 2*r_031_5;
   double r_312_6 = Ry*r_302_5;
   double r_132_6 = Rx*r_032_5;
   double r_123_6 = Rx*r_023_5;
   if (lab == 7) {
      pOut[0] = Rx*r_600_6 - 6*r_500_6;
      pOut[1] = Ry*r_060_6 - 6*r_050_6;
      pOut[2] = Rz*r_006_6 - 6*r_005_6;
      pOut[3] = Rx*r_060_6;
      pOut[4] = Rx*r_006_6;
      pOut[5] = Ry*r_600_6;
      pOut[6] = Ry*r_006_6;
      pOut[7] = Rz*r_600_6;
      pOut[8] = Rz*r_060_6;
      pOut[9] = Ry*r_510_6 - r_500_6;
      pOut[10] = Rz*r_501_6 - r_500_6;
      pOut[11] = Rx*r_150_6 - r_050_6;
      pOut[12] = Rz*r_051_6 - r_050_6;
      pOut[13] = Rx*r_105_6 - r_005_6;
      pOut[14] = Ry*r_015_6 - r_005_6;
      pOut[15] = Rx*r_240_6 - 2*r_140_6;
      pOut[16] = Rx*r_204_6 - 2*r_104_6;
      pOut[17] = Ry*r_420_6 - 2*r_410_6;
      pOut[18] = Ry*r_024_6 - 2*r_014_6;
      pOut[19] = Rz*r_402_6 - 2*r_401_6;
      pOut[20] = Rz*r_042_6 - 2*r_041_6;
      pOut[21] = Rz*r_510_6;
      pOut[22] = Rz*r_150_6;
      pOut[23] = Ry*r_105_6;
      pOut[24] = Rx*r_042_6;
      pOut[25] = Rx*r_024_6;
      pOut[26] = Ry*r_402_6;
      pOut[27] = Ry*r_204_6;
      pOut[28] = Rz*r_420_6;
      pOut[29] = Rz*r_240_6;
      pOut[30] = Rz*r_330_6;
      pOut[31] = Ry*r_303_6;
      pOut[32] = Rx*r_033_6;
      pOut[33] = Ry*r_312_6 - r_302_6;
      pOut[34] = Rx*r_132_6 - r_032_6;
      pOut[35] = Rx*r_123_6 - r_023_6;
      return;
   }
   double r_200_5 = Rx*r_100_4 - pIn[-4];
   double r_020_5 = Ry*r_010_4 - pIn[-4];
   double r_002_5 = Rz*r_001_4 - pIn[-4];
   double r_400_6 = Rx*r_300_5 - 3*r_200_5;
   double r_040_6 = Ry*r_030_5 - 3*r_020_5;
   double r_004_6 = Rz*r_003_5 - 3*r_002_5;
   double r_310_6 = Ry*r_300_5;
   double r_301_6 = Rz*r_300_5;
   double r_031_6 = Rz*r_030_5;
   double r_320_6 = Ry*r_310_5 - r_300_5;
   double r_600_7 = Rx*r_500_6 - 5*r_400_6;
   double r_060_7 = Ry*r_050_6 - 5*r_040_6;
   double r_006_7 = Rz*r_005_6 - 5*r_004_6;
   double r_510_7 = Ry*r_500_6;
   double r_150_7 = Rx*r_050_6;
   double r_501_7 = Rz*r_500_6;
   double r_105_7 = Rx*r_005_6;
   double r_051_7 = Rz*r_050_6;
   double r_015_7 = Ry*r_005_6;
   double r_402_7 = Rz*r_401_6 - r_400_6;
   double r_240_7 = Rx*r_140_6 - r_040_6;
   double r_204_7 = Rx*r_104_6 - r_004_6;
   double r_042_7 = Rz*r_041_6 - r_040_6;
   double r_024_7 = Ry*r_014_6 - r_004_6;
   double r_330_7 = Ry*r_320_6 - 2*r_310_6;
   double r_303_7 = Rz*r_302_6 - 2*r_301_6;
   double r_033_7 = Rz*r_032_6 - 2*r_031_6;
   double r_700_7 = Rx*r_600_6 - 6*r_500_6;
   double r_070_7 = Ry*r_060_6 - 6*r_050_6;
   double r_007_7 = Rz*r_006_6 - 6*r_005_6;
   double r_160_7 = Rx*r_060_6;
   double r_106_7 = Rx*r_006_6;
   double r_610_7 = Ry*r_600_6;
   double r_016_7 = Ry*r_006_6;
   double r_601_7 = Rz*r_600_6;
   double r_061_7 = Rz*r_060_6;
   double r_520_7 = Ry*r_510_6 - r_500_6;
   double r_502_7 = Rz*r_501_6 - r_500_6;
   double r_250_7 = Rx*r_150_6 - r_050_6;
   double r_052_7 = Rz*r_051_6 - r_050_6;
   double r_205_7 = Rx*r_105_6 - r_005_6;
   double r_025_7 = Ry*r_015_6 - r_005_6;
   double r_340_7 = Rx*r_240_6 - 2*r_140_6;
   double r_304_7 = Rx*r_204_6 - 2*r_104_6;
   double r_430_7 = Ry*r_420_6 - 2*r_410_6;
   double r_034_7 = Ry*r_024_6 - 2*r_014_6;
   double r_403_7 = Rz*r_402_6 - 2*r_401_6;
   double r_043_7 = Rz*r_042_6 - 2*r_041_6;
   double r_142_7 = Rx*r_042_6;
   double r_124_7 = Rx*r_024_6;
   double r_412_7 = Ry*r_402_6;
   double r_331_7 = Rz*r_330_6;
   double r_313_7 = Ry*r_303_6;
   double r_133_7 = Rx*r_033_6;
   if (lab == 8) {
      pOut[0] = Rx*r_700_7 - 7*r_600_7;
      pOut[1] = Ry*r_070_7 - 7*r_060_7;
      pOut[2] = Rz*r_007_7 - 7*r_006_7;
      pOut[3] = Ry*r_700_7;
      pOut[4] = Rx*r_070_7;
      pOut[5] = Rz*r_700_7;
      pOut[6] = Rx*r_007_7;
      pOut[7] = Rz*r_070_7;
      pOut[8] = Ry*r_007_7;
      pOut[9] = Ry*r_610_7 - r_600_7;
      pOut[10] = Rz*r_601_7 - r_600_7;
      pOut[11] = Rx*r_160_7 - r_060_7;
      pOut[12] = Rx*r_106_7 - r_006_7;
      pOut[13] = Rz*r_061_7 - r_060_7;
      pOut[14] = Ry*r_016_7 - r_006_7;
      pOut[15] = Ry*r_520_7 - 2*r_510_7;
      pOut[16] = Rx*r_250_7 - 2*r_150_7;
      pOut[17] = Rz*r_502_7 - 2*r_501_7;
      pOut[18] = Rx*r_205_7 - 2*r_105_7;
      pOut[19] = Rz*r_052_7 - 2*r_051_7;
      pOut[20] = Ry*r_025_7 - 2*r_015_7;
      pOut[21] = Rx*r_340_7 - 3*r_240_7;
      pOut[22] = Rx*r_304_7 - 3*r_204_7;
      pOut[23] = Ry*r_034_7 - 3*r_024_7;
      pOut[24] = Ry*r_106_7;
      pOut[25] = Rz*r_160_7;
      pOut[26] = Rz*r_610_7;
      pOut[27] = Ry*r_502_7;
      pOut[28] = Rx*r_052_7;
      pOut[29] = Rz*r_520_7;
      pOut[30] = Rx*r_025_7;
      pOut[31] = Rz*r_250_7;
      pOut[32] = Ry*r_205_7;
      pOut[33] = Ry*r_304_7;
      pOut[34] = Rx*r_034_7;
      pOut[35] = Rz*r_340_7;
      pOut[36] = Rx*r_043_7;
      pOut[37] = Rz*r_430_7;
      pOut[38] = Ry*r_403_7;
      pOut[39] = Ry*r_412_7 - r_402_7;
      pOut[40] = Rx*r_142_7 - r_042_7;
      pOut[41] = Rx*r_124_7 - r_024_7;
      pOut[42] = Rz*r_331_7 - r_330_7;
      pOut[43] = Ry*r_313_7 - r_303_7;
      pOut[44] = Rx*r_133_7 - r_033_7;
      return;
   }
   double r_100_5 = Rx*pIn[-4];
   double r_010_5 = Ry*pIn[-4];
   double r_001_5 = Rz*pIn[-4];
   double r_300_6 = Rx*r_200_5 - 2*r_100_5;
   double r_030_6 = Ry*r_020_5 - 2*r_010_5;
   double r_003_6 = Rz*r_002_5 - 2*r_001_5;
   double r_500_7 = Rx*r_400_6 - 4*r_300_6;
   double r_050_7 = Ry*r_040_6 - 4*r_030_6;
   double r_005_7 = Rz*r_004_6 - 4*r_003_6;
   double r_140_7 = Rx*r_040_6;
   double r_104_7 = Rx*r_004_6;
   double r_410_7 = Ry*r_400_6;
   double r_014_7 = Ry*r_004_6;
   double r_401_7 = Rz*r_400_6;
   double r_041_7 = Rz*r_040_6;
   double r_420_7 = Ry*r_410_6 - r_400_6;
   double r_700_8 = Rx*r_600_7 - 6*r_500_7;
   double r_070_8 = Ry*r_060_7 - 6*r_050_7;
   double r_007_8 = Rz*r_006_7 - 6*r_005_7;
   double r_160_8 = Rx*r_060_7;
   double r_106_8 = Rx*r_006_7;
   double r_610_8 = Ry*r_600_7;
   double r_016_8 = Ry*r_006_7;
   double r_601_8 = Rz*r_600_7;
   double r_061_8 = Rz*r_060_7;
   double r_520_8 = Ry*r_510_7 - r_500_7;
   double r_502_8 = Rz*r_501_7 - r_500_7;
   double r_250_8 = Rx*r_150_7 - r_050_7;
   double r_052_8 = Rz*r_051_7 - r_050_7;
   double r_205_8 = Rx*r_105_7 - r_005_7;
   double r_025_8 = Ry*r_015_7 - r_005_7;
   double r_340_8 = Rx*r_240_7 - 2*r_140_7;
   double r_304_8 = Rx*r_204_7 - 2*r_104_7;
   double r_430_8 = Ry*r_420_7 - 2*r_410_7;
   double r_034_8 = Ry*r_024_7 - 2*r_014_7;
   double r_403_8 = Rz*r_402_7 - 2*r_401_7;
   double r_043_8 = Rz*r_042_7 - 2*r_041_7;
   double r_331_8 = Rz*r_330_7;
   double r_800_8 = Rx*r_700_7 - 7*r_600_7;
   double r_080_8 = Ry*r_070_7 - 7*r_060_7;
   double r_008_8 = Rz*r_007_7 - 7*r_006_7;
   double r_710_8 = Ry*r_700_7;
   double r_170_8 = Rx*r_070_7;
   double r_701_8 = Rz*r_700_7;
   double r_107_8 = Rx*r_007_7;
   double r_071_8 = Rz*r_070_7;
   double r_017_8 = Ry*r_007_7;
   double r_620_8 = Ry*r_610_7 - r_600_7;
   double r_602_8 = Rz*r_601_7 - r_600_7;
   double r_260_8 = Rx*r_160_7 - r_060_7;
   double r_206_8 = Rx*r_106_7 - r_006_7;
   double r_062_8 = Rz*r_061_7 - r_060_7;
   double r_026_8 = Ry*r_016_7 - r_006_7;
   double r_530_8 = Ry*r_520_7 - 2*r_510_7;
   double r_350_8 = Rx*r_250_7 - 2*r_150_7;
   double r_503_8 = Rz*r_502_7 - 2*r_501_7;
   double r_305_8 = Rx*r_205_7 - 2*r_105_7;
   double r_053_8 = Rz*r_052_7 - 2*r_051_7;
   double r_035_8 = Ry*r_025_7 - 2*r_015_7;
   double r_440_8 = Rx*r_340_7 - 3*r_240_7;
   double r_404_8 = Rx*r_304_7 - 3*r_204_7;
   double r_044_8 = Ry*r_034_7 - 3*r_024_7;
   double r_512_8 = Ry*r_502_7;
   double r_152_8 = Rx*r_052_7;
   double r_125_8 = Rx*r_025_7;
   double r_314_8 = Ry*r_304_7;
   double r_134_8 = Rx*r_034_7;
   double r_341_8 = Rz*r_340_7;
   double r_143_8 = Rx*r_043_7;
   double r_431_8 = Rz*r_430_7;
   double r_413_8 = Ry*r_403_7;
   double r_332_8 = Rz*r_331_7 - r_330_7;
   if (lab == 9) {
      pOut[0] = Rx*r_800_8 - 8*r_700_8;
      pOut[1] = Ry*r_080_8 - 8*r_070_8;
      pOut[2] = Rz*r_008_8 - 8*r_007_8;
      pOut[3] = Rx*r_080_8;
      pOut[4] = Rx*r_008_8;
      pOut[5] = Ry*r_800_8;
      pOut[6] = Ry*r_008_8;
      pOut[7] = Rz*r_800_8;
      pOut[8] = Rz*r_080_8;
      pOut[9] = Ry*r_710_8 - r_700_8;
      pOut[10] = Rz*r_701_8 - r_700_8;
      pOut[11] = Rx*r_170_8 - r_070_8;
      pOut[12] = Rz*r_071_8 - r_070_8;
      pOut[13] = Rx*r_107_8 - r_007_8;
      pOut[14] = Ry*r_017_8 - r_007_8;
      pOut[15] = Rx*r_260_8 - 2*r_160_8;
      pOut[16] = Rx*r_206_8 - 2*r_106_8;
      pOut[17] = Ry*r_620_8 - 2*r_610_8;
      pOut[18] = Ry*r_026_8 - 2*r_016_8;
      pOut[19] = Rz*r_602_8 - 2*r_601_8;
      pOut[20] = Rz*r_062_8 - 2*r_061_8;
      pOut[21] = Ry*r_530_8 - 3*r_520_8;
      pOut[22] = Rz*r_503_8 - 3*r_502_8;
      pOut[23] = Rx*r_350_8 - 3*r_250_8;
      pOut[24] = Rz*r_053_8 - 3*r_052_8;
      pOut[25] = Rx*r_305_8 - 3*r_205_8;
      pOut[26] = Ry*r_035_8 - 3*r_025_8;
      pOut[27] = Rz*r_710_8;
      pOut[28] = Rz*r_170_8;
      pOut[29] = Ry*r_107_8;
      pOut[30] = Rx*r_062_8;
      pOut[31] = Rx*r_026_8;
      pOut[32] = Ry*r_602_8;
      pOut[33] = Ry*r_206_8;
      pOut[34] = Rz*r_620_8;
      pOut[35] = Rz*r_260_8;
      pOut[36] = Rz*r_530_8;
      pOut[37] = Ry*r_503_8;
      pOut[38] = Rz*r_350_8;
      pOut[39] = Ry*r_305_8;
      pOut[40] = Rx*r_053_8;
      pOut[41] = Rx*r_035_8;
      pOut[42] = Rx*r_044_8;
      pOut[43] = Ry*r_404_8;
      pOut[44] = Rz*r_440_8;
      pOut[45] = Ry*r_512_8 - r_502_8;
      pOut[46] = Rx*r_152_8 - r_052_8;
      pOut[47] = Rx*r_125_8 - r_025_8;
      pOut[48] = Rz*r_341_8 - r_340_8;
      pOut[49] = Ry*r_314_8 - r_304_8;
      pOut[50] = Rz*r_431_8 - r_430_8;
      pOut[51] = Rx*r_134_8 - r_034_8;
      pOut[52] = Ry*r_413_8 - r_403_8;
      pOut[53] = Rx*r_143_8 - r_043_8;
      pOut[54] = Rz*r_332_8 - 2*r_331_8;
      return;
   }
   double r_200_6 = Rx*r_100_5 - pIn[-5];
   double r_020_6 = Ry*r_010_5 - pIn[-5];
   double r_002_6 = Rz*r_001_5 - pIn[-5];
   double r_400_7 = Rx*r_300_6 - 3*r_200_6;
   double r_040_7 = Ry*r_030_6 - 3*r_020_6;
   double r_004_7 = Rz*r_003_6 - 3*r_002_6;
   double r_600_8 = Rx*r_500_7 - 5*r_400_7;
   double r_060_8 = Ry*r_050_7 - 5*r_040_7;
   double r_006_8 = Rz*r_005_7 - 5*r_004_7;
   double r_510_8 = Ry*r_500_7;
   double r_150_8 = Rx*r_050_7;
   double r_501_8 = Rz*r_500_7;
   double r_105_8 = Rx*r_005_7;
   double r_051_8 = Rz*r_050_7;
   double r_015_8 = Ry*r_005_7;
   double r_240_8 = Rx*r_140_7 - r_040_7;
   double r_204_8 = Rx*r_104_7 - r_004_7;
   double r_024_8 = Ry*r_014_7 - r_004_7;
   double r_800_9 = Rx*r_700_8 - 7*r_600_8;
   double r_080_9 = Ry*r_070_8 - 7*r_060_8;
   double r_008_9 = Rz*r_007_8 - 7*r_006_8;
   double r_710_9 = Ry*r_700_8;
   double r_170_9 = Rx*r_070_8;
   double r_701_9 = Rz*r_700_8;
   double r_107_9 = Rx*r_007_8;
   double r_071_9 = Rz*r_070_8;
   double r_017_9 = Ry*r_007_8;
   double r_620_9 = Ry*r_610_8 - r_600_8;
   double r_602_9 = Rz*r_601_8 - r_600_8;
   double r_260_9 = Rx*r_160_8 - r_060_8;
   double r_206_9 = Rx*r_106_8 - r_006_8;
   double r_062_9 = Rz*r_061_8 - r_060_8;
   double r_026_9 = Ry*r_016_8 - r_006_8;
   double r_530_9 = Ry*r_520_8 - 2*r_510_8;
   double r_350_9 = Rx*r_250_8 - 2*r_150_8;
   double r_503_9 = Rz*r_502_8 - 2*r_501_8;
   double r_305_9 = Rx*r_205_8 - 2*r_105_8;
   double r_053_9 = Rz*r_052_8 - 2*r_051_8;
   double r_035_9 = Ry*r_025_8 - 2*r_015_8;
   double r_440_9 = Rx*r_340_8 - 3*r_240_8;
   double r_404_9 = Rx*r_304_8 - 3*r_204_8;
   double r_044_9 = Ry*r_034_8 - 3*r_024_8;
   double r_314_9 = Ry*r_304_8;
   double r_341_9 = Rz*r_340_8;
   double r_431_9 = Rz*r_430_8;
   double r_900_9 = Rx*r_800_8 - 8*r_700_8;
   double r_090_9 = Ry*r_080_8 - 8*r_070_8;
   double r_009_9 = Rz*r_008_8 - 8*r_007_8;
   double r_180_9 = Rx*r_080_8;
   double r_108_9 = Rx*r_008_8;
   double r_810_9 = Ry*r_800_8;
   double r_018_9 = Ry*r_008_8;
   double r_801_9 = Rz*r_800_8;
   double r_081_9 = Rz*r_080_8;
   double r_720_9 = Ry*r_710_8 - r_700_8;
   double r_702_9 = Rz*r_701_8 - r_700_8;
   double r_270_9 = Rx*r_170_8 - r_070_8;
   double r_072_9 = Rz*r_071_8 - r_070_8;
   double r_207_9 = Rx*r_107_8 - r_007_8;
   double r_027_9 = Ry*r_017_8 - r_007_8;
   double r_360_9 = Rx*r_260_8 - 2*r_160_8;
   double r_306_9 = Rx*r_206_8 - 2*r_106_8;
   double r_630_9 = Ry*r_620_8 - 2*r_610_8;
   double r_036_9 = Ry*r_026_8 - 2*r_016_8;
   double r_603_9 = Rz*r_602_8 - 2*r_601_8;
   double r_063_9 = Rz*r_062_8 - 2*r_061_8;
   double r_540_9 = Ry*r_530_8 - 3*r_520_8;
   double r_504_9 = Rz*r_503_8 - 3*r_502_8;
   double r_450_9 = Rx*r_350_8 - 3*r_250_8;
   double r_054_9 = Rz*r_053_8 - 3*r_052_8;
   double r_405_9 = Rx*r_305_8 - 3*r_205_8;
   double r_045_9 = Ry*r_035_8 - 3*r_025_8;
   double r_162_9 = Rx*r_062_8;
   double r_126_9 = Rx*r_026_8;
   double r_612_9 = Ry*r_602_8;
   double r_531_9 = Rz*r_530_8;
   double r_513_9 = Ry*r_503_8;
   double r_351_9 = Rz*r_350_8;
   double r_315_9 = Ry*r_305_8;
   double r_153_9 = Rx*r_053_8;
   double r_135_9 = Rx*r_035_8;
   double r_144_9 = Rx*r_044_8;
   double r_414_9 = Ry*r_404_8;
   double r_441_9 = Rz*r_440_8;
   double r_342_9 = Rz*r_341_8 - r_340_8;
   double r_324_9 = Ry*r_314_8 - r_304_8;
   double r_432_9 = Rz*r_431_8 - r_430_8;
   if (lab == 10) {
      pOut[0] = Rx*r_900_9 - 9*r_800_9;
      pOut[1] = Ry*r_090_9 - 9*r_080_9;
      pOut[2] = Rz*r_009_9 - 9*r_008_9;
      pOut[3] = Ry*r_900_9;
      pOut[4] = Rx*r_090_9;
      pOut[5] = Rz*r_900_9;
      pOut[6] = Rx*r_009_9;
      pOut[7] = Rz*r_090_9;
      pOut[8] = Ry*r_009_9;
      pOut[9] = Ry*r_810_9 - r_800_9;
      pOut[10] = Rz*r_801_9 - r_800_9;
      pOut[11] = Rx*r_180_9 - r_080_9;
      pOut[12] = Rx*r_108_9 - r_008_9;
      pOut[13] = Rz*r_081_9 - r_080_9;
      pOut[14] = Ry*r_018_9 - r_008_9;
      pOut[15] = Ry*r_720_9 - 2*r_710_9;
      pOut[16] = Rx*r_270_9 - 2*r_170_9;
      pOut[17] = Rz*r_702_9 - 2*r_701_9;
      pOut[18] = Rx*r_207_9 - 2*r_107_9;
      pOut[19] = Rz*r_072_9 - 2*r_071_9;
      pOut[20] = Ry*r_027_9 - 2*r_017_9;
      pOut[21] = Ry*r_630_9 - 3*r_620_9;
      pOut[22] = Rz*r_603_9 - 3*r_602_9;
      pOut[23] = Rx*r_360_9 - 3*r_260_9;
      pOut[24] = Rx*r_306_9 - 3*r_206_9;
      pOut[25] = Rz*r_063_9 - 3*r_062_9;
      pOut[26] = Ry*r_036_9 - 3*r_026_9;
      pOut[27] = Ry*r_540_9 - 4*r_530_9;
      pOut[28] = Rz*r_504_9 - 4*r_503_9;
      pOut[29] = Rz*r_054_9 - 4*r_053_9;
      pOut[30] = Ry*r_108_9;
      pOut[31] = Rz*r_180_9;
      pOut[32] = Rz*r_810_9;
      pOut[33] = Ry*r_702_9;
      pOut[34] = Rx*r_072_9;
      pOut[35] = Rz*r_720_9;
      pOut[36] = Rx*r_027_9;
      pOut[37] = Rz*r_270_9;
      pOut[38] = Ry*r_207_9;
      pOut[39] = Ry*r_306_9;
      pOut[40] = Rx*r_036_9;
      pOut[41] = Rz*r_360_9;
      pOut[42] = Rx*r_063_9;
      pOut[43] = Rz*r_630_9;
      pOut[44] = Ry*r_603_9;
      pOut[45] = Ry*r_504_9;
      pOut[46] = Rx*r_054_9;
      pOut[47] = Rz*r_540_9;
      pOut[48] = Rx*r_045_9;
      pOut[49] = Rz*r_450_9;
      pOut[50] = Ry*r_405_9;
      pOut[51] = Ry*r_612_9 - r_602_9;
      pOut[52] = Rx*r_162_9 - r_062_9;
      pOut[53] = Rx*r_126_9 - r_026_9;
      pOut[54] = Rz*r_531_9 - r_530_9;
      pOut[55] = Rz*r_351_9 - r_350_9;
      pOut[56] = Ry*r_513_9 - r_503_9;
      pOut[57] = Ry*r_315_9 - r_305_9;
      pOut[58] = Rx*r_153_9 - r_053_9;
      pOut[59] = Rx*r_135_9 - r_035_9;
      pOut[60] = Rz*r_441_9 - r_440_9;
      pOut[61] = Ry*r_414_9 - r_404_9;
      pOut[62] = Rx*r_144_9 - r_044_9;
      pOut[63] = Ry*r_324_9 - 2*r_314_9;
      pOut[64] = Rz*r_342_9 - 2*r_341_9;
      pOut[65] = Rz*r_432_9 - 2*r_431_9;
      return;
   }
   double r_100_6 = Rx*pIn[-5];
   double r_010_6 = Ry*pIn[-5];
   double r_001_6 = Rz*pIn[-5];
   double r_300_7 = Rx*r_200_6 - 2*r_100_6;
   double r_030_7 = Ry*r_020_6 - 2*r_010_6;
   double r_003_7 = Rz*r_002_6 - 2*r_001_6;
   double r_500_8 = Rx*r_400_7 - 4*r_300_7;
   double r_050_8 = Ry*r_040_7 - 4*r_030_7;
   double r_005_8 = Rz*r_004_7 - 4*r_003_7;
   double r_700_9 = Rx*r_600_8 - 6*r_500_8;
   double r_070_9 = Ry*r_060_8 - 6*r_050_8;
   double r_007_9 = Rz*r_006_8 - 6*r_005_8;
   double r_160_9 = Rx*r_060_8;
   double r_106_9 = Rx*r_006_8;
   double r_610_9 = Ry*r_600_8;
   double r_016_9 = Ry*r_006_8;
   double r_601_9 = Rz*r_600_8;
   double r_061_9 = Rz*r_060_8;
   double r_520_9 = Ry*r_510_8 - r_500_8;
   double r_502_9 = Rz*r_501_8 - r_500_8;
   double r_250_9 = Rx*r_150_8 - r_050_8;
   double r_052_9 = Rz*r_051_8 - r_050_8;
   double r_205_9 = Rx*r_105_8 - r_005_8;
   double r_025_9 = Ry*r_015_8 - r_005_8;
   double r_900_a = Rx*r_800_9 - 8*r_700_9;
   double r_090_a = Ry*r_080_9 - 8*r_070_9;
   double r_009_a = Rz*r_008_9 - 8*r_007_9;
   double r_180_a = Rx*r_080_9;
   double r_108_a = Rx*r_008_9;
   double r_810_a = Ry*r_800_9;
   double r_018_a = Ry*r_008_9;
   double r_801_a = Rz*r_800_9;
   double r_081_a = Rz*r_080_9;
   double r_720_a = Ry*r_710_9 - r_700_9;
   double r_702_a = Rz*r_701_9 - r_700_9;
   double r_270_a = Rx*r_170_9 - r_070_9;
   double r_072_a = Rz*r_071_9 - r_070_9;
   double r_207_a = Rx*r_107_9 - r_007_9;
   double r_027_a = Ry*r_017_9 - r_007_9;
   double r_360_a = Rx*r_260_9 - 2*r_160_9;
   double r_306_a = Rx*r_206_9 - 2*r_106_9;
   double r_630_a = Ry*r_620_9 - 2*r_610_9;
   double r_036_a = Ry*r_026_9 - 2*r_016_9;
   double r_603_a = Rz*r_602_9 - 2*r_601_9;
   double r_063_a = Rz*r_062_9 - 2*r_061_9;
   double r_540_a = Ry*r_530_9 - 3*r_520_9;
   double r_504_a = Rz*r_503_9 - 3*r_502_9;
   double r_450_a = Rx*r_350_9 - 3*r_250_9;
   double r_054_a = Rz*r_053_9 - 3*r_052_9;
   double r_405_a = Rx*r_305_9 - 3*r_205_9;
   double r_045_a = Ry*r_035_9 - 3*r_025_9;
   double r_531_a = Rz*r_530_9;
   double r_351_a = Rz*r_350_9;
   double r_315_a = Ry*r_305_9;
   double r_144_a = Rx*r_044_9;
   double r_414_a = Ry*r_404_9;
   double r_441_a = Rz*r_440_9;
   double r_a00_a = Rx*r_900_9 - 9*r_800_9;
   double r_0a0_a = Ry*r_090_9 - 9*r_080_9;
   double r_00a_a = Rz*r_009_9 - 9*r_008_9;
   double r_910_a = Ry*r_900_9;
   double r_190_a = Rx*r_090_9;
   double r_901_a = Rz*r_900_9;
   double r_109_a = Rx*r_009_9;
   double r_091_a = Rz*r_090_9;
   double r_019_a = Ry*r_009_9;
   double r_820_a = Ry*r_810_9 - r_800_9;
   double r_802_a = Rz*r_801_9 - r_800_9;
   double r_280_a = Rx*r_180_9 - r_080_9;
   double r_208_a = Rx*r_108_9 - r_008_9;
   double r_082_a = Rz*r_081_9 - r_080_9;
   double r_028_a = Ry*r_018_9 - r_008_9;
   double r_730_a = Ry*r_720_9 - 2*r_710_9;
   double r_370_a = Rx*r_270_9 - 2*r_170_9;
   double r_703_a = Rz*r_702_9 - 2*r_701_9;
   double r_307_a = Rx*r_207_9 - 2*r_107_9;
   double r_073_a = Rz*r_072_9 - 2*r_071_9;
   double r_037_a = Ry*r_027_9 - 2*r_017_9;
   double r_640_a = Ry*r_630_9 - 3*r_620_9;
   double r_604_a = Rz*r_603_9 - 3*r_602_9;
   double r_460_a = Rx*r_360_9 - 3*r_260_9;
   double r_406_a = Rx*r_306_9 - 3*r_206_9;
   double r_064_a = Rz*r_063_9 - 3*r_062_9;
   double r_046_a = Ry*r_036_9 - 3*r_026_9;
   double r_550_a = Ry*r_540_9 - 4*r_530_9;
   double r_505_a = Rz*r_504_9 - 4*r_503_9;
   double r_055_a = Rz*r_054_9 - 4*r_053_9;
   double r_712_a = Ry*r_702_9;
   double r_172_a = Rx*r_072_9;
   double r_127_a = Rx*r_027_9;
   double r_316_a = Ry*r_306_9;
   double r_136_a = Rx*r_036_9;
   double r_361_a = Rz*r_360_9;
   double r_163_a = Rx*r_063_9;
   double r_631_a = Rz*r_630_9;
   double r_613_a = Ry*r_603_9;
   double r_514_a = Ry*r_504_9;
   double r_154_a = Rx*r_054_9;
   double r_541_a = Rz*r_540_9;
   double r_145_a = Rx*r_045_9;
   double r_451_a = Rz*r_450_9;
   double r_415_a = Ry*r_405_9;
   double r_532_a = Rz*r_531_9 - r_530_9;
   double r_352_a = Rz*r_351_9 - r_350_9;
   double r_325_a = Ry*r_315_9 - r_305_9;
   double r_442_a = Rz*r_441_9 - r_440_9;
   double r_424_a = Ry*r_414_9 - r_404_9;
   double r_244_a = Rx*r_144_9 - r_044_9;
   if (lab == 11) {
      pOut[0] = Rx*r_a00_a - 10*r_900_a;
      pOut[1] = Ry*r_0a0_a - 10*r_090_a;
      pOut[2] = Rz*r_00a_a - 10*r_009_a;
      pOut[3] = Rx*r_0a0_a;
      pOut[4] = Rx*r_00a_a;
      pOut[5] = Ry*r_a00_a;
      pOut[6] = Ry*r_00a_a;
      pOut[7] = Rz*r_a00_a;
      pOut[8] = Rz*r_0a0_a;
      pOut[9] = Ry*r_910_a - r_900_a;
      pOut[10] = Rz*r_901_a - r_900_a;
      pOut[11] = Rx*r_190_a - r_090_a;
      pOut[12] = Rz*r_091_a - r_090_a;
      pOut[13] = Rx*r_109_a - r_009_a;
      pOut[14] = Ry*r_019_a - r_009_a;
      pOut[15] = Rx*r_280_a - 2*r_180_a;
      pOut[16] = Rx*r_208_a - 2*r_108_a;
      pOut[17] = Ry*r_820_a - 2*r_810_a;
      pOut[18] = Ry*r_028_a - 2*r_018_a;
      pOut[19] = Rz*r_802_a - 2*r_801_a;
      pOut[20] = Rz*r_082_a - 2*r_081_a;
      pOut[21] = Ry*r_730_a - 3*r_720_a;
      pOut[22] = Rz*r_703_a - 3*r_702_a;
      pOut[23] = Rx*r_370_a - 3*r_270_a;
      pOut[24] = Rz*r_073_a - 3*r_072_a;
      pOut[25] = Rx*r_307_a - 3*r_207_a;
      pOut[26] = Ry*r_037_a - 3*r_027_a;
      pOut[27] = Rx*r_460_a - 4*r_360_a;
      pOut[28] = Rx*r_406_a - 4*r_306_a;
      pOut[29] = Ry*r_640_a - 4*r_630_a;
      pOut[30] = Ry*r_046_a - 4*r_036_a;
      pOut[31] = Rz*r_604_a - 4*r_603_a;
      pOut[32] = Rz*r_064_a - 4*r_063_a;
      pOut[33] = Rz*r_910_a;
      pOut[34] = Rz*r_190_a;
      pOut[35] = Ry*r_109_a;
      pOut[36] = Rx*r_082_a;
      pOut[37] = Rx*r_028_a;
      pOut[38] = Ry*r_802_a;
      pOut[39] = Ry*r_208_a;
      pOut[40] = Rz*r_820_a;
      pOut[41] = Rz*r_280_a;
      pOut[42] = Rz*r_730_a;
      pOut[43] = Ry*r_703_a;
      pOut[44] = Rz*r_370_a;
      pOut[45] = Ry*r_307_a;
      pOut[46] = Rx*r_073_a;
      pOut[47] = Rx*r_037_a;
      pOut[48] = Rx*r_064_a;
      pOut[49] = Rx*r_046_a;
      pOut[50] = Ry*r_604_a;
      pOut[51] = Ry*r_406_a;
      pOut[52] = Rz*r_640_a;
      pOut[53] = Rz*r_460_a;
      pOut[54] = Rz*r_550_a;
      pOut[55] = Ry*r_505_a;
      pOut[56] = Rx*r_055_a;
      pOut[57] = Ry*r_712_a - r_702_a;
      pOut[58] = Rx*r_172_a - r_072_a;
      pOut[59] = Rx*r_127_a - r_027_a;
      pOut[60] = Rz*r_361_a - r_360_a;
      pOut[61] = Ry*r_316_a - r_306_a;
      pOut[62] = Rz*r_631_a - r_630_a;
      pOut[63] = Rx*r_136_a - r_036_a;
      pOut[64] = Ry*r_613_a - r_603_a;
      pOut[65] = Rx*r_163_a - r_063_a;
      pOut[66] = Rz*r_541_a - r_540_a;
      pOut[67] = Ry*r_514_a - r_504_a;
      pOut[68] = Rz*r_451_a - r_450_a;
      pOut[69] = Rx*r_154_a - r_054_a;
      pOut[70] = Ry*r_415_a - r_405_a;
      pOut[71] = Rx*r_145_a - r_045_a;
      pOut[72] = Rz*r_532_a - 2*r_531_a;
      pOut[73] = Rz*r_352_a - 2*r_351_a;
      pOut[74] = Ry*r_325_a - 2*r_315_a;
      pOut[75] = Rx*r_244_a - 2*r_144_a;
      pOut[76] = Ry*r_424_a - 2*r_414_a;
      pOut[77] = Rz*r_442_a - 2*r_441_a;
      return;
   }
   double r_200_7 = Rx*r_100_6 - pIn[-6];
   double r_020_7 = Ry*r_010_6 - pIn[-6];
   double r_002_7 = Rz*r_001_6 - pIn[-6];
   double r_400_8 = Rx*r_300_7 - 3*r_200_7;
   double r_040_8 = Ry*r_030_7 - 3*r_020_7;
   double r_004_8 = Rz*r_003_7 - 3*r_002_7;
   double r_014_8 = Ry*r_004_7;
   double r_600_9 = Rx*r_500_8 - 5*r_400_8;
   double r_060_9 = Ry*r_050_8 - 5*r_040_8;
   double r_006_9 = Rz*r_005_8 - 5*r_004_8;
   double r_510_9 = Ry*r_500_8;
   double r_501_9 = Rz*r_500_8;
   double r_051_9 = Rz*r_050_8;
   double r_024_9 = Ry*r_014_8 - r_004_8;
   double r_034_9 = Ry*r_024_8 - 2*r_014_8;
   double r_800_a = Rx*r_700_9 - 7*r_600_9;
   double r_080_a = Ry*r_070_9 - 7*r_060_9;
   double r_008_a = Rz*r_007_9 - 7*r_006_9;
   double r_710_a = Ry*r_700_9;
   double r_170_a = Rx*r_070_9;
   double r_701_a = Rz*r_700_9;
   double r_107_a = Rx*r_007_9;
   double r_071_a = Rz*r_070_9;
   double r_017_a = Ry*r_007_9;
   double r_620_a = Ry*r_610_9 - r_600_9;
   double r_602_a = Rz*r_601_9 - r_600_9;
   double r_260_a = Rx*r_160_9 - r_060_9;
   double r_206_a = Rx*r_106_9 - r_006_9;
   double r_062_a = Rz*r_061_9 - r_060_9;
   double r_026_a = Ry*r_016_9 - r_006_9;
   double r_530_a = Ry*r_520_9 - 2*r_510_9;
   double r_503_a = Rz*r_502_9 - 2*r_501_9;
   double r_053_a = Rz*r_052_9 - 2*r_051_9;
   double r_044_a = Ry*r_034_9 - 3*r_024_9;
   double r_a00_b = Rx*r_900_a - 9*r_800_a;
   double r_0a0_b = Ry*r_090_a - 9*r_080_a;
   double r_00a_b = Rz*r_009_a - 9*r_008_a;
   double r_910_b = Ry*r_900_a;
   double r_190_b = Rx*r_090_a;
   double r_901_b = Rz*r_900_a;
   double r_109_b = Rx*r_009_a;
   double r_091_b = Rz*r_090_a;
   double r_019_b = Ry*r_009_a;
   double r_820_b = Ry*r_810_a - r_800_a;
   double r_802_b = Rz*r_801_a - r_800_a;
   double r_280_b = Rx*r_180_a - r_080_a;
   double r_208_b = Rx*r_108_a - r_008_a;
   double r_082_b = Rz*r_081_a - r_080_a;
   double r_028_b = Ry*r_018_a - r_008_a;
   double r_730_b = Ry*r_720_a - 2*r_710_a;
   double r_370_b = Rx*r_270_a - 2*r_170_a;
   double r_703_b = Rz*r_702_a - 2*r_701_a;
   double r_307_b = Rx*r_207_a - 2*r_107_a;
   double r_073_b = Rz*r_072_a - 2*r_071_a;
   double r_037_b = Ry*r_027_a - 2*r_017_a;
   double r_640_b = Ry*r_630_a - 3*r_620_a;
   double r_604_b = Rz*r_603_a - 3*r_602_a;
   double r_460_b = Rx*r_360_a - 3*r_260_a;
   double r_406_b = Rx*r_306_a - 3*r_206_a;
   double r_064_b = Rz*r_063_a - 3*r_062_a;
   double r_046_b = Ry*r_036_a - 3*r_026_a;
   double r_550_b = Ry*r_540_a - 4*r_530_a;
   double r_505_b = Rz*r_504_a - 4*r_503_a;
   double r_055_b = Rz*r_054_a - 4*r_053_a;
   double r_316_b = Ry*r_306_a;
   double r_361_b = Rz*r_360_a;
   double r_631_b = Rz*r_630_a;
   double r_514_b = Ry*r_504_a;
   double r_154_b = Rx*r_054_a;
   double r_541_b = Rz*r_540_a;
   double r_145_b = Rx*r_045_a;
   double r_451_b = Rz*r_450_a;
   double r_415_b = Ry*r_405_a;
   double r_244_b = Rx*r_144_a - r_044_a;
   double r_b00_b = Rx*r_a00_a - 10*r_900_a;
   double r_0b0_b = Ry*r_0a0_a - 10*r_090_a;
   double r_00b_b = Rz*r_00a_a - 10*r_009_a;
   double r_1a0_b = Rx*r_0a0_a;
   double r_10a_b = Rx*r_00a_a;
   double r_a10_b = Ry*r_a00_a;
   double r_01a_b = Ry*r_00a_a;
   double r_a01_b = Rz*r_a00_a;
   double r_0a1_b = Rz*r_0a0_a;
   double r_920_b = Ry*r_910_a - r_900_a;
   double r_902_b = Rz*r_901_a - r_900_a;
   double r_290_b = Rx*r_190_a - r_090_a;
   double r_092_b = Rz*r_091_a - r_090_a;
   double r_209_b = Rx*r_109_a - r_009_a;
   double r_029_b = Ry*r_019_a - r_009_a;
   double r_380_b = Rx*r_280_a - 2*r_180_a;
   double r_308_b = Rx*r_208_a - 2*r_108_a;
   double r_830_b = Ry*r_820_a - 2*r_810_a;
   double r_038_b = Ry*r_028_a - 2*r_018_a;
   double r_803_b = Rz*r_802_a - 2*r_801_a;
   double r_083_b = Rz*r_082_a - 2*r_081_a;
   double r_740_b = Ry*r_730_a - 3*r_720_a;
   double r_704_b = Rz*r_703_a - 3*r_702_a;
   double r_470_b = Rx*r_370_a - 3*r_270_a;
   double r_074_b = Rz*r_073_a - 3*r_072_a;
   double r_407_b = Rx*r_307_a - 3*r_207_a;
   double r_047_b = Ry*r_037_a - 3*r_027_a;
   double r_560_b = Rx*r_460_a - 4*r_360_a;
   double r_506_b = Rx*r_406_a - 4*r_306_a;
   double r_650_b = Ry*r_640_a - 4*r_630_a;
   double r_056_b = Ry*r_046_a - 4*r_036_a;
   double r_605_b = Rz*r_604_a - 4*r_603_a;
   double r_065_b = Rz*r_064_a - 4*r_063_a;
   double r_182_b = Rx*r_082_a;
   double r_128_b = Rx*r_028_a;
   double r_812_b = Ry*r_802_a;
   double r_731_b = Rz*r_730_a;
   double r_713_b = Ry*r_703_a;
   double r_371_b = Rz*r_370_a;
   double r_317_b = Ry*r_307_a;
   double r_173_b = Rx*r_073_a;
   double r_137_b = Rx*r_037_a;
   double r_164_b = Rx*r_064_a;
   double r_146_b = Rx*r_046_a;
   double r_614_b = Ry*r_604_a;
   double r_416_b = Ry*r_406_a;
   double r_641_b = Rz*r_640_a;
   double r_461_b = Rz*r_460_a;
   double r_551_b = Rz*r_550_a;
   double r_515_b = Ry*r_505_a;
   double r_155_b = Rx*r_055_a;
   double r_362_b = Rz*r_361_a - r_360_a;
   double r_326_b = Ry*r_316_a - r_306_a;
   double r_632_b = Rz*r_631_a - r_630_a;
   double r_542_b = Rz*r_541_a - r_540_a;
   double r_524_b = Ry*r_514_a - r_504_a;
   double r_452_b = Rz*r_451_a - r_450_a;
   double r_254_b = Rx*r_154_a - r_054_a;
   double r_425_b = Ry*r_415_a - r_405_a;
   double r_245_b = Rx*r_145_a - r_045_a;
   double r_344_b = Rx*r_244_a - 2*r_144_a;
   if (lab == 12) {
      pOut[0] = Rx*r_b00_b - 11*r_a00_b;
      pOut[1] = Ry*r_0b0_b - 11*r_0a0_b;
      pOut[2] = Rz*r_00b_b - 11*r_00a_b;
      pOut[3] = Ry*r_b00_b;
      pOut[4] = Rx*r_0b0_b;
      pOut[5] = Rz*r_b00_b;
      pOut[6] = Rx*r_00b_b;
      pOut[7] = Rz*r_0b0_b;
      pOut[8] = Ry*r_00b_b;
      pOut[9] = Ry*r_a10_b - r_a00_b;
      pOut[10] = Rz*r_a01_b - r_a00_b;
      pOut[11] = Rx*r_1a0_b - r_0a0_b;
      pOut[12] = Rx*r_10a_b - r_00a_b;
      pOut[13] = Rz*r_0a1_b - r_0a0_b;
      pOut[14] = Ry*r_01a_b - r_00a_b;
      pOut[15] = Ry*r_920_b - 2*r_910_b;
      pOut[16] = Rx*r_290_b - 2*r_190_b;
      pOut[17] = Rz*r_902_b - 2*r_901_b;
      pOut[18] = Rx*r_209_b - 2*r_109_b;
      pOut[19] = Rz*r_092_b - 2*r_091_b;
      pOut[20] = Ry*r_029_b - 2*r_019_b;
      pOut[21] = Ry*r_830_b - 3*r_820_b;
      pOut[22] = Rz*r_803_b - 3*r_802_b;
      pOut[23] = Rx*r_380_b - 3*r_280_b;
      pOut[24] = Rx*r_308_b - 3*r_208_b;
      pOut[25] = Rz*r_083_b - 3*r_082_b;
      pOut[26] = Ry*r_038_b - 3*r_028_b;
      pOut[27] = Ry*r_740_b - 4*r_730_b;
      pOut[28] = Rx*r_470_b - 4*r_370_b;
      pOut[29] = Rz*r_704_b - 4*r_703_b;
      pOut[30] = Rx*r_407_b - 4*r_307_b;
      pOut[31] = Rz*r_074_b - 4*r_073_b;
      pOut[32] = Ry*r_047_b - 4*r_037_b;
      pOut[33] = Rx*r_560_b - 5*r_460_b;
      pOut[34] = Rx*r_506_b - 5*r_406_b;
      pOut[35] = Ry*r_056_b - 5*r_046_b;
      pOut[36] = Ry*r_10a_b;
      pOut[37] = Rz*r_1a0_b;
      pOut[38] = Rz*r_a10_b;
      pOut[39] = Ry*r_902_b;
      pOut[40] = Rx*r_092_b;
      pOut[41] = Rz*r_920_b;
      pOut[42] = Rx*r_029_b;
      pOut[43] = Rz*r_290_b;
      pOut[44] = Ry*r_209_b;
      pOut[45] = Ry*r_308_b;
      pOut[46] = Rx*r_038_b;
      pOut[47] = Rz*r_380_b;
      pOut[48] = Rx*r_083_b;
      pOut[49] = Rz*r_830_b;
      pOut[50] = Ry*r_803_b;
      pOut[51] = Ry*r_704_b;
      pOut[52] = Rx*r_074_b;
      pOut[53] = Rz*r_740_b;
      pOut[54] = Rx*r_047_b;
      pOut[55] = Rz*r_470_b;
      pOut[56] = Ry*r_407_b;
      pOut[57] = Ry*r_506_b;
      pOut[58] = Rx*r_056_b;
      pOut[59] = Rz*r_560_b;
      pOut[60] = Rx*r_065_b;
      pOut[61] = Rz*r_650_b;
      pOut[62] = Ry*r_605_b;
      pOut[63] = Ry*r_812_b - r_802_b;
      pOut[64] = Rx*r_182_b - r_082_b;
      pOut[65] = Rx*r_128_b - r_028_b;
      pOut[66] = Rz*r_731_b - r_730_b;
      pOut[67] = Rz*r_371_b - r_370_b;
      pOut[68] = Ry*r_713_b - r_703_b;
      pOut[69] = Ry*r_317_b - r_307_b;
      pOut[70] = Rx*r_173_b - r_073_b;
      pOut[71] = Rx*r_137_b - r_037_b;
      pOut[72] = Rz*r_641_b - r_640_b;
      pOut[73] = Ry*r_614_b - r_604_b;
      pOut[74] = Rz*r_461_b - r_460_b;
      pOut[75] = Ry*r_416_b - r_406_b;
      pOut[76] = Rx*r_164_b - r_064_b;
      pOut[77] = Rx*r_146_b - r_046_b;
      pOut[78] = Rz*r_551_b - r_550_b;
      pOut[79] = Ry*r_515_b - r_505_b;
      pOut[80] = Rx*r_155_b - r_055_b;
      pOut[81] = Ry*r_326_b - 2*r_316_b;
      pOut[82] = Rz*r_362_b - 2*r_361_b;
      pOut[83] = Rz*r_632_b - 2*r_631_b;
      pOut[84] = Ry*r_524_b - 2*r_514_b;
      pOut[85] = Rx*r_254_b - 2*r_154_b;
      pOut[86] = Rz*r_542_b - 2*r_541_b;
      pOut[87] = Rx*r_245_b - 2*r_145_b;
      pOut[88] = Rz*r_452_b - 2*r_451_b;
      pOut[89] = Ry*r_425_b - 2*r_415_b;
      pOut[90] = Rx*r_344_b - 3*r_244_b;
      return;
   }
   double r_100_7 = Rx*pIn[-6];
   double r_010_7 = Ry*pIn[-6];
   double r_001_7 = Rz*pIn[-6];
   double r_300_8 = Rx*r_200_7 - 2*r_100_7;
   double r_030_8 = Ry*r_020_7 - 2*r_010_7;
   double r_003_8 = Rz*r_002_7 - 2*r_001_7;
   double r_500_9 = Rx*r_400_8 - 4*r_300_8;
   double r_050_9 = Ry*r_040_8 - 4*r_030_8;
   double r_005_9 = Rz*r_004_8 - 4*r_003_8;
   double r_015_9 = Ry*r_005_8;
   double r_700_a = Rx*r_600_9 - 6*r_500_9;
   double r_070_a = Ry*r_060_9 - 6*r_050_9;
   double r_007_a = Rz*r_006_9 - 6*r_005_9;
   double r_160_a = Rx*r_060_9;
   double r_106_a = Rx*r_006_9;
   double r_610_a = Ry*r_600_9;
   double r_016_a = Ry*r_006_9;
   double r_601_a = Rz*r_600_9;
   double r_061_a = Rz*r_060_9;
   double r_502_a = Rz*r_501_9 - r_500_9;
   double r_052_a = Rz*r_051_9 - r_050_9;
   double r_025_a = Ry*r_015_9 - r_005_9;
   double r_035_a = Ry*r_025_9 - 2*r_015_9;
   double r_900_b = Rx*r_800_a - 8*r_700_a;
   double r_090_b = Ry*r_080_a - 8*r_070_a;
   double r_009_b = Rz*r_008_a - 8*r_007_a;
   double r_180_b = Rx*r_080_a;
   double r_108_b = Rx*r_008_a;
   double r_810_b = Ry*r_800_a;
   double r_018_b = Ry*r_008_a;
   double r_801_b = Rz*r_800_a;
   double r_081_b = Rz*r_080_a;
   double r_720_b = Ry*r_710_a - r_700_a;
   double r_702_b = Rz*r_701_a - r_700_a;
   double r_270_b = Rx*r_170_a - r_070_a;
   double r_072_b = Rz*r_071_a - r_070_a;
   double r_207_b = Rx*r_107_a - r_007_a;
   double r_027_b = Ry*r_017_a - r_007_a;
   double r_360_b = Rx*r_260_a - 2*r_160_a;
   double r_306_b = Rx*r_206_a - 2*r_106_a;
   double r_630_b = Ry*r_620_a - 2*r_610_a;
   double r_036_b = Ry*r_026_a - 2*r_016_a;
   double r_603_b = Rz*r_602_a - 2*r_601_a;
   double r_063_b = Rz*r_062_a - 2*r_061_a;
   double r_504_b = Rz*r_503_a - 3*r_502_a;
   double r_054_b = Rz*r_053_a - 3*r_052_a;
   double r_045_b = Ry*r_035_a - 3*r_025_a;
   double r_b00_c = Rx*r_a00_b - 10*r_900_b;
   double r_0b0_c = Ry*r_0a0_b - 10*r_090_b;
   double r_00b_c = Rz*r_00a_b - 10*r_009_b;
   double r_1a0_c = Rx*r_0a0_b;
   double r_10a_c = Rx*r_00a_b;
   double r_a10_c = Ry*r_a00_b;
   double r_01a_c = Ry*r_00a_b;
   double r_a01_c = Rz*r_a00_b;
   double r_0a1_c = Rz*r_0a0_b;
   double r_920_c = Ry*r_910_b - r_900_b;
   double r_902_c = Rz*r_901_b - r_900_b;
   double r_290_c = Rx*r_190_b - r_090_b;
   double r_092_c = Rz*r_091_b - r_090_b;
   double r_209_c = Rx*r_109_b - r_009_b;
   double r_029_c = Ry*r_019_b - r_009_b;
   double r_380_c = Rx*r_280_b - 2*r_180_b;
   double r_308_c = Rx*r_208_b - 2*r_108_b;
   double r_830_c = Ry*r_820_b - 2*r_810_b;
   double r_038_c = Ry*r_028_b - 2*r_018_b;
   double r_803_c = Rz*r_802_b - 2*r_801_b;
   double r_083_c = Rz*r_082_b - 2*r_081_b;
   double r_740_c = Ry*r_730_b - 3*r_720_b;
   double r_704_c = Rz*r_703_b - 3*r_702_b;
   double r_470_c = Rx*r_370_b - 3*r_270_b;
   double r_074_c = Rz*r_073_b - 3*r_072_b;
   double r_407_c = Rx*r_307_b - 3*r_207_b;
   double r_047_c = Ry*r_037_b - 3*r_027_b;
   double r_560_c = Rx*r_460_b - 4*r_360_b;
   double r_506_c = Rx*r_406_b - 4*r_306_b;
   double r_650_c = Ry*r_640_b - 4*r_630_b;
   double r_056_c = Ry*r_046_b - 4*r_036_b;
   double r_605_c = Rz*r_604_b - 4*r_603_b;
   double r_065_c = Rz*r_064_b - 4*r_063_b;
   double r_731_c = Rz*r_730_b;
   double r_371_c = Rz*r_370_b;
   double r_317_c = Ry*r_307_b;
   double r_164_c = Rx*r_064_b;
   double r_146_c = Rx*r_046_b;
   double r_614_c = Ry*r_604_b;
   double r_416_c = Ry*r_406_b;
   double r_641_c = Rz*r_640_b;
   double r_461_c = Rz*r_460_b;
   double r_551_c = Rz*r_550_b;
   double r_515_c = Ry*r_505_b;
   double r_155_c = Rx*r_055_b;
   double r_524_c = Ry*r_514_b - r_504_b;
   double r_254_c = Rx*r_154_b - r_054_b;
   double r_245_c = Rx*r_145_b - r_045_b;
   double r_c00_c = Rx*r_b00_b - 11*r_a00_b;
   double r_0c0_c = Ry*r_0b0_b - 11*r_0a0_b;
   double r_00c_c = Rz*r_00b_b - 11*r_00a_b;
   double r_b10_c = Ry*r_b00_b;
   double r_1b0_c = Rx*r_0b0_b;
   double r_b01_c = Rz*r_b00_b;
   double r_10b_c = Rx*r_00b_b;
   double r_0b1_c = Rz*r_0b0_b;
   double r_01b_c = Ry*r_00b_b;
   double r_a20_c = Ry*r_a10_b - r_a00_b;
   double r_a02_c = Rz*r_a01_b - r_a00_b;
   double r_2a0_c = Rx*r_1a0_b - r_0a0_b;
   double r_20a_c = Rx*r_10a_b - r_00a_b;
   double r_0a2_c = Rz*r_0a1_b - r_0a0_b;
   double r_02a_c = Ry*r_01a_b - r_00a_b;
   double r_930_c = Ry*r_920_b - 2*r_910_b;
   double r_390_c = Rx*r_290_b - 2*r_190_b;
   double r_903_c = Rz*r_902_b - 2*r_901_b;
   double r_309_c = Rx*r_209_b - 2*r_109_b;
   double r_093_c = Rz*r_092_b - 2*r_091_b;
   double r_039_c = Ry*r_029_b - 2*r_019_b;
   double r_840_c = Ry*r_830_b - 3*r_820_b;
   double r_804_c = Rz*r_803_b - 3*r_802_b;
   double r_480_c = Rx*r_380_b - 3*r_280_b;
   double r_408_c = Rx*r_308_b - 3*r_208_b;
   double r_084_c = Rz*r_083_b - 3*r_082_b;
   double r_048_c = Ry*r_038_b - 3*r_028_b;
   double r_750_c = Ry*r_740_b - 4*r_730_b;
   double r_570_c = Rx*r_470_b - 4*r_370_b;
   double r_705_c = Rz*r_704_b - 4*r_703_b;
   double r_507_c = Rx*r_407_b - 4*r_307_b;
   double r_075_c = Rz*r_074_b - 4*r_073_b;
   double r_057_c = Ry*r_047_b - 4*r_037_b;
   double r_660_c = Rx*r_560_b - 5*r_460_b;
   double r_606_c = Rx*r_506_b - 5*r_406_b;
   double r_066_c = Ry*r_056_b - 5*r_046_b;
   double r_912_c = Ry*r_902_b;
   double r_192_c = Rx*r_092_b;
   double r_129_c = Rx*r_029_b;
   double r_318_c = Ry*r_308_b;
   double r_138_c = Rx*r_038_b;
   double r_381_c = Rz*r_380_b;
   double r_183_c = Rx*r_083_b;
   double r_831_c = Rz*r_830_b;
   double r_813_c = Ry*r_803_b;
   double r_714_c = Ry*r_704_b;
   double r_174_c = Rx*r_074_b;
   double r_741_c = Rz*r_740_b;
   double r_147_c = Rx*r_047_b;
   double r_471_c = Rz*r_470_b;
   double r_417_c = Ry*r_407_b;
   double r_516_c = Ry*r_506_b;
   double r_156_c = Rx*r_056_b;
   double r_561_c = Rz*r_560_b;
   double r_165_c = Rx*r_065_b;
   double r_651_c = Rz*r_650_b;
   double r_615_c = Ry*r_605_b;
   double r_732_c = Rz*r_731_b - r_730_b;
   double r_372_c = Rz*r_371_b - r_370_b;
   double r_327_c = Ry*r_317_b - r_307_b;
   double r_642_c = Rz*r_641_b - r_640_b;
   double r_624_c = Ry*r_614_b - r_604_b;
   double r_462_c = Rz*r_461_b - r_460_b;
   double r_426_c = Ry*r_416_b - r_406_b;
   double r_264_c = Rx*r_164_b - r_064_b;
   double r_246_c = Rx*r_146_b - r_046_b;
   double r_552_c = Rz*r_551_b - r_550_b;
   double r_525_c = Ry*r_515_b - r_505_b;
   double r_255_c = Rx*r_155_b - r_055_b;
   double r_534_c = Ry*r_524_b - 2*r_514_b;
   double r_354_c = Rx*r_254_b - 2*r_154_b;
   double r_345_c = Rx*r_245_b - 2*r_145_b;
   if (lab == 13) {
      pOut[0] = Rx*r_c00_c - 12*r_b00_c;
      pOut[1] = Ry*r_0c0_c - 12*r_0b0_c;
      pOut[2] = Rz*r_00c_c - 12*r_00b_c;
      pOut[3] = Rx*r_0c0_c;
      pOut[4] = Rx*r_00c_c;
      pOut[5] = Ry*r_c00_c;
      pOut[6] = Ry*r_00c_c;
      pOut[7] = Rz*r_c00_c;
      pOut[8] = Rz*r_0c0_c;
      pOut[9] = Ry*r_b10_c - r_b00_c;
      pOut[10] = Rz*r_b01_c - r_b00_c;
      pOut[11] = Rx*r_1b0_c - r_0b0_c;
      pOut[12] = Rz*r_0b1_c - r_0b0_c;
      pOut[13] = Rx*r_10b_c - r_00b_c;
      pOut[14] = Ry*r_01b_c - r_00b_c;
      pOut[15] = Rx*r_2a0_c - 2*r_1a0_c;
      pOut[16] = Rx*r_20a_c - 2*r_10a_c;
      pOut[17] = Ry*r_a20_c - 2*r_a10_c;
      pOut[18] = Ry*r_02a_c - 2*r_01a_c;
      pOut[19] = Rz*r_a02_c - 2*r_a01_c;
      pOut[20] = Rz*r_0a2_c - 2*r_0a1_c;
      pOut[21] = Ry*r_930_c - 3*r_920_c;
      pOut[22] = Rz*r_903_c - 3*r_902_c;
      pOut[23] = Rx*r_390_c - 3*r_290_c;
      pOut[24] = Rz*r_093_c - 3*r_092_c;
      pOut[25] = Rx*r_309_c - 3*r_209_c;
      pOut[26] = Ry*r_039_c - 3*r_029_c;
      pOut[27] = Rx*r_480_c - 4*r_380_c;
      pOut[28] = Rx*r_408_c - 4*r_308_c;
      pOut[29] = Ry*r_840_c - 4*r_830_c;
      pOut[30] = Ry*r_048_c - 4*r_038_c;
      pOut[31] = Rz*r_804_c - 4*r_803_c;
      pOut[32] = Rz*r_084_c - 4*r_083_c;
      pOut[33] = Ry*r_750_c - 5*r_740_c;
      pOut[34] = Rz*r_705_c - 5*r_704_c;
      pOut[35] = Rx*r_570_c - 5*r_470_c;
      pOut[36] = Rz*r_075_c - 5*r_074_c;
      pOut[37] = Rx*r_507_c - 5*r_407_c;
      pOut[38] = Ry*r_057_c - 5*r_047_c;
      pOut[39] = Rz*r_b10_c;
      pOut[40] = Rz*r_1b0_c;
      pOut[41] = Ry*r_10b_c;
      pOut[42] = Rx*r_0a2_c;
      pOut[43] = Rx*r_02a_c;
      pOut[44] = Ry*r_a02_c;
      pOut[45] = Ry*r_20a_c;
      pOut[46] = Rz*r_a20_c;
      pOut[47] = Rz*r_2a0_c;
      pOut[48] = Rz*r_930_c;
      pOut[49] = Ry*r_903_c;
      pOut[50] = Rz*r_390_c;
      pOut[51] = Ry*r_309_c;
      pOut[52] = Rx*r_093_c;
      pOut[53] = Rx*r_039_c;
      pOut[54] = Rx*r_084_c;
      pOut[55] = Rx*r_048_c;
      pOut[56] = Ry*r_804_c;
      pOut[57] = Ry*r_408_c;
      pOut[58] = Rz*r_840_c;
      pOut[59] = Rz*r_480_c;
      pOut[60] = Rz*r_750_c;
      pOut[61] = Ry*r_705_c;
      pOut[62] = Rz*r_570_c;
      pOut[63] = Ry*r_507_c;
      pOut[64] = Rx*r_075_c;
      pOut[65] = Rx*r_057_c;
      pOut[66] = Rx*r_066_c;
      pOut[67] = Ry*r_606_c;
      pOut[68] = Rz*r_660_c;
      pOut[69] = Ry*r_912_c - r_902_c;
      pOut[70] = Rx*r_192_c - r_092_c;
      pOut[71] = Rx*r_129_c - r_029_c;
      pOut[72] = Rz*r_381_c - r_380_c;
      pOut[73] = Ry*r_318_c - r_308_c;
      pOut[74] = Rz*r_831_c - r_830_c;
      pOut[75] = Rx*r_138_c - r_038_c;
      pOut[76] = Ry*r_813_c - r_803_c;
      pOut[77] = Rx*r_183_c - r_083_c;
      pOut[78] = Rz*r_741_c - r_740_c;
      pOut[79] = Ry*r_714_c - r_704_c;
      pOut[80] = Rz*r_471_c - r_470_c;
      pOut[81] = Rx*r_174_c - r_074_c;
      pOut[82] = Ry*r_417_c - r_407_c;
      pOut[83] = Rx*r_147_c - r_047_c;
      pOut[84] = Rz*r_561_c - r_560_c;
      pOut[85] = Ry*r_516_c - r_506_c;
      pOut[86] = Rz*r_651_c - r_650_c;
      pOut[87] = Rx*r_156_c - r_056_c;
      pOut[88] = Ry*r_615_c - r_605_c;
      pOut[89] = Rx*r_165_c - r_065_c;
      pOut[90] = Rz*r_732_c - 2*r_731_c;
      pOut[91] = Rz*r_372_c - 2*r_371_c;
      pOut[92] = Ry*r_327_c - 2*r_317_c;
      pOut[93] = Rx*r_264_c - 2*r_164_c;
      pOut[94] = Rx*r_246_c - 2*r_146_c;
      pOut[95] = Ry*r_624_c - 2*r_614_c;
      pOut[96] = Ry*r_426_c - 2*r_416_c;
      pOut[97] = Rz*r_642_c - 2*r_641_c;
      pOut[98] = Rz*r_462_c - 2*r_461_c;
      pOut[99] = Rz*r_552_c - 2*r_551_c;
      pOut[100] = Ry*r_525_c - 2*r_515_c;
      pOut[101] = Rx*r_255_c - 2*r_155_c;
      pOut[102] = Ry*r_534_c - 3*r_524_c;
      pOut[103] = Rx*r_354_c - 3*r_254_c;
      pOut[104] = Rx*r_345_c - 3*r_245_c;
      return;
   }
   double r_200_8 = Rx*r_100_7 - pIn[-7];
   double r_020_8 = Ry*r_010_7 - pIn[-7];
   double r_002_8 = Rz*r_001_7 - pIn[-7];
   double r_400_9 = Rx*r_300_8 - 3*r_200_8;
   double r_040_9 = Ry*r_030_8 - 3*r_020_8;
   double r_004_9 = Rz*r_003_8 - 3*r_002_8;
   double r_600_a = Rx*r_500_9 - 5*r_400_9;
   double r_060_a = Ry*r_050_9 - 5*r_040_9;
   double r_006_a = Rz*r_005_9 - 5*r_004_9;
   double r_510_a = Ry*r_500_9;
   double r_501_a = Rz*r_500_9;
   double r_051_a = Rz*r_050_9;
   double r_520_a = Ry*r_510_9 - r_500_9;
   double r_800_b = Rx*r_700_a - 7*r_600_a;
   double r_080_b = Ry*r_070_a - 7*r_060_a;
   double r_008_b = Rz*r_007_a - 7*r_006_a;
   double r_710_b = Ry*r_700_a;
   double r_170_b = Rx*r_070_a;
   double r_701_b = Rz*r_700_a;
   double r_107_b = Rx*r_007_a;
   double r_071_b = Rz*r_070_a;
   double r_017_b = Ry*r_007_a;
   double r_602_b = Rz*r_601_a - r_600_a;
   double r_260_b = Rx*r_160_a - r_060_a;
   double r_206_b = Rx*r_106_a - r_006_a;
   double r_062_b = Rz*r_061_a - r_060_a;
   double r_026_b = Ry*r_016_a - r_006_a;
   double r_530_b = Ry*r_520_a - 2*r_510_a;
   double r_503_b = Rz*r_502_a - 2*r_501_a;
   double r_053_b = Rz*r_052_a - 2*r_051_a;
   double r_540_b = Ry*r_530_a - 3*r_520_a;
   double r_a00_c = Rx*r_900_b - 9*r_800_b;
   double r_0a0_c = Ry*r_090_b - 9*r_080_b;
   double r_00a_c = Rz*r_009_b - 9*r_008_b;
   double r_910_c = Ry*r_900_b;
   double r_190_c = Rx*r_090_b;
   double r_901_c = Rz*r_900_b;
   double r_109_c = Rx*r_009_b;
   double r_091_c = Rz*r_090_b;
   double r_019_c = Ry*r_009_b;
   double r_820_c = Ry*r_810_b - r_800_b;
   double r_802_c = Rz*r_801_b - r_800_b;
   double r_280_c = Rx*r_180_b - r_080_b;
   double r_208_c = Rx*r_108_b - r_008_b;
   double r_082_c = Rz*r_081_b - r_080_b;
   double r_028_c = Ry*r_018_b - r_008_b;
   double r_730_c = Ry*r_720_b - 2*r_710_b;
   double r_370_c = Rx*r_270_b - 2*r_170_b;
   double r_703_c = Rz*r_702_b - 2*r_701_b;
   double r_307_c = Rx*r_207_b - 2*r_107_b;
   double r_073_c = Rz*r_072_b - 2*r_071_b;
   double r_037_c = Ry*r_027_b - 2*r_017_b;
   double r_604_c = Rz*r_603_b - 3*r_602_b;
   double r_460_c = Rx*r_360_b - 3*r_260_b;
   double r_406_c = Rx*r_306_b - 3*r_206_b;
   double r_064_c = Rz*r_063_b - 3*r_062_b;
   double r_046_c = Ry*r_036_b - 3*r_026_b;
   double r_550_c = Ry*r_540_b - 4*r_530_b;
   double r_505_c = Rz*r_504_b - 4*r_503_b;
   double r_055_c = Rz*r_054_b - 4*r_053_b;
   double r_c00_d = Rx*r_b00_c - 11*r_a00_c;
   double r_0c0_d = Ry*r_0b0_c - 11*r_0a0_c;
   double r_00c_d = Rz*r_00b_c - 11*r_00a_c;
   double r_b10_d = Ry*r_b00_c;
   double r_1b0_d = Rx*r_0b0_c;
   double r_b01_d = Rz*r_b00_c;
   double r_10b_d = Rx*r_00b_c;
   double r_0b1_d = Rz*r_0b0_c;
   double r_01b_d = Ry*r_00b_c;
   double r_a20_d = Ry*r_a10_c - r_a00_c;
   double r_a02_d = Rz*r_a01_c - r_a00_c;
   double r_2a0_d = Rx*r_1a0_c - r_0a0_c;
   double r_20a_d = Rx*r_10a_c - r_00a_c;
   double r_0a2_d = Rz*r_0a1_c - r_0a0_c;
   double r_02a_d = Ry*r_01a_c - r_00a_c;
   double r_930_d = Ry*r_920_c - 2*r_910_c;
   double r_390_d = Rx*r_290_c - 2*r_190_c;
   double r_903_d = Rz*r_902_c - 2*r_901_c;
   double r_309_d = Rx*r_209_c - 2*r_109_c;
   double r_093_d = Rz*r_092_c - 2*r_091_c;
   double r_039_d = Ry*r_029_c - 2*r_019_c;
   double r_840_d = Ry*r_830_c - 3*r_820_c;
   double r_804_d = Rz*r_803_c - 3*r_802_c;
   double r_480_d = Rx*r_380_c - 3*r_280_c;
   double r_408_d = Rx*r_308_c - 3*r_208_c;
   double r_084_d = Rz*r_083_c - 3*r_082_c;
   double r_048_d = Ry*r_038_c - 3*r_028_c;
   double r_750_d = Ry*r_740_c - 4*r_730_c;
   double r_570_d = Rx*r_470_c - 4*r_370_c;
   double r_705_d = Rz*r_704_c - 4*r_703_c;
   double r_507_d = Rx*r_407_c - 4*r_307_c;
   double r_075_d = Rz*r_074_c - 4*r_073_c;
   double r_057_d = Ry*r_047_c - 4*r_037_c;
   double r_660_d = Rx*r_560_c - 5*r_460_c;
   double r_606_d = Rx*r_506_c - 5*r_406_c;
   double r_066_d = Ry*r_056_c - 5*r_046_c;
   double r_318_d = Ry*r_308_c;
   double r_381_d = Rz*r_380_c;
   double r_831_d = Rz*r_830_c;
   double r_714_d = Ry*r_704_c;
   double r_174_d = Rx*r_074_c;
   double r_741_d = Rz*r_740_c;
   double r_147_d = Rx*r_047_c;
   double r_471_d = Rz*r_470_c;
   double r_417_d = Ry*r_407_c;
   double r_516_d = Ry*r_506_c;
   double r_156_d = Rx*r_056_c;
   double r_561_d = Rz*r_560_c;
   double r_165_d = Rx*r_065_c;
   double r_651_d = Rz*r_650_c;
   double r_615_d = Ry*r_605_c;
   double r_624_d = Ry*r_614_c - r_604_c;
   double r_264_d = Rx*r_164_c - r_064_c;
   double r_246_d = Rx*r_146_c - r_046_c;
   double r_552_d = Rz*r_551_c - r_550_c;
   double r_525_d = Ry*r_515_c - r_505_c;
   double r_255_d = Rx*r_155_c - r_055_c;
   double r_d00_d = Rx*r_c00_c - 12*r_b00_c;
   double r_0d0_d = Ry*r_0c0_c - 12*r_0b0_c;
   double r_00d_d = Rz*r_00c_c - 12*r_00b_c;
   double r_1c0_d = Rx*r_0c0_c;
   double r_10c_d = Rx*r_00c_c;
   double r_c10_d = Ry*r_c00_c;
   double r_01c_d = Ry*r_00c_c;
   double r_c01_d = Rz*r_c00_c;
   double r_0c1_d = Rz*r_0c0_c;
   double r_b20_d = Ry*r_b10_c - r_b00_c;
   double r_b02_d = Rz*r_b01_c - r_b00_c;
   double r_2b0_d = Rx*r_1b0_c - r_0b0_c;
   double r_0b2_d = Rz*r_0b1_c - r_0b0_c;
   double r_20b_d = Rx*r_10b_c - r_00b_c;
   double r_02b_d = Ry*r_01b_c - r_00b_c;
   double r_3a0_d = Rx*r_2a0_c - 2*r_1a0_c;
   double r_30a_d = Rx*r_20a_c - 2*r_10a_c;
   double r_a30_d = Ry*r_a20_c - 2*r_a10_c;
   double r_03a_d = Ry*r_02a_c - 2*r_01a_c;
   double r_a03_d = Rz*r_a02_c - 2*r_a01_c;
   double r_0a3_d = Rz*r_0a2_c - 2*r_0a1_c;
   double r_940_d = Ry*r_930_c - 3*r_920_c;
   double r_904_d = Rz*r_903_c - 3*r_902_c;
   double r_490_d = Rx*r_390_c - 3*r_290_c;
   double r_094_d = Rz*r_093_c - 3*r_092_c;
   double r_409_d = Rx*r_309_c - 3*r_209_c;
   double r_049_d = Ry*r_039_c - 3*r_029_c;
   double r_580_d = Rx*r_480_c - 4*r_380_c;
   double r_508_d = Rx*r_408_c - 4*r_308_c;
   double r_850_d = Ry*r_840_c - 4*r_830_c;
   double r_058_d = Ry*r_048_c - 4*r_038_c;
   double r_805_d = Rz*r_804_c - 4*r_803_c;
   double r_085_d = Rz*r_084_c - 4*r_083_c;
   double r_760_d = Ry*r_750_c - 5*r_740_c;
   double r_706_d = Rz*r_705_c - 5*r_704_c;
   double r_670_d = Rx*r_570_c - 5*r_470_c;
   double r_076_d = Rz*r_075_c - 5*r_074_c;
   double r_607_d = Rx*r_507_c - 5*r_407_c;
   double r_067_d = Ry*r_057_c - 5*r_047_c;
   double r_1a2_d = Rx*r_0a2_c;
   double r_12a_d = Rx*r_02a_c;
   double r_a12_d = Ry*r_a02_c;
   double r_931_d = Rz*r_930_c;
   double r_913_d = Ry*r_903_c;
   double r_391_d = Rz*r_390_c;
   double r_319_d = Ry*r_309_c;
   double r_193_d = Rx*r_093_c;
   double r_139_d = Rx*r_039_c;
   double r_184_d = Rx*r_084_c;
   double r_148_d = Rx*r_048_c;
   double r_814_d = Ry*r_804_c;
   double r_418_d = Ry*r_408_c;
   double r_841_d = Rz*r_840_c;
   double r_481_d = Rz*r_480_c;
   double r_751_d = Rz*r_750_c;
   double r_715_d = Ry*r_705_c;
   double r_571_d = Rz*r_570_c;
   double r_517_d = Ry*r_507_c;
   double r_175_d = Rx*r_075_c;
   double r_157_d = Rx*r_057_c;
   double r_166_d = Rx*r_066_c;
   double r_616_d = Ry*r_606_c;
   double r_661_d = Rz*r_660_c;
   double r_382_d = Rz*r_381_c - r_380_c;
   double r_328_d = Ry*r_318_c - r_308_c;
   double r_832_d = Rz*r_831_c - r_830_c;
   double r_742_d = Rz*r_741_c - r_740_c;
   double r_724_d = Ry*r_714_c - r_704_c;
   double r_472_d = Rz*r_471_c - r_470_c;
   double r_274_d = Rx*r_174_c - r_074_c;
   double r_427_d = Ry*r_417_c - r_407_c;
   double r_247_d = Rx*r_147_c - r_047_c;
   double r_562_d = Rz*r_561_c - r_560_c;
   double r_526_d = Ry*r_516_c - r_506_c;
   double r_652_d = Rz*r_651_c - r_650_c;
   double r_256_d = Rx*r_156_c - r_056_c;
   double r_625_d = Ry*r_615_c - r_605_c;
   double r_265_d = Rx*r_165_c - r_065_c;
   double r_364_d = Rx*r_264_c - 2*r_164_c;
   double r_346_d = Rx*r_246_c - 2*r_146_c;
   double r_634_d = Ry*r_624_c - 2*r_614_c;
   double r_553_d = Rz*r_552_c - 2*r_551_c;
   double r_535_d = Ry*r_525_c - 2*r_515_c;
   double r_355_d = Rx*r_255_c - 2*r_155_c;
   if (lab == 14) {
      pOut[0] = Rx*r_d00_d - 13*r_c00_d;
      pOut[1] = Ry*r_0d0_d - 13*r_0c0_d;
      pOut[2] = Rz*r_00d_d - 13*r_00c_d;
      pOut[3] = Ry*r_d00_d;
      pOut[4] = Rx*r_0d0_d;
      pOut[5] = Rz*r_d00_d;
      pOut[6] = Rx*r_00d_d;
      pOut[7] = Rz*r_0d0_d;
      pOut[8] = Ry*r_00d_d;
      pOut[9] = Ry*r_c10_d - r_c00_d;
      pOut[10] = Rz*r_c01_d - r_c00_d;
      pOut[11] = Rx*r_1c0_d - r_0c0_d;
      pOut[12] = Rx*r_10c_d - r_00c_d;
      pOut[13] = Rz*r_0c1_d - r_0c0_d;
      pOut[14] = Ry*r_01c_d - r_00c_d;
      pOut[15] = Ry*r_b20_d - 2*r_b10_d;
      pOut[16] = Rx*r_2b0_d - 2*r_1b0_d;
      pOut[17] = Rz*r_b02_d - 2*r_b01_d;
      pOut[18] = Rx*r_20b_d - 2*r_10b_d;
      pOut[19] = Rz*r_0b2_d - 2*r_0b1_d;
      pOut[20] = Ry*r_02b_d - 2*r_01b_d;
      pOut[21] = Ry*r_a30_d - 3*r_a20_d;
      pOut[22] = Rz*r_a03_d - 3*r_a02_d;
      pOut[23] = Rx*r_3a0_d - 3*r_2a0_d;
      pOut[24] = Rx*r_30a_d - 3*r_20a_d;
      pOut[25] = Rz*r_0a3_d - 3*r_0a2_d;
      pOut[26] = Ry*r_03a_d - 3*r_02a_d;
      pOut[27] = Ry*r_940_d - 4*r_930_d;
      pOut[28] = Rx*r_490_d - 4*r_390_d;
      pOut[29] = Rz*r_904_d - 4*r_903_d;
      pOut[30] = Rx*r_409_d - 4*r_309_d;
      pOut[31] = Rz*r_094_d - 4*r_093_d;
      pOut[32] = Ry*r_049_d - 4*r_039_d;
      pOut[33] = Ry*r_850_d - 5*r_840_d;
      pOut[34] = Rz*r_805_d - 5*r_804_d;
      pOut[35] = Rx*r_580_d - 5*r_480_d;
      pOut[36] = Rx*r_508_d - 5*r_408_d;
      pOut[37] = Rz*r_085_d - 5*r_084_d;
      pOut[38] = Ry*r_058_d - 5*r_048_d;
      pOut[39] = Ry*r_760_d - 6*r_750_d;
      pOut[40] = Rz*r_706_d - 6*r_705_d;
      pOut[41] = Rz*r_076_d - 6*r_075_d;
      pOut[42] = Ry*r_10c_d;
      pOut[43] = Rz*r_1c0_d;
      pOut[44] = Rz*r_c10_d;
      pOut[45] = Ry*r_b02_d;
      pOut[46] = Rx*r_0b2_d;
      pOut[47] = Rz*r_b20_d;
      pOut[48] = Rx*r_02b_d;
      pOut[49] = Rz*r_2b0_d;
      pOut[50] = Ry*r_20b_d;
      pOut[51] = Ry*r_30a_d;
      pOut[52] = Rx*r_03a_d;
      pOut[53] = Rz*r_3a0_d;
      pOut[54] = Rx*r_0a3_d;
      pOut[55] = Rz*r_a30_d;
      pOut[56] = Ry*r_a03_d;
      pOut[57] = Ry*r_904_d;
      pOut[58] = Rx*r_094_d;
      pOut[59] = Rz*r_940_d;
      pOut[60] = Rx*r_049_d;
      pOut[61] = Rz*r_490_d;
      pOut[62] = Ry*r_409_d;
      pOut[63] = Ry*r_508_d;
      pOut[64] = Rx*r_058_d;
      pOut[65] = Rz*r_580_d;
      pOut[66] = Rx*r_085_d;
      pOut[67] = Rz*r_850_d;
      pOut[68] = Ry*r_805_d;
      pOut[69] = Ry*r_706_d;
      pOut[70] = Rx*r_076_d;
      pOut[71] = Rz*r_760_d;
      pOut[72] = Rx*r_067_d;
      pOut[73] = Rz*r_670_d;
      pOut[74] = Ry*r_607_d;
      pOut[75] = Ry*r_a12_d - r_a02_d;
      pOut[76] = Rx*r_1a2_d - r_0a2_d;
      pOut[77] = Rx*r_12a_d - r_02a_d;
      pOut[78] = Rz*r_931_d - r_930_d;
      pOut[79] = Rz*r_391_d - r_390_d;
      pOut[80] = Ry*r_913_d - r_903_d;
      pOut[81] = Ry*r_319_d - r_309_d;
      pOut[82] = Rx*r_193_d - r_093_d;
      pOut[83] = Rx*r_139_d - r_039_d;
      pOut[84] = Rz*r_841_d - r_840_d;
      pOut[85] = Ry*r_814_d - r_804_d;
      pOut[86] = Rz*r_481_d - r_480_d;
      pOut[87] = Ry*r_418_d - r_408_d;
      pOut[88] = Rx*r_184_d - r_084_d;
      pOut[89] = Rx*r_148_d - r_048_d;
      pOut[90] = Rz*r_751_d - r_750_d;
      pOut[91] = Rz*r_571_d - r_570_d;
      pOut[92] = Ry*r_715_d - r_705_d;
      pOut[93] = Ry*r_517_d - r_507_d;
      pOut[94] = Rx*r_175_d - r_075_d;
      pOut[95] = Rx*r_157_d - r_057_d;
      pOut[96] = Rz*r_661_d - r_660_d;
      pOut[97] = Ry*r_616_d - r_606_d;
      pOut[98] = Rx*r_166_d - r_066_d;
      pOut[99] = Ry*r_328_d - 2*r_318_d;
      pOut[100] = Rz*r_382_d - 2*r_381_d;
      pOut[101] = Rz*r_832_d - 2*r_831_d;
      pOut[102] = Ry*r_724_d - 2*r_714_d;
      pOut[103] = Rx*r_274_d - 2*r_174_d;
      pOut[104] = Rz*r_742_d - 2*r_741_d;
      pOut[105] = Rx*r_247_d - 2*r_147_d;
      pOut[106] = Rz*r_472_d - 2*r_471_d;
      pOut[107] = Ry*r_427_d - 2*r_417_d;
      pOut[108] = Ry*r_526_d - 2*r_516_d;
      pOut[109] = Rx*r_256_d - 2*r_156_d;
      pOut[110] = Rz*r_562_d - 2*r_561_d;
      pOut[111] = Rx*r_265_d - 2*r_165_d;
      pOut[112] = Rz*r_652_d - 2*r_651_d;
      pOut[113] = Ry*r_625_d - 2*r_615_d;
      pOut[114] = Ry*r_634_d - 3*r_624_d;
      pOut[115] = Rx*r_364_d - 3*r_264_d;
      pOut[116] = Rx*r_346_d - 3*r_246_d;
      pOut[117] = Rz*r_553_d - 3*r_552_d;
      pOut[118] = Ry*r_535_d - 3*r_525_d;
      pOut[119] = Rx*r_355_d - 3*r_255_d;
      return;
   }
   double r_100_8 = Rx*pIn[-7];
   double r_010_8 = Ry*pIn[-7];
   double r_001_8 = Rz*pIn[-7];
   double r_300_9 = Rx*r_200_8 - 2*r_100_8;
   double r_030_9 = Ry*r_020_8 - 2*r_010_8;
   double r_003_9 = Rz*r_002_8 - 2*r_001_8;
   double r_500_a = Rx*r_400_9 - 4*r_300_9;
   double r_050_a = Ry*r_040_9 - 4*r_030_9;
   double r_005_a = Rz*r_004_9 - 4*r_003_9;
   double r_700_b = Rx*r_600_a - 6*r_500_a;
   double r_070_b = Ry*r_060_a - 6*r_050_a;
   double r_007_b = Rz*r_006_a - 6*r_005_a;
   double r_160_b = Rx*r_060_a;
   double r_106_b = Rx*r_006_a;
   double r_610_b = Ry*r_600_a;
   double r_016_b = Ry*r_006_a;
   double r_601_b = Rz*r_600_a;
   double r_061_b = Rz*r_060_a;
   double r_620_b = Ry*r_610_a - r_600_a;
   double r_900_c = Rx*r_800_b - 8*r_700_b;
   double r_090_c = Ry*r_080_b - 8*r_070_b;
   double r_009_c = Rz*r_008_b - 8*r_007_b;
   double r_180_c = Rx*r_080_b;
   double r_108_c = Rx*r_008_b;
   double r_810_c = Ry*r_800_b;
   double r_018_c = Ry*r_008_b;
   double r_801_c = Rz*r_800_b;
   double r_081_c = Rz*r_080_b;
   double r_720_c = Ry*r_710_b - r_700_b;
   double r_702_c = Rz*r_701_b - r_700_b;
   double r_270_c = Rx*r_170_b - r_070_b;
   double r_072_c = Rz*r_071_b - r_070_b;
   double r_207_c = Rx*r_107_b - r_007_b;
   double r_027_c = Ry*r_017_b - r_007_b;
   double r_360_c = Rx*r_260_b - 2*r_160_b;
   double r_306_c = Rx*r_206_b - 2*r_106_b;
   double r_630_c = Ry*r_620_b - 2*r_610_b;
   double r_036_c = Ry*r_026_b - 2*r_016_b;
   double r_603_c = Rz*r_602_b - 2*r_601_b;
   double r_063_c = Rz*r_062_b - 2*r_061_b;
   double r_640_c = Ry*r_630_b - 3*r_620_b;
   double r_b00_d = Rx*r_a00_c - 10*r_900_c;
   double r_0b0_d = Ry*r_0a0_c - 10*r_090_c;
   double r_00b_d = Rz*r_00a_c - 10*r_009_c;
   double r_1a0_d = Rx*r_0a0_c;
   double r_10a_d = Rx*r_00a_c;
   double r_a10_d = Ry*r_a00_c;
   double r_01a_d = Ry*r_00a_c;
   double r_a01_d = Rz*r_a00_c;
   double r_0a1_d = Rz*r_0a0_c;
   double r_920_d = Ry*r_910_c - r_900_c;
   double r_902_d = Rz*r_901_c - r_900_c;
   double r_290_d = Rx*r_190_c - r_090_c;
   double r_092_d = Rz*r_091_c - r_090_c;
   double r_209_d = Rx*r_109_c - r_009_c;
   double r_029_d = Ry*r_019_c - r_009_c;
   double r_380_d = Rx*r_280_c - 2*r_180_c;
   double r_308_d = Rx*r_208_c - 2*r_108_c;
   double r_830_d = Ry*r_820_c - 2*r_810_c;
   double r_038_d = Ry*r_028_c - 2*r_018_c;
   double r_803_d = Rz*r_802_c - 2*r_801_c;
   double r_083_d = Rz*r_082_c - 2*r_081_c;
   double r_740_d = Ry*r_730_c - 3*r_720_c;
   double r_704_d = Rz*r_703_c - 3*r_702_c;
   double r_470_d = Rx*r_370_c - 3*r_270_c;
   double r_074_d = Rz*r_073_c - 3*r_072_c;
   double r_407_d = Rx*r_307_c - 3*r_207_c;
   double r_047_d = Ry*r_037_c - 3*r_027_c;
   double r_560_d = Rx*r_460_c - 4*r_360_c;
   double r_506_d = Rx*r_406_c - 4*r_306_c;
   double r_650_d = Ry*r_640_c - 4*r_630_c;
   double r_056_d = Ry*r_046_c - 4*r_036_c;
   double r_605_d = Rz*r_604_c - 4*r_603_c;
   double r_065_d = Rz*r_064_c - 4*r_063_c;
   double r_551_d = Rz*r_550_c;
   double r_d00_e = Rx*r_c00_d - 12*r_b00_d;
   double r_0d0_e = Ry*r_0c0_d - 12*r_0b0_d;
   double r_00d_e = Rz*r_00c_d - 12*r_00b_d;
   double r_1c0_e = Rx*r_0c0_d;
   double r_10c_e = Rx*r_00c_d;
   double r_c10_e = Ry*r_c00_d;
   double r_01c_e = Ry*r_00c_d;
   double r_c01_e = Rz*r_c00_d;
   double r_0c1_e = Rz*r_0c0_d;
   double r_b20_e = Ry*r_b10_d - r_b00_d;
   double r_b02_e = Rz*r_b01_d - r_b00_d;
   double r_2b0_e = Rx*r_1b0_d - r_0b0_d;
   double r_0b2_e = Rz*r_0b1_d - r_0b0_d;
   double r_20b_e = Rx*r_10b_d - r_00b_d;
   double r_02b_e = Ry*r_01b_d - r_00b_d;
   double r_3a0_e = Rx*r_2a0_d - 2*r_1a0_d;
   double r_30a_e = Rx*r_20a_d - 2*r_10a_d;
   double r_a30_e = Ry*r_a20_d - 2*r_a10_d;
   double r_03a_e = Ry*r_02a_d - 2*r_01a_d;
   double r_a03_e = Rz*r_a02_d - 2*r_a01_d;
   double r_0a3_e = Rz*r_0a2_d - 2*r_0a1_d;
   double r_940_e = Ry*r_930_d - 3*r_920_d;
   double r_904_e = Rz*r_903_d - 3*r_902_d;
   double r_490_e = Rx*r_390_d - 3*r_290_d;
   double r_094_e = Rz*r_093_d - 3*r_092_d;
   double r_409_e = Rx*r_309_d - 3*r_209_d;
   double r_049_e = Ry*r_039_d - 3*r_029_d;
   double r_580_e = Rx*r_480_d - 4*r_380_d;
   double r_508_e = Rx*r_408_d - 4*r_308_d;
   double r_850_e = Ry*r_840_d - 4*r_830_d;
   double r_058_e = Ry*r_048_d - 4*r_038_d;
   double r_805_e = Rz*r_804_d - 4*r_803_d;
   double r_085_e = Rz*r_084_d - 4*r_083_d;
   double r_760_e = Ry*r_750_d - 5*r_740_d;
   double r_706_e = Rz*r_705_d - 5*r_704_d;
   double r_670_e = Rx*r_570_d - 5*r_470_d;
   double r_076_e = Rz*r_075_d - 5*r_074_d;
   double r_607_e = Rx*r_507_d - 5*r_407_d;
   double r_067_e = Ry*r_057_d - 5*r_047_d;
   double r_931_e = Rz*r_930_d;
   double r_391_e = Rz*r_390_d;
   double r_319_e = Ry*r_309_d;
   double r_184_e = Rx*r_084_d;
   double r_148_e = Rx*r_048_d;
   double r_814_e = Ry*r_804_d;
   double r_418_e = Ry*r_408_d;
   double r_841_e = Rz*r_840_d;
   double r_481_e = Rz*r_480_d;
   double r_751_e = Rz*r_750_d;
   double r_715_e = Ry*r_705_d;
   double r_571_e = Rz*r_570_d;
   double r_517_e = Ry*r_507_d;
   double r_175_e = Rx*r_075_d;
   double r_157_e = Rx*r_057_d;
   double r_166_e = Rx*r_066_d;
   double r_616_e = Ry*r_606_d;
   double r_661_e = Rz*r_660_d;
   double r_724_e = Ry*r_714_d - r_704_d;
   double r_274_e = Rx*r_174_d - r_074_d;
   double r_247_e = Rx*r_147_d - r_047_d;
   double r_562_e = Rz*r_561_d - r_560_d;
   double r_526_e = Ry*r_516_d - r_506_d;
   double r_652_e = Rz*r_651_d - r_650_d;
   double r_256_e = Rx*r_156_d - r_056_d;
   double r_625_e = Ry*r_615_d - r_605_d;
   double r_265_e = Rx*r_165_d - r_065_d;
   double r_553_e = Rz*r_552_d - 2*r_551_d;
   double r_e00_e = Rx*r_d00_d - 13*r_c00_d;
   double r_0e0_e = Ry*r_0d0_d - 13*r_0c0_d;
   double r_00e_e = Rz*r_00d_d - 13*r_00c_d;
   double r_d10_e = Ry*r_d00_d;
   double r_1d0_e = Rx*r_0d0_d;
   double r_d01_e = Rz*r_d00_d;
   double r_10d_e = Rx*r_00d_d;
   double r_0d1_e = Rz*r_0d0_d;
   double r_01d_e = Ry*r_00d_d;
   double r_c20_e = Ry*r_c10_d - r_c00_d;
   double r_c02_e = Rz*r_c01_d - r_c00_d;
   double r_2c0_e = Rx*r_1c0_d - r_0c0_d;
   double r_20c_e = Rx*r_10c_d - r_00c_d;
   double r_0c2_e = Rz*r_0c1_d - r_0c0_d;
   double r_02c_e = Ry*r_01c_d - r_00c_d;
   double r_b30_e = Ry*r_b20_d - 2*r_b10_d;
   double r_3b0_e = Rx*r_2b0_d - 2*r_1b0_d;
   double r_b03_e = Rz*r_b02_d - 2*r_b01_d;
   double r_30b_e = Rx*r_20b_d - 2*r_10b_d;
   double r_0b3_e = Rz*r_0b2_d - 2*r_0b1_d;
   double r_03b_e = Ry*r_02b_d - 2*r_01b_d;
   double r_a40_e = Ry*r_a30_d - 3*r_a20_d;
   double r_a04_e = Rz*r_a03_d - 3*r_a02_d;
   double r_4a0_e = Rx*r_3a0_d - 3*r_2a0_d;
   double r_40a_e = Rx*r_30a_d - 3*r_20a_d;
   double r_0a4_e = Rz*r_0a3_d - 3*r_0a2_d;
   double r_04a_e = Ry*r_03a_d - 3*r_02a_d;
   double r_950_e = Ry*r_940_d - 4*r_930_d;
   double r_590_e = Rx*r_490_d - 4*r_390_d;
   double r_905_e = Rz*r_904_d - 4*r_903_d;
   double r_509_e = Rx*r_409_d - 4*r_309_d;
   double r_095_e = Rz*r_094_d - 4*r_093_d;
   double r_059_e = Ry*r_049_d - 4*r_039_d;
   double r_860_e = Ry*r_850_d - 5*r_840_d;
   double r_806_e = Rz*r_805_d - 5*r_804_d;
   double r_680_e = Rx*r_580_d - 5*r_480_d;
   double r_608_e = Rx*r_508_d - 5*r_408_d;
   double r_086_e = Rz*r_085_d - 5*r_084_d;
   double r_068_e = Ry*r_058_d - 5*r_048_d;
   double r_770_e = Ry*r_760_d - 6*r_750_d;
   double r_707_e = Rz*r_706_d - 6*r_705_d;
   double r_077_e = Rz*r_076_d - 6*r_075_d;
   double r_b12_e = Ry*r_b02_d;
   double r_1b2_e = Rx*r_0b2_d;
   double r_12b_e = Rx*r_02b_d;
   double r_31a_e = Ry*r_30a_d;
   double r_13a_e = Rx*r_03a_d;
   double r_3a1_e = Rz*r_3a0_d;
   double r_1a3_e = Rx*r_0a3_d;
   double r_a31_e = Rz*r_a30_d;
   double r_a13_e = Ry*r_a03_d;
   double r_914_e = Ry*r_904_d;
   double r_194_e = Rx*r_094_d;
   double r_941_e = Rz*r_940_d;
   double r_149_e = Rx*r_049_d;
   double r_491_e = Rz*r_490_d;
   double r_419_e = Ry*r_409_d;
   double r_518_e = Ry*r_508_d;
   double r_158_e = Rx*r_058_d;
   double r_581_e = Rz*r_580_d;
   double r_185_e = Rx*r_085_d;
   double r_851_e = Rz*r_850_d;
   double r_815_e = Ry*r_805_d;
   double r_716_e = Ry*r_706_d;
   double r_176_e = Rx*r_076_d;
   double r_761_e = Rz*r_760_d;
   double r_167_e = Rx*r_067_d;
   double r_671_e = Rz*r_670_d;
   double r_617_e = Ry*r_607_d;
   double r_932_e = Rz*r_931_d - r_930_d;
   double r_392_e = Rz*r_391_d - r_390_d;
   double r_329_e = Ry*r_319_d - r_309_d;
   double r_842_e = Rz*r_841_d - r_840_d;
   double r_824_e = Ry*r_814_d - r_804_d;
   double r_482_e = Rz*r_481_d - r_480_d;
   double r_428_e = Ry*r_418_d - r_408_d;
   double r_284_e = Rx*r_184_d - r_084_d;
   double r_248_e = Rx*r_148_d - r_048_d;
   double r_752_e = Rz*r_751_d - r_750_d;
   double r_572_e = Rz*r_571_d - r_570_d;
   double r_725_e = Ry*r_715_d - r_705_d;
   double r_527_e = Ry*r_517_d - r_507_d;
   double r_275_e = Rx*r_175_d - r_075_d;
   double r_257_e = Rx*r_157_d - r_057_d;
   double r_662_e = Rz*r_661_d - r_660_d;
   double r_626_e = Ry*r_616_d - r_606_d;
   double r_266_e = Rx*r_166_d - r_066_d;
   double r_734_e = Ry*r_724_d - 2*r_714_d;
   double r_374_e = Rx*r_274_d - 2*r_174_d;
   double r_347_e = Rx*r_247_d - 2*r_147_d;
   double r_536_e = Ry*r_526_d - 2*r_516_d;
   double r_356_e = Rx*r_256_d - 2*r_156_d;
   double r_563_e = Rz*r_562_d - 2*r_561_d;
   double r_365_e = Rx*r_265_d - 2*r_165_d;
   double r_653_e = Rz*r_652_d - 2*r_651_d;
   double r_635_e = Ry*r_625_d - 2*r_615_d;
   double r_554_e = Rz*r_553_d - 3*r_552_d;
   if (lab == 15) {
      pOut[0] = Rx*r_e00_e - 14*r_d00_e;
      pOut[1] = Ry*r_0e0_e - 14*r_0d0_e;
      pOut[2] = Rz*r_00e_e - 14*r_00d_e;
      pOut[3] = Rx*r_0e0_e;
      pOut[4] = Rx*r_00e_e;
      pOut[5] = Ry*r_e00_e;
      pOut[6] = Ry*r_00e_e;
      pOut[7] = Rz*r_e00_e;
      pOut[8] = Rz*r_0e0_e;
      pOut[9] = Ry*r_d10_e - r_d00_e;
      pOut[10] = Rz*r_d01_e - r_d00_e;
      pOut[11] = Rx*r_1d0_e - r_0d0_e;
      pOut[12] = Rz*r_0d1_e - r_0d0_e;
      pOut[13] = Rx*r_10d_e - r_00d_e;
      pOut[14] = Ry*r_01d_e - r_00d_e;
      pOut[15] = Rx*r_2c0_e - 2*r_1c0_e;
      pOut[16] = Rx*r_20c_e - 2*r_10c_e;
      pOut[17] = Ry*r_c20_e - 2*r_c10_e;
      pOut[18] = Ry*r_02c_e - 2*r_01c_e;
      pOut[19] = Rz*r_c02_e - 2*r_c01_e;
      pOut[20] = Rz*r_0c2_e - 2*r_0c1_e;
      pOut[21] = Ry*r_b30_e - 3*r_b20_e;
      pOut[22] = Rz*r_b03_e - 3*r_b02_e;
      pOut[23] = Rx*r_3b0_e - 3*r_2b0_e;
      pOut[24] = Rz*r_0b3_e - 3*r_0b2_e;
      pOut[25] = Rx*r_30b_e - 3*r_20b_e;
      pOut[26] = Ry*r_03b_e - 3*r_02b_e;
      pOut[27] = Rx*r_4a0_e - 4*r_3a0_e;
      pOut[28] = Rx*r_40a_e - 4*r_30a_e;
      pOut[29] = Ry*r_a40_e - 4*r_a30_e;
      pOut[30] = Ry*r_04a_e - 4*r_03a_e;
      pOut[31] = Rz*r_a04_e - 4*r_a03_e;
      pOut[32] = Rz*r_0a4_e - 4*r_0a3_e;
      pOut[33] = Ry*r_950_e - 5*r_940_e;
      pOut[34] = Rz*r_905_e - 5*r_904_e;
      pOut[35] = Rx*r_590_e - 5*r_490_e;
      pOut[36] = Rz*r_095_e - 5*r_094_e;
      pOut[37] = Rx*r_509_e - 5*r_409_e;
      pOut[38] = Ry*r_059_e - 5*r_049_e;
      pOut[39] = Rx*r_680_e - 6*r_580_e;
      pOut[40] = Rx*r_608_e - 6*r_508_e;
      pOut[41] = Ry*r_860_e - 6*r_850_e;
      pOut[42] = Ry*r_068_e - 6*r_058_e;
      pOut[43] = Rz*r_806_e - 6*r_805_e;
      pOut[44] = Rz*r_086_e - 6*r_085_e;
      pOut[45] = Rz*r_d10_e;
      pOut[46] = Rz*r_1d0_e;
      pOut[47] = Ry*r_10d_e;
      pOut[48] = Rx*r_0c2_e;
      pOut[49] = Rx*r_02c_e;
      pOut[50] = Ry*r_c02_e;
      pOut[51] = Ry*r_20c_e;
      pOut[52] = Rz*r_c20_e;
      pOut[53] = Rz*r_2c0_e;
      pOut[54] = Rz*r_b30_e;
      pOut[55] = Ry*r_b03_e;
      pOut[56] = Rz*r_3b0_e;
      pOut[57] = Ry*r_30b_e;
      pOut[58] = Rx*r_0b3_e;
      pOut[59] = Rx*r_03b_e;
      pOut[60] = Rx*r_0a4_e;
      pOut[61] = Rx*r_04a_e;
      pOut[62] = Ry*r_a04_e;
      pOut[63] = Ry*r_40a_e;
      pOut[64] = Rz*r_a40_e;
      pOut[65] = Rz*r_4a0_e;
      pOut[66] = Rz*r_950_e;
      pOut[67] = Ry*r_905_e;
      pOut[68] = Rz*r_590_e;
      pOut[69] = Ry*r_509_e;
      pOut[70] = Rx*r_095_e;
      pOut[71] = Rx*r_059_e;
      pOut[72] = Rx*r_086_e;
      pOut[73] = Rx*r_068_e;
      pOut[74] = Ry*r_806_e;
      pOut[75] = Ry*r_608_e;
      pOut[76] = Rz*r_860_e;
      pOut[77] = Rz*r_680_e;
      pOut[78] = Rz*r_770_e;
      pOut[79] = Ry*r_707_e;
      pOut[80] = Rx*r_077_e;
      pOut[81] = Ry*r_b12_e - r_b02_e;
      pOut[82] = Rx*r_1b2_e - r_0b2_e;
      pOut[83] = Rx*r_12b_e - r_02b_e;
      pOut[84] = Rz*r_3a1_e - r_3a0_e;
      pOut[85] = Ry*r_31a_e - r_30a_e;
      pOut[86] = Rz*r_a31_e - r_a30_e;
      pOut[87] = Rx*r_13a_e - r_03a_e;
      pOut[88] = Ry*r_a13_e - r_a03_e;
      pOut[89] = Rx*r_1a3_e - r_0a3_e;
      pOut[90] = Rz*r_941_e - r_940_e;
      pOut[91] = Ry*r_914_e - r_904_e;
      pOut[92] = Rz*r_491_e - r_490_e;
      pOut[93] = Rx*r_194_e - r_094_e;
      pOut[94] = Ry*r_419_e - r_409_e;
      pOut[95] = Rx*r_149_e - r_049_e;
      pOut[96] = Rz*r_581_e - r_580_e;
      pOut[97] = Ry*r_518_e - r_508_e;
      pOut[98] = Rz*r_851_e - r_850_e;
      pOut[99] = Rx*r_158_e - r_058_e;
      pOut[100] = Ry*r_815_e - r_805_e;
      pOut[101] = Rx*r_185_e - r_085_e;
      pOut[102] = Rz*r_761_e - r_760_e;
      pOut[103] = Ry*r_716_e - r_706_e;
      pOut[104] = Rz*r_671_e - r_670_e;
      pOut[105] = Rx*r_176_e - r_076_e;
      pOut[106] = Ry*r_617_e - r_607_e;
      pOut[107] = Rx*r_167_e - r_067_e;
      pOut[108] = Rz*r_932_e - 2*r_931_e;
      pOut[109] = Rz*r_392_e - 2*r_391_e;
      pOut[110] = Ry*r_329_e - 2*r_319_e;
      pOut[111] = Rx*r_284_e - 2*r_184_e;
      pOut[112] = Rx*r_248_e - 2*r_148_e;
      pOut[113] = Ry*r_824_e - 2*r_814_e;
      pOut[114] = Ry*r_428_e - 2*r_418_e;
      pOut[115] = Rz*r_842_e - 2*r_841_e;
      pOut[116] = Rz*r_482_e - 2*r_481_e;
      pOut[117] = Rz*r_752_e - 2*r_751_e;
      pOut[118] = Ry*r_725_e - 2*r_715_e;
      pOut[119] = Rz*r_572_e - 2*r_571_e;
      pOut[120] = Ry*r_527_e - 2*r_517_e;
      pOut[121] = Rx*r_275_e - 2*r_175_e;
      pOut[122] = Rx*r_257_e - 2*r_157_e;
      pOut[123] = Rx*r_266_e - 2*r_166_e;
      pOut[124] = Ry*r_626_e - 2*r_616_e;
      pOut[125] = Rz*r_662_e - 2*r_661_e;
      pOut[126] = Ry*r_734_e - 3*r_724_e;
      pOut[127] = Rx*r_374_e - 3*r_274_e;
      pOut[128] = Rx*r_347_e - 3*r_247_e;
      pOut[129] = Rz*r_563_e - 3*r_562_e;
      pOut[130] = Ry*r_536_e - 3*r_526_e;
      pOut[131] = Rz*r_653_e - 3*r_652_e;
      pOut[132] = Rx*r_356_e - 3*r_256_e;
      pOut[133] = Ry*r_635_e - 3*r_625_e;
      pOut[134] = Rx*r_365_e - 3*r_265_e;
      pOut[135] = Rz*r_554_e - 4*r_553_e;
      return;
   }
   double r_200_9 = Rx*r_100_8 - pIn[-8];
   double r_020_9 = Ry*r_010_8 - pIn[-8];
   double r_002_9 = Rz*r_001_8 - pIn[-8];
   double r_400_a = Rx*r_300_9 - 3*r_200_9;
   double r_040_a = Ry*r_030_9 - 3*r_020_9;
   double r_004_a = Rz*r_003_9 - 3*r_002_9;
   double r_600_b = Rx*r_500_a - 5*r_400_a;
   double r_060_b = Ry*r_050_a - 5*r_040_a;
   double r_006_b = Rz*r_005_a - 5*r_004_a;
   double r_800_c = Rx*r_700_b - 7*r_600_b;
   double r_080_c = Ry*r_070_b - 7*r_060_b;
   double r_008_c = Rz*r_007_b - 7*r_006_b;
   double r_710_c = Ry*r_700_b;
   double r_170_c = Rx*r_070_b;
   double r_701_c = Rz*r_700_b;
   double r_107_c = Rx*r_007_b;
   double r_071_c = Rz*r_070_b;
   double r_017_c = Ry*r_007_b;
   double r_260_c = Rx*r_160_b - r_060_b;
   double r_206_c = Rx*r_106_b - r_006_b;
   double r_026_c = Ry*r_016_b - r_006_b;
   double r_a00_d = Rx*r_900_c - 9*r_800_c;
   double r_0a0_d = Ry*r_090_c - 9*r_080_c;
   double r_00a_d = Rz*r_009_c - 9*r_008_c;
   double r_910_d = Ry*r_900_c;
   double r_190_d = Rx*r_090_c;
   double r_901_d = Rz*r_900_c;
   double r_109_d = Rx*r_009_c;
   double r_091_d = Rz*r_090_c;
   double r_019_d = Ry*r_009_c;
   double r_820_d = Ry*r_810_c - r_800_c;
   double r_802_d = Rz*r_801_c - r_800_c;
   double r_280_d = Rx*r_180_c - r_080_c;
   double r_208_d = Rx*r_108_c - r_008_c;
   double r_082_d = Rz*r_081_c - r_080_c;
   double r_028_d = Ry*r_018_c - r_008_c;
   double r_730_d = Ry*r_720_c - 2*r_710_c;
   double r_370_d = Rx*r_270_c - 2*r_170_c;
   double r_703_d = Rz*r_702_c - 2*r_701_c;
   double r_307_d = Rx*r_207_c - 2*r_107_c;
   double r_073_d = Rz*r_072_c - 2*r_071_c;
   double r_037_d = Ry*r_027_c - 2*r_017_c;
   double r_460_d = Rx*r_360_c - 3*r_260_c;
   double r_406_d = Rx*r_306_c - 3*r_206_c;
   double r_046_d = Ry*r_036_c - 3*r_026_c;
   double r_c00_e = Rx*r_b00_d - 11*r_a00_d;
   double r_0c0_e = Ry*r_0b0_d - 11*r_0a0_d;
   double r_00c_e = Rz*r_00b_d - 11*r_00a_d;
   double r_b10_e = Ry*r_b00_d;
   double r_1b0_e = Rx*r_0b0_d;
   double r_b01_e = Rz*r_b00_d;
   double r_10b_e = Rx*r_00b_d;
   double r_0b1_e = Rz*r_0b0_d;
   double r_01b_e = Ry*r_00b_d;
   double r_a20_e = Ry*r_a10_d - r_a00_d;
   double r_a02_e = Rz*r_a01_d - r_a00_d;
   double r_2a0_e = Rx*r_1a0_d - r_0a0_d;
   double r_20a_e = Rx*r_10a_d - r_00a_d;
   double r_0a2_e = Rz*r_0a1_d - r_0a0_d;
   double r_02a_e = Ry*r_01a_d - r_00a_d;
   double r_930_e = Ry*r_920_d - 2*r_910_d;
   double r_390_e = Rx*r_290_d - 2*r_190_d;
   double r_903_e = Rz*r_902_d - 2*r_901_d;
   double r_309_e = Rx*r_209_d - 2*r_109_d;
   double r_093_e = Rz*r_092_d - 2*r_091_d;
   double r_039_e = Ry*r_029_d - 2*r_019_d;
   double r_840_e = Ry*r_830_d - 3*r_820_d;
   double r_804_e = Rz*r_803_d - 3*r_802_d;
   double r_480_e = Rx*r_380_d - 3*r_280_d;
   double r_408_e = Rx*r_308_d - 3*r_208_d;
   double r_084_e = Rz*r_083_d - 3*r_082_d;
   double r_048_e = Ry*r_038_d - 3*r_028_d;
   double r_750_e = Ry*r_740_d - 4*r_730_d;
   double r_570_e = Rx*r_470_d - 4*r_370_d;
   double r_705_e = Rz*r_704_d - 4*r_703_d;
   double r_507_e = Rx*r_407_d - 4*r_307_d;
   double r_075_e = Rz*r_074_d - 4*r_073_d;
   double r_057_e = Ry*r_047_d - 4*r_037_d;
   double r_660_e = Rx*r_560_d - 5*r_460_d;
   double r_606_e = Rx*r_506_d - 5*r_406_d;
   double r_066_e = Ry*r_056_d - 5*r_046_d;
   double r_516_e = Ry*r_506_d;
   double r_561_e = Rz*r_560_d;
   double r_651_e = Rz*r_650_d;
   double r_e00_f = Rx*r_d00_e - 13*r_c00_e;
   double r_0e0_f = Ry*r_0d0_e - 13*r_0c0_e;
   double r_00e_f = Rz*r_00d_e - 13*r_00c_e;
   double r_d10_f = Ry*r_d00_e;
   double r_1d0_f = Rx*r_0d0_e;
   double r_d01_f = Rz*r_d00_e;
   double r_10d_f = Rx*r_00d_e;
   double r_0d1_f = Rz*r_0d0_e;
   double r_01d_f = Ry*r_00d_e;
   double r_c20_f = Ry*r_c10_e - r_c00_e;
   double r_c02_f = Rz*r_c01_e - r_c00_e;
   double r_2c0_f = Rx*r_1c0_e - r_0c0_e;
   double r_20c_f = Rx*r_10c_e - r_00c_e;
   double r_0c2_f = Rz*r_0c1_e - r_0c0_e;
   double r_02c_f = Ry*r_01c_e - r_00c_e;
   double r_b30_f = Ry*r_b20_e - 2*r_b10_e;
   double r_3b0_f = Rx*r_2b0_e - 2*r_1b0_e;
   double r_b03_f = Rz*r_b02_e - 2*r_b01_e;
   double r_30b_f = Rx*r_20b_e - 2*r_10b_e;
   double r_0b3_f = Rz*r_0b2_e - 2*r_0b1_e;
   double r_03b_f = Ry*r_02b_e - 2*r_01b_e;
   double r_a40_f = Ry*r_a30_e - 3*r_a20_e;
   double r_a04_f = Rz*r_a03_e - 3*r_a02_e;
   double r_4a0_f = Rx*r_3a0_e - 3*r_2a0_e;
   double r_40a_f = Rx*r_30a_e - 3*r_20a_e;
   double r_0a4_f = Rz*r_0a3_e - 3*r_0a2_e;
   double r_04a_f = Ry*r_03a_e - 3*r_02a_e;
   double r_950_f = Ry*r_940_e - 4*r_930_e;
   double r_590_f = Rx*r_490_e - 4*r_390_e;
   double r_905_f = Rz*r_904_e - 4*r_903_e;
   double r_509_f = Rx*r_409_e - 4*r_309_e;
   double r_095_f = Rz*r_094_e - 4*r_093_e;
   double r_059_f = Ry*r_049_e - 4*r_039_e;
   double r_860_f = Ry*r_850_e - 5*r_840_e;
   double r_806_f = Rz*r_805_e - 5*r_804_e;
   double r_680_f = Rx*r_580_e - 5*r_480_e;
   double r_608_f = Rx*r_508_e - 5*r_408_e;
   double r_086_f = Rz*r_085_e - 5*r_084_e;
   double r_068_f = Ry*r_058_e - 5*r_048_e;
   double r_770_f = Ry*r_760_e - 6*r_750_e;
   double r_707_f = Rz*r_706_e - 6*r_705_e;
   double r_077_f = Rz*r_076_e - 6*r_075_e;
   double r_31a_f = Ry*r_30a_e;
   double r_3a1_f = Rz*r_3a0_e;
   double r_a31_f = Rz*r_a30_e;
   double r_914_f = Ry*r_904_e;
   double r_194_f = Rx*r_094_e;
   double r_941_f = Rz*r_940_e;
   double r_149_f = Rx*r_049_e;
   double r_491_f = Rz*r_490_e;
   double r_419_f = Ry*r_409_e;
   double r_518_f = Ry*r_508_e;
   double r_158_f = Rx*r_058_e;
   double r_581_f = Rz*r_580_e;
   double r_185_f = Rx*r_085_e;
   double r_851_f = Rz*r_850_e;
   double r_815_f = Ry*r_805_e;
   double r_716_f = Ry*r_706_e;
   double r_176_f = Rx*r_076_e;
   double r_761_f = Rz*r_760_e;
   double r_167_f = Rx*r_067_e;
   double r_671_f = Rz*r_670_e;
   double r_617_f = Ry*r_607_e;
   double r_824_f = Ry*r_814_e - r_804_e;
   double r_284_f = Rx*r_184_e - r_084_e;
   double r_248_f = Rx*r_148_e - r_048_e;
   double r_752_f = Rz*r_751_e - r_750_e;
   double r_572_f = Rz*r_571_e - r_570_e;
   double r_725_f = Ry*r_715_e - r_705_e;
   double r_527_f = Ry*r_517_e - r_507_e;
   double r_275_f = Rx*r_175_e - r_075_e;
   double r_257_f = Rx*r_157_e - r_057_e;
   double r_662_f = Rz*r_661_e - r_660_e;
   double r_626_f = Ry*r_616_e - r_606_e;
   double r_266_f = Rx*r_166_e - r_066_e;
   double r_536_f = Ry*r_526_e - 2*r_516_e;
   double r_563_f = Rz*r_562_e - 2*r_561_e;
   double r_653_f = Rz*r_652_e - 2*r_651_e;
   double r_f00_f = Rx*r_e00_e - 14*r_d00_e;
   double r_0f0_f = Ry*r_0e0_e - 14*r_0d0_e;
   double r_00f_f = Rz*r_00e_e - 14*r_00d_e;
   double r_1e0_f = Rx*r_0e0_e;
   double r_10e_f = Rx*r_00e_e;
   double r_e10_f = Ry*r_e00_e;
   double r_01e_f = Ry*r_00e_e;
   double r_e01_f = Rz*r_e00_e;
   double r_0e1_f = Rz*r_0e0_e;
   double r_d20_f = Ry*r_d10_e - r_d00_e;
   double r_d02_f = Rz*r_d01_e - r_d00_e;
   double r_2d0_f = Rx*r_1d0_e - r_0d0_e;
   double r_0d2_f = Rz*r_0d1_e - r_0d0_e;
   double r_20d_f = Rx*r_10d_e - r_00d_e;
   double r_02d_f = Ry*r_01d_e - r_00d_e;
   double r_3c0_f = Rx*r_2c0_e - 2*r_1c0_e;
   double r_30c_f = Rx*r_20c_e - 2*r_10c_e;
   double r_c30_f = Ry*r_c20_e - 2*r_c10_e;
   double r_03c_f = Ry*r_02c_e - 2*r_01c_e;
   double r_c03_f = Rz*r_c02_e - 2*r_c01_e;
   double r_0c3_f = Rz*r_0c2_e - 2*r_0c1_e;
   double r_b40_f = Ry*r_b30_e - 3*r_b20_e;
   double r_b04_f = Rz*r_b03_e - 3*r_b02_e;
   double r_4b0_f = Rx*r_3b0_e - 3*r_2b0_e;
   double r_0b4_f = Rz*r_0b3_e - 3*r_0b2_e;
   double r_40b_f = Rx*r_30b_e - 3*r_20b_e;
   double r_04b_f = Ry*r_03b_e - 3*r_02b_e;
   double r_5a0_f = Rx*r_4a0_e - 4*r_3a0_e;
   double r_50a_f = Rx*r_40a_e - 4*r_30a_e;
   double r_a50_f = Ry*r_a40_e - 4*r_a30_e;
   double r_05a_f = Ry*r_04a_e - 4*r_03a_e;
   double r_a05_f = Rz*r_a04_e - 4*r_a03_e;
   double r_0a5_f = Rz*r_0a4_e - 4*r_0a3_e;
   double r_960_f = Ry*r_950_e - 5*r_940_e;
   double r_906_f = Rz*r_905_e - 5*r_904_e;
   double r_690_f = Rx*r_590_e - 5*r_490_e;
   double r_096_f = Rz*r_095_e - 5*r_094_e;
   double r_609_f = Rx*r_509_e - 5*r_409_e;
   double r_069_f = Ry*r_059_e - 5*r_049_e;
   double r_780_f = Rx*r_680_e - 6*r_580_e;
   double r_708_f = Rx*r_608_e - 6*r_508_e;
   double r_870_f = Ry*r_860_e - 6*r_850_e;
   double r_078_f = Ry*r_068_e - 6*r_058_e;
   double r_807_f = Rz*r_806_e - 6*r_805_e;
   double r_087_f = Rz*r_086_e - 6*r_085_e;
   double r_1c2_f = Rx*r_0c2_e;
   double r_12c_f = Rx*r_02c_e;
   double r_c12_f = Ry*r_c02_e;
   double r_b31_f = Rz*r_b30_e;
   double r_b13_f = Ry*r_b03_e;
   double r_3b1_f = Rz*r_3b0_e;
   double r_31b_f = Ry*r_30b_e;
   double r_1b3_f = Rx*r_0b3_e;
   double r_13b_f = Rx*r_03b_e;
   double r_1a4_f = Rx*r_0a4_e;
   double r_14a_f = Rx*r_04a_e;
   double r_a14_f = Ry*r_a04_e;
   double r_41a_f = Ry*r_40a_e;
   double r_a41_f = Rz*r_a40_e;
   double r_4a1_f = Rz*r_4a0_e;
   double r_951_f = Rz*r_950_e;
   double r_915_f = Ry*r_905_e;
   double r_591_f = Rz*r_590_e;
   double r_519_f = Ry*r_509_e;
   double r_195_f = Rx*r_095_e;
   double r_159_f = Rx*r_059_e;
   double r_186_f = Rx*r_086_e;
   double r_168_f = Rx*r_068_e;
   double r_816_f = Ry*r_806_e;
   double r_618_f = Ry*r_608_e;
   double r_861_f = Rz*r_860_e;
   double r_681_f = Rz*r_680_e;
   double r_771_f = Rz*r_770_e;
   double r_717_f = Ry*r_707_e;
   double r_177_f = Rx*r_077_e;
   double r_3a2_f = Rz*r_3a1_e - r_3a0_e;
   double r_32a_f = Ry*r_31a_e - r_30a_e;
   double r_a32_f = Rz*r_a31_e - r_a30_e;
   double r_942_f = Rz*r_941_e - r_940_e;
   double r_924_f = Ry*r_914_e - r_904_e;
   double r_492_f = Rz*r_491_e - r_490_e;
   double r_294_f = Rx*r_194_e - r_094_e;
   double r_429_f = Ry*r_419_e - r_409_e;
   double r_249_f = Rx*r_149_e - r_049_e;
   double r_582_f = Rz*r_581_e - r_580_e;
   double r_528_f = Ry*r_518_e - r_508_e;
   double r_852_f = Rz*r_851_e - r_850_e;
   double r_258_f = Rx*r_158_e - r_058_e;
   double r_825_f = Ry*r_815_e - r_805_e;
   double r_285_f = Rx*r_185_e - r_085_e;
   double r_762_f = Rz*r_761_e - r_760_e;
   double r_726_f = Ry*r_716_e - r_706_e;
   double r_672_f = Rz*r_671_e - r_670_e;
   double r_276_f = Rx*r_176_e - r_076_e;
   double r_627_f = Ry*r_617_e - r_607_e;
   double r_267_f = Rx*r_167_e - r_067_e;
   double r_384_f = Rx*r_284_e - 2*r_184_e;
   double r_348_f = Rx*r_248_e - 2*r_148_e;
   double r_834_f = Ry*r_824_e - 2*r_814_e;
   double r_753_f = Rz*r_752_e - 2*r_751_e;
   double r_735_f = Ry*r_725_e - 2*r_715_e;
   double r_573_f = Rz*r_572_e - 2*r_571_e;
   double r_537_f = Ry*r_527_e - 2*r_517_e;
   double r_375_f = Rx*r_275_e - 2*r_175_e;
   double r_357_f = Rx*r_257_e - 2*r_157_e;
   double r_366_f = Rx*r_266_e - 2*r_166_e;
   double r_636_f = Ry*r_626_e - 2*r_616_e;
   double r_663_f = Rz*r_662_e - 2*r_661_e;
   double r_564_f = Rz*r_563_e - 3*r_562_e;
   double r_546_f = Ry*r_536_e - 3*r_526_e;
   double r_654_f = Rz*r_653_e - 3*r_652_e;
   if (lab == 16) {
      pOut[0] = Rx*r_f00_f - 15*r_e00_f;
      pOut[1] = Ry*r_0f0_f - 15*r_0e0_f;
      pOut[2] = Rz*r_00f_f - 15*r_00e_f;
      pOut[3] = Ry*r_f00_f;
      pOut[4] = Rx*r_0f0_f;
      pOut[5] = Rz*r_f00_f;
      pOut[6] = Rx*r_00f_f;
      pOut[7] = Rz*r_0f0_f;
      pOut[8] = Ry*r_00f_f;
      pOut[9] = Ry*r_e10_f - r_e00_f;
      pOut[10] = Rz*r_e01_f - r_e00_f;
      pOut[11] = Rx*r_1e0_f - r_0e0_f;
      pOut[12] = Rx*r_10e_f - r_00e_f;
      pOut[13] = Rz*r_0e1_f - r_0e0_f;
      pOut[14] = Ry*r_01e_f - r_00e_f;
      pOut[15] = Ry*r_d20_f - 2*r_d10_f;
      pOut[16] = Rx*r_2d0_f - 2*r_1d0_f;
      pOut[17] = Rz*r_d02_f - 2*r_d01_f;
      pOut[18] = Rx*r_20d_f - 2*r_10d_f;
      pOut[19] = Rz*r_0d2_f - 2*r_0d1_f;
      pOut[20] = Ry*r_02d_f - 2*r_01d_f;
      pOut[21] = Ry*r_c30_f - 3*r_c20_f;
      pOut[22] = Rz*r_c03_f - 3*r_c02_f;
      pOut[23] = Rx*r_3c0_f - 3*r_2c0_f;
      pOut[24] = Rx*r_30c_f - 3*r_20c_f;
      pOut[25] = Rz*r_0c3_f - 3*r_0c2_f;
      pOut[26] = Ry*r_03c_f - 3*r_02c_f;
      pOut[27] = Ry*r_b40_f - 4*r_b30_f;
      pOut[28] = Rx*r_4b0_f - 4*r_3b0_f;
      pOut[29] = Rz*r_b04_f - 4*r_b03_f;
      pOut[30] = Rx*r_40b_f - 4*r_30b_f;
      pOut[31] = Rz*r_0b4_f - 4*r_0b3_f;
      pOut[32] = Ry*r_04b_f - 4*r_03b_f;
      pOut[33] = Ry*r_a50_f - 5*r_a40_f;
      pOut[34] = Rz*r_a05_f - 5*r_a04_f;
      pOut[35] = Rx*r_5a0_f - 5*r_4a0_f;
      pOut[36] = Rx*r_50a_f - 5*r_40a_f;
      pOut[37] = Rz*r_0a5_f - 5*r_0a4_f;
      pOut[38] = Ry*r_05a_f - 5*r_04a_f;
      pOut[39] = Ry*r_960_f - 6*r_950_f;
      pOut[40] = Rx*r_690_f - 6*r_590_f;
      pOut[41] = Rz*r_906_f - 6*r_905_f;
      pOut[42] = Rx*r_609_f - 6*r_509_f;
      pOut[43] = Rz*r_096_f - 6*r_095_f;
      pOut[44] = Ry*r_069_f - 6*r_059_f;
      pOut[45] = Rx*r_780_f - 7*r_680_f;
      pOut[46] = Rx*r_708_f - 7*r_608_f;
      pOut[47] = Ry*r_078_f - 7*r_068_f;
      pOut[48] = Ry*r_10e_f;
      pOut[49] = Rz*r_1e0_f;
      pOut[50] = Rz*r_e10_f;
      pOut[51] = Ry*r_d02_f;
      pOut[52] = Rx*r_0d2_f;
      pOut[53] = Rz*r_d20_f;
      pOut[54] = Rx*r_02d_f;
      pOut[55] = Rz*r_2d0_f;
      pOut[56] = Ry*r_20d_f;
      pOut[57] = Ry*r_30c_f;
      pOut[58] = Rx*r_03c_f;
      pOut[59] = Rz*r_3c0_f;
      pOut[60] = Rx*r_0c3_f;
      pOut[61] = Rz*r_c30_f;
      pOut[62] = Ry*r_c03_f;
      pOut[63] = Ry*r_b04_f;
      pOut[64] = Rx*r_0b4_f;
      pOut[65] = Rz*r_b40_f;
      pOut[66] = Rx*r_04b_f;
      pOut[67] = Rz*r_4b0_f;
      pOut[68] = Ry*r_40b_f;
      pOut[69] = Ry*r_50a_f;
      pOut[70] = Rx*r_05a_f;
      pOut[71] = Rz*r_5a0_f;
      pOut[72] = Rx*r_0a5_f;
      pOut[73] = Rz*r_a50_f;
      pOut[74] = Ry*r_a05_f;
      pOut[75] = Ry*r_906_f;
      pOut[76] = Rx*r_096_f;
      pOut[77] = Rz*r_960_f;
      pOut[78] = Rx*r_069_f;
      pOut[79] = Rz*r_690_f;
      pOut[80] = Ry*r_609_f;
      pOut[81] = Ry*r_708_f;
      pOut[82] = Rx*r_078_f;
      pOut[83] = Rz*r_780_f;
      pOut[84] = Rx*r_087_f;
      pOut[85] = Rz*r_870_f;
      pOut[86] = Ry*r_807_f;
      pOut[87] = Ry*r_c12_f - r_c02_f;
      pOut[88] = Rx*r_1c2_f - r_0c2_f;
      pOut[89] = Rx*r_12c_f - r_02c_f;
      pOut[90] = Rz*r_b31_f - r_b30_f;
      pOut[91] = Rz*r_3b1_f - r_3b0_f;
      pOut[92] = Ry*r_b13_f - r_b03_f;
      pOut[93] = Ry*r_31b_f - r_30b_f;
      pOut[94] = Rx*r_1b3_f - r_0b3_f;
      pOut[95] = Rx*r_13b_f - r_03b_f;
      pOut[96] = Rz*r_a41_f - r_a40_f;
      pOut[97] = Ry*r_a14_f - r_a04_f;
      pOut[98] = Rz*r_4a1_f - r_4a0_f;
      pOut[99] = Ry*r_41a_f - r_40a_f;
      pOut[100] = Rx*r_1a4_f - r_0a4_f;
      pOut[101] = Rx*r_14a_f - r_04a_f;
      pOut[102] = Rz*r_951_f - r_950_f;
      pOut[103] = Rz*r_591_f - r_590_f;
      pOut[104] = Ry*r_915_f - r_905_f;
      pOut[105] = Ry*r_519_f - r_509_f;
      pOut[106] = Rx*r_195_f - r_095_f;
      pOut[107] = Rx*r_159_f - r_059_f;
      pOut[108] = Rz*r_861_f - r_860_f;
      pOut[109] = Ry*r_816_f - r_806_f;
      pOut[110] = Rz*r_681_f - r_680_f;
      pOut[111] = Ry*r_618_f - r_608_f;
      pOut[112] = Rx*r_186_f - r_086_f;
      pOut[113] = Rx*r_168_f - r_068_f;
      pOut[114] = Rz*r_771_f - r_770_f;
      pOut[115] = Ry*r_717_f - r_707_f;
      pOut[116] = Rx*r_177_f - r_077_f;
      pOut[117] = Ry*r_32a_f - 2*r_31a_f;
      pOut[118] = Rz*r_3a2_f - 2*r_3a1_f;
      pOut[119] = Rz*r_a32_f - 2*r_a31_f;
      pOut[120] = Ry*r_924_f - 2*r_914_f;
      pOut[121] = Rx*r_294_f - 2*r_194_f;
      pOut[122] = Rz*r_942_f - 2*r_941_f;
      pOut[123] = Rx*r_249_f - 2*r_149_f;
      pOut[124] = Rz*r_492_f - 2*r_491_f;
      pOut[125] = Ry*r_429_f - 2*r_419_f;
      pOut[126] = Ry*r_528_f - 2*r_518_f;
      pOut[127] = Rx*r_258_f - 2*r_158_f;
      pOut[128] = Rz*r_582_f - 2*r_581_f;
      pOut[129] = Rx*r_285_f - 2*r_185_f;
      pOut[130] = Rz*r_852_f - 2*r_851_f;
      pOut[131] = Ry*r_825_f - 2*r_815_f;
      pOut[132] = Ry*r_726_f - 2*r_716_f;
      pOut[133] = Rx*r_276_f - 2*r_176_f;
      pOut[134] = Rz*r_762_f - 2*r_761_f;
      pOut[135] = Rx*r_267_f - 2*r_167_f;
      pOut[136] = Rz*r_672_f - 2*r_671_f;
      pOut[137] = Ry*r_627_f - 2*r_617_f;
      pOut[138] = Ry*r_834_f - 3*r_824_f;
      pOut[139] = Rx*r_384_f - 3*r_284_f;
      pOut[140] = Rx*r_348_f - 3*r_248_f;
      pOut[141] = Rz*r_753_f - 3*r_752_f;
      pOut[142] = Rz*r_573_f - 3*r_572_f;
      pOut[143] = Ry*r_735_f - 3*r_725_f;
      pOut[144] = Ry*r_537_f - 3*r_527_f;
      pOut[145] = Rx*r_375_f - 3*r_275_f;
      pOut[146] = Rx*r_357_f - 3*r_257_f;
      pOut[147] = Rz*r_663_f - 3*r_662_f;
      pOut[148] = Ry*r_636_f - 3*r_626_f;
      pOut[149] = Rx*r_366_f - 3*r_266_f;
      pOut[150] = Ry*r_546_f - 4*r_536_f;
      pOut[151] = Rz*r_564_f - 4*r_563_f;
      pOut[152] = Rz*r_654_f - 4*r_653_f;
      return;
   }
   double r_100_9 = Rx*pIn[-8];
   double r_010_9 = Ry*pIn[-8];
   double r_001_9 = Rz*pIn[-8];
   double r_300_a = Rx*r_200_9 - 2*r_100_9;
   double r_030_a = Ry*r_020_9 - 2*r_010_9;
   double r_003_a = Rz*r_002_9 - 2*r_001_9;
   double r_500_b = Rx*r_400_a - 4*r_300_a;
   double r_050_b = Ry*r_040_a - 4*r_030_a;
   double r_005_b = Rz*r_004_a - 4*r_003_a;
   double r_700_c = Rx*r_600_b - 6*r_500_b;
   double r_070_c = Ry*r_060_b - 6*r_050_b;
   double r_007_c = Rz*r_006_b - 6*r_005_b;
   double r_900_d = Rx*r_800_c - 8*r_700_c;
   double r_090_d = Ry*r_080_c - 8*r_070_c;
   double r_009_d = Rz*r_008_c - 8*r_007_c;
   double r_180_d = Rx*r_080_c;
   double r_108_d = Rx*r_008_c;
   double r_810_d = Ry*r_800_c;
   double r_018_d = Ry*r_008_c;
   double r_801_d = Rz*r_800_c;
   double r_081_d = Rz*r_080_c;
   double r_720_d = Ry*r_710_c - r_700_c;
   double r_702_d = Rz*r_701_c - r_700_c;
   double r_270_d = Rx*r_170_c - r_070_c;
   double r_072_d = Rz*r_071_c - r_070_c;
   double r_207_d = Rx*r_107_c - r_007_c;
   double r_027_d = Ry*r_017_c - r_007_c;
   double r_b00_e = Rx*r_a00_d - 10*r_900_d;
   double r_0b0_e = Ry*r_0a0_d - 10*r_090_d;
   double r_00b_e = Rz*r_00a_d - 10*r_009_d;
   double r_1a0_e = Rx*r_0a0_d;
   double r_10a_e = Rx*r_00a_d;
   double r_a10_e = Ry*r_a00_d;
   double r_01a_e = Ry*r_00a_d;
   double r_a01_e = Rz*r_a00_d;
   double r_0a1_e = Rz*r_0a0_d;
   double r_920_e = Ry*r_910_d - r_900_d;
   double r_902_e = Rz*r_901_d - r_900_d;
   double r_290_e = Rx*r_190_d - r_090_d;
   double r_092_e = Rz*r_091_d - r_090_d;
   double r_209_e = Rx*r_109_d - r_009_d;
   double r_029_e = Ry*r_019_d - r_009_d;
   double r_380_e = Rx*r_280_d - 2*r_180_d;
   double r_308_e = Rx*r_208_d - 2*r_108_d;
   double r_830_e = Ry*r_820_d - 2*r_810_d;
   double r_038_e = Ry*r_028_d - 2*r_018_d;
   double r_803_e = Rz*r_802_d - 2*r_801_d;
   double r_083_e = Rz*r_082_d - 2*r_081_d;
   double r_740_e = Ry*r_730_d - 3*r_720_d;
   double r_704_e = Rz*r_703_d - 3*r_702_d;
   double r_470_e = Rx*r_370_d - 3*r_270_d;
   double r_074_e = Rz*r_073_d - 3*r_072_d;
   double r_407_e = Rx*r_307_d - 3*r_207_d;
   double r_047_e = Ry*r_037_d - 3*r_027_d;
   double r_d00_f = Rx*r_c00_e - 12*r_b00_e;
   double r_0d0_f = Ry*r_0c0_e - 12*r_0b0_e;
   double r_00d_f = Rz*r_00c_e - 12*r_00b_e;
   double r_1c0_f = Rx*r_0c0_e;
   double r_10c_f = Rx*r_00c_e;
   double r_c10_f = Ry*r_c00_e;
   double r_01c_f = Ry*r_00c_e;
   double r_c01_f = Rz*r_c00_e;
   double r_0c1_f = Rz*r_0c0_e;
   double r_b20_f = Ry*r_b10_e - r_b00_e;
   double r_b02_f = Rz*r_b01_e - r_b00_e;
   double r_2b0_f = Rx*r_1b0_e - r_0b0_e;
   double r_0b2_f = Rz*r_0b1_e - r_0b0_e;
   double r_20b_f = Rx*r_10b_e - r_00b_e;
   double r_02b_f = Ry*r_01b_e - r_00b_e;
   double r_3a0_f = Rx*r_2a0_e - 2*r_1a0_e;
   double r_30a_f = Rx*r_20a_e - 2*r_10a_e;
   double r_a30_f = Ry*r_a20_e - 2*r_a10_e;
   double r_03a_f = Ry*r_02a_e - 2*r_01a_e;
   double r_a03_f = Rz*r_a02_e - 2*r_a01_e;
   double r_0a3_f = Rz*r_0a2_e - 2*r_0a1_e;
   double r_940_f = Ry*r_930_e - 3*r_920_e;
   double r_904_f = Rz*r_903_e - 3*r_902_e;
   double r_490_f = Rx*r_390_e - 3*r_290_e;
   double r_094_f = Rz*r_093_e - 3*r_092_e;
   double r_409_f = Rx*r_309_e - 3*r_209_e;
   double r_049_f = Ry*r_039_e - 3*r_029_e;
   double r_580_f = Rx*r_480_e - 4*r_380_e;
   double r_508_f = Rx*r_408_e - 4*r_308_e;
   double r_850_f = Ry*r_840_e - 4*r_830_e;
   double r_058_f = Ry*r_048_e - 4*r_038_e;
   double r_805_f = Rz*r_804_e - 4*r_803_e;
   double r_085_f = Rz*r_084_e - 4*r_083_e;
   double r_760_f = Ry*r_750_e - 5*r_740_e;
   double r_706_f = Rz*r_705_e - 5*r_704_e;
   double r_670_f = Rx*r_570_e - 5*r_470_e;
   double r_076_f = Rz*r_075_e - 5*r_074_e;
   double r_607_f = Rx*r_507_e - 5*r_407_e;
   double r_067_f = Ry*r_057_e - 5*r_047_e;
   double r_751_f = Rz*r_750_e;
   double r_571_f = Rz*r_570_e;
   double r_517_f = Ry*r_507_e;
   double r_166_f = Rx*r_066_e;
   double r_616_f = Ry*r_606_e;
   double r_661_f = Rz*r_660_e;
   double r_f00_g = Rx*r_e00_f - 14*r_d00_f;
   double r_0f0_g = Ry*r_0e0_f - 14*r_0d0_f;
   double r_00f_g = Rz*r_00e_f - 14*r_00d_f;
   double r_1e0_g = Rx*r_0e0_f;
   double r_10e_g = Rx*r_00e_f;
   double r_e10_g = Ry*r_e00_f;
   double r_01e_g = Ry*r_00e_f;
   double r_e01_g = Rz*r_e00_f;
   double r_0e1_g = Rz*r_0e0_f;
   double r_d20_g = Ry*r_d10_f - r_d00_f;
   double r_d02_g = Rz*r_d01_f - r_d00_f;
   double r_2d0_g = Rx*r_1d0_f - r_0d0_f;
   double r_0d2_g = Rz*r_0d1_f - r_0d0_f;
   double r_20d_g = Rx*r_10d_f - r_00d_f;
   double r_02d_g = Ry*r_01d_f - r_00d_f;
   double r_3c0_g = Rx*r_2c0_f - 2*r_1c0_f;
   double r_30c_g = Rx*r_20c_f - 2*r_10c_f;
   double r_c30_g = Ry*r_c20_f - 2*r_c10_f;
   double r_03c_g = Ry*r_02c_f - 2*r_01c_f;
   double r_c03_g = Rz*r_c02_f - 2*r_c01_f;
   double r_0c3_g = Rz*r_0c2_f - 2*r_0c1_f;
   double r_b40_g = Ry*r_b30_f - 3*r_b20_f;
   double r_b04_g = Rz*r_b03_f - 3*r_b02_f;
   double r_4b0_g = Rx*r_3b0_f - 3*r_2b0_f;
   double r_0b4_g = Rz*r_0b3_f - 3*r_0b2_f;
   double r_40b_g = Rx*r_30b_f - 3*r_20b_f;
   double r_04b_g = Ry*r_03b_f - 3*r_02b_f;
   double r_5a0_g = Rx*r_4a0_f - 4*r_3a0_f;
   double r_50a_g = Rx*r_40a_f - 4*r_30a_f;
   double r_a50_g = Ry*r_a40_f - 4*r_a30_f;
   double r_05a_g = Ry*r_04a_f - 4*r_03a_f;
   double r_a05_g = Rz*r_a04_f - 4*r_a03_f;
   double r_0a5_g = Rz*r_0a4_f - 4*r_0a3_f;
   double r_960_g = Ry*r_950_f - 5*r_940_f;
   double r_906_g = Rz*r_905_f - 5*r_904_f;
   double r_690_g = Rx*r_590_f - 5*r_490_f;
   double r_096_g = Rz*r_095_f - 5*r_094_f;
   double r_609_g = Rx*r_509_f - 5*r_409_f;
   double r_069_g = Ry*r_059_f - 5*r_049_f;
   double r_780_g = Rx*r_680_f - 6*r_580_f;
   double r_708_g = Rx*r_608_f - 6*r_508_f;
   double r_870_g = Ry*r_860_f - 6*r_850_f;
   double r_078_g = Ry*r_068_f - 6*r_058_f;
   double r_807_g = Rz*r_806_f - 6*r_805_f;
   double r_087_g = Rz*r_086_f - 6*r_085_f;
   double r_b31_g = Rz*r_b30_f;
   double r_3b1_g = Rz*r_3b0_f;
   double r_31b_g = Ry*r_30b_f;
   double r_1a4_g = Rx*r_0a4_f;
   double r_14a_g = Rx*r_04a_f;
   double r_a14_g = Ry*r_a04_f;
   double r_41a_g = Ry*r_40a_f;
   double r_a41_g = Rz*r_a40_f;
   double r_4a1_g = Rz*r_4a0_f;
   double r_951_g = Rz*r_950_f;
   double r_915_g = Ry*r_905_f;
   double r_591_g = Rz*r_590_f;
   double r_519_g = Ry*r_509_f;
   double r_195_g = Rx*r_095_f;
   double r_159_g = Rx*r_059_f;
   double r_186_g = Rx*r_086_f;
   double r_168_g = Rx*r_068_f;
   double r_816_g = Ry*r_806_f;
   double r_618_g = Ry*r_608_f;
   double r_861_g = Rz*r_860_f;
   double r_681_g = Rz*r_680_f;
   double r_771_g = Rz*r_770_f;
   double r_717_g = Ry*r_707_f;
   double r_177_g = Rx*r_077_f;
   double r_924_g = Ry*r_914_f - r_904_f;
   double r_294_g = Rx*r_194_f - r_094_f;
   double r_249_g = Rx*r_149_f - r_049_f;
   double r_582_g = Rz*r_581_f - r_580_f;
   double r_528_g = Ry*r_518_f - r_508_f;
   double r_852_g = Rz*r_851_f - r_850_f;
   double r_258_g = Rx*r_158_f - r_058_f;
   double r_825_g = Ry*r_815_f - r_805_f;
   double r_285_g = Rx*r_185_f - r_085_f;
   double r_762_g = Rz*r_761_f - r_760_f;
   double r_726_g = Ry*r_716_f - r_706_f;
   double r_672_g = Rz*r_671_f - r_670_f;
   double r_276_g = Rx*r_176_f - r_076_f;
   double r_627_g = Ry*r_617_f - r_607_f;
   double r_267_g = Rx*r_167_f - r_067_f;
   double r_753_g = Rz*r_752_f - 2*r_751_f;
   double r_573_g = Rz*r_572_f - 2*r_571_f;
   double r_537_g = Ry*r_527_f - 2*r_517_f;
   double r_366_g = Rx*r_266_f - 2*r_166_f;
   double r_636_g = Ry*r_626_f - 2*r_616_f;
   double r_663_g = Rz*r_662_f - 2*r_661_f;
   double r_g00_g = Rx*r_f00_f - 15*r_e00_f;
   double r_0g0_g = Ry*r_0f0_f - 15*r_0e0_f;
   double r_00g_g = Rz*r_00f_f - 15*r_00e_f;
   double r_f10_g = Ry*r_f00_f;
   double r_1f0_g = Rx*r_0f0_f;
   double r_f01_g = Rz*r_f00_f;
   double r_10f_g = Rx*r_00f_f;
   double r_0f1_g = Rz*r_0f0_f;
   double r_01f_g = Ry*r_00f_f;
   double r_e20_g = Ry*r_e10_f - r_e00_f;
   double r_e02_g = Rz*r_e01_f - r_e00_f;
   double r_2e0_g = Rx*r_1e0_f - r_0e0_f;
   double r_20e_g = Rx*r_10e_f - r_00e_f;
   double r_0e2_g = Rz*r_0e1_f - r_0e0_f;
   double r_02e_g = Ry*r_01e_f - r_00e_f;
   double r_d30_g = Ry*r_d20_f - 2*r_d10_f;
   double r_3d0_g = Rx*r_2d0_f - 2*r_1d0_f;
   double r_d03_g = Rz*r_d02_f - 2*r_d01_f;
   double r_30d_g = Rx*r_20d_f - 2*r_10d_f;
   double r_0d3_g = Rz*r_0d2_f - 2*r_0d1_f;
   double r_03d_g = Ry*r_02d_f - 2*r_01d_f;
   double r_c40_g = Ry*r_c30_f - 3*r_c20_f;
   double r_c04_g = Rz*r_c03_f - 3*r_c02_f;
   double r_4c0_g = Rx*r_3c0_f - 3*r_2c0_f;
   double r_40c_g = Rx*r_30c_f - 3*r_20c_f;
   double r_0c4_g = Rz*r_0c3_f - 3*r_0c2_f;
   double r_04c_g = Ry*r_03c_f - 3*r_02c_f;
   double r_b50_g = Ry*r_b40_f - 4*r_b30_f;
   double r_5b0_g = Rx*r_4b0_f - 4*r_3b0_f;
   double r_b05_g = Rz*r_b04_f - 4*r_b03_f;
   double r_50b_g = Rx*r_40b_f - 4*r_30b_f;
   double r_0b5_g = Rz*r_0b4_f - 4*r_0b3_f;
   double r_05b_g = Ry*r_04b_f - 4*r_03b_f;
   double r_a60_g = Ry*r_a50_f - 5*r_a40_f;
   double r_a06_g = Rz*r_a05_f - 5*r_a04_f;
   double r_6a0_g = Rx*r_5a0_f - 5*r_4a0_f;
   double r_60a_g = Rx*r_50a_f - 5*r_40a_f;
   double r_0a6_g = Rz*r_0a5_f - 5*r_0a4_f;
   double r_06a_g = Ry*r_05a_f - 5*r_04a_f;
   double r_970_g = Ry*r_960_f - 6*r_950_f;
   double r_790_g = Rx*r_690_f - 6*r_590_f;
   double r_907_g = Rz*r_906_f - 6*r_905_f;
   double r_709_g = Rx*r_609_f - 6*r_509_f;
   double r_097_g = Rz*r_096_f - 6*r_095_f;
   double r_079_g = Ry*r_069_f - 6*r_059_f;
   double r_880_g = Rx*r_780_f - 7*r_680_f;
   double r_808_g = Rx*r_708_f - 7*r_608_f;
   double r_088_g = Ry*r_078_f - 7*r_068_f;
   double r_d12_g = Ry*r_d02_f;
   double r_1d2_g = Rx*r_0d2_f;
   double r_12d_g = Rx*r_02d_f;
   double r_31c_g = Ry*r_30c_f;
   double r_13c_g = Rx*r_03c_f;
   double r_3c1_g = Rz*r_3c0_f;
   double r_1c3_g = Rx*r_0c3_f;
   double r_c31_g = Rz*r_c30_f;
   double r_c13_g = Ry*r_c03_f;
   double r_b14_g = Ry*r_b04_f;
   double r_1b4_g = Rx*r_0b4_f;
   double r_b41_g = Rz*r_b40_f;
   double r_14b_g = Rx*r_04b_f;
   double r_4b1_g = Rz*r_4b0_f;
   double r_41b_g = Ry*r_40b_f;
   double r_51a_g = Ry*r_50a_f;
   double r_15a_g = Rx*r_05a_f;
   double r_5a1_g = Rz*r_5a0_f;
   double r_1a5_g = Rx*r_0a5_f;
   double r_a51_g = Rz*r_a50_f;
   double r_a15_g = Ry*r_a05_f;
   double r_916_g = Ry*r_906_f;
   double r_196_g = Rx*r_096_f;
   double r_961_g = Rz*r_960_f;
   double r_169_g = Rx*r_069_f;
   double r_691_g = Rz*r_690_f;
   double r_619_g = Ry*r_609_f;
   double r_718_g = Ry*r_708_f;
   double r_178_g = Rx*r_078_f;
   double r_781_g = Rz*r_780_f;
   double r_187_g = Rx*r_087_f;
   double r_871_g = Rz*r_870_f;
   double r_817_g = Ry*r_807_f;
   double r_b32_g = Rz*r_b31_f - r_b30_f;
   double r_3b2_g = Rz*r_3b1_f - r_3b0_f;
   double r_32b_g = Ry*r_31b_f - r_30b_f;
   double r_a42_g = Rz*r_a41_f - r_a40_f;
   double r_a24_g = Ry*r_a14_f - r_a04_f;
   double r_4a2_g = Rz*r_4a1_f - r_4a0_f;
   double r_42a_g = Ry*r_41a_f - r_40a_f;
   double r_2a4_g = Rx*r_1a4_f - r_0a4_f;
   double r_24a_g = Rx*r_14a_f - r_04a_f;
   double r_952_g = Rz*r_951_f - r_950_f;
   double r_592_g = Rz*r_591_f - r_590_f;
   double r_925_g = Ry*r_915_f - r_905_f;
   double r_529_g = Ry*r_519_f - r_509_f;
   double r_295_g = Rx*r_195_f - r_095_f;
   double r_259_g = Rx*r_159_f - r_059_f;
   double r_862_g = Rz*r_861_f - r_860_f;
   double r_826_g = Ry*r_816_f - r_806_f;
   double r_682_g = Rz*r_681_f - r_680_f;
   double r_628_g = Ry*r_618_f - r_608_f;
   double r_286_g = Rx*r_186_f - r_086_f;
   double r_268_g = Rx*r_168_f - r_068_f;
   double r_772_g = Rz*r_771_f - r_770_f;
   double r_727_g = Ry*r_717_f - r_707_f;
   double r_277_g = Rx*r_177_f - r_077_f;
   double r_934_g = Ry*r_924_f - 2*r_914_f;
   double r_394_g = Rx*r_294_f - 2*r_194_f;
   double r_349_g = Rx*r_249_f - 2*r_149_f;
   double r_538_g = Ry*r_528_f - 2*r_518_f;
   double r_358_g = Rx*r_258_f - 2*r_158_f;
   double r_583_g = Rz*r_582_f - 2*r_581_f;
   double r_385_g = Rx*r_285_f - 2*r_185_f;
   double r_853_g = Rz*r_852_f - 2*r_851_f;
   double r_835_g = Ry*r_825_f - 2*r_815_f;
   double r_736_g = Ry*r_726_f - 2*r_716_f;
   double r_376_g = Rx*r_276_f - 2*r_176_f;
   double r_763_g = Rz*r_762_f - 2*r_761_f;
   double r_367_g = Rx*r_267_f - 2*r_167_f;
   double r_673_g = Rz*r_672_f - 2*r_671_f;
   double r_637_g = Ry*r_627_f - 2*r_617_f;
   double r_754_g = Rz*r_753_f - 3*r_752_f;
   double r_574_g = Rz*r_573_f - 3*r_572_f;
   double r_547_g = Ry*r_537_f - 3*r_527_f;
   double r_664_g = Rz*r_663_f - 3*r_662_f;
   double r_646_g = Ry*r_636_f - 3*r_626_f;
   double r_466_g = Rx*r_366_f - 3*r_266_f;
   if (lab == 17) {
      pOut[0] = Rx*r_g00_g - 16*r_f00_g;
      pOut[1] = Ry*r_0g0_g - 16*r_0f0_g;
      pOut[2] = Rz*r_00g_g - 16*r_00f_g;
      pOut[3] = Rx*r_0g0_g;
      pOut[4] = Rx*r_00g_g;
      pOut[5] = Ry*r_g00_g;
      pOut[6] = Ry*r_00g_g;
      pOut[7] = Rz*r_g00_g;
      pOut[8] = Rz*r_0g0_g;
      pOut[9] = Ry*r_f10_g - r_f00_g;
      pOut[10] = Rz*r_f01_g - r_f00_g;
      pOut[11] = Rx*r_1f0_g - r_0f0_g;
      pOut[12] = Rz*r_0f1_g - r_0f0_g;
      pOut[13] = Rx*r_10f_g - r_00f_g;
      pOut[14] = Ry*r_01f_g - r_00f_g;
      pOut[15] = Rx*r_2e0_g - 2*r_1e0_g;
      pOut[16] = Rx*r_20e_g - 2*r_10e_g;
      pOut[17] = Ry*r_e20_g - 2*r_e10_g;
      pOut[18] = Ry*r_02e_g - 2*r_01e_g;
      pOut[19] = Rz*r_e02_g - 2*r_e01_g;
      pOut[20] = Rz*r_0e2_g - 2*r_0e1_g;
      pOut[21] = Ry*r_d30_g - 3*r_d20_g;
      pOut[22] = Rz*r_d03_g - 3*r_d02_g;
      pOut[23] = Rx*r_3d0_g - 3*r_2d0_g;
      pOut[24] = Rz*r_0d3_g - 3*r_0d2_g;
      pOut[25] = Rx*r_30d_g - 3*r_20d_g;
      pOut[26] = Ry*r_03d_g - 3*r_02d_g;
      pOut[27] = Rx*r_4c0_g - 4*r_3c0_g;
      pOut[28] = Rx*r_40c_g - 4*r_30c_g;
      pOut[29] = Ry*r_c40_g - 4*r_c30_g;
      pOut[30] = Ry*r_04c_g - 4*r_03c_g;
      pOut[31] = Rz*r_c04_g - 4*r_c03_g;
      pOut[32] = Rz*r_0c4_g - 4*r_0c3_g;
      pOut[33] = Ry*r_b50_g - 5*r_b40_g;
      pOut[34] = Rz*r_b05_g - 5*r_b04_g;
      pOut[35] = Rx*r_5b0_g - 5*r_4b0_g;
      pOut[36] = Rz*r_0b5_g - 5*r_0b4_g;
      pOut[37] = Rx*r_50b_g - 5*r_40b_g;
      pOut[38] = Ry*r_05b_g - 5*r_04b_g;
      pOut[39] = Rx*r_6a0_g - 6*r_5a0_g;
      pOut[40] = Rx*r_60a_g - 6*r_50a_g;
      pOut[41] = Ry*r_a60_g - 6*r_a50_g;
      pOut[42] = Ry*r_06a_g - 6*r_05a_g;
      pOut[43] = Rz*r_a06_g - 6*r_a05_g;
      pOut[44] = Rz*r_0a6_g - 6*r_0a5_g;
      pOut[45] = Ry*r_970_g - 7*r_960_g;
      pOut[46] = Rz*r_907_g - 7*r_906_g;
      pOut[47] = Rx*r_790_g - 7*r_690_g;
      pOut[48] = Rz*r_097_g - 7*r_096_g;
      pOut[49] = Rx*r_709_g - 7*r_609_g;
      pOut[50] = Ry*r_079_g - 7*r_069_g;
      pOut[51] = Rz*r_f10_g;
      pOut[52] = Rz*r_1f0_g;
      pOut[53] = Ry*r_10f_g;
      pOut[54] = Rx*r_0e2_g;
      pOut[55] = Rx*r_02e_g;
      pOut[56] = Ry*r_e02_g;
      pOut[57] = Ry*r_20e_g;
      pOut[58] = Rz*r_e20_g;
      pOut[59] = Rz*r_2e0_g;
      pOut[60] = Rz*r_d30_g;
      pOut[61] = Ry*r_d03_g;
      pOut[62] = Rz*r_3d0_g;
      pOut[63] = Ry*r_30d_g;
      pOut[64] = Rx*r_0d3_g;
      pOut[65] = Rx*r_03d_g;
      pOut[66] = Rx*r_0c4_g;
      pOut[67] = Rx*r_04c_g;
      pOut[68] = Ry*r_c04_g;
      pOut[69] = Ry*r_40c_g;
      pOut[70] = Rz*r_c40_g;
      pOut[71] = Rz*r_4c0_g;
      pOut[72] = Rz*r_b50_g;
      pOut[73] = Ry*r_b05_g;
      pOut[74] = Rz*r_5b0_g;
      pOut[75] = Ry*r_50b_g;
      pOut[76] = Rx*r_0b5_g;
      pOut[77] = Rx*r_05b_g;
      pOut[78] = Rx*r_0a6_g;
      pOut[79] = Rx*r_06a_g;
      pOut[80] = Ry*r_a06_g;
      pOut[81] = Ry*r_60a_g;
      pOut[82] = Rz*r_a60_g;
      pOut[83] = Rz*r_6a0_g;
      pOut[84] = Rz*r_970_g;
      pOut[85] = Ry*r_907_g;
      pOut[86] = Rz*r_790_g;
      pOut[87] = Ry*r_709_g;
      pOut[88] = Rx*r_097_g;
      pOut[89] = Rx*r_079_g;
      pOut[90] = Rx*r_088_g;
      pOut[91] = Ry*r_808_g;
      pOut[92] = Rz*r_880_g;
      pOut[93] = Ry*r_d12_g - r_d02_g;
      pOut[94] = Rx*r_1d2_g - r_0d2_g;
      pOut[95] = Rx*r_12d_g - r_02d_g;
      pOut[96] = Rz*r_3c1_g - r_3c0_g;
      pOut[97] = Ry*r_31c_g - r_30c_g;
      pOut[98] = Rz*r_c31_g - r_c30_g;
      pOut[99] = Rx*r_13c_g - r_03c_g;
      pOut[100] = Ry*r_c13_g - r_c03_g;
      pOut[101] = Rx*r_1c3_g - r_0c3_g;
      pOut[102] = Rz*r_b41_g - r_b40_g;
      pOut[103] = Ry*r_b14_g - r_b04_g;
      pOut[104] = Rz*r_4b1_g - r_4b0_g;
      pOut[105] = Rx*r_1b4_g - r_0b4_g;
      pOut[106] = Ry*r_41b_g - r_40b_g;
      pOut[107] = Rx*r_14b_g - r_04b_g;
      pOut[108] = Rz*r_5a1_g - r_5a0_g;
      pOut[109] = Ry*r_51a_g - r_50a_g;
      pOut[110] = Rz*r_a51_g - r_a50_g;
      pOut[111] = Rx*r_15a_g - r_05a_g;
      pOut[112] = Ry*r_a15_g - r_a05_g;
      pOut[113] = Rx*r_1a5_g - r_0a5_g;
      pOut[114] = Rz*r_961_g - r_960_g;
      pOut[115] = Ry*r_916_g - r_906_g;
      pOut[116] = Rz*r_691_g - r_690_g;
      pOut[117] = Rx*r_196_g - r_096_g;
      pOut[118] = Ry*r_619_g - r_609_g;
      pOut[119] = Rx*r_169_g - r_069_g;
      pOut[120] = Rz*r_781_g - r_780_g;
      pOut[121] = Ry*r_718_g - r_708_g;
      pOut[122] = Rz*r_871_g - r_870_g;
      pOut[123] = Rx*r_178_g - r_078_g;
      pOut[124] = Ry*r_817_g - r_807_g;
      pOut[125] = Rx*r_187_g - r_087_g;
      pOut[126] = Rz*r_b32_g - 2*r_b31_g;
      pOut[127] = Rz*r_3b2_g - 2*r_3b1_g;
      pOut[128] = Ry*r_32b_g - 2*r_31b_g;
      pOut[129] = Rx*r_2a4_g - 2*r_1a4_g;
      pOut[130] = Rx*r_24a_g - 2*r_14a_g;
      pOut[131] = Ry*r_a24_g - 2*r_a14_g;
      pOut[132] = Ry*r_42a_g - 2*r_41a_g;
      pOut[133] = Rz*r_a42_g - 2*r_a41_g;
      pOut[134] = Rz*r_4a2_g - 2*r_4a1_g;
      pOut[135] = Rz*r_952_g - 2*r_951_g;
      pOut[136] = Ry*r_925_g - 2*r_915_g;
      pOut[137] = Rz*r_592_g - 2*r_591_g;
      pOut[138] = Ry*r_529_g - 2*r_519_g;
      pOut[139] = Rx*r_295_g - 2*r_195_g;
      pOut[140] = Rx*r_259_g - 2*r_159_g;
      pOut[141] = Rx*r_286_g - 2*r_186_g;
      pOut[142] = Rx*r_268_g - 2*r_168_g;
      pOut[143] = Ry*r_826_g - 2*r_816_g;
      pOut[144] = Ry*r_628_g - 2*r_618_g;
      pOut[145] = Rz*r_862_g - 2*r_861_g;
      pOut[146] = Rz*r_682_g - 2*r_681_g;
      pOut[147] = Rz*r_772_g - 2*r_771_g;
      pOut[148] = Ry*r_727_g - 2*r_717_g;
      pOut[149] = Rx*r_277_g - 2*r_177_g;
      pOut[150] = Ry*r_934_g - 3*r_924_g;
      pOut[151] = Rx*r_394_g - 3*r_294_g;
      pOut[152] = Rx*r_349_g - 3*r_249_g;
      pOut[153] = Rz*r_583_g - 3*r_582_g;
      pOut[154] = Ry*r_538_g - 3*r_528_g;
      pOut[155] = Rz*r_853_g - 3*r_852_g;
      pOut[156] = Rx*r_358_g - 3*r_258_g;
      pOut[157] = Ry*r_835_g - 3*r_825_g;
      pOut[158] = Rx*r_385_g - 3*r_285_g;
      pOut[159] = Rz*r_763_g - 3*r_762_g;
      pOut[160] = Ry*r_736_g - 3*r_726_g;
      pOut[161] = Rz*r_673_g - 3*r_672_g;
      pOut[162] = Rx*r_376_g - 3*r_276_g;
      pOut[163] = Ry*r_637_g - 3*r_627_g;
      pOut[164] = Rx*r_367_g - 3*r_267_g;
      pOut[165] = Rz*r_754_g - 4*r_753_g;
      pOut[166] = Rz*r_574_g - 4*r_573_g;
      pOut[167] = Ry*r_547_g - 4*r_537_g;
      pOut[168] = Rx*r_466_g - 4*r_366_g;
      pOut[169] = Ry*r_646_g - 4*r_636_g;
      pOut[170] = Rz*r_664_g - 4*r_663_g;
      return;
   }
   double r_200_a = Rx*r_100_9 - pIn[-9];
   double r_020_a = Ry*r_010_9 - pIn[-9];
   double r_002_a = Rz*r_001_9 - pIn[-9];
   double r_400_b = Rx*r_300_a - 3*r_200_a;
   double r_040_b = Ry*r_030_a - 3*r_020_a;
   double r_004_b = Rz*r_003_a - 3*r_002_a;
   double r_600_c = Rx*r_500_b - 5*r_400_b;
   double r_060_c = Ry*r_050_b - 5*r_040_b;
   double r_006_c = Rz*r_005_b - 5*r_004_b;
   double r_016_c = Ry*r_006_b;
   double r_800_d = Rx*r_700_c - 7*r_600_c;
   double r_080_d = Ry*r_070_c - 7*r_060_c;
   double r_008_d = Rz*r_007_c - 7*r_006_c;
   double r_710_d = Ry*r_700_c;
   double r_701_d = Rz*r_700_c;
   double r_071_d = Rz*r_070_c;
   double r_026_d = Ry*r_016_c - r_006_c;
   double r_036_d = Ry*r_026_c - 2*r_016_c;
   double r_a00_e = Rx*r_900_d - 9*r_800_d;
   double r_0a0_e = Ry*r_090_d - 9*r_080_d;
   double r_00a_e = Rz*r_009_d - 9*r_008_d;
   double r_910_e = Ry*r_900_d;
   double r_190_e = Rx*r_090_d;
   double r_901_e = Rz*r_900_d;
   double r_109_e = Rx*r_009_d;
   double r_091_e = Rz*r_090_d;
   double r_019_e = Ry*r_009_d;
   double r_820_e = Ry*r_810_d - r_800_d;
   double r_802_e = Rz*r_801_d - r_800_d;
   double r_280_e = Rx*r_180_d - r_080_d;
   double r_208_e = Rx*r_108_d - r_008_d;
   double r_082_e = Rz*r_081_d - r_080_d;
   double r_028_e = Ry*r_018_d - r_008_d;
   double r_730_e = Ry*r_720_d - 2*r_710_d;
   double r_703_e = Rz*r_702_d - 2*r_701_d;
   double r_073_e = Rz*r_072_d - 2*r_071_d;
   double r_046_e = Ry*r_036_d - 3*r_026_d;
   double r_056_e = Ry*r_046_d - 4*r_036_d;
   double r_c00_f = Rx*r_b00_e - 11*r_a00_e;
   double r_0c0_f = Ry*r_0b0_e - 11*r_0a0_e;
   double r_00c_f = Rz*r_00b_e - 11*r_00a_e;
   double r_b10_f = Ry*r_b00_e;
   double r_1b0_f = Rx*r_0b0_e;
   double r_b01_f = Rz*r_b00_e;
   double r_10b_f = Rx*r_00b_e;
   double r_0b1_f = Rz*r_0b0_e;
   double r_01b_f = Ry*r_00b_e;
   double r_a20_f = Ry*r_a10_e - r_a00_e;
   double r_a02_f = Rz*r_a01_e - r_a00_e;
   double r_2a0_f = Rx*r_1a0_e - r_0a0_e;
   double r_20a_f = Rx*r_10a_e - r_00a_e;
   double r_0a2_f = Rz*r_0a1_e - r_0a0_e;
   double r_02a_f = Ry*r_01a_e - r_00a_e;
   double r_930_f = Ry*r_920_e - 2*r_910_e;
   double r_390_f = Rx*r_290_e - 2*r_190_e;
   double r_903_f = Rz*r_902_e - 2*r_901_e;
   double r_309_f = Rx*r_209_e - 2*r_109_e;
   double r_093_f = Rz*r_092_e - 2*r_091_e;
   double r_039_f = Ry*r_029_e - 2*r_019_e;
   double r_840_f = Ry*r_830_e - 3*r_820_e;
   double r_804_f = Rz*r_803_e - 3*r_802_e;
   double r_480_f = Rx*r_380_e - 3*r_280_e;
   double r_408_f = Rx*r_308_e - 3*r_208_e;
   double r_084_f = Rz*r_083_e - 3*r_082_e;
   double r_048_f = Ry*r_038_e - 3*r_028_e;
   double r_750_f = Ry*r_740_e - 4*r_730_e;
   double r_705_f = Rz*r_704_e - 4*r_703_e;
   double r_075_f = Rz*r_074_e - 4*r_073_e;
   double r_066_f = Ry*r_056_e - 5*r_046_e;
   double r_e00_g = Rx*r_d00_f - 13*r_c00_f;
   double r_0e0_g = Ry*r_0d0_f - 13*r_0c0_f;
   double r_00e_g = Rz*r_00d_f - 13*r_00c_f;
   double r_d10_g = Ry*r_d00_f;
   double r_1d0_g = Rx*r_0d0_f;
   double r_d01_g = Rz*r_d00_f;
   double r_10d_g = Rx*r_00d_f;
   double r_0d1_g = Rz*r_0d0_f;
   double r_01d_g = Ry*r_00d_f;
   double r_c20_g = Ry*r_c10_f - r_c00_f;
   double r_c02_g = Rz*r_c01_f - r_c00_f;
   double r_2c0_g = Rx*r_1c0_f - r_0c0_f;
   double r_20c_g = Rx*r_10c_f - r_00c_f;
   double r_0c2_g = Rz*r_0c1_f - r_0c0_f;
   double r_02c_g = Ry*r_01c_f - r_00c_f;
   double r_b30_g = Ry*r_b20_f - 2*r_b10_f;
   double r_3b0_g = Rx*r_2b0_f - 2*r_1b0_f;
   double r_b03_g = Rz*r_b02_f - 2*r_b01_f;
   double r_30b_g = Rx*r_20b_f - 2*r_10b_f;
   double r_0b3_g = Rz*r_0b2_f - 2*r_0b1_f;
   double r_03b_g = Ry*r_02b_f - 2*r_01b_f;
   double r_a40_g = Ry*r_a30_f - 3*r_a20_f;
   double r_a04_g = Rz*r_a03_f - 3*r_a02_f;
   double r_4a0_g = Rx*r_3a0_f - 3*r_2a0_f;
   double r_40a_g = Rx*r_30a_f - 3*r_20a_f;
   double r_0a4_g = Rz*r_0a3_f - 3*r_0a2_f;
   double r_04a_g = Ry*r_03a_f - 3*r_02a_f;
   double r_950_g = Ry*r_940_f - 4*r_930_f;
   double r_590_g = Rx*r_490_f - 4*r_390_f;
   double r_905_g = Rz*r_904_f - 4*r_903_f;
   double r_509_g = Rx*r_409_f - 4*r_309_f;
   double r_095_g = Rz*r_094_f - 4*r_093_f;
   double r_059_g = Ry*r_049_f - 4*r_039_f;
   double r_860_g = Ry*r_850_f - 5*r_840_f;
   double r_806_g = Rz*r_805_f - 5*r_804_f;
   double r_680_g = Rx*r_580_f - 5*r_480_f;
   double r_608_g = Rx*r_508_f - 5*r_408_f;
   double r_086_g = Rz*r_085_f - 5*r_084_f;
   double r_068_g = Ry*r_058_f - 5*r_048_f;
   double r_770_g = Ry*r_760_f - 6*r_750_f;
   double r_707_g = Rz*r_706_f - 6*r_705_f;
   double r_077_g = Rz*r_076_f - 6*r_075_f;
   double r_518_g = Ry*r_508_f;
   double r_581_g = Rz*r_580_f;
   double r_851_g = Rz*r_850_f;
   double r_716_g = Ry*r_706_f;
   double r_176_g = Rx*r_076_f;
   double r_761_g = Rz*r_760_f;
   double r_167_g = Rx*r_067_f;
   double r_671_g = Rz*r_670_f;
   double r_617_g = Ry*r_607_f;
   double r_266_g = Rx*r_166_f - r_066_f;
   double r_g00_h = Rx*r_f00_g - 15*r_e00_g;
   double r_0g0_h = Ry*r_0f0_g - 15*r_0e0_g;
   double r_00g_h = Rz*r_00f_g - 15*r_00e_g;
   double r_f10_h = Ry*r_f00_g;
   double r_1f0_h = Rx*r_0f0_g;
   double r_f01_h = Rz*r_f00_g;
   double r_10f_h = Rx*r_00f_g;
   double r_0f1_h = Rz*r_0f0_g;
   double r_01f_h = Ry*r_00f_g;
   double r_e20_h = Ry*r_e10_g - r_e00_g;
   double r_e02_h = Rz*r_e01_g - r_e00_g;
   double r_2e0_h = Rx*r_1e0_g - r_0e0_g;
   double r_20e_h = Rx*r_10e_g - r_00e_g;
   double r_0e2_h = Rz*r_0e1_g - r_0e0_g;
   double r_02e_h = Ry*r_01e_g - r_00e_g;
   double r_d30_h = Ry*r_d20_g - 2*r_d10_g;
   double r_3d0_h = Rx*r_2d0_g - 2*r_1d0_g;
   double r_d03_h = Rz*r_d02_g - 2*r_d01_g;
   double r_30d_h = Rx*r_20d_g - 2*r_10d_g;
   double r_0d3_h = Rz*r_0d2_g - 2*r_0d1_g;
   double r_03d_h = Ry*r_02d_g - 2*r_01d_g;
   double r_c40_h = Ry*r_c30_g - 3*r_c20_g;
   double r_c04_h = Rz*r_c03_g - 3*r_c02_g;
   double r_4c0_h = Rx*r_3c0_g - 3*r_2c0_g;
   double r_40c_h = Rx*r_30c_g - 3*r_20c_g;
   double r_0c4_h = Rz*r_0c3_g - 3*r_0c2_g;
   double r_04c_h = Ry*r_03c_g - 3*r_02c_g;
   double r_b50_h = Ry*r_b40_g - 4*r_b30_g;
   double r_5b0_h = Rx*r_4b0_g - 4*r_3b0_g;
   double r_b05_h = Rz*r_b04_g - 4*r_b03_g;
   double r_50b_h = Rx*r_40b_g - 4*r_30b_g;
   double r_0b5_h = Rz*r_0b4_g - 4*r_0b3_g;
   double r_05b_h = Ry*r_04b_g - 4*r_03b_g;
   double r_a60_h = Ry*r_a50_g - 5*r_a40_g;
   double r_a06_h = Rz*r_a05_g - 5*r_a04_g;
   double r_6a0_h = Rx*r_5a0_g - 5*r_4a0_g;
   double r_60a_h = Rx*r_50a_g - 5*r_40a_g;
   double r_0a6_h = Rz*r_0a5_g - 5*r_0a4_g;
   double r_06a_h = Ry*r_05a_g - 5*r_04a_g;
   double r_970_h = Ry*r_960_g - 6*r_950_g;
   double r_790_h = Rx*r_690_g - 6*r_590_g;
   double r_907_h = Rz*r_906_g - 6*r_905_g;
   double r_709_h = Rx*r_609_g - 6*r_509_g;
   double r_097_h = Rz*r_096_g - 6*r_095_g;
   double r_079_h = Ry*r_069_g - 6*r_059_g;
   double r_880_h = Rx*r_780_g - 7*r_680_g;
   double r_808_h = Rx*r_708_g - 7*r_608_g;
   double r_088_h = Ry*r_078_g - 7*r_068_g;
   double r_31c_h = Ry*r_30c_g;
   double r_3c1_h = Rz*r_3c0_g;
   double r_c31_h = Rz*r_c30_g;
   double r_b14_h = Ry*r_b04_g;
   double r_1b4_h = Rx*r_0b4_g;
   double r_b41_h = Rz*r_b40_g;
   double r_14b_h = Rx*r_04b_g;
   double r_4b1_h = Rz*r_4b0_g;
   double r_41b_h = Ry*r_40b_g;
   double r_51a_h = Ry*r_50a_g;
   double r_15a_h = Rx*r_05a_g;
   double r_5a1_h = Rz*r_5a0_g;
   double r_1a5_h = Rx*r_0a5_g;
   double r_a51_h = Rz*r_a50_g;
   double r_a15_h = Ry*r_a05_g;
   double r_916_h = Ry*r_906_g;
   double r_196_h = Rx*r_096_g;
   double r_961_h = Rz*r_960_g;
   double r_169_h = Rx*r_069_g;
   double r_691_h = Rz*r_690_g;
   double r_619_h = Ry*r_609_g;
   double r_718_h = Ry*r_708_g;
   double r_178_h = Rx*r_078_g;
   double r_781_h = Rz*r_780_g;
   double r_187_h = Rx*r_087_g;
   double r_871_h = Rz*r_870_g;
   double r_817_h = Ry*r_807_g;
   double r_a24_h = Ry*r_a14_g - r_a04_g;
   double r_2a4_h = Rx*r_1a4_g - r_0a4_g;
   double r_24a_h = Rx*r_14a_g - r_04a_g;
   double r_952_h = Rz*r_951_g - r_950_g;
   double r_592_h = Rz*r_591_g - r_590_g;
   double r_925_h = Ry*r_915_g - r_905_g;
   double r_529_h = Ry*r_519_g - r_509_g;
   double r_295_h = Rx*r_195_g - r_095_g;
   double r_259_h = Rx*r_159_g - r_059_g;
   double r_862_h = Rz*r_861_g - r_860_g;
   double r_826_h = Ry*r_816_g - r_806_g;
   double r_682_h = Rz*r_681_g - r_680_g;
   double r_628_h = Ry*r_618_g - r_608_g;
   double r_286_h = Rx*r_186_g - r_086_g;
   double r_268_h = Rx*r_168_g - r_068_g;
   double r_772_h = Rz*r_771_g - r_770_g;
   double r_727_h = Ry*r_717_g - r_707_g;
   double r_277_h = Rx*r_177_g - r_077_g;
   double r_538_h = Ry*r_528_g - 2*r_518_g;
   double r_583_h = Rz*r_582_g - 2*r_581_g;
   double r_853_h = Rz*r_852_g - 2*r_851_g;
   double r_736_h = Ry*r_726_g - 2*r_716_g;
   double r_376_h = Rx*r_276_g - 2*r_176_g;
   double r_763_h = Rz*r_762_g - 2*r_761_g;
   double r_367_h = Rx*r_267_g - 2*r_167_g;
   double r_673_h = Rz*r_672_g - 2*r_671_g;
   double r_637_h = Ry*r_627_g - 2*r_617_g;
   double r_466_h = Rx*r_366_g - 3*r_266_g;
   double r_h00_h = Rx*r_g00_g - 16*r_f00_g;
   double r_0h0_h = Ry*r_0g0_g - 16*r_0f0_g;
   double r_00h_h = Rz*r_00g_g - 16*r_00f_g;
   double r_1g0_h = Rx*r_0g0_g;
   double r_10g_h = Rx*r_00g_g;
   double r_g10_h = Ry*r_g00_g;
   double r_01g_h = Ry*r_00g_g;
   double r_g01_h = Rz*r_g00_g;
   double r_0g1_h = Rz*r_0g0_g;
   double r_f20_h = Ry*r_f10_g - r_f00_g;
   double r_f02_h = Rz*r_f01_g - r_f00_g;
   double r_2f0_h = Rx*r_1f0_g - r_0f0_g;
   double r_0f2_h = Rz*r_0f1_g - r_0f0_g;
   double r_20f_h = Rx*r_10f_g - r_00f_g;
   double r_02f_h = Ry*r_01f_g - r_00f_g;
   double r_3e0_h = Rx*r_2e0_g - 2*r_1e0_g;
   double r_30e_h = Rx*r_20e_g - 2*r_10e_g;
   double r_e30_h = Ry*r_e20_g - 2*r_e10_g;
   double r_03e_h = Ry*r_02e_g - 2*r_01e_g;
   double r_e03_h = Rz*r_e02_g - 2*r_e01_g;
   double r_0e3_h = Rz*r_0e2_g - 2*r_0e1_g;
   double r_d40_h = Ry*r_d30_g - 3*r_d20_g;
   double r_d04_h = Rz*r_d03_g - 3*r_d02_g;
   double r_4d0_h = Rx*r_3d0_g - 3*r_2d0_g;
   double r_0d4_h = Rz*r_0d3_g - 3*r_0d2_g;
   double r_40d_h = Rx*r_30d_g - 3*r_20d_g;
   double r_04d_h = Ry*r_03d_g - 3*r_02d_g;
   double r_5c0_h = Rx*r_4c0_g - 4*r_3c0_g;
   double r_50c_h = Rx*r_40c_g - 4*r_30c_g;
   double r_c50_h = Ry*r_c40_g - 4*r_c30_g;
   double r_05c_h = Ry*r_04c_g - 4*r_03c_g;
   double r_c05_h = Rz*r_c04_g - 4*r_c03_g;
   double r_0c5_h = Rz*r_0c4_g - 4*r_0c3_g;
   double r_b60_h = Ry*r_b50_g - 5*r_b40_g;
   double r_b06_h = Rz*r_b05_g - 5*r_b04_g;
   double r_6b0_h = Rx*r_5b0_g - 5*r_4b0_g;
   double r_0b6_h = Rz*r_0b5_g - 5*r_0b4_g;
   double r_60b_h = Rx*r_50b_g - 5*r_40b_g;
   double r_06b_h = Ry*r_05b_g - 5*r_04b_g;
   double r_7a0_h = Rx*r_6a0_g - 6*r_5a0_g;
   double r_70a_h = Rx*r_60a_g - 6*r_50a_g;
   double r_a70_h = Ry*r_a60_g - 6*r_a50_g;
   double r_07a_h = Ry*r_06a_g - 6*r_05a_g;
   double r_a07_h = Rz*r_a06_g - 6*r_a05_g;
   double r_0a7_h = Rz*r_0a6_g - 6*r_0a5_g;
   double r_980_h = Ry*r_970_g - 7*r_960_g;
   double r_908_h = Rz*r_907_g - 7*r_906_g;
   double r_890_h = Rx*r_790_g - 7*r_690_g;
   double r_098_h = Rz*r_097_g - 7*r_096_g;
   double r_809_h = Rx*r_709_g - 7*r_609_g;
   double r_089_h = Ry*r_079_g - 7*r_069_g;
   double r_1e2_h = Rx*r_0e2_g;
   double r_12e_h = Rx*r_02e_g;
   double r_e12_h = Ry*r_e02_g;
   double r_d31_h = Rz*r_d30_g;
   double r_d13_h = Ry*r_d03_g;
   double r_3d1_h = Rz*r_3d0_g;
   double r_31d_h = Ry*r_30d_g;
   double r_1d3_h = Rx*r_0d3_g;
   double r_13d_h = Rx*r_03d_g;
   double r_1c4_h = Rx*r_0c4_g;
   double r_14c_h = Rx*r_04c_g;
   double r_c14_h = Ry*r_c04_g;
   double r_41c_h = Ry*r_40c_g;
   double r_c41_h = Rz*r_c40_g;
   double r_4c1_h = Rz*r_4c0_g;
   double r_b51_h = Rz*r_b50_g;
   double r_b15_h = Ry*r_b05_g;
   double r_5b1_h = Rz*r_5b0_g;
   double r_51b_h = Ry*r_50b_g;
   double r_1b5_h = Rx*r_0b5_g;
   double r_15b_h = Rx*r_05b_g;
   double r_1a6_h = Rx*r_0a6_g;
   double r_16a_h = Rx*r_06a_g;
   double r_a16_h = Ry*r_a06_g;
   double r_61a_h = Ry*r_60a_g;
   double r_a61_h = Rz*r_a60_g;
   double r_6a1_h = Rz*r_6a0_g;
   double r_971_h = Rz*r_970_g;
   double r_917_h = Ry*r_907_g;
   double r_791_h = Rz*r_790_g;
   double r_719_h = Ry*r_709_g;
   double r_197_h = Rx*r_097_g;
   double r_179_h = Rx*r_079_g;
   double r_188_h = Rx*r_088_g;
   double r_818_h = Ry*r_808_g;
   double r_881_h = Rz*r_880_g;
   double r_3c2_h = Rz*r_3c1_g - r_3c0_g;
   double r_32c_h = Ry*r_31c_g - r_30c_g;
   double r_c32_h = Rz*r_c31_g - r_c30_g;
   double r_b42_h = Rz*r_b41_g - r_b40_g;
   double r_b24_h = Ry*r_b14_g - r_b04_g;
   double r_4b2_h = Rz*r_4b1_g - r_4b0_g;
   double r_2b4_h = Rx*r_1b4_g - r_0b4_g;
   double r_42b_h = Ry*r_41b_g - r_40b_g;
   double r_24b_h = Rx*r_14b_g - r_04b_g;
   double r_5a2_h = Rz*r_5a1_g - r_5a0_g;
   double r_52a_h = Ry*r_51a_g - r_50a_g;
   double r_a52_h = Rz*r_a51_g - r_a50_g;
   double r_25a_h = Rx*r_15a_g - r_05a_g;
   double r_a25_h = Ry*r_a15_g - r_a05_g;
   double r_2a5_h = Rx*r_1a5_g - r_0a5_g;
   double r_962_h = Rz*r_961_g - r_960_g;
   double r_926_h = Ry*r_916_g - r_906_g;
   double r_692_h = Rz*r_691_g - r_690_g;
   double r_296_h = Rx*r_196_g - r_096_g;
   double r_629_h = Ry*r_619_g - r_609_g;
   double r_269_h = Rx*r_169_g - r_069_g;
   double r_782_h = Rz*r_781_g - r_780_g;
   double r_728_h = Ry*r_718_g - r_708_g;
   double r_872_h = Rz*r_871_g - r_870_g;
   double r_278_h = Rx*r_178_g - r_078_g;
   double r_827_h = Ry*r_817_g - r_807_g;
   double r_287_h = Rx*r_187_g - r_087_g;
   double r_3a4_h = Rx*r_2a4_g - 2*r_1a4_g;
   double r_34a_h = Rx*r_24a_g - 2*r_14a_g;
   double r_a34_h = Ry*r_a24_g - 2*r_a14_g;
   double r_953_h = Rz*r_952_g - 2*r_951_g;
   double r_935_h = Ry*r_925_g - 2*r_915_g;
   double r_593_h = Rz*r_592_g - 2*r_591_g;
   double r_539_h = Ry*r_529_g - 2*r_519_g;
   double r_395_h = Rx*r_295_g - 2*r_195_g;
   double r_359_h = Rx*r_259_g - 2*r_159_g;
   double r_386_h = Rx*r_286_g - 2*r_186_g;
   double r_368_h = Rx*r_268_g - 2*r_168_g;
   double r_836_h = Ry*r_826_g - 2*r_816_g;
   double r_638_h = Ry*r_628_g - 2*r_618_g;
   double r_863_h = Rz*r_862_g - 2*r_861_g;
   double r_683_h = Rz*r_682_g - 2*r_681_g;
   double r_773_h = Rz*r_772_g - 2*r_771_g;
   double r_737_h = Ry*r_727_g - 2*r_717_g;
   double r_377_h = Rx*r_277_g - 2*r_177_g;
   double r_584_h = Rz*r_583_g - 3*r_582_g;
   double r_548_h = Ry*r_538_g - 3*r_528_g;
   double r_854_h = Rz*r_853_g - 3*r_852_g;
   double r_764_h = Rz*r_763_g - 3*r_762_g;
   double r_746_h = Ry*r_736_g - 3*r_726_g;
   double r_674_h = Rz*r_673_g - 3*r_672_g;
   double r_476_h = Rx*r_376_g - 3*r_276_g;
   double r_647_h = Ry*r_637_g - 3*r_627_g;
   double r_467_h = Rx*r_367_g - 3*r_267_g;
   double r_566_h = Rx*r_466_g - 4*r_366_g;
   if (lab == 18) {
      pOut[0] = Rx*r_h00_h - 17*r_g00_h;
      pOut[1] = Ry*r_0h0_h - 17*r_0g0_h;
      pOut[2] = Rz*r_00h_h - 17*r_00g_h;
      pOut[3] = Ry*r_h00_h;
      pOut[4] = Rx*r_0h0_h;
      pOut[5] = Rz*r_h00_h;
      pOut[6] = Rx*r_00h_h;
      pOut[7] = Rz*r_0h0_h;
      pOut[8] = Ry*r_00h_h;
      pOut[9] = Ry*r_g10_h - r_g00_h;
      pOut[10] = Rz*r_g01_h - r_g00_h;
      pOut[11] = Rx*r_1g0_h - r_0g0_h;
      pOut[12] = Rx*r_10g_h - r_00g_h;
      pOut[13] = Rz*r_0g1_h - r_0g0_h;
      pOut[14] = Ry*r_01g_h - r_00g_h;
      pOut[15] = Ry*r_f20_h - 2*r_f10_h;
      pOut[16] = Rx*r_2f0_h - 2*r_1f0_h;
      pOut[17] = Rz*r_f02_h - 2*r_f01_h;
      pOut[18] = Rx*r_20f_h - 2*r_10f_h;
      pOut[19] = Rz*r_0f2_h - 2*r_0f1_h;
      pOut[20] = Ry*r_02f_h - 2*r_01f_h;
      pOut[21] = Ry*r_e30_h - 3*r_e20_h;
      pOut[22] = Rz*r_e03_h - 3*r_e02_h;
      pOut[23] = Rx*r_3e0_h - 3*r_2e0_h;
      pOut[24] = Rx*r_30e_h - 3*r_20e_h;
      pOut[25] = Rz*r_0e3_h - 3*r_0e2_h;
      pOut[26] = Ry*r_03e_h - 3*r_02e_h;
      pOut[27] = Ry*r_d40_h - 4*r_d30_h;
      pOut[28] = Rx*r_4d0_h - 4*r_3d0_h;
      pOut[29] = Rz*r_d04_h - 4*r_d03_h;
      pOut[30] = Rx*r_40d_h - 4*r_30d_h;
      pOut[31] = Rz*r_0d4_h - 4*r_0d3_h;
      pOut[32] = Ry*r_04d_h - 4*r_03d_h;
      pOut[33] = Ry*r_c50_h - 5*r_c40_h;
      pOut[34] = Rz*r_c05_h - 5*r_c04_h;
      pOut[35] = Rx*r_5c0_h - 5*r_4c0_h;
      pOut[36] = Rx*r_50c_h - 5*r_40c_h;
      pOut[37] = Rz*r_0c5_h - 5*r_0c4_h;
      pOut[38] = Ry*r_05c_h - 5*r_04c_h;
      pOut[39] = Ry*r_b60_h - 6*r_b50_h;
      pOut[40] = Rx*r_6b0_h - 6*r_5b0_h;
      pOut[41] = Rz*r_b06_h - 6*r_b05_h;
      pOut[42] = Rx*r_60b_h - 6*r_50b_h;
      pOut[43] = Rz*r_0b6_h - 6*r_0b5_h;
      pOut[44] = Ry*r_06b_h - 6*r_05b_h;
      pOut[45] = Ry*r_a70_h - 7*r_a60_h;
      pOut[46] = Rz*r_a07_h - 7*r_a06_h;
      pOut[47] = Rx*r_7a0_h - 7*r_6a0_h;
      pOut[48] = Rx*r_70a_h - 7*r_60a_h;
      pOut[49] = Rz*r_0a7_h - 7*r_0a6_h;
      pOut[50] = Ry*r_07a_h - 7*r_06a_h;
      pOut[51] = Ry*r_980_h - 8*r_970_h;
      pOut[52] = Rz*r_908_h - 8*r_907_h;
      pOut[53] = Rz*r_098_h - 8*r_097_h;
      pOut[54] = Ry*r_10g_h;
      pOut[55] = Rz*r_1g0_h;
      pOut[56] = Rz*r_g10_h;
      pOut[57] = Ry*r_f02_h;
      pOut[58] = Rx*r_0f2_h;
      pOut[59] = Rz*r_f20_h;
      pOut[60] = Rx*r_02f_h;
      pOut[61] = Rz*r_2f0_h;
      pOut[62] = Ry*r_20f_h;
      pOut[63] = Ry*r_30e_h;
      pOut[64] = Rx*r_03e_h;
      pOut[65] = Rz*r_3e0_h;
      pOut[66] = Rx*r_0e3_h;
      pOut[67] = Rz*r_e30_h;
      pOut[68] = Ry*r_e03_h;
      pOut[69] = Ry*r_d04_h;
      pOut[70] = Rx*r_0d4_h;
      pOut[71] = Rz*r_d40_h;
      pOut[72] = Rx*r_04d_h;
      pOut[73] = Rz*r_4d0_h;
      pOut[74] = Ry*r_40d_h;
      pOut[75] = Ry*r_50c_h;
      pOut[76] = Rx*r_05c_h;
      pOut[77] = Rz*r_5c0_h;
      pOut[78] = Rx*r_0c5_h;
      pOut[79] = Rz*r_c50_h;
      pOut[80] = Ry*r_c05_h;
      pOut[81] = Ry*r_b06_h;
      pOut[82] = Rx*r_0b6_h;
      pOut[83] = Rz*r_b60_h;
      pOut[84] = Rx*r_06b_h;
      pOut[85] = Rz*r_6b0_h;
      pOut[86] = Ry*r_60b_h;
      pOut[87] = Ry*r_70a_h;
      pOut[88] = Rx*r_07a_h;
      pOut[89] = Rz*r_7a0_h;
      pOut[90] = Rx*r_0a7_h;
      pOut[91] = Rz*r_a70_h;
      pOut[92] = Ry*r_a07_h;
      pOut[93] = Ry*r_908_h;
      pOut[94] = Rx*r_098_h;
      pOut[95] = Rz*r_980_h;
      pOut[96] = Rx*r_089_h;
      pOut[97] = Rz*r_890_h;
      pOut[98] = Ry*r_809_h;
      pOut[99] = Ry*r_e12_h - r_e02_h;
      pOut[100] = Rx*r_1e2_h - r_0e2_h;
      pOut[101] = Rx*r_12e_h - r_02e_h;
      pOut[102] = Rz*r_d31_h - r_d30_h;
      pOut[103] = Rz*r_3d1_h - r_3d0_h;
      pOut[104] = Ry*r_d13_h - r_d03_h;
      pOut[105] = Ry*r_31d_h - r_30d_h;
      pOut[106] = Rx*r_1d3_h - r_0d3_h;
      pOut[107] = Rx*r_13d_h - r_03d_h;
      pOut[108] = Rz*r_c41_h - r_c40_h;
      pOut[109] = Ry*r_c14_h - r_c04_h;
      pOut[110] = Rz*r_4c1_h - r_4c0_h;
      pOut[111] = Ry*r_41c_h - r_40c_h;
      pOut[112] = Rx*r_1c4_h - r_0c4_h;
      pOut[113] = Rx*r_14c_h - r_04c_h;
      pOut[114] = Rz*r_b51_h - r_b50_h;
      pOut[115] = Rz*r_5b1_h - r_5b0_h;
      pOut[116] = Ry*r_b15_h - r_b05_h;
      pOut[117] = Ry*r_51b_h - r_50b_h;
      pOut[118] = Rx*r_1b5_h - r_0b5_h;
      pOut[119] = Rx*r_15b_h - r_05b_h;
      pOut[120] = Rz*r_a61_h - r_a60_h;
      pOut[121] = Ry*r_a16_h - r_a06_h;
      pOut[122] = Rz*r_6a1_h - r_6a0_h;
      pOut[123] = Ry*r_61a_h - r_60a_h;
      pOut[124] = Rx*r_1a6_h - r_0a6_h;
      pOut[125] = Rx*r_16a_h - r_06a_h;
      pOut[126] = Rz*r_971_h - r_970_h;
      pOut[127] = Rz*r_791_h - r_790_h;
      pOut[128] = Ry*r_917_h - r_907_h;
      pOut[129] = Ry*r_719_h - r_709_h;
      pOut[130] = Rx*r_197_h - r_097_h;
      pOut[131] = Rx*r_179_h - r_079_h;
      pOut[132] = Rz*r_881_h - r_880_h;
      pOut[133] = Ry*r_818_h - r_808_h;
      pOut[134] = Rx*r_188_h - r_088_h;
      pOut[135] = Ry*r_32c_h - 2*r_31c_h;
      pOut[136] = Rz*r_3c2_h - 2*r_3c1_h;
      pOut[137] = Rz*r_c32_h - 2*r_c31_h;
      pOut[138] = Ry*r_b24_h - 2*r_b14_h;
      pOut[139] = Rx*r_2b4_h - 2*r_1b4_h;
      pOut[140] = Rz*r_b42_h - 2*r_b41_h;
      pOut[141] = Rx*r_24b_h - 2*r_14b_h;
      pOut[142] = Rz*r_4b2_h - 2*r_4b1_h;
      pOut[143] = Ry*r_42b_h - 2*r_41b_h;
      pOut[144] = Ry*r_52a_h - 2*r_51a_h;
      pOut[145] = Rx*r_25a_h - 2*r_15a_h;
      pOut[146] = Rz*r_5a2_h - 2*r_5a1_h;
      pOut[147] = Rx*r_2a5_h - 2*r_1a5_h;
      pOut[148] = Rz*r_a52_h - 2*r_a51_h;
      pOut[149] = Ry*r_a25_h - 2*r_a15_h;
      pOut[150] = Ry*r_926_h - 2*r_916_h;
      pOut[151] = Rx*r_296_h - 2*r_196_h;
      pOut[152] = Rz*r_962_h - 2*r_961_h;
      pOut[153] = Rx*r_269_h - 2*r_169_h;
      pOut[154] = Rz*r_692_h - 2*r_691_h;
      pOut[155] = Ry*r_629_h - 2*r_619_h;
      pOut[156] = Ry*r_728_h - 2*r_718_h;
      pOut[157] = Rx*r_278_h - 2*r_178_h;
      pOut[158] = Rz*r_782_h - 2*r_781_h;
      pOut[159] = Rx*r_287_h - 2*r_187_h;
      pOut[160] = Rz*r_872_h - 2*r_871_h;
      pOut[161] = Ry*r_827_h - 2*r_817_h;
      pOut[162] = Ry*r_a34_h - 3*r_a24_h;
      pOut[163] = Rx*r_3a4_h - 3*r_2a4_h;
      pOut[164] = Rx*r_34a_h - 3*r_24a_h;
      pOut[165] = Rz*r_953_h - 3*r_952_h;
      pOut[166] = Rz*r_593_h - 3*r_592_h;
      pOut[167] = Ry*r_935_h - 3*r_925_h;
      pOut[168] = Ry*r_539_h - 3*r_529_h;
      pOut[169] = Rx*r_395_h - 3*r_295_h;
      pOut[170] = Rx*r_359_h - 3*r_259_h;
      pOut[171] = Rz*r_863_h - 3*r_862_h;
      pOut[172] = Ry*r_836_h - 3*r_826_h;
      pOut[173] = Rz*r_683_h - 3*r_682_h;
      pOut[174] = Ry*r_638_h - 3*r_628_h;
      pOut[175] = Rx*r_386_h - 3*r_286_h;
      pOut[176] = Rx*r_368_h - 3*r_268_h;
      pOut[177] = Rz*r_773_h - 3*r_772_h;
      pOut[178] = Ry*r_737_h - 3*r_727_h;
      pOut[179] = Rx*r_377_h - 3*r_277_h;
      pOut[180] = Ry*r_548_h - 4*r_538_h;
      pOut[181] = Rz*r_584_h - 4*r_583_h;
      pOut[182] = Rz*r_854_h - 4*r_853_h;
      pOut[183] = Ry*r_746_h - 4*r_736_h;
      pOut[184] = Rx*r_476_h - 4*r_376_h;
      pOut[185] = Rz*r_764_h - 4*r_763_h;
      pOut[186] = Rx*r_467_h - 4*r_367_h;
      pOut[187] = Rz*r_674_h - 4*r_673_h;
      pOut[188] = Ry*r_647_h - 4*r_637_h;
      pOut[189] = Rx*r_566_h - 5*r_466_h;
      return;
   }
   //assert(0);
}

// Form [R]_out := [R + 2ix]_in + [R + 2iy]_in + [R + 2iz]_in: Contract nCartY(lab+2) into nCartY(lab).
void ShellLaplace(double * pOut, double const * pIn, unsigned LaplaceOrder, unsigned lab)
{
   //assert(LaplaceOrder == 1);
  //IR_SUPPRESS_UNUSED_WARNING(LaplaceOrder);
   switch(lab) {
      case 0: {
         pOut[0] = pIn[0] + pIn[1] + pIn[2];
         return;
      }
      case 1: {
         pOut[0] = pIn[0] + pIn[3] + pIn[4];
         pOut[1] = pIn[5] + pIn[1] + pIn[6];
         pOut[2] = pIn[7] + pIn[8] + pIn[2];
         return;
      }
      case 2: {
         pOut[0] = pIn[0] + pIn[9] + pIn[10];
         pOut[1] = pIn[9] + pIn[1] + pIn[11];
         pOut[2] = pIn[10] + pIn[11] + pIn[2];
         pOut[3] = pIn[3] + pIn[4] + pIn[12];
         pOut[4] = pIn[5] + pIn[13] + pIn[6];
         pOut[5] = pIn[14] + pIn[7] + pIn[8];
         return;
      }
      case 3: {
         pOut[0] = pIn[0] + pIn[9] + pIn[10];
         pOut[1] = pIn[11] + pIn[1] + pIn[12];
         pOut[2] = pIn[13] + pIn[14] + pIn[2];
         pOut[3] = pIn[9] + pIn[3] + pIn[18];
         pOut[4] = pIn[10] + pIn[18] + pIn[4];
         pOut[5] = pIn[5] + pIn[11] + pIn[19];
         pOut[6] = pIn[19] + pIn[12] + pIn[6];
         pOut[7] = pIn[7] + pIn[20] + pIn[13];
         pOut[8] = pIn[20] + pIn[8] + pIn[14];
         pOut[9] = pIn[15] + pIn[16] + pIn[17];
         return;
      }
      case 4: {
         pOut[0] = pIn[0] + pIn[9] + pIn[10];
         pOut[1] = pIn[11] + pIn[1] + pIn[13];
         pOut[2] = pIn[12] + pIn[14] + pIn[2];
         pOut[3] = pIn[3] + pIn[15] + pIn[21];
         pOut[4] = pIn[15] + pIn[4] + pIn[22];
         pOut[5] = pIn[5] + pIn[23] + pIn[16];
         pOut[6] = pIn[16] + pIn[24] + pIn[6];
         pOut[7] = pIn[25] + pIn[7] + pIn[17];
         pOut[8] = pIn[26] + pIn[17] + pIn[8];
         pOut[9] = pIn[9] + pIn[11] + pIn[27];
         pOut[10] = pIn[10] + pIn[27] + pIn[12];
         pOut[11] = pIn[27] + pIn[13] + pIn[14];
         pOut[12] = pIn[21] + pIn[22] + pIn[18];
         pOut[13] = pIn[23] + pIn[19] + pIn[24];
         pOut[14] = pIn[20] + pIn[25] + pIn[26];
         return;
      }
      case 5: {
         pOut[0] = pIn[0] + pIn[9] + pIn[10];
         pOut[1] = pIn[11] + pIn[1] + pIn[12];
         pOut[2] = pIn[13] + pIn[14] + pIn[2];
         pOut[3] = pIn[15] + pIn[3] + pIn[24];
         pOut[4] = pIn[16] + pIn[25] + pIn[4];
         pOut[5] = pIn[5] + pIn[17] + pIn[26];
         pOut[6] = pIn[27] + pIn[18] + pIn[6];
         pOut[7] = pIn[7] + pIn[28] + pIn[19];
         pOut[8] = pIn[29] + pIn[8] + pIn[20];
         pOut[9] = pIn[9] + pIn[15] + pIn[33];
         pOut[10] = pIn[10] + pIn[33] + pIn[16];
         pOut[11] = pIn[17] + pIn[11] + pIn[34];
         pOut[12] = pIn[34] + pIn[12] + pIn[18];
         pOut[13] = pIn[19] + pIn[35] + pIn[13];
         pOut[14] = pIn[35] + pIn[20] + pIn[14];
         pOut[15] = pIn[21] + pIn[30] + pIn[31];
         pOut[16] = pIn[30] + pIn[22] + pIn[32];
         pOut[17] = pIn[31] + pIn[32] + pIn[23];
         pOut[18] = pIn[33] + pIn[24] + pIn[25];
         pOut[19] = pIn[26] + pIn[34] + pIn[27];
         pOut[20] = pIn[28] + pIn[29] + pIn[35];
         return;
      }
      case 6: {
         pOut[0] = pIn[0] + pIn[9] + pIn[10];
         pOut[1] = pIn[11] + pIn[1] + pIn[13];
         pOut[2] = pIn[12] + pIn[14] + pIn[2];
         pOut[3] = pIn[3] + pIn[15] + pIn[27];
         pOut[4] = pIn[16] + pIn[4] + pIn[28];
         pOut[5] = pIn[5] + pIn[29] + pIn[17];
         pOut[6] = pIn[18] + pIn[30] + pIn[6];
         pOut[7] = pIn[31] + pIn[7] + pIn[19];
         pOut[8] = pIn[32] + pIn[20] + pIn[8];
         pOut[9] = pIn[9] + pIn[21] + pIn[39];
         pOut[10] = pIn[10] + pIn[39] + pIn[22];
         pOut[11] = pIn[21] + pIn[11] + pIn[40];
         pOut[12] = pIn[22] + pIn[41] + pIn[12];
         pOut[13] = pIn[40] + pIn[13] + pIn[23];
         pOut[14] = pIn[41] + pIn[23] + pIn[14];
         pOut[15] = pIn[15] + pIn[16] + pIn[42];
         pOut[16] = pIn[17] + pIn[43] + pIn[18];
         pOut[17] = pIn[44] + pIn[19] + pIn[20];
         pOut[18] = pIn[33] + pIn[34] + pIn[24];
         pOut[19] = pIn[35] + pIn[25] + pIn[36];
         pOut[20] = pIn[26] + pIn[37] + pIn[38];
         pOut[21] = pIn[27] + pIn[42] + pIn[33];
         pOut[22] = pIn[42] + pIn[28] + pIn[34];
         pOut[23] = pIn[29] + pIn[35] + pIn[43];
         pOut[24] = pIn[43] + pIn[36] + pIn[30];
         pOut[25] = pIn[37] + pIn[31] + pIn[44];
         pOut[26] = pIn[38] + pIn[44] + pIn[32];
         pOut[27] = pIn[39] + pIn[40] + pIn[41];
         return;
      }
      case 7: {
         pOut[0] = pIn[0] + pIn[9] + pIn[10];
         pOut[1] = pIn[11] + pIn[1] + pIn[12];
         pOut[2] = pIn[13] + pIn[14] + pIn[2];
         pOut[3] = pIn[15] + pIn[3] + pIn[30];
         pOut[4] = pIn[16] + pIn[31] + pIn[4];
         pOut[5] = pIn[5] + pIn[17] + pIn[32];
         pOut[6] = pIn[33] + pIn[18] + pIn[6];
         pOut[7] = pIn[7] + pIn[34] + pIn[19];
         pOut[8] = pIn[35] + pIn[8] + pIn[20];
         pOut[9] = pIn[9] + pIn[21] + pIn[45];
         pOut[10] = pIn[10] + pIn[45] + pIn[22];
         pOut[11] = pIn[23] + pIn[11] + pIn[46];
         pOut[12] = pIn[46] + pIn[12] + pIn[24];
         pOut[13] = pIn[25] + pIn[47] + pIn[13];
         pOut[14] = pIn[47] + pIn[26] + pIn[14];
         pOut[15] = pIn[21] + pIn[15] + pIn[48];
         pOut[16] = pIn[22] + pIn[49] + pIn[16];
         pOut[17] = pIn[17] + pIn[23] + pIn[50];
         pOut[18] = pIn[51] + pIn[24] + pIn[18];
         pOut[19] = pIn[19] + pIn[52] + pIn[25];
         pOut[20] = pIn[53] + pIn[20] + pIn[26];
         pOut[21] = pIn[27] + pIn[36] + pIn[37];
         pOut[22] = pIn[38] + pIn[28] + pIn[40];
         pOut[23] = pIn[39] + pIn[41] + pIn[29];
         pOut[24] = pIn[48] + pIn[30] + pIn[42];
         pOut[25] = pIn[49] + pIn[42] + pIn[31];
         pOut[26] = pIn[32] + pIn[50] + pIn[43];
         pOut[27] = pIn[43] + pIn[51] + pIn[33];
         pOut[28] = pIn[34] + pIn[44] + pIn[52];
         pOut[29] = pIn[44] + pIn[35] + pIn[53];
         pOut[30] = pIn[36] + pIn[38] + pIn[54];
         pOut[31] = pIn[37] + pIn[54] + pIn[39];
         pOut[32] = pIn[54] + pIn[40] + pIn[41];
         pOut[33] = pIn[45] + pIn[48] + pIn[49];
         pOut[34] = pIn[50] + pIn[46] + pIn[51];
         pOut[35] = pIn[52] + pIn[53] + pIn[47];
         return;
      }
      case 8: {
         pOut[0] = pIn[0] + pIn[9] + pIn[10];
         pOut[1] = pIn[11] + pIn[1] + pIn[13];
         pOut[2] = pIn[12] + pIn[14] + pIn[2];
         pOut[3] = pIn[3] + pIn[15] + pIn[33];
         pOut[4] = pIn[16] + pIn[4] + pIn[34];
         pOut[5] = pIn[5] + pIn[35] + pIn[17];
         pOut[6] = pIn[18] + pIn[36] + pIn[6];
         pOut[7] = pIn[37] + pIn[7] + pIn[19];
         pOut[8] = pIn[38] + pIn[20] + pIn[8];
         pOut[9] = pIn[9] + pIn[21] + pIn[51];
         pOut[10] = pIn[10] + pIn[51] + pIn[22];
         pOut[11] = pIn[23] + pIn[11] + pIn[52];
         pOut[12] = pIn[24] + pIn[53] + pIn[12];
         pOut[13] = pIn[52] + pIn[13] + pIn[25];
         pOut[14] = pIn[53] + pIn[26] + pIn[14];
         pOut[15] = pIn[15] + pIn[27] + pIn[54];
         pOut[16] = pIn[27] + pIn[16] + pIn[55];
         pOut[17] = pIn[17] + pIn[56] + pIn[28];
         pOut[18] = pIn[28] + pIn[57] + pIn[18];
         pOut[19] = pIn[58] + pIn[19] + pIn[29];
         pOut[20] = pIn[59] + pIn[29] + pIn[20];
         pOut[21] = pIn[21] + pIn[23] + pIn[60];
         pOut[22] = pIn[22] + pIn[61] + pIn[24];
         pOut[23] = pIn[62] + pIn[25] + pIn[26];
         pOut[24] = pIn[39] + pIn[40] + pIn[30];
         pOut[25] = pIn[41] + pIn[31] + pIn[42];
         pOut[26] = pIn[32] + pIn[43] + pIn[44];
         pOut[27] = pIn[33] + pIn[54] + pIn[45];
         pOut[28] = pIn[55] + pIn[34] + pIn[46];
         pOut[29] = pIn[35] + pIn[47] + pIn[56];
         pOut[30] = pIn[57] + pIn[48] + pIn[36];
         pOut[31] = pIn[49] + pIn[37] + pIn[58];
         pOut[32] = pIn[50] + pIn[59] + pIn[38];
         pOut[33] = pIn[45] + pIn[63] + pIn[39];
         pOut[34] = pIn[63] + pIn[46] + pIn[40];
         pOut[35] = pIn[47] + pIn[41] + pIn[64];
         pOut[36] = pIn[64] + pIn[42] + pIn[48];
         pOut[37] = pIn[43] + pIn[49] + pIn[65];
         pOut[38] = pIn[44] + pIn[65] + pIn[50];
         pOut[39] = pIn[51] + pIn[60] + pIn[61];
         pOut[40] = pIn[60] + pIn[52] + pIn[62];
         pOut[41] = pIn[61] + pIn[62] + pIn[53];
         pOut[42] = pIn[54] + pIn[55] + pIn[63];
         pOut[43] = pIn[56] + pIn[64] + pIn[57];
         pOut[44] = pIn[65] + pIn[58] + pIn[59];
         return;
      }
      case 9: {
         pOut[0] = pIn[0] + pIn[9] + pIn[10];
         pOut[1] = pIn[11] + pIn[1] + pIn[12];
         pOut[2] = pIn[13] + pIn[14] + pIn[2];
         pOut[3] = pIn[15] + pIn[3] + pIn[36];
         pOut[4] = pIn[16] + pIn[37] + pIn[4];
         pOut[5] = pIn[5] + pIn[17] + pIn[38];
         pOut[6] = pIn[39] + pIn[18] + pIn[6];
         pOut[7] = pIn[7] + pIn[40] + pIn[19];
         pOut[8] = pIn[41] + pIn[8] + pIn[20];
         pOut[9] = pIn[9] + pIn[21] + pIn[57];
         pOut[10] = pIn[10] + pIn[57] + pIn[22];
         pOut[11] = pIn[23] + pIn[11] + pIn[58];
         pOut[12] = pIn[58] + pIn[12] + pIn[24];
         pOut[13] = pIn[25] + pIn[59] + pIn[13];
         pOut[14] = pIn[59] + pIn[26] + pIn[14];
         pOut[15] = pIn[27] + pIn[15] + pIn[60];
         pOut[16] = pIn[28] + pIn[61] + pIn[16];
         pOut[17] = pIn[17] + pIn[29] + pIn[62];
         pOut[18] = pIn[63] + pIn[30] + pIn[18];
         pOut[19] = pIn[19] + pIn[64] + pIn[31];
         pOut[20] = pIn[65] + pIn[20] + pIn[32];
         pOut[21] = pIn[21] + pIn[27] + pIn[66];
         pOut[22] = pIn[22] + pIn[67] + pIn[28];
         pOut[23] = pIn[29] + pIn[23] + pIn[68];
         pOut[24] = pIn[69] + pIn[24] + pIn[30];
         pOut[25] = pIn[31] + pIn[70] + pIn[25];
         pOut[26] = pIn[71] + pIn[32] + pIn[26];
         pOut[27] = pIn[33] + pIn[42] + pIn[43];
         pOut[28] = pIn[44] + pIn[34] + pIn[46];
         pOut[29] = pIn[45] + pIn[47] + pIn[35];
         pOut[30] = pIn[60] + pIn[36] + pIn[48];
         pOut[31] = pIn[61] + pIn[49] + pIn[37];
         pOut[32] = pIn[38] + pIn[62] + pIn[50];
         pOut[33] = pIn[51] + pIn[63] + pIn[39];
         pOut[34] = pIn[40] + pIn[52] + pIn[64];
         pOut[35] = pIn[53] + pIn[41] + pIn[65];
         pOut[36] = pIn[42] + pIn[54] + pIn[72];
         pOut[37] = pIn[43] + pIn[72] + pIn[55];
         pOut[38] = pIn[54] + pIn[44] + pIn[73];
         pOut[39] = pIn[55] + pIn[74] + pIn[45];
         pOut[40] = pIn[73] + pIn[46] + pIn[56];
         pOut[41] = pIn[74] + pIn[56] + pIn[47];
         pOut[42] = pIn[75] + pIn[48] + pIn[49];
         pOut[43] = pIn[50] + pIn[76] + pIn[51];
         pOut[44] = pIn[52] + pIn[53] + pIn[77];
         pOut[45] = pIn[57] + pIn[66] + pIn[67];
         pOut[46] = pIn[68] + pIn[58] + pIn[69];
         pOut[47] = pIn[70] + pIn[71] + pIn[59];
         pOut[48] = pIn[66] + pIn[60] + pIn[75];
         pOut[49] = pIn[67] + pIn[75] + pIn[61];
         pOut[50] = pIn[62] + pIn[68] + pIn[76];
         pOut[51] = pIn[76] + pIn[69] + pIn[63];
         pOut[52] = pIn[64] + pIn[77] + pIn[70];
         pOut[53] = pIn[77] + pIn[65] + pIn[71];
         pOut[54] = pIn[72] + pIn[73] + pIn[74];
         return;
      }
      case 10: {
         pOut[0] = pIn[0] + pIn[9] + pIn[10];
         pOut[1] = pIn[11] + pIn[1] + pIn[13];
         pOut[2] = pIn[12] + pIn[14] + pIn[2];
         pOut[3] = pIn[3] + pIn[15] + pIn[39];
         pOut[4] = pIn[16] + pIn[4] + pIn[40];
         pOut[5] = pIn[5] + pIn[41] + pIn[17];
         pOut[6] = pIn[18] + pIn[42] + pIn[6];
         pOut[7] = pIn[43] + pIn[7] + pIn[19];
         pOut[8] = pIn[44] + pIn[20] + pIn[8];
         pOut[9] = pIn[9] + pIn[21] + pIn[63];
         pOut[10] = pIn[10] + pIn[63] + pIn[22];
         pOut[11] = pIn[23] + pIn[11] + pIn[64];
         pOut[12] = pIn[24] + pIn[65] + pIn[12];
         pOut[13] = pIn[64] + pIn[13] + pIn[25];
         pOut[14] = pIn[65] + pIn[26] + pIn[14];
         pOut[15] = pIn[15] + pIn[27] + pIn[66];
         pOut[16] = pIn[28] + pIn[16] + pIn[67];
         pOut[17] = pIn[17] + pIn[68] + pIn[29];
         pOut[18] = pIn[30] + pIn[69] + pIn[18];
         pOut[19] = pIn[70] + pIn[19] + pIn[31];
         pOut[20] = pIn[71] + pIn[32] + pIn[20];
         pOut[21] = pIn[21] + pIn[33] + pIn[72];
         pOut[22] = pIn[22] + pIn[73] + pIn[34];
         pOut[23] = pIn[33] + pIn[23] + pIn[74];
         pOut[24] = pIn[34] + pIn[75] + pIn[24];
         pOut[25] = pIn[76] + pIn[25] + pIn[35];
         pOut[26] = pIn[77] + pIn[35] + pIn[26];
         pOut[27] = pIn[27] + pIn[28] + pIn[78];
         pOut[28] = pIn[29] + pIn[79] + pIn[30];
         pOut[29] = pIn[80] + pIn[31] + pIn[32];
         pOut[30] = pIn[45] + pIn[46] + pIn[36];
         pOut[31] = pIn[47] + pIn[37] + pIn[48];
         pOut[32] = pIn[38] + pIn[49] + pIn[50];
         pOut[33] = pIn[39] + pIn[66] + pIn[51];
         pOut[34] = pIn[67] + pIn[40] + pIn[52];
         pOut[35] = pIn[41] + pIn[53] + pIn[68];
         pOut[36] = pIn[69] + pIn[54] + pIn[42];
         pOut[37] = pIn[55] + pIn[43] + pIn[70];
         pOut[38] = pIn[56] + pIn[71] + pIn[44];
         pOut[39] = pIn[57] + pIn[81] + pIn[45];
         pOut[40] = pIn[81] + pIn[58] + pIn[46];
         pOut[41] = pIn[59] + pIn[47] + pIn[82];
         pOut[42] = pIn[82] + pIn[48] + pIn[60];
         pOut[43] = pIn[49] + pIn[61] + pIn[83];
         pOut[44] = pIn[50] + pIn[83] + pIn[62];
         pOut[45] = pIn[51] + pIn[84] + pIn[57];
         pOut[46] = pIn[85] + pIn[52] + pIn[58];
         pOut[47] = pIn[53] + pIn[59] + pIn[86];
         pOut[48] = pIn[87] + pIn[60] + pIn[54];
         pOut[49] = pIn[61] + pIn[55] + pIn[88];
         pOut[50] = pIn[62] + pIn[89] + pIn[56];
         pOut[51] = pIn[63] + pIn[72] + pIn[73];
         pOut[52] = pIn[74] + pIn[64] + pIn[76];
         pOut[53] = pIn[75] + pIn[77] + pIn[65];
         pOut[54] = pIn[66] + pIn[78] + pIn[84];
         pOut[55] = pIn[78] + pIn[67] + pIn[85];
         pOut[56] = pIn[68] + pIn[86] + pIn[79];
         pOut[57] = pIn[79] + pIn[87] + pIn[69];
         pOut[58] = pIn[88] + pIn[70] + pIn[80];
         pOut[59] = pIn[89] + pIn[80] + pIn[71];
         pOut[60] = pIn[72] + pIn[74] + pIn[90];
         pOut[61] = pIn[73] + pIn[90] + pIn[75];
         pOut[62] = pIn[90] + pIn[76] + pIn[77];
         pOut[63] = pIn[84] + pIn[85] + pIn[81];
         pOut[64] = pIn[86] + pIn[82] + pIn[87];
         pOut[65] = pIn[83] + pIn[88] + pIn[89];
         return;
      }
      case 11: {
         pOut[0] = pIn[0] + pIn[9] + pIn[10];
         pOut[1] = pIn[11] + pIn[1] + pIn[12];
         pOut[2] = pIn[13] + pIn[14] + pIn[2];
         pOut[3] = pIn[15] + pIn[3] + pIn[42];
         pOut[4] = pIn[16] + pIn[43] + pIn[4];
         pOut[5] = pIn[5] + pIn[17] + pIn[44];
         pOut[6] = pIn[45] + pIn[18] + pIn[6];
         pOut[7] = pIn[7] + pIn[46] + pIn[19];
         pOut[8] = pIn[47] + pIn[8] + pIn[20];
         pOut[9] = pIn[9] + pIn[21] + pIn[69];
         pOut[10] = pIn[10] + pIn[69] + pIn[22];
         pOut[11] = pIn[23] + pIn[11] + pIn[70];
         pOut[12] = pIn[70] + pIn[12] + pIn[24];
         pOut[13] = pIn[25] + pIn[71] + pIn[13];
         pOut[14] = pIn[71] + pIn[26] + pIn[14];
         pOut[15] = pIn[27] + pIn[15] + pIn[72];
         pOut[16] = pIn[28] + pIn[73] + pIn[16];
         pOut[17] = pIn[17] + pIn[29] + pIn[74];
         pOut[18] = pIn[75] + pIn[30] + pIn[18];
         pOut[19] = pIn[19] + pIn[76] + pIn[31];
         pOut[20] = pIn[77] + pIn[20] + pIn[32];
         pOut[21] = pIn[21] + pIn[33] + pIn[78];
         pOut[22] = pIn[22] + pIn[79] + pIn[34];
         pOut[23] = pIn[35] + pIn[23] + pIn[80];
         pOut[24] = pIn[81] + pIn[24] + pIn[36];
         pOut[25] = pIn[37] + pIn[82] + pIn[25];
         pOut[26] = pIn[83] + pIn[38] + pIn[26];
         pOut[27] = pIn[33] + pIn[27] + pIn[84];
         pOut[28] = pIn[34] + pIn[85] + pIn[28];
         pOut[29] = pIn[29] + pIn[35] + pIn[86];
         pOut[30] = pIn[87] + pIn[36] + pIn[30];
         pOut[31] = pIn[31] + pIn[88] + pIn[37];
         pOut[32] = pIn[89] + pIn[32] + pIn[38];
         pOut[33] = pIn[39] + pIn[48] + pIn[49];
         pOut[34] = pIn[50] + pIn[40] + pIn[52];
         pOut[35] = pIn[51] + pIn[53] + pIn[41];
         pOut[36] = pIn[72] + pIn[42] + pIn[54];
         pOut[37] = pIn[73] + pIn[55] + pIn[43];
         pOut[38] = pIn[44] + pIn[74] + pIn[56];
         pOut[39] = pIn[57] + pIn[75] + pIn[45];
         pOut[40] = pIn[46] + pIn[58] + pIn[76];
         pOut[41] = pIn[59] + pIn[47] + pIn[77];
         pOut[42] = pIn[48] + pIn[60] + pIn[90];
         pOut[43] = pIn[49] + pIn[90] + pIn[61];
         pOut[44] = pIn[62] + pIn[50] + pIn[91];
         pOut[45] = pIn[63] + pIn[92] + pIn[51];
         pOut[46] = pIn[91] + pIn[52] + pIn[64];
         pOut[47] = pIn[92] + pIn[65] + pIn[53];
         pOut[48] = pIn[93] + pIn[54] + pIn[66];
         pOut[49] = pIn[94] + pIn[66] + pIn[55];
         pOut[50] = pIn[56] + pIn[95] + pIn[67];
         pOut[51] = pIn[67] + pIn[96] + pIn[57];
         pOut[52] = pIn[58] + pIn[68] + pIn[97];
         pOut[53] = pIn[68] + pIn[59] + pIn[98];
         pOut[54] = pIn[60] + pIn[62] + pIn[99];
         pOut[55] = pIn[61] + pIn[100] + pIn[63];
         pOut[56] = pIn[101] + pIn[64] + pIn[65];
         pOut[57] = pIn[69] + pIn[78] + pIn[79];
         pOut[58] = pIn[80] + pIn[70] + pIn[81];
         pOut[59] = pIn[82] + pIn[83] + pIn[71];
         pOut[60] = pIn[84] + pIn[72] + pIn[93];
         pOut[61] = pIn[85] + pIn[94] + pIn[73];
         pOut[62] = pIn[74] + pIn[86] + pIn[95];
         pOut[63] = pIn[96] + pIn[87] + pIn[75];
         pOut[64] = pIn[76] + pIn[97] + pIn[88];
         pOut[65] = pIn[98] + pIn[77] + pIn[89];
         pOut[66] = pIn[78] + pIn[84] + pIn[102];
         pOut[67] = pIn[79] + pIn[102] + pIn[85];
         pOut[68] = pIn[86] + pIn[80] + pIn[103];
         pOut[69] = pIn[103] + pIn[81] + pIn[87];
         pOut[70] = pIn[88] + pIn[104] + pIn[82];
         pOut[71] = pIn[104] + pIn[89] + pIn[83];
         pOut[72] = pIn[90] + pIn[99] + pIn[100];
         pOut[73] = pIn[99] + pIn[91] + pIn[101];
         pOut[74] = pIn[100] + pIn[101] + pIn[92];
         pOut[75] = pIn[102] + pIn[93] + pIn[94];
         pOut[76] = pIn[95] + pIn[103] + pIn[96];
         pOut[77] = pIn[97] + pIn[98] + pIn[104];
         return;
      }
      case 12: {
         pOut[0] = pIn[0] + pIn[9] + pIn[10];
         pOut[1] = pIn[11] + pIn[1] + pIn[13];
         pOut[2] = pIn[12] + pIn[14] + pIn[2];
         pOut[3] = pIn[3] + pIn[15] + pIn[45];
         pOut[4] = pIn[16] + pIn[4] + pIn[46];
         pOut[5] = pIn[5] + pIn[47] + pIn[17];
         pOut[6] = pIn[18] + pIn[48] + pIn[6];
         pOut[7] = pIn[49] + pIn[7] + pIn[19];
         pOut[8] = pIn[50] + pIn[20] + pIn[8];
         pOut[9] = pIn[9] + pIn[21] + pIn[75];
         pOut[10] = pIn[10] + pIn[75] + pIn[22];
         pOut[11] = pIn[23] + pIn[11] + pIn[76];
         pOut[12] = pIn[24] + pIn[77] + pIn[12];
         pOut[13] = pIn[76] + pIn[13] + pIn[25];
         pOut[14] = pIn[77] + pIn[26] + pIn[14];
         pOut[15] = pIn[15] + pIn[27] + pIn[78];
         pOut[16] = pIn[28] + pIn[16] + pIn[79];
         pOut[17] = pIn[17] + pIn[80] + pIn[29];
         pOut[18] = pIn[30] + pIn[81] + pIn[18];
         pOut[19] = pIn[82] + pIn[19] + pIn[31];
         pOut[20] = pIn[83] + pIn[32] + pIn[20];
         pOut[21] = pIn[21] + pIn[33] + pIn[84];
         pOut[22] = pIn[22] + pIn[85] + pIn[34];
         pOut[23] = pIn[35] + pIn[23] + pIn[86];
         pOut[24] = pIn[36] + pIn[87] + pIn[24];
         pOut[25] = pIn[88] + pIn[25] + pIn[37];
         pOut[26] = pIn[89] + pIn[38] + pIn[26];
         pOut[27] = pIn[27] + pIn[39] + pIn[90];
         pOut[28] = pIn[39] + pIn[28] + pIn[91];
         pOut[29] = pIn[29] + pIn[92] + pIn[40];
         pOut[30] = pIn[40] + pIn[93] + pIn[30];
         pOut[31] = pIn[94] + pIn[31] + pIn[41];
         pOut[32] = pIn[95] + pIn[41] + pIn[32];
         pOut[33] = pIn[33] + pIn[35] + pIn[96];
         pOut[34] = pIn[34] + pIn[97] + pIn[36];
         pOut[35] = pIn[98] + pIn[37] + pIn[38];
         pOut[36] = pIn[51] + pIn[52] + pIn[42];
         pOut[37] = pIn[53] + pIn[43] + pIn[54];
         pOut[38] = pIn[44] + pIn[55] + pIn[56];
         pOut[39] = pIn[45] + pIn[78] + pIn[57];
         pOut[40] = pIn[79] + pIn[46] + pIn[58];
         pOut[41] = pIn[47] + pIn[59] + pIn[80];
         pOut[42] = pIn[81] + pIn[60] + pIn[48];
         pOut[43] = pIn[61] + pIn[49] + pIn[82];
         pOut[44] = pIn[62] + pIn[83] + pIn[50];
         pOut[45] = pIn[63] + pIn[99] + pIn[51];
         pOut[46] = pIn[99] + pIn[64] + pIn[52];
         pOut[47] = pIn[65] + pIn[53] + pIn[100];
         pOut[48] = pIn[100] + pIn[54] + pIn[66];
         pOut[49] = pIn[55] + pIn[67] + pIn[101];
         pOut[50] = pIn[56] + pIn[101] + pIn[68];
         pOut[51] = pIn[57] + pIn[102] + pIn[69];
         pOut[52] = pIn[103] + pIn[58] + pIn[70];
         pOut[53] = pIn[59] + pIn[71] + pIn[104];
         pOut[54] = pIn[105] + pIn[72] + pIn[60];
         pOut[55] = pIn[73] + pIn[61] + pIn[106];
         pOut[56] = pIn[74] + pIn[107] + pIn[62];
         pOut[57] = pIn[69] + pIn[108] + pIn[63];
         pOut[58] = pIn[109] + pIn[70] + pIn[64];
         pOut[59] = pIn[71] + pIn[65] + pIn[110];
         pOut[60] = pIn[111] + pIn[66] + pIn[72];
         pOut[61] = pIn[67] + pIn[73] + pIn[112];
         pOut[62] = pIn[68] + pIn[113] + pIn[74];
         pOut[63] = pIn[75] + pIn[84] + pIn[85];
         pOut[64] = pIn[86] + pIn[76] + pIn[88];
         pOut[65] = pIn[87] + pIn[89] + pIn[77];
         pOut[66] = pIn[78] + pIn[90] + pIn[102];
         pOut[67] = pIn[91] + pIn[79] + pIn[103];
         pOut[68] = pIn[80] + pIn[104] + pIn[92];
         pOut[69] = pIn[93] + pIn[105] + pIn[81];
         pOut[70] = pIn[106] + pIn[82] + pIn[94];
         pOut[71] = pIn[107] + pIn[95] + pIn[83];
         pOut[72] = pIn[84] + pIn[96] + pIn[114];
         pOut[73] = pIn[85] + pIn[114] + pIn[97];
         pOut[74] = pIn[96] + pIn[86] + pIn[115];
         pOut[75] = pIn[97] + pIn[116] + pIn[87];
         pOut[76] = pIn[115] + pIn[88] + pIn[98];
         pOut[77] = pIn[116] + pIn[98] + pIn[89];
         pOut[78] = pIn[90] + pIn[91] + pIn[117];
         pOut[79] = pIn[92] + pIn[118] + pIn[93];
         pOut[80] = pIn[119] + pIn[94] + pIn[95];
         pOut[81] = pIn[108] + pIn[109] + pIn[99];
         pOut[82] = pIn[110] + pIn[100] + pIn[111];
         pOut[83] = pIn[101] + pIn[112] + pIn[113];
         pOut[84] = pIn[102] + pIn[117] + pIn[108];
         pOut[85] = pIn[117] + pIn[103] + pIn[109];
         pOut[86] = pIn[104] + pIn[110] + pIn[118];
         pOut[87] = pIn[118] + pIn[111] + pIn[105];
         pOut[88] = pIn[112] + pIn[106] + pIn[119];
         pOut[89] = pIn[113] + pIn[119] + pIn[107];
         pOut[90] = pIn[114] + pIn[115] + pIn[116];
         return;
      }
      case 13: {
         pOut[0] = pIn[0] + pIn[9] + pIn[10];
         pOut[1] = pIn[11] + pIn[1] + pIn[12];
         pOut[2] = pIn[13] + pIn[14] + pIn[2];
         pOut[3] = pIn[15] + pIn[3] + pIn[48];
         pOut[4] = pIn[16] + pIn[49] + pIn[4];
         pOut[5] = pIn[5] + pIn[17] + pIn[50];
         pOut[6] = pIn[51] + pIn[18] + pIn[6];
         pOut[7] = pIn[7] + pIn[52] + pIn[19];
         pOut[8] = pIn[53] + pIn[8] + pIn[20];
         pOut[9] = pIn[9] + pIn[21] + pIn[81];
         pOut[10] = pIn[10] + pIn[81] + pIn[22];
         pOut[11] = pIn[23] + pIn[11] + pIn[82];
         pOut[12] = pIn[82] + pIn[12] + pIn[24];
         pOut[13] = pIn[25] + pIn[83] + pIn[13];
         pOut[14] = pIn[83] + pIn[26] + pIn[14];
         pOut[15] = pIn[27] + pIn[15] + pIn[84];
         pOut[16] = pIn[28] + pIn[85] + pIn[16];
         pOut[17] = pIn[17] + pIn[29] + pIn[86];
         pOut[18] = pIn[87] + pIn[30] + pIn[18];
         pOut[19] = pIn[19] + pIn[88] + pIn[31];
         pOut[20] = pIn[89] + pIn[20] + pIn[32];
         pOut[21] = pIn[21] + pIn[33] + pIn[90];
         pOut[22] = pIn[22] + pIn[91] + pIn[34];
         pOut[23] = pIn[35] + pIn[23] + pIn[92];
         pOut[24] = pIn[93] + pIn[24] + pIn[36];
         pOut[25] = pIn[37] + pIn[94] + pIn[25];
         pOut[26] = pIn[95] + pIn[38] + pIn[26];
         pOut[27] = pIn[39] + pIn[27] + pIn[96];
         pOut[28] = pIn[40] + pIn[97] + pIn[28];
         pOut[29] = pIn[29] + pIn[41] + pIn[98];
         pOut[30] = pIn[99] + pIn[42] + pIn[30];
         pOut[31] = pIn[31] + pIn[100] + pIn[43];
         pOut[32] = pIn[101] + pIn[32] + pIn[44];
         pOut[33] = pIn[33] + pIn[39] + pIn[102];
         pOut[34] = pIn[34] + pIn[103] + pIn[40];
         pOut[35] = pIn[41] + pIn[35] + pIn[104];
         pOut[36] = pIn[105] + pIn[36] + pIn[42];
         pOut[37] = pIn[43] + pIn[106] + pIn[37];
         pOut[38] = pIn[107] + pIn[44] + pIn[38];
         pOut[39] = pIn[45] + pIn[54] + pIn[55];
         pOut[40] = pIn[56] + pIn[46] + pIn[58];
         pOut[41] = pIn[57] + pIn[59] + pIn[47];
         pOut[42] = pIn[84] + pIn[48] + pIn[60];
         pOut[43] = pIn[85] + pIn[61] + pIn[49];
         pOut[44] = pIn[50] + pIn[86] + pIn[62];
         pOut[45] = pIn[63] + pIn[87] + pIn[51];
         pOut[46] = pIn[52] + pIn[64] + pIn[88];
         pOut[47] = pIn[65] + pIn[53] + pIn[89];
         pOut[48] = pIn[54] + pIn[66] + pIn[108];
         pOut[49] = pIn[55] + pIn[108] + pIn[67];
         pOut[50] = pIn[68] + pIn[56] + pIn[109];
         pOut[51] = pIn[69] + pIn[110] + pIn[57];
         pOut[52] = pIn[109] + pIn[58] + pIn[70];
         pOut[53] = pIn[110] + pIn[71] + pIn[59];
         pOut[54] = pIn[111] + pIn[60] + pIn[72];
         pOut[55] = pIn[112] + pIn[73] + pIn[61];
         pOut[56] = pIn[62] + pIn[113] + pIn[74];
         pOut[57] = pIn[75] + pIn[114] + pIn[63];
         pOut[58] = pIn[64] + pIn[76] + pIn[115];
         pOut[59] = pIn[77] + pIn[65] + pIn[116];
         pOut[60] = pIn[66] + pIn[78] + pIn[117];
         pOut[61] = pIn[67] + pIn[118] + pIn[79];
         pOut[62] = pIn[78] + pIn[68] + pIn[119];
         pOut[63] = pIn[79] + pIn[120] + pIn[69];
         pOut[64] = pIn[121] + pIn[70] + pIn[80];
         pOut[65] = pIn[122] + pIn[80] + pIn[71];
         pOut[66] = pIn[123] + pIn[72] + pIn[73];
         pOut[67] = pIn[74] + pIn[124] + pIn[75];
         pOut[68] = pIn[76] + pIn[77] + pIn[125];
         pOut[69] = pIn[81] + pIn[90] + pIn[91];
         pOut[70] = pIn[92] + pIn[82] + pIn[93];
         pOut[71] = pIn[94] + pIn[95] + pIn[83];
         pOut[72] = pIn[96] + pIn[84] + pIn[111];
         pOut[73] = pIn[97] + pIn[112] + pIn[85];
         pOut[74] = pIn[86] + pIn[98] + pIn[113];
         pOut[75] = pIn[114] + pIn[99] + pIn[87];
         pOut[76] = pIn[88] + pIn[115] + pIn[100];
         pOut[77] = pIn[116] + pIn[89] + pIn[101];
         pOut[78] = pIn[90] + pIn[102] + pIn[126];
         pOut[79] = pIn[91] + pIn[126] + pIn[103];
         pOut[80] = pIn[104] + pIn[92] + pIn[127];
         pOut[81] = pIn[127] + pIn[93] + pIn[105];
         pOut[82] = pIn[106] + pIn[128] + pIn[94];
         pOut[83] = pIn[128] + pIn[107] + pIn[95];
         pOut[84] = pIn[102] + pIn[96] + pIn[129];
         pOut[85] = pIn[103] + pIn[130] + pIn[97];
         pOut[86] = pIn[98] + pIn[104] + pIn[131];
         pOut[87] = pIn[132] + pIn[105] + pIn[99];
         pOut[88] = pIn[100] + pIn[133] + pIn[106];
         pOut[89] = pIn[134] + pIn[101] + pIn[107];
         pOut[90] = pIn[108] + pIn[117] + pIn[118];
         pOut[91] = pIn[119] + pIn[109] + pIn[121];
         pOut[92] = pIn[120] + pIn[122] + pIn[110];
         pOut[93] = pIn[129] + pIn[111] + pIn[123];
         pOut[94] = pIn[130] + pIn[123] + pIn[112];
         pOut[95] = pIn[113] + pIn[131] + pIn[124];
         pOut[96] = pIn[124] + pIn[132] + pIn[114];
         pOut[97] = pIn[115] + pIn[125] + pIn[133];
         pOut[98] = pIn[125] + pIn[116] + pIn[134];
         pOut[99] = pIn[117] + pIn[119] + pIn[135];
         pOut[100] = pIn[118] + pIn[135] + pIn[120];
         pOut[101] = pIn[135] + pIn[121] + pIn[122];
         pOut[102] = pIn[126] + pIn[129] + pIn[130];
         pOut[103] = pIn[131] + pIn[127] + pIn[132];
         pOut[104] = pIn[133] + pIn[134] + pIn[128];
         return;
      }
      case 14: {
         pOut[0] = pIn[0] + pIn[9] + pIn[10];
         pOut[1] = pIn[11] + pIn[1] + pIn[13];
         pOut[2] = pIn[12] + pIn[14] + pIn[2];
         pOut[3] = pIn[3] + pIn[15] + pIn[51];
         pOut[4] = pIn[16] + pIn[4] + pIn[52];
         pOut[5] = pIn[5] + pIn[53] + pIn[17];
         pOut[6] = pIn[18] + pIn[54] + pIn[6];
         pOut[7] = pIn[55] + pIn[7] + pIn[19];
         pOut[8] = pIn[56] + pIn[20] + pIn[8];
         pOut[9] = pIn[9] + pIn[21] + pIn[87];
         pOut[10] = pIn[10] + pIn[87] + pIn[22];
         pOut[11] = pIn[23] + pIn[11] + pIn[88];
         pOut[12] = pIn[24] + pIn[89] + pIn[12];
         pOut[13] = pIn[88] + pIn[13] + pIn[25];
         pOut[14] = pIn[89] + pIn[26] + pIn[14];
         pOut[15] = pIn[15] + pIn[27] + pIn[90];
         pOut[16] = pIn[28] + pIn[16] + pIn[91];
         pOut[17] = pIn[17] + pIn[92] + pIn[29];
         pOut[18] = pIn[30] + pIn[93] + pIn[18];
         pOut[19] = pIn[94] + pIn[19] + pIn[31];
         pOut[20] = pIn[95] + pIn[32] + pIn[20];
         pOut[21] = pIn[21] + pIn[33] + pIn[96];
         pOut[22] = pIn[22] + pIn[97] + pIn[34];
         pOut[23] = pIn[35] + pIn[23] + pIn[98];
         pOut[24] = pIn[36] + pIn[99] + pIn[24];
         pOut[25] = pIn[100] + pIn[25] + pIn[37];
         pOut[26] = pIn[101] + pIn[38] + pIn[26];
         pOut[27] = pIn[27] + pIn[39] + pIn[102];
         pOut[28] = pIn[40] + pIn[28] + pIn[103];
         pOut[29] = pIn[29] + pIn[104] + pIn[41];
         pOut[30] = pIn[42] + pIn[105] + pIn[30];
         pOut[31] = pIn[106] + pIn[31] + pIn[43];
         pOut[32] = pIn[107] + pIn[44] + pIn[32];
         pOut[33] = pIn[33] + pIn[45] + pIn[108];
         pOut[34] = pIn[34] + pIn[109] + pIn[46];
         pOut[35] = pIn[45] + pIn[35] + pIn[110];
         pOut[36] = pIn[46] + pIn[111] + pIn[36];
         pOut[37] = pIn[112] + pIn[37] + pIn[47];
         pOut[38] = pIn[113] + pIn[47] + pIn[38];
         pOut[39] = pIn[39] + pIn[40] + pIn[114];
         pOut[40] = pIn[41] + pIn[115] + pIn[42];
         pOut[41] = pIn[116] + pIn[43] + pIn[44];
         pOut[42] = pIn[57] + pIn[58] + pIn[48];
         pOut[43] = pIn[59] + pIn[49] + pIn[60];
         pOut[44] = pIn[50] + pIn[61] + pIn[62];
         pOut[45] = pIn[51] + pIn[90] + pIn[63];
         pOut[46] = pIn[91] + pIn[52] + pIn[64];
         pOut[47] = pIn[53] + pIn[65] + pIn[92];
         pOut[48] = pIn[93] + pIn[66] + pIn[54];
         pOut[49] = pIn[67] + pIn[55] + pIn[94];
         pOut[50] = pIn[68] + pIn[95] + pIn[56];
         pOut[51] = pIn[69] + pIn[117] + pIn[57];
         pOut[52] = pIn[117] + pIn[70] + pIn[58];
         pOut[53] = pIn[71] + pIn[59] + pIn[118];
         pOut[54] = pIn[118] + pIn[60] + pIn[72];
         pOut[55] = pIn[61] + pIn[73] + pIn[119];
         pOut[56] = pIn[62] + pIn[119] + pIn[74];
         pOut[57] = pIn[63] + pIn[120] + pIn[75];
         pOut[58] = pIn[121] + pIn[64] + pIn[76];
         pOut[59] = pIn[65] + pIn[77] + pIn[122];
         pOut[60] = pIn[123] + pIn[78] + pIn[66];
         pOut[61] = pIn[79] + pIn[67] + pIn[124];
         pOut[62] = pIn[80] + pIn[125] + pIn[68];
         pOut[63] = pIn[81] + pIn[126] + pIn[69];
         pOut[64] = pIn[127] + pIn[82] + pIn[70];
         pOut[65] = pIn[83] + pIn[71] + pIn[128];
         pOut[66] = pIn[129] + pIn[72] + pIn[84];
         pOut[67] = pIn[73] + pIn[85] + pIn[130];
         pOut[68] = pIn[74] + pIn[131] + pIn[86];
         pOut[69] = pIn[75] + pIn[132] + pIn[81];
         pOut[70] = pIn[133] + pIn[76] + pIn[82];
         pOut[71] = pIn[77] + pIn[83] + pIn[134];
         pOut[72] = pIn[135] + pIn[84] + pIn[78];
         pOut[73] = pIn[85] + pIn[79] + pIn[136];
         pOut[74] = pIn[86] + pIn[137] + pIn[80];
         pOut[75] = pIn[87] + pIn[96] + pIn[97];
         pOut[76] = pIn[98] + pIn[88] + pIn[100];
         pOut[77] = pIn[99] + pIn[101] + pIn[89];
         pOut[78] = pIn[90] + pIn[102] + pIn[120];
         pOut[79] = pIn[103] + pIn[91] + pIn[121];
         pOut[80] = pIn[92] + pIn[122] + pIn[104];
         pOut[81] = pIn[105] + pIn[123] + pIn[93];
         pOut[82] = pIn[124] + pIn[94] + pIn[106];
         pOut[83] = pIn[125] + pIn[107] + pIn[95];
         pOut[84] = pIn[96] + pIn[108] + pIn[138];
         pOut[85] = pIn[97] + pIn[138] + pIn[109];
         pOut[86] = pIn[110] + pIn[98] + pIn[139];
         pOut[87] = pIn[111] + pIn[140] + pIn[99];
         pOut[88] = pIn[139] + pIn[100] + pIn[112];
         pOut[89] = pIn[140] + pIn[113] + pIn[101];
         pOut[90] = pIn[102] + pIn[114] + pIn[141];
         pOut[91] = pIn[114] + pIn[103] + pIn[142];
         pOut[92] = pIn[104] + pIn[143] + pIn[115];
         pOut[93] = pIn[115] + pIn[144] + pIn[105];
         pOut[94] = pIn[145] + pIn[106] + pIn[116];
         pOut[95] = pIn[146] + pIn[116] + pIn[107];
         pOut[96] = pIn[108] + pIn[110] + pIn[147];
         pOut[97] = pIn[109] + pIn[148] + pIn[111];
         pOut[98] = pIn[149] + pIn[112] + pIn[113];
         pOut[99] = pIn[126] + pIn[127] + pIn[117];
         pOut[100] = pIn[128] + pIn[118] + pIn[129];
         pOut[101] = pIn[119] + pIn[130] + pIn[131];
         pOut[102] = pIn[120] + pIn[141] + pIn[132];
         pOut[103] = pIn[142] + pIn[121] + pIn[133];
         pOut[104] = pIn[122] + pIn[134] + pIn[143];
         pOut[105] = pIn[144] + pIn[135] + pIn[123];
         pOut[106] = pIn[136] + pIn[124] + pIn[145];
         pOut[107] = pIn[137] + pIn[146] + pIn[125];
         pOut[108] = pIn[132] + pIn[150] + pIn[126];
         pOut[109] = pIn[150] + pIn[133] + pIn[127];
         pOut[110] = pIn[134] + pIn[128] + pIn[151];
         pOut[111] = pIn[151] + pIn[129] + pIn[135];
         pOut[112] = pIn[130] + pIn[136] + pIn[152];
         pOut[113] = pIn[131] + pIn[152] + pIn[137];
         pOut[114] = pIn[138] + pIn[147] + pIn[148];
         pOut[115] = pIn[147] + pIn[139] + pIn[149];
         pOut[116] = pIn[148] + pIn[149] + pIn[140];
         pOut[117] = pIn[141] + pIn[142] + pIn[150];
         pOut[118] = pIn[143] + pIn[151] + pIn[144];
         pOut[119] = pIn[152] + pIn[145] + pIn[146];
         return;
      }
      case 15: {
         pOut[0] = pIn[0] + pIn[9] + pIn[10];
         pOut[1] = pIn[11] + pIn[1] + pIn[12];
         pOut[2] = pIn[13] + pIn[14] + pIn[2];
         pOut[3] = pIn[15] + pIn[3] + pIn[54];
         pOut[4] = pIn[16] + pIn[55] + pIn[4];
         pOut[5] = pIn[5] + pIn[17] + pIn[56];
         pOut[6] = pIn[57] + pIn[18] + pIn[6];
         pOut[7] = pIn[7] + pIn[58] + pIn[19];
         pOut[8] = pIn[59] + pIn[8] + pIn[20];
         pOut[9] = pIn[9] + pIn[21] + pIn[93];
         pOut[10] = pIn[10] + pIn[93] + pIn[22];
         pOut[11] = pIn[23] + pIn[11] + pIn[94];
         pOut[12] = pIn[94] + pIn[12] + pIn[24];
         pOut[13] = pIn[25] + pIn[95] + pIn[13];
         pOut[14] = pIn[95] + pIn[26] + pIn[14];
         pOut[15] = pIn[27] + pIn[15] + pIn[96];
         pOut[16] = pIn[28] + pIn[97] + pIn[16];
         pOut[17] = pIn[17] + pIn[29] + pIn[98];
         pOut[18] = pIn[99] + pIn[30] + pIn[18];
         pOut[19] = pIn[19] + pIn[100] + pIn[31];
         pOut[20] = pIn[101] + pIn[20] + pIn[32];
         pOut[21] = pIn[21] + pIn[33] + pIn[102];
         pOut[22] = pIn[22] + pIn[103] + pIn[34];
         pOut[23] = pIn[35] + pIn[23] + pIn[104];
         pOut[24] = pIn[105] + pIn[24] + pIn[36];
         pOut[25] = pIn[37] + pIn[106] + pIn[25];
         pOut[26] = pIn[107] + pIn[38] + pIn[26];
         pOut[27] = pIn[39] + pIn[27] + pIn[108];
         pOut[28] = pIn[40] + pIn[109] + pIn[28];
         pOut[29] = pIn[29] + pIn[41] + pIn[110];
         pOut[30] = pIn[111] + pIn[42] + pIn[30];
         pOut[31] = pIn[31] + pIn[112] + pIn[43];
         pOut[32] = pIn[113] + pIn[32] + pIn[44];
         pOut[33] = pIn[33] + pIn[45] + pIn[114];
         pOut[34] = pIn[34] + pIn[115] + pIn[46];
         pOut[35] = pIn[47] + pIn[35] + pIn[116];
         pOut[36] = pIn[117] + pIn[36] + pIn[48];
         pOut[37] = pIn[49] + pIn[118] + pIn[37];
         pOut[38] = pIn[119] + pIn[50] + pIn[38];
         pOut[39] = pIn[45] + pIn[39] + pIn[120];
         pOut[40] = pIn[46] + pIn[121] + pIn[40];
         pOut[41] = pIn[41] + pIn[47] + pIn[122];
         pOut[42] = pIn[123] + pIn[48] + pIn[42];
         pOut[43] = pIn[43] + pIn[124] + pIn[49];
         pOut[44] = pIn[125] + pIn[44] + pIn[50];
         pOut[45] = pIn[51] + pIn[60] + pIn[61];
         pOut[46] = pIn[62] + pIn[52] + pIn[64];
         pOut[47] = pIn[63] + pIn[65] + pIn[53];
         pOut[48] = pIn[96] + pIn[54] + pIn[66];
         pOut[49] = pIn[97] + pIn[67] + pIn[55];
         pOut[50] = pIn[56] + pIn[98] + pIn[68];
         pOut[51] = pIn[69] + pIn[99] + pIn[57];
         pOut[52] = pIn[58] + pIn[70] + pIn[100];
         pOut[53] = pIn[71] + pIn[59] + pIn[101];
         pOut[54] = pIn[60] + pIn[72] + pIn[126];
         pOut[55] = pIn[61] + pIn[126] + pIn[73];
         pOut[56] = pIn[74] + pIn[62] + pIn[127];
         pOut[57] = pIn[75] + pIn[128] + pIn[63];
         pOut[58] = pIn[127] + pIn[64] + pIn[76];
         pOut[59] = pIn[128] + pIn[77] + pIn[65];
         pOut[60] = pIn[129] + pIn[66] + pIn[78];
         pOut[61] = pIn[130] + pIn[79] + pIn[67];
         pOut[62] = pIn[68] + pIn[131] + pIn[80];
         pOut[63] = pIn[81] + pIn[132] + pIn[69];
         pOut[64] = pIn[70] + pIn[82] + pIn[133];
         pOut[65] = pIn[83] + pIn[71] + pIn[134];
         pOut[66] = pIn[72] + pIn[84] + pIn[135];
         pOut[67] = pIn[73] + pIn[136] + pIn[85];
         pOut[68] = pIn[86] + pIn[74] + pIn[137];
         pOut[69] = pIn[87] + pIn[138] + pIn[75];
         pOut[70] = pIn[139] + pIn[76] + pIn[88];
         pOut[71] = pIn[140] + pIn[89] + pIn[77];
         pOut[72] = pIn[141] + pIn[78] + pIn[90];
         pOut[73] = pIn[142] + pIn[90] + pIn[79];
         pOut[74] = pIn[80] + pIn[143] + pIn[91];
         pOut[75] = pIn[91] + pIn[144] + pIn[81];
         pOut[76] = pIn[82] + pIn[92] + pIn[145];
         pOut[77] = pIn[92] + pIn[83] + pIn[146];
         pOut[78] = pIn[84] + pIn[86] + pIn[147];
         pOut[79] = pIn[85] + pIn[148] + pIn[87];
         pOut[80] = pIn[149] + pIn[88] + pIn[89];
         pOut[81] = pIn[93] + pIn[102] + pIn[103];
         pOut[82] = pIn[104] + pIn[94] + pIn[105];
         pOut[83] = pIn[106] + pIn[107] + pIn[95];
         pOut[84] = pIn[108] + pIn[96] + pIn[129];
         pOut[85] = pIn[109] + pIn[130] + pIn[97];
         pOut[86] = pIn[98] + pIn[110] + pIn[131];
         pOut[87] = pIn[132] + pIn[111] + pIn[99];
         pOut[88] = pIn[100] + pIn[133] + pIn[112];
         pOut[89] = pIn[134] + pIn[101] + pIn[113];
         pOut[90] = pIn[102] + pIn[114] + pIn[150];
         pOut[91] = pIn[103] + pIn[150] + pIn[115];
         pOut[92] = pIn[116] + pIn[104] + pIn[151];
         pOut[93] = pIn[151] + pIn[105] + pIn[117];
         pOut[94] = pIn[118] + pIn[152] + pIn[106];
         pOut[95] = pIn[152] + pIn[119] + pIn[107];
         pOut[96] = pIn[120] + pIn[108] + pIn[153];
         pOut[97] = pIn[121] + pIn[154] + pIn[109];
         pOut[98] = pIn[110] + pIn[122] + pIn[155];
         pOut[99] = pIn[156] + pIn[123] + pIn[111];
         pOut[100] = pIn[112] + pIn[157] + pIn[124];
         pOut[101] = pIn[158] + pIn[113] + pIn[125];
         pOut[102] = pIn[114] + pIn[120] + pIn[159];
         pOut[103] = pIn[115] + pIn[160] + pIn[121];
         pOut[104] = pIn[122] + pIn[116] + pIn[161];
         pOut[105] = pIn[162] + pIn[117] + pIn[123];
         pOut[106] = pIn[124] + pIn[163] + pIn[118];
         pOut[107] = pIn[164] + pIn[125] + pIn[119];
         pOut[108] = pIn[126] + pIn[135] + pIn[136];
         pOut[109] = pIn[137] + pIn[127] + pIn[139];
         pOut[110] = pIn[138] + pIn[140] + pIn[128];
         pOut[111] = pIn[153] + pIn[129] + pIn[141];
         pOut[112] = pIn[154] + pIn[142] + pIn[130];
         pOut[113] = pIn[131] + pIn[155] + pIn[143];
         pOut[114] = pIn[144] + pIn[156] + pIn[132];
         pOut[115] = pIn[133] + pIn[145] + pIn[157];
         pOut[116] = pIn[146] + pIn[134] + pIn[158];
         pOut[117] = pIn[135] + pIn[147] + pIn[165];
         pOut[118] = pIn[136] + pIn[165] + pIn[148];
         pOut[119] = pIn[147] + pIn[137] + pIn[166];
         pOut[120] = pIn[148] + pIn[167] + pIn[138];
         pOut[121] = pIn[166] + pIn[139] + pIn[149];
         pOut[122] = pIn[167] + pIn[149] + pIn[140];
         pOut[123] = pIn[168] + pIn[141] + pIn[142];
         pOut[124] = pIn[143] + pIn[169] + pIn[144];
         pOut[125] = pIn[145] + pIn[146] + pIn[170];
         pOut[126] = pIn[150] + pIn[159] + pIn[160];
         pOut[127] = pIn[161] + pIn[151] + pIn[162];
         pOut[128] = pIn[163] + pIn[164] + pIn[152];
         pOut[129] = pIn[159] + pIn[153] + pIn[168];
         pOut[130] = pIn[160] + pIn[168] + pIn[154];
         pOut[131] = pIn[155] + pIn[161] + pIn[169];
         pOut[132] = pIn[169] + pIn[162] + pIn[156];
         pOut[133] = pIn[157] + pIn[170] + pIn[163];
         pOut[134] = pIn[170] + pIn[158] + pIn[164];
         pOut[135] = pIn[165] + pIn[166] + pIn[167];
         return;
      }
      case 16: {
         pOut[0] = pIn[0] + pIn[9] + pIn[10];
         pOut[1] = pIn[11] + pIn[1] + pIn[13];
         pOut[2] = pIn[12] + pIn[14] + pIn[2];
         pOut[3] = pIn[3] + pIn[15] + pIn[57];
         pOut[4] = pIn[16] + pIn[4] + pIn[58];
         pOut[5] = pIn[5] + pIn[59] + pIn[17];
         pOut[6] = pIn[18] + pIn[60] + pIn[6];
         pOut[7] = pIn[61] + pIn[7] + pIn[19];
         pOut[8] = pIn[62] + pIn[20] + pIn[8];
         pOut[9] = pIn[9] + pIn[21] + pIn[99];
         pOut[10] = pIn[10] + pIn[99] + pIn[22];
         pOut[11] = pIn[23] + pIn[11] + pIn[100];
         pOut[12] = pIn[24] + pIn[101] + pIn[12];
         pOut[13] = pIn[100] + pIn[13] + pIn[25];
         pOut[14] = pIn[101] + pIn[26] + pIn[14];
         pOut[15] = pIn[15] + pIn[27] + pIn[102];
         pOut[16] = pIn[28] + pIn[16] + pIn[103];
         pOut[17] = pIn[17] + pIn[104] + pIn[29];
         pOut[18] = pIn[30] + pIn[105] + pIn[18];
         pOut[19] = pIn[106] + pIn[19] + pIn[31];
         pOut[20] = pIn[107] + pIn[32] + pIn[20];
         pOut[21] = pIn[21] + pIn[33] + pIn[108];
         pOut[22] = pIn[22] + pIn[109] + pIn[34];
         pOut[23] = pIn[35] + pIn[23] + pIn[110];
         pOut[24] = pIn[36] + pIn[111] + pIn[24];
         pOut[25] = pIn[112] + pIn[25] + pIn[37];
         pOut[26] = pIn[113] + pIn[38] + pIn[26];
         pOut[27] = pIn[27] + pIn[39] + pIn[114];
         pOut[28] = pIn[40] + pIn[28] + pIn[115];
         pOut[29] = pIn[29] + pIn[116] + pIn[41];
         pOut[30] = pIn[42] + pIn[117] + pIn[30];
         pOut[31] = pIn[118] + pIn[31] + pIn[43];
         pOut[32] = pIn[119] + pIn[44] + pIn[32];
         pOut[33] = pIn[33] + pIn[45] + pIn[120];
         pOut[34] = pIn[34] + pIn[121] + pIn[46];
         pOut[35] = pIn[47] + pIn[35] + pIn[122];
         pOut[36] = pIn[48] + pIn[123] + pIn[36];
         pOut[37] = pIn[124] + pIn[37] + pIn[49];
         pOut[38] = pIn[125] + pIn[50] + pIn[38];
         pOut[39] = pIn[39] + pIn[51] + pIn[126];
         pOut[40] = pIn[51] + pIn[40] + pIn[127];
         pOut[41] = pIn[41] + pIn[128] + pIn[52];
         pOut[42] = pIn[52] + pIn[129] + pIn[42];
         pOut[43] = pIn[130] + pIn[43] + pIn[53];
         pOut[44] = pIn[131] + pIn[53] + pIn[44];
         pOut[45] = pIn[45] + pIn[47] + pIn[132];
         pOut[46] = pIn[46] + pIn[133] + pIn[48];
         pOut[47] = pIn[134] + pIn[49] + pIn[50];
         pOut[48] = pIn[63] + pIn[64] + pIn[54];
         pOut[49] = pIn[65] + pIn[55] + pIn[66];
         pOut[50] = pIn[56] + pIn[67] + pIn[68];
         pOut[51] = pIn[57] + pIn[102] + pIn[69];
         pOut[52] = pIn[103] + pIn[58] + pIn[70];
         pOut[53] = pIn[59] + pIn[71] + pIn[104];
         pOut[54] = pIn[105] + pIn[72] + pIn[60];
         pOut[55] = pIn[73] + pIn[61] + pIn[106];
         pOut[56] = pIn[74] + pIn[107] + pIn[62];
         pOut[57] = pIn[75] + pIn[135] + pIn[63];
         pOut[58] = pIn[135] + pIn[76] + pIn[64];
         pOut[59] = pIn[77] + pIn[65] + pIn[136];
         pOut[60] = pIn[136] + pIn[66] + pIn[78];
         pOut[61] = pIn[67] + pIn[79] + pIn[137];
         pOut[62] = pIn[68] + pIn[137] + pIn[80];
         pOut[63] = pIn[69] + pIn[138] + pIn[81];
         pOut[64] = pIn[139] + pIn[70] + pIn[82];
         pOut[65] = pIn[71] + pIn[83] + pIn[140];
         pOut[66] = pIn[141] + pIn[84] + pIn[72];
         pOut[67] = pIn[85] + pIn[73] + pIn[142];
         pOut[68] = pIn[86] + pIn[143] + pIn[74];
         pOut[69] = pIn[87] + pIn[144] + pIn[75];
         pOut[70] = pIn[145] + pIn[88] + pIn[76];
         pOut[71] = pIn[89] + pIn[77] + pIn[146];
         pOut[72] = pIn[147] + pIn[78] + pIn[90];
         pOut[73] = pIn[79] + pIn[91] + pIn[148];
         pOut[74] = pIn[80] + pIn[149] + pIn[92];
         pOut[75] = pIn[81] + pIn[150] + pIn[93];
         pOut[76] = pIn[151] + pIn[82] + pIn[94];
         pOut[77] = pIn[83] + pIn[95] + pIn[152];
         pOut[78] = pIn[153] + pIn[96] + pIn[84];
         pOut[79] = pIn[97] + pIn[85] + pIn[154];
         pOut[80] = pIn[98] + pIn[155] + pIn[86];
         pOut[81] = pIn[93] + pIn[156] + pIn[87];
         pOut[82] = pIn[157] + pIn[94] + pIn[88];
         pOut[83] = pIn[95] + pIn[89] + pIn[158];
         pOut[84] = pIn[159] + pIn[90] + pIn[96];
         pOut[85] = pIn[91] + pIn[97] + pIn[160];
         pOut[86] = pIn[92] + pIn[161] + pIn[98];
         pOut[87] = pIn[99] + pIn[108] + pIn[109];
         pOut[88] = pIn[110] + pIn[100] + pIn[112];
         pOut[89] = pIn[111] + pIn[113] + pIn[101];
         pOut[90] = pIn[102] + pIn[114] + pIn[138];
         pOut[91] = pIn[115] + pIn[103] + pIn[139];
         pOut[92] = pIn[104] + pIn[140] + pIn[116];
         pOut[93] = pIn[117] + pIn[141] + pIn[105];
         pOut[94] = pIn[142] + pIn[106] + pIn[118];
         pOut[95] = pIn[143] + pIn[119] + pIn[107];
         pOut[96] = pIn[108] + pIn[120] + pIn[162];
         pOut[97] = pIn[109] + pIn[162] + pIn[121];
         pOut[98] = pIn[122] + pIn[110] + pIn[163];
         pOut[99] = pIn[123] + pIn[164] + pIn[111];
         pOut[100] = pIn[163] + pIn[112] + pIn[124];
         pOut[101] = pIn[164] + pIn[125] + pIn[113];
         pOut[102] = pIn[114] + pIn[126] + pIn[165];
         pOut[103] = pIn[127] + pIn[115] + pIn[166];
         pOut[104] = pIn[116] + pIn[167] + pIn[128];
         pOut[105] = pIn[129] + pIn[168] + pIn[117];
         pOut[106] = pIn[169] + pIn[118] + pIn[130];
         pOut[107] = pIn[170] + pIn[131] + pIn[119];
         pOut[108] = pIn[120] + pIn[132] + pIn[171];
         pOut[109] = pIn[121] + pIn[172] + pIn[133];
         pOut[110] = pIn[132] + pIn[122] + pIn[173];
         pOut[111] = pIn[133] + pIn[174] + pIn[123];
         pOut[112] = pIn[175] + pIn[124] + pIn[134];
         pOut[113] = pIn[176] + pIn[134] + pIn[125];
         pOut[114] = pIn[126] + pIn[127] + pIn[177];
         pOut[115] = pIn[128] + pIn[178] + pIn[129];
         pOut[116] = pIn[179] + pIn[130] + pIn[131];
         pOut[117] = pIn[144] + pIn[145] + pIn[135];
         pOut[118] = pIn[146] + pIn[136] + pIn[147];
         pOut[119] = pIn[137] + pIn[148] + pIn[149];
         pOut[120] = pIn[138] + pIn[165] + pIn[150];
         pOut[121] = pIn[166] + pIn[139] + pIn[151];
         pOut[122] = pIn[140] + pIn[152] + pIn[167];
         pOut[123] = pIn[168] + pIn[153] + pIn[141];
         pOut[124] = pIn[154] + pIn[142] + pIn[169];
         pOut[125] = pIn[155] + pIn[170] + pIn[143];
         pOut[126] = pIn[156] + pIn[180] + pIn[144];
         pOut[127] = pIn[180] + pIn[157] + pIn[145];
         pOut[128] = pIn[158] + pIn[146] + pIn[181];
         pOut[129] = pIn[181] + pIn[147] + pIn[159];
         pOut[130] = pIn[148] + pIn[160] + pIn[182];
         pOut[131] = pIn[149] + pIn[182] + pIn[161];
         pOut[132] = pIn[150] + pIn[183] + pIn[156];
         pOut[133] = pIn[184] + pIn[151] + pIn[157];
         pOut[134] = pIn[152] + pIn[158] + pIn[185];
         pOut[135] = pIn[186] + pIn[159] + pIn[153];
         pOut[136] = pIn[160] + pIn[154] + pIn[187];
         pOut[137] = pIn[161] + pIn[188] + pIn[155];
         pOut[138] = pIn[162] + pIn[171] + pIn[172];
         pOut[139] = pIn[173] + pIn[163] + pIn[175];
         pOut[140] = pIn[174] + pIn[176] + pIn[164];
         pOut[141] = pIn[165] + pIn[177] + pIn[183];
         pOut[142] = pIn[177] + pIn[166] + pIn[184];
         pOut[143] = pIn[167] + pIn[185] + pIn[178];
         pOut[144] = pIn[178] + pIn[186] + pIn[168];
         pOut[145] = pIn[187] + pIn[169] + pIn[179];
         pOut[146] = pIn[188] + pIn[179] + pIn[170];
         pOut[147] = pIn[171] + pIn[173] + pIn[189];
         pOut[148] = pIn[172] + pIn[189] + pIn[174];
         pOut[149] = pIn[189] + pIn[175] + pIn[176];
         pOut[150] = pIn[183] + pIn[184] + pIn[180];
         pOut[151] = pIn[185] + pIn[181] + pIn[186];
         pOut[152] = pIn[182] + pIn[187] + pIn[188];
         return;
      }
   }
   //assert(0);
}

unsigned char iCartPow[84][3] = {
   {0,0,0}, {1,0,0}, {0,1,0}, {0,0,1}, {2,0,0}, {0,2,0}, {0,0,2}, {1,1,0},
   {1,0,1}, {0,1,1},

   {3,0,0}, {0,3,0}, {0,0,3}, {1,2,0}, {1,0,2}, {2,1,0},
   {0,1,2}, {2,0,1}, {0,2,1}, {1,1,1},

   {4,0,0}, {0,4,0}, {0,0,4}, {3,1,0},
   {1,3,0}, {3,0,1}, {1,0,3}, {0,3,1},
   {0,1,3}, {2,2,0}, {2,0,2}, {0,2,2},
   {1,1,2}, {1,2,1}, {2,1,1},

   {5,0,0}, {0,5,0}, {0,0,5}, {1,4,0}, {1,0,4},
   {4,1,0}, {0,1,4}, {4,0,1}, {0,4,1}, {3,2,0}, {3,0,2}, {2,3,0}, {0,3,2},
   {2,0,3}, {0,2,3}, {3,1,1}, {1,3,1}, {1,1,3}, {1,2,2}, {2,1,2}, {2,2,1},

   {6,0,0}, {0,6,0}, {0,0,6}, {5,1,0}, {1,5,0}, {5,0,1}, {1,0,5}, {0,5,1},
   {0,1,5}, {4,2,0}, {4,0,2}, {2,4,0}, {2,0,4}, {0,4,2}, {0,2,4}, {3,3,0},
   {3,0,3}, {0,3,3}, {1,1,4}, {1,4,1}, {4,1,1}, {3,1,2}, {1,3,2}, {3,2,1},
   {1,2,3}, {2,3,1}, {2,1,3}, {2,2,2}
}; // 0.25 kb

} // namespace ir
